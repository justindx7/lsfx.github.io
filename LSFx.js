// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof WorkerGlobalScope != 'undefined') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.startsWith('blob:')) {
    scriptDirectory = '';
  } else {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/')+1);
  }

  if (!(typeof window == 'object' || typeof WorkerGlobalScope != 'undefined')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  {
// include: web_or_worker_shell_read.js
readAsync = (url) => {
    assert(!isFileURI(url), "readAsync does not work with file:// URLs");
    return fetch(url, { credentials: 'same-origin' })
      .then((response) => {
        if (response.ok) {
          return response.arrayBuffer();
        }
        return Promise.reject(new Error(response.status + ' : ' + response.url));
      })
  };
// end include: web_or_worker_shell_read.js
  }
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.error.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('asm', 'wasmExports');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var FETCHFS = 'FETCHFS is no longer included by default; build with -lfetchfs.js';
var ICASEFS = 'ICASEFS is no longer included by default; build with -licasefs.js';
var JSFILEFS = 'JSFILEFS is no longer included by default; build with -ljsfilefs.js';
var OPFS = 'OPFS is no longer included by default; build with -lopfs.js';

var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_WORKER, 'worker environment detected but not enabled at build time.  Add `worker` to `-sENVIRONMENT` to enable.');

assert(!ENVIRONMENT_IS_NODE, 'node environment detected but not enabled at build time.  Add `node` to `-sENVIRONMENT` to enable.');

assert(!ENVIRONMENT_IS_SHELL, 'shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.');

// end include: shell.js

// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 65536, "");
  base64DecodeToExistingUint8Array(bufferView, 95576, "wJ4BAAAAAAAJAAAAAAAAAAAAAABOAAAAAAAAAAAAAAAAAAAAAAAAAE8AAAAAAAAAUAAAACiKAQAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAABRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABSAAAAUwAAADiOAQAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA/////woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwdQEAAAAAAAUAAAAAAAAAAAAAAE4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFIAAABQAAAAQJIBAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIh2AQAlbS8lZC8leQAAAAglSDolTTolUwAAAAg=");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var buffer = new ArrayBuffer(16908288);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var fimport$0 = env.__assert_fail;
 var fimport$1 = env.__cxa_throw;
 var fimport$2 = env._embind_register_void;
 var fimport$3 = env._embind_register_bool;
 var fimport$4 = env._embind_register_integer;
 var fimport$5 = env._embind_register_float;
 var fimport$6 = env._embind_register_std_string;
 var fimport$7 = env._embind_register_std_wstring;
 var fimport$8 = env._embind_register_emval;
 var fimport$9 = env._embind_register_memory_view;
 var fimport$10 = env._embind_register_class;
 var fimport$11 = env._embind_register_function;
 var fimport$12 = env._embind_register_optional;
 var fimport$13 = env._embind_register_class_constructor;
 var fimport$14 = env._embind_register_class_function;
 var fimport$15 = env._emval_take_value;
 var fimport$16 = env._emval_decref;
 var fimport$17 = env._emscripten_memcpy_js;
 var fimport$18 = env.emscripten_resize_heap;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var fimport$19 = wasi_snapshot_preview1.fd_write;
 var fimport$20 = wasi_snapshot_preview1.fd_read;
 var fimport$21 = wasi_snapshot_preview1.fd_close;
 var fimport$22 = env._abort_js;
 var fimport$23 = wasi_snapshot_preview1.environ_sizes_get;
 var fimport$24 = wasi_snapshot_preview1.environ_get;
 var fimport$25 = env._tzset_js;
 var fimport$26 = wasi_snapshot_preview1.random_get;
 var fimport$27 = env._embind_register_bigint;
 var fimport$28 = wasi_snapshot_preview1.fd_seek;
 var global$0 = 65536;
 var global$1 = 0;
 var global$2 = 0;
 var global$3 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $2840();
  $1497();
  $1537();
  $4();
  $1026();
  $1068();
  $2709();
 }
 
 function $1($0_1) {
  $0_1 = $0_1 | 0;
  return $1077(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[(0 + 96064 | 0) >> 2] | 0;
  HEAP32[(0 + 96064 | 0) >> 2] = $0_1;
 }
 
 function $3() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  fimport$2(94852 | 0, 66307 | 0);
  fimport$3(94876 | 0, 66005 | 0, 1 | 0, 0 | 0);
  fimport$4(94888 | 0, 65857 | 0, 1 | 0, -128 | 0, 127 | 0);
  fimport$4(94912 | 0, 65850 | 0, 1 | 0, -128 | 0, 127 | 0);
  fimport$4(94900 | 0, 65848 | 0, 1 | 0, 0 | 0, 255 | 0);
  fimport$4(94924 | 0, 65735 | 0, 2 | 0, -32768 | 0, 32767 | 0);
  fimport$4(94936 | 0, 65726 | 0, 2 | 0, 0 | 0, 65535 | 0);
  fimport$4(94948 | 0, 65750 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  fimport$4(94960 | 0, 65741 | 0, 4 | 0, 0 | 0, -1 | 0);
  fimport$4(94972 | 0, 66151 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  fimport$4(94984 | 0, 66142 | 0, 4 | 0, 0 | 0, -1 | 0);
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$1 = 2147483647;
  $2857(94996 | 0, 65777 | 0, 8 | 0, 0 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  $2857(95008 | 0, 65776 | 0, 8 | 0, 0 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0);
  fimport$5(95020 | 0, 65766 | 0, 4 | 0);
  fimport$5(95032 | 0, 66274 | 0, 8 | 0);
  fimport$6(67368 | 0, 66182 | 0);
  fimport$6(67440 | 0, 66990 | 0);
  fimport$7(67512 | 0, 4 | 0, 66156 | 0);
  fimport$7(67584 | 0, 2 | 0, 66194 | 0);
  fimport$7(67660 | 0, 4 | 0, 66209 | 0);
  fimport$8(67736 | 0);
  fimport$9(67764 | 0, 0 | 0, 66921 | 0);
  fimport$9(67804 | 0, 0 | 0, 67023 | 0);
  fimport$9(67844 | 0, 1 | 0, 66951 | 0);
  fimport$9(67884 | 0, 2 | 0, 66486 | 0);
  fimport$9(67924 | 0, 3 | 0, 66517 | 0);
  fimport$9(67964 | 0, 4 | 0, 66557 | 0);
  fimport$9(68004 | 0, 5 | 0, 66586 | 0);
  fimport$9(68044 | 0, 4 | 0, 67060 | 0);
  fimport$9(68084 | 0, 5 | 0, 67090 | 0);
  fimport$9(67804 | 0, 0 | 0, 66688 | 0);
  fimport$9(67844 | 0, 1 | 0, 66655 | 0);
  fimport$9(67884 | 0, 2 | 0, 66754 | 0);
  fimport$9(67924 | 0, 3 | 0, 66720 | 0);
  fimport$9(67964 | 0, 4 | 0, 66888 | 0);
  fimport$9(68004 | 0, 5 | 0, 66854 | 0);
  fimport$9(68124 | 0, 8 | 0, 66821 | 0);
  fimport$9(68164 | 0, 9 | 0, 66787 | 0);
  fimport$9(68204 | 0, 6 | 0, 66624 | 0);
  fimport$9(68244 | 0, 7 | 0, 67129 | 0);
 }
 
 function $4() {
  HEAP32[(0 + 96068 | 0) >> 2] = 1;
  HEAP32[(0 + 96072 | 0) >> 2] = 0;
  $3();
  HEAP32[(0 + 96072 | 0) >> 2] = HEAP32[(0 + 96064 | 0) >> 2] | 0;
  HEAP32[(0 + 96064 | 0) >> 2] = 96068;
 }
 
 function $5($0_1, $1_1, $2_1, $3_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  $3_1 = +$3_1;
  var $6_1 = 0, $18_1 = 0.0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAPF64[($6_1 + 40 | 0) >> 3] = $0_1;
  HEAPF64[($6_1 + 32 | 0) >> 3] = $1_1;
  HEAPF64[($6_1 + 24 | 0) >> 3] = $2_1;
  HEAPF64[($6_1 + 16 | 0) >> 3] = $3_1;
  HEAPF64[($6_1 + 8 | 0) >> 3] = +$1047(+(+HEAPF64[($6_1 + 40 | 0) >> 3]), +(+HEAPF64[($6_1 + 16 | 0) >> 3]));
  $18_1 = +HEAPF64[($6_1 + 8 | 0) >> 3] * (+HEAPF64[($6_1 + 24 | 0) >> 3] - +HEAPF64[($6_1 + 32 | 0) >> 3]) + +HEAPF64[($6_1 + 32 | 0) >> 3];
  global$0 = $6_1 + 48 | 0;
  return +$18_1;
 }
 
 function $6($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $24_1 = 0, $51_1 = 0, $52_1 = 0, $60_1 = 0, $67_1 = 0, $76_1 = 0, $84_1 = 0, $91_1 = 0, $112_1 = 0, $120_1 = 0, $127_1 = 0, $136_1 = 0, $144_1 = 0, $151_1 = 0, $13_1 = 0, $18_1 = 0, $23_1 = 0, $28_1 = 0, $33_1 = 0, $38_1 = 0, $43_1 = 0, $514_1 = 0, $530_1 = 0, $534_1 = 0, $570_1 = 0, $586_1 = 0, $590_1 = 0, $650_1 = 0, $666_1 = 0, $670_1 = 0, $706_1 = 0, $722_1 = 0, $726_1 = 0, $215_1 = 0, $222_1 = 0, $229_1 = 0, $236_1 = 0, $366_1 = Math_fround(0);
  $11_1 = global$0 - 5792 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 5788 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 5784 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 5780 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 5776 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 5772 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 5768 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 5764 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 5760 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 5756 | 0) >> 2] = $8_1;
  i64toi32_i32$0 = 1088909312;
  i64toi32_i32$1 = $11_1;
  HEAP32[($11_1 + 5720 | 0) >> 2] = 0;
  HEAP32[($11_1 + 5724 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($11_1 + 5716 | 0) >> 2] = HEAP32[($11_1 + 5784 | 0) >> 2] | 0;
  $13_1 = HEAP32[($11_1 + 5780 | 0) >> 2] | 0;
  $14_1 = 0;
  HEAP32[($7($11_1 + 5728 | 0 | 0, $14_1 | 0) | 0) >> 2] = $13_1;
  $18_1 = HEAP32[($11_1 + 5776 | 0) >> 2] | 0;
  HEAP32[($7($11_1 + 5728 | 0 | 0, 1 | 0) | 0) >> 2] = $18_1;
  $23_1 = HEAP32[($11_1 + 5772 | 0) >> 2] | 0;
  $24_1 = 2;
  HEAP32[($7($11_1 + 5728 | 0 | 0, $24_1 | 0) | 0) >> 2] = $23_1;
  $28_1 = HEAP32[($11_1 + 5768 | 0) >> 2] | 0;
  HEAP32[($7($11_1 + 5728 | 0 | 0, 3 | 0) | 0) >> 2] = $28_1;
  $33_1 = HEAP32[($11_1 + 5764 | 0) >> 2] | 0;
  HEAP32[($7($11_1 + 5728 | 0 | 0, 4 | 0) | 0) >> 2] = $33_1;
  $38_1 = HEAP32[($11_1 + 5760 | 0) >> 2] | 0;
  HEAP32[($7($11_1 + 5728 | 0 | 0, 5 | 0) | 0) >> 2] = $38_1;
  $43_1 = HEAP32[($11_1 + 5756 | 0) >> 2] | 0;
  HEAP32[($7($11_1 + 5728 | 0 | 0, 6 | 0) | 0) >> 2] = $43_1;
  HEAP32[($11_1 + 5712 | 0) >> 2] = (HEAP32[($11_1 + 5716 | 0) >> 2] | 0) + -1 | 0;
  HEAP8[($11_1 + 5711 | 0) >> 0] = $14_1;
  $8($0_1 | 0) | 0;
  $51_1 = HEAP32[($11_1 + 5712 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ($51_1 | 0) {
    case 0:
     $52_1 = 24;
     HEAP32[(($11_1 + 3016 | 0) + $52_1 | 0) >> 2] = HEAP32[(($11_1 + 5728 | 0) + $52_1 | 0) >> 2] | 0;
     $60_1 = 16;
     i64toi32_i32$2 = ($11_1 + 5728 | 0) + $60_1 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $514_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($11_1 + 3016 | 0) + $60_1 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $514_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $67_1 = 8;
     i64toi32_i32$2 = ($11_1 + 5728 | 0) + $67_1 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $530_1 = i64toi32_i32$1;
     i64toi32_i32$1 = ($11_1 + 3016 | 0) + $67_1 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $530_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = HEAP32[($11_1 + 5728 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($11_1 + 5732 | 0) >> 2] | 0;
     $534_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $11_1;
     HEAP32[($11_1 + 3016 | 0) >> 2] = $534_1;
     HEAP32[($11_1 + 3020 | 0) >> 2] = i64toi32_i32$1;
     $76_1 = 24;
     HEAP32[(($11_1 + 8 | 0) + $76_1 | 0) >> 2] = HEAP32[(($11_1 + 3016 | 0) + $76_1 | 0) >> 2] | 0;
     $84_1 = 16;
     i64toi32_i32$2 = ($11_1 + 3016 | 0) + $84_1 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $570_1 = i64toi32_i32$1;
     i64toi32_i32$1 = ($11_1 + 8 | 0) + $84_1 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $570_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $91_1 = 8;
     i64toi32_i32$2 = ($11_1 + 3016 | 0) + $91_1 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $586_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($11_1 + 8 | 0) + $91_1 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $586_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$1 = HEAP32[($11_1 + 3016 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($11_1 + 3020 | 0) >> 2] | 0;
     $590_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $11_1;
     HEAP32[($11_1 + 8 | 0) >> 2] = $590_1;
     HEAP32[($11_1 + 12 | 0) >> 2] = i64toi32_i32$0;
     $9($11_1 + 3048 | 0 | 0, +(48.0e3), $11_1 + 8 | 0 | 0) | 0;
     $10($11_1 + 3048 | 0 | 0, $0_1 | 0);
     $11($11_1 + 3048 | 0 | 0) | 0;
     break label$1;
    case 1:
     $14($12(103156 | 0, 66365 | 0) | 0 | 0, 2 | 0) | 0;
     break label$1;
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $112_1 = 24;
   HEAP32[(($11_1 + 256 | 0) + $112_1 | 0) >> 2] = HEAP32[(($11_1 + 5728 | 0) + $112_1 | 0) >> 2] | 0;
   $120_1 = 16;
   i64toi32_i32$2 = ($11_1 + 5728 | 0) + $120_1 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $650_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($11_1 + 256 | 0) + $120_1 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $650_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $127_1 = 8;
   i64toi32_i32$2 = ($11_1 + 5728 | 0) + $127_1 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $666_1 = i64toi32_i32$1;
   i64toi32_i32$1 = ($11_1 + 256 | 0) + $127_1 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $666_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$0 = HEAP32[($11_1 + 5728 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($11_1 + 5732 | 0) >> 2] | 0;
   $670_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $11_1;
   HEAP32[($11_1 + 256 | 0) >> 2] = $670_1;
   HEAP32[($11_1 + 260 | 0) >> 2] = i64toi32_i32$1;
   $136_1 = 24;
   HEAP32[(($11_1 + 40 | 0) + $136_1 | 0) >> 2] = HEAP32[(($11_1 + 256 | 0) + $136_1 | 0) >> 2] | 0;
   $144_1 = 16;
   i64toi32_i32$2 = ($11_1 + 256 | 0) + $144_1 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $706_1 = i64toi32_i32$1;
   i64toi32_i32$1 = ($11_1 + 40 | 0) + $144_1 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $706_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $151_1 = 8;
   i64toi32_i32$2 = ($11_1 + 256 | 0) + $151_1 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $722_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($11_1 + 40 | 0) + $151_1 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $722_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$1 = HEAP32[($11_1 + 256 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($11_1 + 260 | 0) >> 2] | 0;
   $726_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $11_1;
   HEAP32[($11_1 + 40 | 0) >> 2] = $726_1;
   HEAP32[($11_1 + 44 | 0) >> 2] = i64toi32_i32$0;
   $15($11_1 + 288 | 0 | 0, +(48.0e3), $11_1 + 40 | 0 | 0) | 0;
   $16($11_1 + 288 | 0 | 0, $0_1 | 0);
   $17($11_1 + 288 | 0 | 0) | 0;
  }
  $18($11_1 + 244 | 0 | 0) | 0;
  $19($11_1 + 244 | 0 | 0, HEAP32[($11_1 + 5760 | 0) >> 2] | 0 | 0);
  HEAP32[($11_1 + 240 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($11_1 + 240 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 5760 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($11_1 + 236 | 0) >> 2] = 512;
    $20($11_1 + 244 | 0 | 0, $11_1 + 5720 | 0 | 0, $11_1 + 236 | 0 | 0) | 0;
    HEAP32[($11_1 + 240 | 0) >> 2] = (HEAP32[($11_1 + 240 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAPF32[($11_1 + 232 | 0) >> 2] = Math_fround(Math_fround(HEAP32[($11_1 + 5756 | 0) >> 2] | 0 | 0) / Math_fround(100.0));
  HEAP32[($11_1 + 228 | 0) >> 2] = $11_1 + 244 | 0;
  HEAP32[($11_1 + 224 | 0) >> 2] = $21(HEAP32[($11_1 + 228 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($11_1 + 220 | 0) >> 2] = $22(HEAP32[($11_1 + 228 | 0) >> 2] | 0 | 0) | 0;
  label$7 : {
   label$8 : while (1) {
    if (!(($23($11_1 + 224 | 0 | 0, $11_1 + 220 | 0 | 0) | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($11_1 + 216 | 0) >> 2] = $24($11_1 + 224 | 0 | 0) | 0;
    $215_1 = HEAP32[($11_1 + 216 | 0) >> 2] | 0;
    HEAPF32[($11_1 + 200 | 0) >> 2] = Math_fround(Math_fround(47.79999923706055) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 204 | 0) >> 2] = Math_fround(Math_fround(282.0) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 208 | 0) >> 2] = Math_fround(-40.79999923706055);
    HEAPF32[($11_1 + 212 | 0) >> 2] = Math_fround(4.170000076293945);
    HEAPF32[($11_1 + 184 | 0) >> 2] = Math_fround(Math_fround(47.79999923706055) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 188 | 0) >> 2] = Math_fround(Math_fround(282.0) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 192 | 0) >> 2] = Math_fround(-33.79999923706055);
    HEAPF32[($11_1 + 196 | 0) >> 2] = Math_fround(66.69999694824219);
    $25($215_1 | 0, $11_1 + 200 | 0 | 0, $11_1 + 184 | 0 | 0);
    $222_1 = HEAP32[($11_1 + 216 | 0) >> 2] | 0;
    HEAPF32[($11_1 + 168 | 0) >> 2] = Math_fround(Math_fround(22.399999618530273) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 172 | 0) >> 2] = Math_fround(Math_fround(282.0) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 176 | 0) >> 2] = Math_fround(-41.79999923706055);
    HEAPF32[($11_1 + 180 | 0) >> 2] = Math_fround(4.170000076293945);
    HEAPF32[($11_1 + 152 | 0) >> 2] = Math_fround(Math_fround(22.399999618530273) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 156 | 0) >> 2] = Math_fround(Math_fround(282.0) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 160 | 0) >> 2] = Math_fround(-30.200000762939453);
    HEAPF32[($11_1 + 164 | 0) >> 2] = Math_fround(66.69999694824219);
    $26($222_1 | 0, $11_1 + 168 | 0 | 0, $11_1 + 152 | 0 | 0);
    $229_1 = HEAP32[($11_1 + 216 | 0) >> 2] | 0;
    HEAPF32[($11_1 + 136 | 0) >> 2] = Math_fround(Math_fround(13.5) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 140 | 0) >> 2] = Math_fround(Math_fround(132.0) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 144 | 0) >> 2] = Math_fround(-40.79999923706055);
    HEAPF32[($11_1 + 148 | 0) >> 2] = Math_fround(4.170000076293945);
    HEAPF32[($11_1 + 120 | 0) >> 2] = Math_fround(Math_fround(13.5) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 124 | 0) >> 2] = Math_fround(Math_fround(132.0) * Math_fround(HEAPF32[($11_1 + 232 | 0) >> 2]));
    HEAPF32[($11_1 + 128 | 0) >> 2] = Math_fround(-35.5);
    HEAPF32[($11_1 + 132 | 0) >> 2] = Math_fround(100.0);
    $27($229_1 | 0, $11_1 + 136 | 0 | 0, $11_1 + 120 | 0 | 0);
    $236_1 = HEAP32[($11_1 + 216 | 0) >> 2] | 0;
    HEAPF32[($11_1 + 96 | 0) >> 2] = Math_fround(5.199999809265137);
    HEAPF32[($11_1 + 100 | 0) >> 2] = Math_fround(5.199999809265137);
    HEAPF32[($11_1 + 104 | 0) >> 2] = Math_fround(5.199999809265137);
    HEAPF32[($11_1 + 108 | 0) >> 2] = Math_fround(10.300000190734863);
    HEAPF32[($11_1 + 112 | 0) >> 2] = Math_fround(5.699999809265137);
    HEAPF32[($11_1 + 116 | 0) >> 2] = Math_fround(10.300000190734863);
    $28($236_1 | 0, $11_1 + 96 | 0 | 0);
    $29($11_1 + 224 | 0 | 0) | 0;
    continue label$8;
   };
  }
  HEAP32[($11_1 + 92 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($11_1 + 92 | 0) >> 2] | 0) >>> 0 < ($30($0_1 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$9
    }
    HEAPF32[($11_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[($31($0_1 | 0, HEAP32[($11_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAP32[($11_1 + 84 | 0) >> 2] = $11_1 + 244 | 0;
    HEAP32[($11_1 + 80 | 0) >> 2] = $21(HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($11_1 + 76 | 0) >> 2] = $22(HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0) | 0;
    label$11 : {
     label$12 : while (1) {
      if (!(($23($11_1 + 80 | 0 | 0, $11_1 + 76 | 0 | 0) | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($11_1 + 72 | 0) >> 2] = $24($11_1 + 80 | 0 | 0) | 0;
      HEAPF32[($11_1 + 88 | 0) >> 2] = Math_fround($32(HEAP32[($11_1 + 72 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($11_1 + 88 | 0) >> 2]))));
      $29($11_1 + 80 | 0 | 0) | 0;
      continue label$12;
     };
    }
    $366_1 = Math_fround(HEAPF32[($11_1 + 88 | 0) >> 2]);
    HEAPF32[($31($0_1 | 0, HEAP32[($11_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 2] = $366_1;
    HEAP32[($11_1 + 92 | 0) >> 2] = (HEAP32[($11_1 + 92 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  HEAP8[($11_1 + 5711 | 0) >> 0] = 1 & 1 | 0;
  $33($11_1 + 244 | 0 | 0) | 0;
  label$13 : {
   if ((HEAPU8[($11_1 + 5711 | 0) >> 0] | 0) & 1 | 0) {
    break label$13
   }
   $34($0_1 | 0) | 0;
  }
  global$0 = $11_1 + 5792 | 0;
  return;
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $35($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $9($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $18_1 = 0, $22_1 = 0, $207_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 104 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 96 | 0) >> 3] = $1_1;
  $6_1 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
  HEAP32[($5_1 + 108 | 0) >> 2] = $6_1;
  $36($6_1 | 0) | 0;
  $37($6_1 + 4 | 0 | 0, $2729($6_1 | 0) | 0 | 0) | 0;
  $38($6_1 + 2504 | 0 | 0) | 0;
  $39($6_1 + 2508 | 0 | 0, 30 | 0, 60 | 0) | 0;
  $38($6_1 + 2516 | 0 | 0) | 0;
  $18_1 = 0;
  HEAP32[($6_1 + 2520 | 0) >> 2] = $18_1;
  HEAP32[($6_1 + 2524 | 0) >> 2] = $18_1;
  HEAP32[($6_1 + 2528 | 0) >> 2] = $18_1;
  HEAPF64[($6_1 + 2536 | 0) >> 3] = +HEAPF64[($5_1 + 96 | 0) >> 3];
  $40($6_1 + 2544 | 0 | 0) | 0;
  $22_1 = $6_1 + 2592 | 0;
  $41($22_1 | 0, 512 | 0) | 0;
  $42($22_1 | 0, +(+HEAPF64[($5_1 + 96 | 0) >> 3]));
  $43($22_1 | 0, +(+Math_fround(HEAPF32[($6_1 + 2524 | 0) >> 2])));
  HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($7($2_1 | 0, 0 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 84 | 0) >> 2] = 500;
    HEAP32[($5_1 + 80 | 0) >> 2] = 800;
    HEAP32[($5_1 + 88 | 0) >> 2] = $44($5_1 + 84 | 0 | 0, $5_1 + 80 | 0 | 0) | 0;
    $45($6_1 + 2504 | 0 | 0, $5_1 + 88 | 0 | 0) | 0;
    $46($5_1 + 88 | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($5_1 + 72 | 0) >> 2] = 200;
     HEAP32[($5_1 + 68 | 0) >> 2] = 500;
     HEAP32[($5_1 + 76 | 0) >> 2] = $44($5_1 + 72 | 0 | 0, $5_1 + 68 | 0 | 0) | 0;
     $45($6_1 + 2504 | 0 | 0, $5_1 + 76 | 0 | 0) | 0;
     $46($5_1 + 76 | 0 | 0) | 0;
     break label$3;
    }
    HEAP32[($5_1 + 60 | 0) >> 2] = 100;
    HEAP32[($5_1 + 56 | 0) >> 2] = 200;
    HEAP32[($5_1 + 64 | 0) >> 2] = $44($5_1 + 60 | 0 | 0, $5_1 + 56 | 0 | 0) | 0;
    $45($6_1 + 2504 | 0 | 0, $5_1 + 64 | 0 | 0) | 0;
    $46($5_1 + 64 | 0 | 0) | 0;
   }
  }
  HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($7($2_1 | 0, 1 | 0) | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($5_1 + 48 | 0) >> 2] = 6e3;
    HEAP32[($5_1 + 44 | 0) >> 2] = 8e3;
    HEAP32[($5_1 + 52 | 0) >> 2] = $44($5_1 + 48 | 0 | 0, $5_1 + 44 | 0 | 0) | 0;
    $45($6_1 + 2516 | 0 | 0, $5_1 + 52 | 0 | 0) | 0;
    $46($5_1 + 52 | 0 | 0) | 0;
    break label$5;
   }
   label$7 : {
    label$8 : {
     if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($5_1 + 36 | 0) >> 2] = 1e3;
     HEAP32[($5_1 + 32 | 0) >> 2] = 5e3;
     HEAP32[($5_1 + 40 | 0) >> 2] = $44($5_1 + 36 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
     $45($6_1 + 2516 | 0 | 0, $5_1 + 40 | 0 | 0) | 0;
     $46($5_1 + 40 | 0 | 0) | 0;
     break label$7;
    }
    HEAP32[($5_1 + 24 | 0) >> 2] = 500;
    HEAP32[($5_1 + 20 | 0) >> 2] = 1e3;
    HEAP32[($5_1 + 28 | 0) >> 2] = $44($5_1 + 24 | 0 | 0, $5_1 + 20 | 0 | 0) | 0;
    $45($6_1 + 2516 | 0 | 0, $5_1 + 28 | 0 | 0) | 0;
    $46($5_1 + 28 | 0 | 0) | 0;
   }
  }
  $47($5_1 + 16 | 0 | 0) | 0;
  HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($7($2_1 | 0, 2 | 0) | 0) >> 2] | 0;
  label$9 : {
   label$10 : {
    if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $48() | 0;
    $49($5_1 + 16 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
    $50($5_1 + 12 | 0 | 0) | 0;
    break label$9;
   }
   label$11 : {
    label$12 : {
     if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = $51() | 0;
     $52($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
     $53($5_1 + 8 | 0 | 0) | 0;
     break label$11;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $54() | 0;
    $55($5_1 + 16 | 0 | 0, $5_1 + 4 | 0 | 0) | 0;
    $56($5_1 + 4 | 0 | 0) | 0;
   }
  }
  $58($6_1 + 2592 | 0 | 0, $57($5_1 + 16 | 0 | 0) | 0 | 0);
  $59($5_1 + 16 | 0 | 0) | 0;
  $207_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
  global$0 = $5_1 + 112 | 0;
  return $207_1 | 0;
 }
 
 function $10($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $79_1 = Math_fround(0), $95_1 = 0.0, $35_1 = 0, $51_1 = 0, $126_1 = 0, $135_1 = 0, $29_1 = 0, $87_1 = Math_fround(0), $88_1 = Math_fround(0);
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  i64toi32_i32$2 = $60($5_1 + 2516 | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 48 | 0) >> 2] = $126_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $60($5_1 + 2504 | 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $135_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $135_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  $13_1 = $5_1 + 4 | 0;
  HEAPF32[($5_1 + 2524 | 0) >> 2] = Math_fround(($61($4_1 + 48 | 0 | 0, $13_1 | 0) | 0) >>> 0);
  HEAPF32[($5_1 + 2528 | 0) >> 2] = Math_fround(($61($5_1 + 2508 | 0 | 0, $13_1 | 0) | 0) >>> 0);
  HEAPF32[($5_1 + 2520 | 0) >> 2] = Math_fround(Math_fround(($61($4_1 + 40 | 0 | 0, $13_1 | 0) | 0) >>> 0) / Math_fround(1.0e3));
  $79_1 = Math_fround(0.0);
  $62($4_1 + 24 | 0 | 0, Math_fround($79_1), Math_fround(Math_fround(HEAPF32[($5_1 + 2520 | 0) >> 2])), Math_fround($79_1), Math_fround($79_1)) | 0;
  $63($5_1 + 2544 | 0 | 0, $4_1 + 24 | 0 | 0);
  $29_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
  $95_1 = +HEAPF64[($5_1 + 2536 | 0) >> 3] * +Math_fround(HEAPF32[($5_1 + 2520 | 0) >> 2]);
  label$1 : {
   label$2 : {
    if (!($95_1 < 4294967296.0 & $95_1 >= 0.0 | 0)) {
     break label$2
    }
    $35_1 = ~~$95_1 >>> 0;
    break label$1;
   }
   $35_1 = 0;
  }
  $64($29_1 | 0, $35_1 | 0);
  $65($5_1 + 2544 | 0 | 0);
  HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($30(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround($66($5_1 + 2544 | 0 | 0));
    HEAPF64[$4_1 >> 3] = +$5(+(+Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), +(+Math_fround(HEAPF32[($5_1 + 2528 | 0) >> 2])), +(+Math_fround(HEAPF32[($5_1 + 2524 | 0) >> 2])), +(6.0));
    $51_1 = $5_1 + 2592 | 0;
    $43($51_1 | 0, +(+HEAPF64[$4_1 >> 3]));
    $87_1 = Math_fround(+$67($51_1 | 0) * +Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]));
    HEAPF32[($31(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] = $87_1;
    $88_1 = Math_fround(HEAPF32[($31(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) + $88_1);
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   if (Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0) {
    break label$5
   }
   fimport$0(67180 | 0, 66070 | 0, 68 | 0, 66254 | 0);
   wasm2js_trap();
  }
  global$0 = $4_1 + 64 | 0;
  return;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $68($4_1 + 2592 | 0 | 0) | 0;
  $46($4_1 + 2516 | 0 | 0) | 0;
  $46($4_1 + 2504 | 0 | 0) | 0;
  $2728($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $12($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $70(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $69(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $12_1 = 0, $16_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $12_1 = 24;
  $16_1 = 24;
  $1189(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, (($71($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, (10 << $12_1 | 0) >> $12_1 | 0 | 0) | 0) << $16_1 | 0) >> $16_1 | 0 | 0) | 0;
  $1156(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $20_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $20_1 | 0;
 }
 
 function $14($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0](HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $15($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $18_1 = 0, $30_1 = 0, $235_1 = 0, i64toi32_i32$0 = 0, $258_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 136 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 128 | 0) >> 3] = $1_1;
  $6_1 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
  HEAP32[($5_1 + 140 | 0) >> 2] = $6_1;
  $36($6_1 | 0) | 0;
  $37($6_1 + 4 | 0 | 0, $2729($6_1 | 0) | 0 | 0) | 0;
  $38($6_1 + 2504 | 0 | 0) | 0;
  $39($6_1 + 2508 | 0 | 0, 10 | 0, 20 | 0) | 0;
  $38($6_1 + 2516 | 0 | 0) | 0;
  $18_1 = 0;
  HEAP32[($6_1 + 2520 | 0) >> 2] = $18_1;
  HEAP32[($6_1 + 2524 | 0) >> 2] = $18_1;
  HEAP32[($6_1 + 2528 | 0) >> 2] = $18_1;
  HEAPF64[($6_1 + 2536 | 0) >> 3] = +HEAPF64[($5_1 + 128 | 0) >> 3];
  HEAP32[($6_1 + 2544 | 0) >> 2] = $18_1;
  HEAP32[($6_1 + 2548 | 0) >> 2] = $18_1;
  i64toi32_i32$0 = 1058682594;
  HEAP32[($6_1 + 2552 | 0) >> 2] = -350469331;
  HEAP32[($6_1 + 2556 | 0) >> 2] = i64toi32_i32$0;
  $8($6_1 + 2560 | 0 | 0) | 0;
  $8($6_1 + 2572 | 0 | 0) | 0;
  $8($6_1 + 2584 | 0 | 0) | 0;
  $72($6_1 + 2596 | 0 | 0) | 0;
  $40($6_1 + 2608 | 0 | 0) | 0;
  $30_1 = $6_1 + 2656 | 0;
  $41($30_1 | 0, 512 | 0) | 0;
  $73($6_1 + 2720 | 0 | 0) | 0;
  $42($30_1 | 0, +(+HEAPF64[($5_1 + 128 | 0) >> 3]));
  $43($30_1 | 0, +(+Math_fround(HEAPF32[($6_1 + 2524 | 0) >> 2])));
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 0 | 0) | 0) >> 2] | 0;
  HEAP32[($6_1 + 2544 | 0) >> 2] = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 116 | 0) >> 2] = 100;
    HEAP32[($5_1 + 112 | 0) >> 2] = 300;
    HEAP32[($5_1 + 120 | 0) >> 2] = $44($5_1 + 116 | 0 | 0, $5_1 + 112 | 0 | 0) | 0;
    $45($6_1 + 2504 | 0 | 0, $5_1 + 120 | 0 | 0) | 0;
    $46($5_1 + 120 | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($5_1 + 104 | 0) >> 2] = 50;
     HEAP32[($5_1 + 100 | 0) >> 2] = 100;
     HEAP32[($5_1 + 108 | 0) >> 2] = $44($5_1 + 104 | 0 | 0, $5_1 + 100 | 0 | 0) | 0;
     $45($6_1 + 2504 | 0 | 0, $5_1 + 108 | 0 | 0) | 0;
     $46($5_1 + 108 | 0 | 0) | 0;
     break label$3;
    }
    HEAP32[($5_1 + 92 | 0) >> 2] = 30;
    HEAP32[($5_1 + 88 | 0) >> 2] = 50;
    HEAP32[($5_1 + 96 | 0) >> 2] = $44($5_1 + 92 | 0 | 0, $5_1 + 88 | 0 | 0) | 0;
    $45($6_1 + 2504 | 0 | 0, $5_1 + 96 | 0 | 0) | 0;
    $46($5_1 + 96 | 0 | 0) | 0;
   }
  }
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 2 | 0) | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($5_1 + 80 | 0) >> 2] = 6e3;
    HEAP32[($5_1 + 76 | 0) >> 2] = 8e3;
    HEAP32[($5_1 + 84 | 0) >> 2] = $44($5_1 + 80 | 0 | 0, $5_1 + 76 | 0 | 0) | 0;
    $45($6_1 + 2516 | 0 | 0, $5_1 + 84 | 0 | 0) | 0;
    $46($5_1 + 84 | 0 | 0) | 0;
    break label$5;
   }
   label$7 : {
    label$8 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($5_1 + 68 | 0) >> 2] = 2e3;
     HEAP32[($5_1 + 64 | 0) >> 2] = 5e3;
     HEAP32[($5_1 + 72 | 0) >> 2] = $44($5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0) | 0;
     $45($6_1 + 2516 | 0 | 0, $5_1 + 72 | 0 | 0) | 0;
     $46($5_1 + 72 | 0 | 0) | 0;
     break label$7;
    }
    HEAP32[($5_1 + 56 | 0) >> 2] = 500;
    HEAP32[($5_1 + 52 | 0) >> 2] = 2e3;
    HEAP32[($5_1 + 60 | 0) >> 2] = $44($5_1 + 56 | 0 | 0, $5_1 + 52 | 0 | 0) | 0;
    $45($6_1 + 2516 | 0 | 0, $5_1 + 60 | 0 | 0) | 0;
    $46($5_1 + 60 | 0 | 0) | 0;
   }
  }
  $47($5_1 + 48 | 0 | 0) | 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 3 | 0) | 0) >> 2] | 0;
  label$9 : {
   label$10 : {
    if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = $48() | 0;
    $49($5_1 + 48 | 0 | 0, $5_1 + 44 | 0 | 0) | 0;
    $50($5_1 + 44 | 0 | 0) | 0;
    break label$9;
   }
   label$11 : {
    label$12 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($5_1 + 40 | 0) >> 2] = $51() | 0;
     $52($5_1 + 48 | 0 | 0, $5_1 + 40 | 0 | 0) | 0;
     $53($5_1 + 40 | 0 | 0) | 0;
     break label$11;
    }
    HEAP32[($5_1 + 36 | 0) >> 2] = $54() | 0;
    $55($5_1 + 48 | 0 | 0, $5_1 + 36 | 0 | 0) | 0;
    $56($5_1 + 36 | 0 | 0) | 0;
   }
  }
  $58($6_1 + 2656 | 0 | 0, $57($5_1 + 48 | 0 | 0) | 0 | 0);
  $14($12(103156 | 0, 67188 | 0) | 0 | 0, 2 | 0) | 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 4 | 0) | 0) >> 2] | 0;
  HEAPF64[($5_1 + 24 | 0) >> 3] = +$74(+(+(HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) / 100.0), +(0.0), +(50.0));
  HEAP32[($5_1 + 16 | 0) >> 2] = 100;
  HEAP32[($5_1 + 12 | 0) >> 2] = -100;
  HEAP32[($5_1 + 20 | 0) >> 2] = $75($5_1 + 16 | 0 | 0, $5_1 + 12 | 0 | 0, $5_1 + 24 | 0 | 0) | 0;
  $235_1 = $6_1 + 2720 | 0;
  $76($235_1 | 0, $5_1 + 20 | 0 | 0) | 0;
  $77($5_1 + 20 | 0 | 0) | 0;
  $64($6_1 + 2572 | 0 | 0, HEAP32[($6_1 + 2544 | 0) >> 2] | 0 | 0);
  $64($6_1 + 2584 | 0 | 0, HEAP32[($6_1 + 2544 | 0) >> 2] | 0 | 0);
  $64($6_1 + 2560 | 0 | 0, HEAP32[($6_1 + 2544 | 0) >> 2] | 0 | 0);
  $78($6_1 + 2596 | 0 | 0, HEAP32[($6_1 + 2544 | 0) >> 2] | 0 | 0);
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround($80($79($235_1 | 0) | 0 | 0) | 0 | 0) / Math_fround(100.0));
  HEAPF64[($6_1 + 2552 | 0) >> 3] = +$74(+(+Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])), +(+(0 | 0)), +(.0001));
  $59($5_1 + 48 | 0 | 0) | 0;
  $258_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
  global$0 = $5_1 + 144 | 0;
  return $258_1 | 0;
 }
 
 function $16($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $185_1 = 0.0, $151_1 = Math_fround(0), $206_1 = 0.0, $134_1 = Math_fround(0), $164_1 = 0.0, $138_1 = Math_fround(0), $169_1 = 0.0, $42_1 = 0, $57_1 = 0, $101_1 = 0, $110_1 = 0, $228_1 = 0, $237_1 = 0, $137_1 = Math_fround(0), $141_1 = Math_fround(0), $143_1 = Math_fround(0), $144_1 = Math_fround(0), $180_1 = 0.0, $51_1 = 0, $157_1 = Math_fround(0), $102_1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 88 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
  i64toi32_i32$2 = $60($5_1 + 2516 | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $228_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 80 | 0) >> 2] = $228_1;
  HEAP32[($4_1 + 84 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $60($5_1 + 2504 | 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $237_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $237_1;
  HEAP32[($4_1 + 76 | 0) >> 2] = i64toi32_i32$0;
  $13_1 = $5_1 + 4 | 0;
  HEAPF32[($5_1 + 2524 | 0) >> 2] = Math_fround(($61($4_1 + 80 | 0 | 0, $13_1 | 0) | 0) >>> 0);
  HEAPF64[($4_1 + 64 | 0) >> 3] = +Math_fround(HEAPF32[($5_1 + 2524 | 0) >> 2]) * .5;
  HEAPF32[($5_1 + 2528 | 0) >> 2] = Math_fround(($61($5_1 + 2508 | 0 | 0, $13_1 | 0) | 0) >>> 0);
  HEAPF32[($5_1 + 2520 | 0) >> 2] = Math_fround(Math_fround(($61($4_1 + 72 | 0 | 0, $13_1 | 0) | 0) >>> 0) / Math_fround(1.0e3));
  HEAPF64[($4_1 + 56 | 0) >> 3] = +Math_fround(HEAPF32[($5_1 + 2520 | 0) >> 2]) * .25;
  HEAP32[($4_1 + 52 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 52 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 2544 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(Math_fround($80($79($5_1 + 2720 | 0 | 0) | 0 | 0) | 0 | 0) / Math_fround(100.0));
    $134_1 = Math_fround(HEAPF32[($5_1 + 2524 | 0) >> 2]);
    $164_1 = +$134_1;
    $137_1 = Math_fround($164_1 + +$74(+(+Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])), +(+Math_fround(-$134_1)), +$164_1));
    HEAPF32[($31($5_1 + 2572 | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $137_1;
    $138_1 = Math_fround(HEAPF32[($5_1 + 2528 | 0) >> 2]);
    $169_1 = +$138_1;
    $141_1 = Math_fround($169_1 + +$74(+(+Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])), +(+Math_fround(-$138_1)), +$169_1));
    HEAPF32[($31($5_1 + 2584 | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $141_1;
    $143_1 = Math_fround(+Math_fround(HEAPF32[($5_1 + 2520 | 0) >> 2]) + +HEAPF64[($5_1 + 2552 | 0) >> 3]);
    $42_1 = $5_1 + 2560 | 0;
    HEAPF32[($31($42_1 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $143_1;
    $144_1 = Math_fround(HEAPF32[($31($42_1 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($5_1 + 2548 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 2548 | 0) >> 2]) + $144_1);
    $180_1 = +$74(+(+Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])), +(+(0 | 0)), +(.0001));
    HEAPF64[($5_1 + 2552 | 0) >> 3] = +HEAPF64[($5_1 + 2552 | 0) >> 3] + $180_1;
    HEAP32[($4_1 + 52 | 0) >> 2] = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $51_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
  $185_1 = +HEAPF64[($5_1 + 2536 | 0) >> 3] * +Math_fround(HEAPF32[($5_1 + 2548 | 0) >> 2]);
  label$3 : {
   label$4 : {
    if (!($185_1 < 4294967296.0 & $185_1 >= 0.0 | 0)) {
     break label$4
    }
    $57_1 = ~~$185_1 >>> 0;
    break label$3;
   }
   $57_1 = 0;
  }
  $64($51_1 | 0, $57_1 | 0);
  HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($4_1 + 44 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 2544 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($5_1 + 2536 | 0) >> 3] * +Math_fround(HEAPF32[($31($5_1 + 2560 | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    $151_1 = Math_fround(0 | 0);
    $62($4_1 + 16 | 0 | 0, Math_fround($151_1), Math_fround(Math_fround(HEAPF32[($31($5_1 + 2560 | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2])), Math_fround($151_1), Math_fround($151_1)) | 0;
    $63($5_1 + 2608 | 0 | 0, $4_1 + 16 | 0 | 0);
    $65($5_1 + 2608 | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    label$7 : {
     label$8 : while (1) {
      if (!(+((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) < +HEAPF64[($4_1 + 32 | 0) >> 3] & 1 | 0)) {
       break label$7
      }
      HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($66($5_1 + 2608 | 0 | 0));
      HEAPF64[$4_1 >> 3] = +$5(+(+Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])), +(+Math_fround(HEAPF32[($31($5_1 + 2584 | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2])), +(+Math_fround(HEAPF32[($31($5_1 + 2572 | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2])), +(6.0));
      $101_1 = $5_1 + 2656 | 0;
      $43($101_1 | 0, +(+HEAPF64[$4_1 >> 3]));
      $157_1 = Math_fround(+$67($101_1 | 0) * +Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
      $102_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
      $206_1 = +((HEAP32[($4_1 + 44 | 0) >> 2] | 0) >>> 0) * +HEAPF64[($4_1 + 32 | 0) >> 3] + +((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0);
      label$9 : {
       label$10 : {
        if (!($206_1 < 4294967296.0 & $206_1 >= 0.0 | 0)) {
         break label$10
        }
        $110_1 = ~~$206_1 >>> 0;
        break label$9;
       }
       $110_1 = 0;
      }
      HEAPF32[($31($102_1 | 0, $110_1 | 0) | 0) >> 2] = $157_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  global$0 = $4_1 + 96 | 0;
  return;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $77($4_1 + 2720 | 0 | 0) | 0;
  $68($4_1 + 2656 | 0 | 0) | 0;
  $81($4_1 + 2596 | 0 | 0) | 0;
  $34($4_1 + 2584 | 0 | 0) | 0;
  $34($4_1 + 2572 | 0 | 0) | 0;
  $34($4_1 + 2560 | 0 | 0) | 0;
  $46($4_1 + 2516 | 0 | 0) | 0;
  $46($4_1 + 2504 | 0 | 0) | 0;
  $2728($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $82($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 > ($83($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 > ($84($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $85($5_1 | 0);
    wasm2js_trap();
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $86($5_1 | 0) | 0;
   $88($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $87($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   $89($5_1 | 0, $4_1 | 0);
   $90($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $20($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $25_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 < (HEAP32[($91($6_1 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $92($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 60 | 0;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $93($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  $25_1 = (HEAP32[$5_1 >> 2] | 0) + -60 | 0;
  global$0 = $5_1 + 16 | 0;
  return $25_1 | 0;
 }
 
 function $21($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $94($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $22($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $94($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $23($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($95(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $25($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $25_1 = 0, $26_1 = 0, $82_1 = 0, $86_1 = 0, $134_1 = 0, $138_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  $8_1 = 8;
  i64toi32_i32$2 = $7_1 + $8_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 16 | 0) + $8_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $86_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $97($96($6_1 + 12 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2])));
  $98($96($6_1 + 12 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2])));
  $99($96($6_1 + 12 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])));
  $100($96($6_1 + 12 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2])));
  $25_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  $26_1 = 8;
  i64toi32_i32$2 = $25_1 + $26_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $134_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $26_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $134_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $25_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $138_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[$5_1 >> 2] = $138_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $102($101($6_1 + 24 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[$5_1 >> 2])));
  $103($101($6_1 + 24 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
  $104($101($6_1 + 24 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  $105($101($6_1 + 24 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])));
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $26($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $25_1 = 0, $26_1 = 0, $82_1 = 0, $86_1 = 0, $134_1 = 0, $138_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  $8_1 = 8;
  i64toi32_i32$2 = $7_1 + $8_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 16 | 0) + $8_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $86_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $97($96($6_1 + 16 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2])));
  $98($96($6_1 + 16 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2])));
  $99($96($6_1 + 16 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])));
  $100($96($6_1 + 16 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2])));
  $25_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  $26_1 = 8;
  i64toi32_i32$2 = $25_1 + $26_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $134_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $26_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $134_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $25_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $138_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[$5_1 >> 2] = $138_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $102($101($6_1 + 28 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[$5_1 >> 2])));
  $103($101($6_1 + 28 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
  $104($101($6_1 + 28 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  $105($101($6_1 + 28 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])));
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $27($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $25_1 = 0, $26_1 = 0, $82_1 = 0, $86_1 = 0, $134_1 = 0, $138_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  $8_1 = 8;
  i64toi32_i32$2 = $7_1 + $8_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 16 | 0) + $8_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $86_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $97($96($6_1 + 20 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2])));
  $98($96($6_1 + 20 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2])));
  $99($96($6_1 + 20 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])));
  $100($96($6_1 + 20 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2])));
  $25_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  $26_1 = 8;
  i64toi32_i32$2 = $25_1 + $26_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $134_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $26_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $134_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $25_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $138_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[$5_1 >> 2] = $138_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $102($101($6_1 + 32 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[$5_1 >> 2])));
  $103($101($6_1 + 32 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
  $104($101($6_1 + 32 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  $105($101($6_1 + 32 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])));
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $28($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $52_1 = 0, $62_1 = 0, $66_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $7_1 = 16;
  i64toi32_i32$2 = $6_1 + $7_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + $7_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $10_1 = 8;
  i64toi32_i32$2 = $6_1 + $10_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $62_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + $10_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $62_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $66_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[$4_1 >> 2] = $66_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAPF32[($5_1 + 36 | 0) >> 2] = Math_fround($106(Math_fround(Math_fround(HEAPF32[$4_1 >> 2]))));
  HEAPF32[($5_1 + 40 | 0) >> 2] = Math_fround($106(Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]))));
  HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround($106(Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround($106(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]))));
  HEAPF32[($5_1 + 52 | 0) >> 2] = Math_fround($106(Math_fround(Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]))));
  HEAPF32[($5_1 + 56 | 0) >> 2] = Math_fround($106(Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]))));
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 60 | 0;
  return $4_1 | 0;
 }
 
 function $30($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $31($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function $32($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0, $59_1 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
  HEAPF64[($4_1 + 24 | 0) >> 3] = +$108($107($5_1 | 0, 0 | 0) | 0 | 0, +(+Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])));
  HEAPF64[($4_1 + 16 | 0) >> 3] = +$108($107($5_1 | 0, 2 | 0) | 0 | 0, +(+$108($107($5_1 | 0, 1 | 0) | 0 | 0, +(+Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])))));
  HEAPF64[($4_1 + 8 | 0) >> 3] = +$108($107($5_1 | 0, 3 | 0) | 0 | 0, +(+Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])));
  HEAPF64[($4_1 + 24 | 0) >> 3] = +Math_fround($109($96($5_1 + 12 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 24 | 0) >> 3] * +Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2])))));
  HEAPF64[($4_1 + 24 | 0) >> 3] = +Math_fround(Math_fround($110($101($5_1 + 24 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 24 | 0) >> 3])))) * Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]));
  HEAPF64[($4_1 + 16 | 0) >> 3] = +Math_fround($109($96($5_1 + 16 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 16 | 0) >> 3] * +Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2])))));
  HEAPF64[($4_1 + 16 | 0) >> 3] = +Math_fround(Math_fround($110($101($5_1 + 28 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 16 | 0) >> 3])))) * Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]));
  HEAPF64[($4_1 + 8 | 0) >> 3] = +Math_fround($109($96($5_1 + 20 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 8 | 0) >> 3] * +Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2])))));
  HEAPF64[($4_1 + 8 | 0) >> 3] = +Math_fround(Math_fround($110($101($5_1 + 32 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 8 | 0) >> 3])))) * Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]));
  $59_1 = Math_fround(+HEAPF64[($4_1 + 24 | 0) >> 3] - +HEAPF64[($4_1 + 16 | 0) >> 3] + +HEAPF64[($4_1 + 8 | 0) >> 3]);
  global$0 = $4_1 + 48 | 0;
  return Math_fround($59_1);
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $111($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $112($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $34($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $114($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $35($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $119($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $120($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $36($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $123($3_1 | 0, 65988 | 0) | 0;
  $2727($4_1 | 0, $3_1 | 0) | 0;
  $2740($3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $37($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $124($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $38($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $125($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $39($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $126($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  $127($4_1 + 4 | 0 | 0) | 0;
  HEAPF64[($4_1 + 24 | 0) >> 3] = 44100.0;
  HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 44 | 0) >> 2] = Math_fround(0 | 0);
  $128($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF64[$5_1 >> 3] = 3.141592653589793;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $129($5_1 + 12 | 0 | 0) | 0;
  HEAPF64[($5_1 + 24 | 0) >> 3] = 41.0e3;
  HEAPF64[($5_1 + 32 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 40 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 48 | 0) >> 3] = +(0 | 0);
  HEAP32[($5_1 + 56 | 0) >> 2] = 0;
  $130($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $42($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 3] = +HEAPF64[$4_1 >> 3];
  return;
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(($131(+(+HEAPF64[$4_1 >> 3]), +(+HEAPF64[($5_1 + 48 | 0) >> 3]), +(.01)) | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[$4_1 >> 3];
   HEAPF64[($5_1 + 40 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3] * +((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0) / +HEAPF64[($5_1 + 24 | 0) >> 3];
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $44($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = $2713(8 | 0) | 0;
  $39($6_1 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $132($4_1 + 12 | 0 | 0, $6_1 | 0) | 0;
  $14_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $45($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $134($5_1 | 0, $133(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $135(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $136($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $46($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $134($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $47($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $137($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $48() {
  var $2_1 = 0, $4_1 = 0, $9_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $2713(4 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $138($4_1 | 0) | 0;
  $139($2_1 + 12 | 0 | 0, $4_1 | 0) | 0;
  $9_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $49($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $141($5_1 | 0, $140(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $143($4_1 + 7 | 0 | 0, $142(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $144($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $145($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $51() {
  var $2_1 = 0, $4_1 = 0, $9_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $2713(4 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $146($4_1 | 0) | 0;
  $147($2_1 + 12 | 0 | 0, $4_1 | 0) | 0;
  $9_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $52($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $141($5_1 | 0, $148(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $150($4_1 + 7 | 0 | 0, $149(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $144($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $151($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $54() {
  var $2_1 = 0, $4_1 = 0, $9_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $2713(4 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $152($4_1 | 0) | 0;
  $153($2_1 + 12 | 0 | 0, $4_1 | 0) | 0;
  $9_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $141($5_1 | 0, $154(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $156($4_1 + 7 | 0 | 0, $155(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $144($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $157($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $57($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($159(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $58($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $13_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $158($4_1 + 16 | 0 | 0, (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  $13_1 = HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  FUNCTION_TABLE[$13_1 | 0]($6_1, $4_1 + 8 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $141($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $60($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($325(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $61($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $7_1 = $326($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $62($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAPF32[$8_1 >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
  return $8_1 | 0;
 }
 
 function $63($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = $5_1 + 4 | 0;
  i64toi32_i32$2 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $8_1;
  HEAP32[i64toi32_i32$0 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $9_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $9_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $45_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $8_1 + $9_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $45_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $128($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $30($5_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $327($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0);
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $328($5_1 | 0, (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $65($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$4_1 >> 2] = 1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(1.0);
     HEAP32[$4_1 >> 2] = 2;
     break label$3;
    }
    HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
    HEAP32[$4_1 >> 2] = 3;
   }
  }
  return;
 }
 
 function $66($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $40_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ($5_1 | 0) {
     case 0:
      HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
      break label$1;
     case 1:
      HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]));
      label$8 : {
       if (!(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) >= Math_fround(1.0) & 1 | 0)) {
        break label$8
       }
       HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(1.0);
       $170($4_1 | 0);
      }
      break label$2;
     case 2:
      HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]));
      label$9 : {
       if (!(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) <= Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) & 1 | 0)) {
        break label$9
       }
       HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
       $170($4_1 | 0);
      }
      break label$2;
     case 3:
      HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
      break label$2;
     case 4:
      break label$3;
     default:
      break label$2;
     };
    }
    HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]));
    label$10 : {
     if (!(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) <= Math_fround(0 | 0) & 1 | 0)) {
      break label$10
     }
     $170($4_1 | 0);
    }
   }
   HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
  }
  $40_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
  global$0 = $3_1 + 16 | 0;
  return Math_fround($40_1);
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $12_1 = 0.0, i64toi32_i32$1 = 0, $19_1 = 0.0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $158($3_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $12_1 = +HEAPF64[($4_1 + 32 | 0) >> 3];
  i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAPF64[($3_1 + 16 | 0) >> 3] = +$329($3_1 | 0, +$12_1);
  HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($4_1 + 32 | 0) >> 3] + +HEAPF64[($4_1 + 40 | 0) >> 3];
  +$330(+(+HEAPF64[($4_1 + 32 | 0) >> 3]), +(+((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0)));
  $19_1 = +HEAPF64[($3_1 + 16 | 0) >> 3];
  global$0 = $3_1 + 32 | 0;
  return +$19_1;
 }
 
 function $68($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $429($4_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $69($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $163(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $70($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0, $37_1 = 0, $43_1 = 0, $49_1 = 0, $57_1 = 0, $67_1 = 0, $20_1 = 0, $42_1 = 0, $48_1 = 0, $55_1 = 0, $77_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $1182($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(($997($5_1 + 12 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $998($5_1 + 4 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   $20_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   $21_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!((($999($21_1 + (HEAP32[((HEAP32[$21_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 176 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$3
     }
     $37_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0;
     break label$2;
    }
    $37_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   }
   $42_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0;
   $43_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   $48_1 = $43_1 + (HEAP32[((HEAP32[$43_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $49_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   $55_1 = $1000($49_1 + (HEAP32[((HEAP32[$49_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $57_1 = 24;
   HEAP32[($5_1 + 8 | 0) >> 2] = $1001(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $20_1 | 0, $37_1 | 0, $42_1 | 0, $48_1 | 0, ($55_1 << $57_1 | 0) >> $57_1 | 0 | 0) | 0;
   label$4 : {
    if (!(($1002($5_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break label$4
    }
    $67_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    $1003($67_1 + (HEAP32[((HEAP32[$67_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
   }
  }
  $1183($5_1 + 12 | 0 | 0) | 0;
  $77_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $77_1 | 0;
 }
 
 function $71($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $21_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $1401($4_1 + 4 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $14_1 = 24;
  $17_1 = $1025($1024($4_1 + 4 | 0 | 0) | 0 | 0, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $14_1 | 0) >> $14_1 | 0 | 0) | 0;
  $1628($4_1 + 4 | 0 | 0) | 0;
  $21_1 = 24;
  global$0 = $4_1 + 16 | 0;
  return ($17_1 << $21_1 | 0) >> $21_1 | 0 | 0;
 }
 
 function $72($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $433($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $434($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $74($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $2_1;
  return +((+HEAPF64[($5_1 + 8 | 0) >> 3] - +HEAPF64[($5_1 + 16 | 0) >> 3]) * +HEAPF64[($5_1 + 24 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3]);
 }
 
 function $75($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $25_1 = 0.0, $16_1 = 0, $9_1 = 0, $11_1 = 0, $22_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  $7_1 = $2713(2524 | 0) | 0;
  $9_1 = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  $11_1 = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  $25_1 = +HEAPF64[(HEAP32[$5_1 >> 2] | 0) >> 3];
  label$1 : {
   label$2 : {
    if (!(Math_abs($25_1) < 2147483648.0)) {
     break label$2
    }
    $16_1 = ~~$25_1;
    break label$1;
   }
   $16_1 = -2147483648;
  }
  $435($7_1 | 0, $9_1 | 0, $11_1 | 0, $16_1 | 0) | 0;
  $436($5_1 + 12 | 0 | 0, $7_1 | 0) | 0;
  $22_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $22_1 | 0;
 }
 
 function $76($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $438($5_1 | 0, $437(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $439(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $440($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $77($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $438($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $78($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $441($5_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $442($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0);
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $443($5_1 | 0, (HEAP32[$5_1 >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 48) | 0 | 0);
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $79($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($444(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $80($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $31_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 2512 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 2516 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($4_1 + 2512 | 0) >> 2] | 0 | 0) > (HEAP32[($4_1 + 2520 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 2512 | 0) >> 2] | 0) + ($61($4_1 + 2504 | 0 | 0, $4_1 + 4 | 0 | 0) | 0) | 0;
    HEAP32[($4_1 + 2512 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 2512 | 0) >> 2] | 0 | 0) > (HEAP32[($4_1 + 2516 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 2516 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 2520 | 0) >> 2] | 0;
  }
  $31_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $81($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $536($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $537($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $82($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $539($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $540($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $83($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($543($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (60 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $545($544(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $221() | 0;
  $15_1 = HEAP32[($222($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $223(65789 | 0);
  wasm2js_trap();
 }
 
 function $86($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $546((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $87($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (60 | 0) | 0 | 0;
 }
 
 function $88($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $547($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$7_1 >> 2] = 0;
    break label$1;
   }
   $549($6_1 | 0, $548($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, 60) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 60) | 0;
  HEAP32[($550($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $89($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $27_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $551($5_1 | 0);
  $6_1 = $86($5_1 | 0) | 0;
  $552($4_1 + 16 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $552($4_1 + 12 | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
  $552($4_1 + 8 | 0 | 0, HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $553($6_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $27_1 = $554($4_1 + 20 | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27_1;
  $555($5_1 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0);
  $555($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0 | 0);
  $555($91($5_1 | 0) | 0 | 0, $550(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $556($5_1 | 0, $87($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $90($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $557($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $559($548($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $558($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $91($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $580((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $92($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $671($5_1 + 8 | 0 | 0, $6_1 | 0, 1 | 0) | 0;
  $672($86($6_1 | 0) | 0 | 0, $618(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 60 | 0;
  $673($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $93($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $28_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $86($6_1 | 0) | 0;
  $88($5_1 + 12 | 0 | 0, $674($6_1 | 0, ($87($6_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $87($6_1 | 0) | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  $672(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0, $618(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 60 | 0;
  $89($6_1 | 0, $5_1 + 12 | 0 | 0);
  $28_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $90($5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 48 | 0;
  return $28_1 | 0;
 }
 
 function $94($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $820($4_1 + 12 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($821(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == ($821(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($822(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $97($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $823(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $98($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $824(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $99($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $825(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $100($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $826(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($827(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $102($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $823(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $103($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $824(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $104($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $825(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $826(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $106($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($830(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 120) | 0 | 0;
 }
 
 function $108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $5_1 = 0, $49_1 = 0.0, $57_1 = 0.0, $58_1 = 0.0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 92 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 80 | 0) >> 3] = $1_1;
  $5_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
  $758($4_1 + 24 | 0 | 0, $5_1 | 0, 5 | 0);
  HEAPF64[($4_1 + 16 | 0) >> 3] = +HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($833($5_1 + 104 | 0 | 0, 0 | 0) | 0) >> 3];
  HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 72 | 0) >> 3] + +HEAPF64[($4_1 + 64 | 0) >> 3] * +HEAPF64[($4_1 + 16 | 0) >> 3];
  $49_1 = +HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 32 | 0) >> 3] + +HEAPF64[($4_1 + 16 | 0) >> 3] * -+HEAPF64[($4_1 + 48 | 0) >> 3] + +HEAPF64[($833($5_1 + 104 | 0 | 0, 1 | 0) | 0) >> 3];
  HEAPF64[($833($5_1 + 104 | 0 | 0, 0 | 0) | 0) >> 3] = $49_1;
  $57_1 = +HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 40 | 0) >> 3] + +HEAPF64[($4_1 + 16 | 0) >> 3] * -+HEAPF64[($4_1 + 56 | 0) >> 3];
  HEAPF64[($833($5_1 + 104 | 0 | 0, 1 | 0) | 0) >> 3] = $57_1;
  $58_1 = +HEAPF64[($4_1 + 8 | 0) >> 3];
  global$0 = $4_1 + 96 | 0;
  return +$58_1;
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $10_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $10_1 = Math_fround($790(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($10_1);
 }
 
 function $110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $10_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $10_1 = Math_fround($818(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($10_1);
 }
 
 function $111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $112($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $834(HEAP32[$4_1 >> 2] | 0 | 0);
   $551(HEAP32[$4_1 >> 2] | 0 | 0);
   $559($86(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $83(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $114($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $836(HEAP32[$4_1 >> 2] | 0 | 0);
   $372(HEAP32[$4_1 >> 2] | 0 | 0);
   $380($349(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $365(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $115() {
  $116(96076 | 0) | 0;
  return;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $118($4_1 | 0, 3 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $117() {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $837(65674 | 0);
  $838(66254 | 0, 4 | 0);
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0]();
  $2($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $121($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $121($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $122($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $160($5_1 | 0, $4_1 + 7 | 0 | 0, $4_1 + 6 | 0 | 0) | 0;
  $2743($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $69(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) & -1 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < 624 >>> 0 & 1 | 0)) {
     break label$1
    }
    $32_1 = Math_imul((HEAP32[($5_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0) ^ ($166(HEAP32[($5_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0) | 0, 1812433253);
    HEAP32[($5_1 + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = ($32_1 + (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) & -1 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($5_1 + 2496 | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $125($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $167($6_1 | 0) | 0;
  $168($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $126($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $127($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$4_1 >> 2] = Math_fround(.10000000149011612);
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(.10000000149011612);
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(.10000000149011612);
  return $4_1 | 0;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[($3_1 + 11 | 0) >> 0] = 0;
  HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($169($3_1 + 11 | 0 | 0, Math_fround(Math_fround(1.0)), Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2])), +(+HEAPF64[($4_1 + 24 | 0) >> 3])));
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($169($3_1 + 11 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])), +(+HEAPF64[($4_1 + 24 | 0) >> 3])));
  HEAPF32[($4_1 + 44 | 0) >> 2] = Math_fround($169($3_1 + 11 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2])), +(+HEAPF64[($4_1 + 24 | 0) >> 3])));
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$3
     }
     if (Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]) <= Math_fround(0 | 0) & 1 | 0) {
      break label$2
     }
    }
    label$4 : {
     if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$4
     }
     if (Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]) <= Math_fround(0 | 0) & 1 | 0) {
      break label$2
     }
     if (Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) <= Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) & 1 | 0) {
      break label$2
     }
    }
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
     break label$1
    }
    if (!(Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]) <= Math_fround(0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $170($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $129($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $172($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $130($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $173($5_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $174($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0);
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $175($5_1 | 0, (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $131($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $2_1;
  $8_1 = +$278(+(+HEAPF64[($5_1 + 24 | 0) >> 3] - +HEAPF64[($5_1 + 16 | 0) >> 3])) > +HEAPF64[($5_1 + 8 | 0) >> 3] & 1 | 0;
  global$0 = $5_1 + 32 | 0;
  return $8_1 | 0;
 }
 
 function $132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $279($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $133($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($281($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($281($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($281($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($281($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $282($136($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $135($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $136(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $136($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $283(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $137($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $285($6_1 | 0) | 0;
  $286($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $287($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 68284 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $288($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($296($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($296($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($294($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($294($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $295($144($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $297(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $298(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($296($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($296($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $302($297($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $146($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $287($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 68364 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $147($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $303($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $148($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($307($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($307($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $149($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $308(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $151($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($307($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($307($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $311($308($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $152($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $287($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 68408 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $153($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $312($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $154($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($316($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($316($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $317(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $157($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($316($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($316($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $320($317($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $321(68450 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $322(68451 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $159($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $324(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $160($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $161($6_1 | 0) | 0;
  $162($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $164($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1078(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $165($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $166($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 30 | 0 | 0;
 }
 
 function $167($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $168($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $169($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = +$3_1;
  var $6_1 = 0, $16_1 = Math_fround(0);
  $6_1 = global$0 - 32 | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF64[($6_1 + 8 | 0) >> 3] = $3_1;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    $16_1 = Math_fround(+Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) / (+Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) * +HEAPF64[($6_1 + 8 | 0) >> 3]));
    break label$1;
   }
   $16_1 = Math_fround(-1.0);
  }
  return Math_fround($16_1);
 }
 
 function $170($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$4_1 >> 2] = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0 ? 2 : 3;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[$4_1 >> 2] = 3;
    break label$1;
   }
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
    break label$1
   }
   $171($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[$4_1 >> 2] = 0;
  return;
 }
 
 function $172($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $176($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $177($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $173($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0 | 0;
 }
 
 function $174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[($180($5_1 | 0) | 0) >> 2] | 0) - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) >> 3 | 0) >>> 0 >= (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $181($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $182($5_1 | 0) | 0;
   $184($4_1 | 0, $183($5_1 | 0, ($173($5_1 | 0) | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $173($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   $185($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   $186($5_1 | 0, $4_1 | 0);
   $187($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $173($5_1 | 0) | 0;
  $188($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $189($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $176($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $178($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $179($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $180($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $190((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $191($4_1 + 12 | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $193($182($5_1 | 0) | 0 | 0, $192(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    $22_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $22_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $22_1;
    continue label$2;
   };
  }
  $194($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $182($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $195((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $183($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $196($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $197($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $198($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($199($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $184($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $200($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$7_1 >> 2] = 0;
    break label$1;
   }
   $202($6_1 | 0, $201($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($203($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $204($4_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $193($201($5_1 | 0) | 0 | 0, $192(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0;
    continue label$2;
   };
  }
  $205($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $27_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $206($5_1 | 0);
  $6_1 = $182($5_1 | 0) | 0;
  $207($4_1 + 16 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $207($4_1 + 12 | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
  $207($4_1 + 8 | 0 | 0, HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $208($6_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $27_1 = $209($4_1 + 20 | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27_1;
  $210($5_1 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0);
  $210($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0 | 0);
  $210($180($5_1 | 0) | 0 | 0, $203(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $211($5_1 | 0, $173($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $187($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $212($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $214($201($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $213($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $188($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $12_1 = $182($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -8 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $270($12_1 | 0, $192($15_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $190($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $215(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $191($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
  return $6_1 | 0;
 }
 
 function $192($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $193($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $216(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $218(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $196($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $220($219(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $221() | 0;
  $15_1 = HEAP32[($222($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $223(65789 | 0);
  wasm2js_trap();
 }
 
 function $198($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($224($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $225(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $200($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $176($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $236($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $201($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $238((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $202($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $237(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $203($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $239((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $205($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $206($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $207($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $208($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $14_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $246(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  $14_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $14_1 | 0;
 }
 
 function $209($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $210($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $211($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $212($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $266($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $213($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($268($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $214($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $267(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $215($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $217(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $217($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF64[$5_1 >> 3] = +(0 | 0);
  return $5_1 | 0;
 }
 
 function $218($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $219($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $228((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $220($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = ($227() | 0) >>> 3 | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $221() {
  return $229() | 0 | 0;
 }
 
 function $222($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $226(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $223($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2781(8 | 0) | 0;
  $233($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  fimport$1($5_1 | 0, 95516 | 0, 5 | 0);
  wasm2js_trap();
 }
 
 function $224($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $234((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($230($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($230($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $227() {
  return $231() | 0 | 0;
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $232(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $229() {
  return 2147483647 | 0;
 }
 
 function $230($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function $231() {
  return -1 | 0;
 }
 
 function $232($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $233($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $2733($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 95496 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $234($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $235(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $235($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($220(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $240();
   wasm2js_trap();
  }
  $15_1 = $241((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $245((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $239($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $215(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $240() {
  var $1_1 = 0;
  $1_1 = $2781(4 | 0) | 0;
  $2826($1_1 | 0) | 0;
  fimport$1($1_1 | 0, 95408 | 0, 6 | 0);
  wasm2js_trap();
 }
 
 function $241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($242(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $243(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $244(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $242($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 > 8 >>> 0 & 1 | 0 | 0;
 }
 
 function $243($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $2719(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $244($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2713(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $246($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
  $247($5_1 + 24 | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[(($5_1 + 24 | 0) + 4 | 0) >> 2] | 0;
  $21_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $21_1 | 0;
 }
 
 function $247($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $248($0_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $248($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $249($0_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $249($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  HEAP32[($6_1 + 52 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
  $250($6_1 + 60 | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[(($6_1 + 60 | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $251(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $252($6_1 + 44 | 0 | 0, $6_1 + 43 | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = $253(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(($6_1 + 44 | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $254(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  $255($0_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0);
  global$0 = $6_1 + 80 | 0;
  return;
 }
 
 function $250($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $256($0_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $251($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $261(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $252($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $39_1 = 0.0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $4_1;
  HEAP32[$7_1 >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    if (!(($257($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $39_1 = +HEAPF64[($258($7_1 + 12 | 0 | 0) | 0) >> 3];
    HEAPF64[($259($7_1 + 4 | 0 | 0) | 0) >> 3] = $39_1;
    $260($7_1 + 12 | 0 | 0) | 0;
    $260($7_1 + 4 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $255($0_1 | 0, $7_1 + 12 | 0 | 0, $7_1 + 4 | 0 | 0);
  global$0 = $7_1 + 16 | 0;
  return;
 }
 
 function $253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $263(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $10_1 | 0;
 }
 
 function $254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $264(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $10_1 | 0;
 }
 
 function $255($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $262($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $256($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = $251(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $251(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $262($0_1 | 0, $5_1 + 20 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($209(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) != ($209(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $258($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $265();
  $5_1 = $259(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $259($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  $8_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  return $8_1 | 0;
 }
 
 function $260($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + -8 | 0;
  return $4_1 | 0;
 }
 
 function $261($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $262($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $263($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $254(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $10_1 | 0;
 }
 
 function $264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $265() {
  
 }
 
 function $266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $269(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $267($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $272(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $268($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $277((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $269($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $11_1 = $201($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -8 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $270($11_1 | 0, $192($14_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $271(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $271($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $272($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!(($242(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $273(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
    break label$1;
   }
   $274(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $273($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $275(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $276(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $275($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $2724(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $2717(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $277($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $235(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $278($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
  return +Math_abs(+HEAPF64[($3_1 + 8 | 0) >> 3]);
 }
 
 function $279($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $280($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $168($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $281($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $284(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $282($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $2717($5_1 | 0, 8 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $283($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $284($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $285($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $286($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $287($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 68352 + 8 | 0;
  return $4_1 | 0;
 }
 
 function $288($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $292($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $293($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $289($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $28_1 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $290($1_1 | 0) | 0;
  HEAPF64[($4_1 + 16 | 0) >> 3] = 3.141592653589793;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAPF64[$4_1 >> 3] = +((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) / +((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0);
    $28_1 = +$1075(+(6.283185307179586 * +HEAPF64[$4_1 >> 3]));
    HEAPF64[($291($1_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 3] = $28_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $290($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $291($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0;
 }
 
 function $292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $293($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $294($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $299(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $2717($5_1 | 0, 4 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $296($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $300(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $297($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $301(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $298($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $299($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $300($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $2717($5_1 | 0, 4 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $303($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $305($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $306($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $304($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $31_1 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $290($1_1 | 0) | 0;
  HEAPF64[($4_1 + 16 | 0) >> 3] = 3.141592653589793;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAPF64[$4_1 >> 3] = +((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) / +((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0);
    $31_1 = .6366197723675814 * +$1029(+(+$1075(+(6.283185307179586 * +HEAPF64[$4_1 >> 3]))));
    HEAPF64[($291($1_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 3] = $31_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $305($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $306($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $307($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $309(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $308($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $310(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $309($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $310($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $311($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $2717($5_1 | 0, 4 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $312($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $314($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $315($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $313($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $30_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $290($1_1 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $30_1 = +((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0) < +((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0) * .5 & 1 | 0 ? -1.0 : 1.0;
    HEAPF64[($291($1_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 3] = $30_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $314($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $316($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $318(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $317($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $319(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $318($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $319($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $320($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $2717($5_1 | 0, 4 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $323(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $322($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $173(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $323($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $192(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $324($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $331(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $326($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $65_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 92 | 0) >> 2] = (($332(HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) | 0) - ($333(HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) | 0) | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 108 | 0) >> 2] = $333(HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($5_1 + 88 | 0) >> 2] = 32;
   label$3 : {
    if (HEAP32[($5_1 + 92 | 0) >> 2] | 0) {
     break label$3
    }
    $334($5_1 + 52 | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, 32 | 0) | 0;
    HEAP32[($5_1 + 108 | 0) >> 2] = $335($5_1 + 52 | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($5_1 + 48 | 0) >> 2] = (32 - ($336(HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) | 0) | 0) - 1 | 0;
   label$4 : {
    if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0) & (($337() | 0) >>> (32 - (HEAP32[($5_1 + 48 | 0) >> 2] | 0) | 0) | 0) | 0)) {
     break label$4
    }
    HEAP32[($5_1 + 48 | 0) >> 2] = (HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 1 | 0;
   }
   $334($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $335($5_1 + 12 | 0 | 0) | 0;
    if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($5_1 + 92 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
     continue label$5
    }
    break label$5;
   };
   HEAP32[($5_1 + 108 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ($333(HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) | 0) | 0;
  }
  $65_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
  global$0 = $5_1 + 112 | 0;
  return $65_1 | 0;
 }
 
 function $327($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[($347($5_1 | 0) | 0) >> 2] | 0) - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 >= (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $348($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $349($5_1 | 0) | 0;
   $351($4_1 | 0, $350($5_1 | 0, ($30($5_1 | 0) | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $30($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   $352($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   $353($5_1 | 0, $4_1 | 0);
   $354($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $328($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $30($5_1 | 0) | 0;
  $355($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $356($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $329($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $37_1 = 0.0, $9_1 = 0, $49_1 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 24 | 0) >> 3] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $290($0_1 | 0) | 0;
  $37_1 = Math_trunc(+HEAPF64[($4_1 + 24 | 0) >> 3]);
  label$1 : {
   label$2 : {
    if (!(Math_abs($37_1) < 2147483648.0)) {
     break label$2
    }
    $9_1 = ~~$37_1;
    break label$1;
   }
   $9_1 = -2147483648;
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = $9_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 24 | 0) >> 3] - Math_floor(+HEAPF64[($4_1 + 24 | 0) >> 3]);
  $49_1 = +$425(+(+HEAPF64[($4_1 + 8 | 0) >> 3]), +(+HEAPF64[($291($0_1 | 0, $424((HEAP32[($4_1 + 16 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 3]), +(+HEAPF64[($291($0_1 | 0, $424(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 3]), +(+HEAPF64[($291($0_1 | 0, $424((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 3]), +(+HEAPF64[($291($0_1 | 0, $424((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 2 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 3]));
  global$0 = $4_1 + 32 | 0;
  return +$49_1;
 }
 
 function $330($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0, $16_1 = 0.0, $22_1 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $0_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $1_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] >= +(0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4_1 + 24 | 0) >> 3] = +$1040(+(+HEAPF64[($4_1 + 16 | 0) >> 3]), +(+HEAPF64[($4_1 + 8 | 0) >> 3]));
    break label$1;
   }
   $16_1 = +HEAPF64[($4_1 + 8 | 0) >> 3];
   HEAPF64[($4_1 + 24 | 0) >> 3] = +$1040(+($16_1 - +$1040(+-+HEAPF64[($4_1 + 16 | 0) >> 3], +$16_1)), +$16_1);
  }
  $22_1 = +HEAPF64[($4_1 + 24 | 0) >> 3];
  global$0 = $4_1 + 32 | 0;
  return +$22_1;
 }
 
 function $331($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $333($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $334($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = 0, $80_1 = 0, $95_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 5 | 0) + (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & 31 | 0 | 0) != (0 | 0) & 1 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) / ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) >>> 0) | 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   if (!((0 - (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) >>> 0 > (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) >>> 0) / ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) >>> 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($6_1 + 8 | 0) >> 2] = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) / ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) >>> 0) | 0;
   label$2 : {
    label$3 : {
     if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 32 >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = (0 >>> (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0) << (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0;
     break label$2;
    }
    HEAP32[($6_1 + 20 | 0) >> 2] = 0;
   }
  }
  HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) - (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) % ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) >>> 0) | 0) | 0;
  label$4 : {
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 31 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 24 | 0) >> 2] = (0 >>> ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0) | 0) << ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0) | 0;
    break label$4;
   }
   HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  }
  label$6 : {
   label$7 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$7
    }
    $80_1 = -1 >>> (32 - (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0) | 0;
    break label$6;
   }
   $80_1 = 0;
  }
  HEAP32[($6_1 + 28 | 0) >> 2] = $80_1;
  label$8 : {
   label$9 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 31 >>> 0 & 1 | 0)) {
     break label$9
    }
    $95_1 = -1 >>> (32 - ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0) | 0) | 0;
    break label$8;
   }
   $95_1 = -1;
  }
  HEAP32[($6_1 + 32 | 0) >> 2] = $95_1;
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $335($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $338(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $336($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($3_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 32;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = ($339(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) - 0 | 0;
  }
  $10_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $337() {
  return $340() | 0 | 0;
 }
 
 function $338($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $8_1 = ($341(HEAP32[$4_1 >> 2] | 0 | 0) | 0) & (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $339($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_clz32(HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0;
 }
 
 function $340() {
  return -1 | 0;
 }
 
 function $341($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $38_1 = 0, $67_1 = 0, $73_1 = 0, $79_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = (((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) + 1 | 0) >>> 0) % (624 >>> 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = 2147483647;
  HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + ((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) & -2147483648 | 0 | ((HEAP32[($4_1 + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) & 2147483647 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = (((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) + 397 | 0) >>> 0) % (624 >>> 0) | 0;
  $38_1 = (HEAP32[($4_1 + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) ^ ($342(HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) | 0;
  HEAP32[($4_1 + ((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $38_1 ^ Math_imul((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & 1 | 0, -1727483681) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + ((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) ^ (($343(HEAP32[($4_1 + ((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0) & -1 | 0) | 0;
  HEAP32[($4_1 + 2496 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  $67_1 = ($344(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & -1658038656 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) ^ $67_1 | 0;
  $73_1 = ($345(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & -272236544 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) ^ $73_1 | 0;
  $79_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) ^ ($346(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0;
  global$0 = $3_1 + 32 | 0;
  return $79_1 | 0;
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 1 | 0 | 0;
 }
 
 function $343($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 11 | 0 | 0;
 }
 
 function $344($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 7 | 0) & -1 | 0 | 0;
 }
 
 function $345($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 15 | 0) & -1 | 0 | 0;
 }
 
 function $346($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 18 | 0 | 0;
 }
 
 function $347($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $357((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $348($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $358($4_1 + 12 | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $360($349($5_1 | 0) | 0 | 0, $359(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    $22_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $22_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $22_1;
    continue label$2;
   };
  }
  $361($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $362((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $350($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $363($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $364($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $365($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($199($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $351($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $366($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$7_1 >> 2] = 0;
    break label$1;
   }
   $368($6_1 | 0, $367($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($369($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $352($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $370($4_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $360($367($5_1 | 0) | 0 | 0, $359(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  $371($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $27_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $372($5_1 | 0);
  $6_1 = $349($5_1 | 0) | 0;
  $373($4_1 + 16 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $373($4_1 + 12 | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
  $373($4_1 + 8 | 0 | 0, HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $374($6_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $27_1 = $375($4_1 + 20 | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27_1;
  $376($5_1 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0);
  $376($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0 | 0);
  $376($347($5_1 | 0) | 0 | 0, $369(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $377($5_1 | 0, $30($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $354($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $378($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $380($367($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $379($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $12_1 = $349($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $421($12_1 | 0, $359($15_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $357($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $381(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $358($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  return $6_1 | 0;
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $360($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $382(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $362($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $384(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $386($385(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $221() | 0;
  $15_1 = HEAP32[($222($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $223(65789 | 0);
  wasm2js_trap();
 }
 
 function $365($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($387($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $366($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $119($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $392($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $394((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $368($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $393(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $369($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $395((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $370($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $371($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $373($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $374($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $14_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $397(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  $14_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $14_1 | 0;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $378($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $417($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($419($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $380($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $418(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $382($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $383(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $383($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$5_1 >> 2] = Math_fround(0 | 0);
  return $5_1 | 0;
 }
 
 function $384($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $385($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $388((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $386($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = ($227() | 0) >>> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $387($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $390((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $388($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $389(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $389($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $390($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $391(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $391($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $392($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $393($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($386(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $240();
   wasm2js_trap();
  }
  $15_1 = $241((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $394($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $396((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $381(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $396($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $397($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
  $398($5_1 + 24 | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[(($5_1 + 24 | 0) + 4 | 0) >> 2] | 0;
  $21_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $21_1 | 0;
 }
 
 function $398($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $399($0_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $399($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $400($0_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $400($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  HEAP32[($6_1 + 52 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
  $401($6_1 + 60 | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[(($6_1 + 60 | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $402(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $403($6_1 + 44 | 0 | 0, $6_1 + 43 | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = $404(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(($6_1 + 44 | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $405(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  $406($0_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0);
  global$0 = $6_1 + 80 | 0;
  return;
 }
 
 function $401($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $407($0_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $412(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $403($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $39_1 = Math_fround(0);
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $4_1;
  HEAP32[$7_1 >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    if (!(($408($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $39_1 = Math_fround(HEAPF32[($409($7_1 + 12 | 0 | 0) | 0) >> 2]);
    HEAPF32[($410($7_1 + 4 | 0 | 0) | 0) >> 2] = $39_1;
    $411($7_1 + 12 | 0 | 0) | 0;
    $411($7_1 + 4 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $406($0_1 | 0, $7_1 + 12 | 0 | 0, $7_1 + 4 | 0 | 0);
  global$0 = $7_1 + 16 | 0;
  return;
 }
 
 function $404($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $414(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $10_1 | 0;
 }
 
 function $405($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $415(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $10_1 | 0;
 }
 
 function $406($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $413($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $407($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = $402(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $402(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $413($0_1 | 0, $5_1 + 20 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $408($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($375(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) != ($375(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $409($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $416();
  $5_1 = $410(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $410($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  $8_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -4 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  return $8_1 | 0;
 }
 
 function $411($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + -4 | 0;
  return $4_1 | 0;
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $413($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $405(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $10_1 | 0;
 }
 
 function $415($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $416() {
  
 }
 
 function $417($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $420(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $418($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $272(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $419($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $423((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $420($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $11_1 = $367($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $421($11_1 | 0, $359($14_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $422(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $422($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $423($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $391(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $424($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $33_1 = 0.0, $15_1 = 0, $39_1 = 0.0, $27_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    $33_1 = +$426(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
    label$3 : {
     label$4 : {
      if (!(Math_abs($33_1) < 2147483648.0)) {
       break label$4
      }
      $15_1 = ~~$33_1;
      break label$3;
     }
     $15_1 = -2147483648;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $15_1;
    break label$1;
   }
   $39_1 = +$427(+(+(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) - +$426(0 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0)), HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   label$5 : {
    label$6 : {
     if (!(Math_abs($39_1) < 2147483648.0)) {
      break label$6
     }
     $27_1 = ~~$39_1;
     break label$5;
    }
    $27_1 = -2147483648;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $27_1;
  }
  $30_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $30_1 | 0;
 }
 
 function $425($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  $3_1 = +$3_1;
  $4_1 = +$4_1;
  var $7_1 = 0, $14_1 = 0.0, $23_1 = 0.0;
  $7_1 = global$0 - 64 | 0;
  HEAPF64[($7_1 + 56 | 0) >> 3] = $0_1;
  HEAPF64[($7_1 + 48 | 0) >> 3] = $1_1;
  HEAPF64[($7_1 + 40 | 0) >> 3] = $2_1;
  HEAPF64[($7_1 + 32 | 0) >> 3] = $3_1;
  HEAPF64[($7_1 + 24 | 0) >> 3] = $4_1;
  HEAPF64[($7_1 + 16 | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] * +HEAPF64[($7_1 + 56 | 0) >> 3];
  HEAPF64[($7_1 + 8 | 0) >> 3] = +HEAPF64[($7_1 + 16 | 0) >> 3] * +HEAPF64[($7_1 + 56 | 0) >> 3];
  $14_1 = +HEAPF64[($7_1 + 40 | 0) >> 3];
  $23_1 = +HEAPF64[($7_1 + 48 | 0) >> 3];
  return +(.5 * ((+HEAPF64[($7_1 + 32 | 0) >> 3] * -3.0 + (+HEAPF64[($7_1 + 40 | 0) >> 3] * 3.0 + -+HEAPF64[($7_1 + 48 | 0) >> 3]) + +HEAPF64[($7_1 + 24 | 0) >> 3]) * +HEAPF64[($7_1 + 8 | 0) >> 3] + ((+HEAPF64[($7_1 + 32 | 0) >> 3] * 4.0 + ($23_1 + $23_1 + -(5.0 * +HEAPF64[($7_1 + 40 | 0) >> 3])) - +HEAPF64[($7_1 + 24 | 0) >> 3]) * +HEAPF64[($7_1 + 16 | 0) >> 3] + ($14_1 + $14_1 + (-+HEAPF64[($7_1 + 48 | 0) >> 3] + +HEAPF64[($7_1 + 32 | 0) >> 3]) * +HEAPF64[($7_1 + 56 | 0) >> 3]))));
 }
 
 function $426($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = +$428(+(+(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0)), +(+(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0)));
  global$0 = $4_1 + 16 | 0;
  return +$11_1;
 }
 
 function $427($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $10_1 = +$428(+(+HEAPF64[($4_1 + 8 | 0) >> 3]), +(+(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0)));
  global$0 = $4_1 + 16 | 0;
  return +$10_1;
 }
 
 function $428($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0, $9_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $9_1 = +$1040(+(+HEAPF64[($4_1 + 8 | 0) >> 3]), +(+HEAPF64[$4_1 >> 3]));
  global$0 = $4_1 + 16 | 0;
  return +$9_1;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $430($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $431($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $430($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $432(HEAP32[$4_1 >> 2] | 0 | 0);
   $206(HEAP32[$4_1 >> 2] | 0 | 0);
   $214($182(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $198(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $188($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $433($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $445($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $446($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $434($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $449($6_1 | 0) | 0;
  $450($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $435($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $36($7_1 | 0) | 0;
  $37($7_1 + 4 | 0 | 0, $2729($7_1 | 0) | 0 | 0) | 0;
  $39($7_1 + 2504 | 0 | 0, Math_imul(HEAP32[$6_1 >> 2] | 0, -1) | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 2512 | 0) >> 2] = 0;
  HEAP32[($7_1 + 2516 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[($7_1 + 2520 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($7_1 + 2512 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $436($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $451($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $437($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($453($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($453($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($453($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($453($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $454($440($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $439($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $440(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $440($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $455(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $441($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (48 | 0) | 0 | 0;
 }
 
 function $442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[($458($5_1 | 0) | 0) >> 2] | 0) - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0 | 0) / (48 | 0) | 0) >>> 0 >= (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $459($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $460($5_1 | 0) | 0;
   $462($4_1 | 0, $461($5_1 | 0, ($441($5_1 | 0) | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $441($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   $463($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   $464($5_1 | 0, $4_1 | 0);
   $465($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $443($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $441($5_1 | 0) | 0;
  $466($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $467($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $444($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $535(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $445($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $446($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $447($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $447($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $448($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $448($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $449($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $450($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $451($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $452($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $450($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $452($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $453($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $456(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $454($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $457($5_1 | 0) | 0;
   $2717($5_1 | 0, 2524 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $455($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $456($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $457($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $2728($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $458($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $468((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $459($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $469($4_1 + 12 | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $471($460($5_1 | 0) | 0 | 0, $470(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    $22_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 48 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $22_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $22_1;
    continue label$2;
   };
  }
  $472($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $460($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $473((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $474($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $475($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $476($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($199($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $462($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $477($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$7_1 >> 2] = 0;
    break label$1;
   }
   $479($6_1 | 0, $478($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, 48) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 48) | 0;
  HEAP32[($480($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $463($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $481($4_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $471($478($5_1 | 0) | 0 | 0, $470(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 48 | 0;
    continue label$2;
   };
  }
  $482($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $464($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $27_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $483($5_1 | 0);
  $6_1 = $460($5_1 | 0) | 0;
  $484($4_1 + 16 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $484($4_1 + 12 | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
  $484($4_1 + 8 | 0 | 0, HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $485($6_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $27_1 = $486($4_1 + 20 | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27_1;
  $487($5_1 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0);
  $487($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0 | 0);
  $487($458($5_1 | 0) | 0 | 0, $480(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $488($5_1 | 0, $441($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $465($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $489($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $491($478($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $490($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $12_1 = $460($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -48 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $532($12_1 | 0, $470($15_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $467($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $468($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $492(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $469($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 48) | 0;
  return $6_1 | 0;
 }
 
 function $470($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $471($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $493(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $473($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $495(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $474($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $497($496(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $221() | 0;
  $15_1 = HEAP32[($222($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $223(65789 | 0);
  wasm2js_trap();
 }
 
 function $476($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($498($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (48 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $477($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $445($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $503($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $478($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $505((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $479($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $504(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $480($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $506((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $481($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 48) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $482($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $483($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $484($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $485($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $14_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $508(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  $14_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $14_1 | 0;
 }
 
 function $486($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $487($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $488($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $489($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $528($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $490($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($530($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (48 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $491($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $529(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $492($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $493($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $494(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $494($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $40($5_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $495($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $496($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $499((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $497($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = (($227() | 0) >>> 0) / (48 >>> 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $498($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $501((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $499($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $500(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $500($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $501($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $502(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $502($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $503($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($497(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $240();
   wasm2js_trap();
  }
  $15_1 = $241(Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 48) | 0, 8 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $505($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $507((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $506($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $492(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $507($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $508($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
  $509($5_1 + 24 | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[(($5_1 + 24 | 0) + 4 | 0) >> 2] | 0;
  $21_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $21_1 | 0;
 }
 
 function $509($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $510($0_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $510($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $511($0_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $511($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  HEAP32[($6_1 + 52 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
  $512($6_1 + 60 | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[(($6_1 + 60 | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $513(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $514($6_1 + 44 | 0 | 0, $6_1 + 43 | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = $515(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(($6_1 + 44 | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $516(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  $517($0_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0);
  global$0 = $6_1 + 80 | 0;
  return;
 }
 
 function $512($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $518($0_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $513($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $523(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $514($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $24_1 = 0, $20_1 = 0, $25_1 = 0, $28_1 = 0, $31_1 = 0, $34_1 = 0, $37_1 = 0, $104_1 = 0, $114_1 = 0, $124_1 = 0, $134_1 = 0, $144_1 = 0, $154_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $4_1;
  HEAP32[$7_1 >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    if (!(($519($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $20_1 = $520($7_1 + 12 | 0 | 0) | 0;
    $24_1 = $521($7_1 + 4 | 0 | 0) | 0;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $104_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $24_1;
    HEAP32[i64toi32_i32$0 >> 2] = $104_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $25_1 = 40;
    i64toi32_i32$2 = i64toi32_i32$2 + $25_1 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $114_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $24_1 + $25_1 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $114_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $28_1 = 32;
    i64toi32_i32$2 = $20_1 + $28_1 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $124_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $24_1 + $28_1 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $124_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $31_1 = 24;
    i64toi32_i32$2 = $20_1 + $31_1 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $134_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $24_1 + $31_1 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $134_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $34_1 = 16;
    i64toi32_i32$2 = $20_1 + $34_1 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $144_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $24_1 + $34_1 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $144_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $37_1 = 8;
    i64toi32_i32$2 = $20_1 + $37_1 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $154_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $24_1 + $37_1 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $154_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $522($7_1 + 12 | 0 | 0) | 0;
    $522($7_1 + 4 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $517($0_1 | 0, $7_1 + 12 | 0 | 0, $7_1 + 4 | 0 | 0);
  global$0 = $7_1 + 16 | 0;
  return;
 }
 
 function $515($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $525(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $10_1 | 0;
 }
 
 function $516($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $526(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $10_1 | 0;
 }
 
 function $517($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $524($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $518($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = $513(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $513(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $524($0_1 | 0, $5_1 + 20 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $519($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($486(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) != ($486(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $520($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $527();
  $5_1 = $521(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $521($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  $8_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -48 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  return $8_1 | 0;
 }
 
 function $522($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + -48 | 0;
  return $4_1 | 0;
 }
 
 function $523($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $524($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $525($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $516(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $10_1 | 0;
 }
 
 function $526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $527() {
  
 }
 
 function $528($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $531(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $529($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $272(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 48) | 0, 8 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $530($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $534((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $531($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $11_1 = $478($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -48 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $532($11_1 | 0, $470($14_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $533(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $533($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $502(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $535($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $536($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $537($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $538(HEAP32[$4_1 >> 2] | 0 | 0);
   $483(HEAP32[$4_1 >> 2] | 0 | 0);
   $491($460(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $476(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $538($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $466($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $539($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $540($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $541($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $541($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $542($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $542($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $543($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $560((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $544($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $562((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $545($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = (($227() | 0) >>> 0) / (60 >>> 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $546($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $564(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $547($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $539($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $565($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $548($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $567((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $549($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $566(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $550($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $568((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $551($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $552($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $553($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $59_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
  $571($6_1 + 12 | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, $6_1 + 40 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  $20_1 = 8;
  HEAP32[($6_1 + $20_1 | 0) >> 2] = HEAP32[(($6_1 + 12 | 0) + $20_1 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $572($6_1 + 24 | 0 | 0, $6_1 | 0);
  label$1 : {
   label$2 : while (1) {
    if (!(($573($6_1 + 56 | 0 | 0, $6_1 + 52 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $576(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, $574($6_1 + 48 | 0 | 0) | 0 | 0, $575($6_1 + 56 | 0 | 0) | 0 | 0);
    $577($6_1 + 56 | 0 | 0) | 0;
    $577($6_1 + 48 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $578($6_1 + 24 | 0 | 0);
  HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
  $579($6_1 + 24 | 0 | 0) | 0;
  $59_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  global$0 = $6_1 + 64 | 0;
  return $59_1 | 0;
 }
 
 function $554($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $555($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $557($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $666($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $558($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($668($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (60 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $559($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $667(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $560($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $561(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $561($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $562($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $563(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $563($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $566($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($545(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $240();
   wasm2js_trap();
  }
  $15_1 = $241(Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 60) | 0, 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $567($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $569((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $570(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $569($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $570($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $571($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  return $7_1 | 0;
 }
 
 function $572($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $11_1 = 0, $44_1 = 0, $61_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  $5_1 = 8;
  HEAP32[(($4_1 + 16 | 0) + $5_1 | 0) >> 2] = HEAP32[($1_1 + $5_1 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $44_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = 8;
  HEAP32[($4_1 + $11_1 | 0) >> 2] = HEAP32[(($4_1 + 16 | 0) + $11_1 | 0) >> 2] | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $61_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[$4_1 >> 2] = $61_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $581($0_1 | 0, $4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $573($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($554(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) != ($554(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $574($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $583(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $575($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  $8_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -60 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  return $8_1 | 0;
 }
 
 function $576($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $582(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $577($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + -60 | 0;
  return $4_1 | 0;
 }
 
 function $578($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
  return;
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   if ((HEAPU8[($4_1 + 12 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $584($4_1 | 0);
  }
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $580($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $570(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $581($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $6_1 = 8;
  HEAP32[($5_1 + $6_1 | 0) >> 2] = HEAP32[($1_1 + $6_1 | 0) >> 2] | 0;
  HEAP8[($5_1 + 12 | 0) >> 0] = 0;
  return $5_1 | 0;
 }
 
 function $582($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $585(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $583($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $618($617(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $584($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  $623($3_1 + 24 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  $623($3_1 + 16 | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $624($5_1 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $586($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $586($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $38_1 = 0, $41_1 = 0, $42_1 = 0, $45_1 = 0, $146_1 = 0, $156_1 = 0, $166_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $587($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $588($5_1 + 12 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  $588($5_1 + 16 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0;
  $588($5_1 + 20 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0 | 0) | 0;
  $589($5_1 + 24 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 24 | 0 | 0) | 0;
  $589($5_1 + 28 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 28 | 0 | 0) | 0;
  $589($5_1 + 32 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 32 | 0 | 0) | 0;
  $38_1 = $5_1 + 36 | 0;
  $41_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 36 | 0;
  i64toi32_i32$2 = $41_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $146_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $38_1;
  HEAP32[i64toi32_i32$0 >> 2] = $146_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $42_1 = 16;
  i64toi32_i32$2 = i64toi32_i32$2 + $42_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $156_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $38_1 + $42_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $156_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $45_1 = 8;
  i64toi32_i32$2 = $41_1 + $45_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $166_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $38_1 + $45_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $166_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $587($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $591($5_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, $590(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $22_1 = HEAP32[($592(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($592($5_1 | 0) | 0) >> 2] = $22_1;
  HEAP32[($592(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = 0;
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $588($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $593(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $595($5_1 | 0, $4_1 + 4 | 0 | 0, $594(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $589($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $596(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $598($5_1 | 0, $4_1 + 4 | 0 | 0, $597(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $590($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $599((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $591($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $600($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $601($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $592($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $602((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $593($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($605($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($605($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $606(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $595($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $607($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $608($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $596($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($611($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($611($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $612(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $598($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $613($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $614($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $603(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $600($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $601($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $604(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $603($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $605($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $609(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $606($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $610(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $607($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $608($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $609($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $610($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $611($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $615(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $612($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $616(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $613($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $614($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $615($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $616($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $617($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $619(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $619($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $620($4_1 + 12 | 0 | 0, 0 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  $11_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $620($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $621(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $622(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $621($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $622($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 60) | 0;
  return;
 }
 
 function $623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $624($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : while (1) {
    if (!(($625($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $627(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $626($5_1 + 12 | 0 | 0) | 0 | 0);
    $628($5_1 + 12 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $625($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $629(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = $629(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = ($573($4_1 + 4 | 0 | 0, $4_1 | 0) | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $626($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $631(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $627($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $630(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $628($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $632($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $629($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $630($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $633(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $631($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $618($661(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $632($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 60 | 0;
  return $4_1 | 0;
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $634($4_1 + 32 | 0 | 0) | 0;
  $634($4_1 + 28 | 0 | 0) | 0;
  $634($4_1 + 24 | 0 | 0) | 0;
  $635($4_1 + 20 | 0 | 0) | 0;
  $635($4_1 + 16 | 0 | 0) | 0;
  $635($4_1 + 12 | 0 | 0) | 0;
  $636($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $634($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $637($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $635($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $638($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $636($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $639($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $640($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $637($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($611($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($611($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $641($612($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $638($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($605($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($605($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $646($606($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $639($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $640($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $649(HEAP32[$4_1 >> 2] | 0 | 0);
   $650(HEAP32[$4_1 >> 2] | 0 | 0);
   $652($590(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $651(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $641($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $642($5_1 | 0) | 0;
   $2717($5_1 | 0, 84 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $642($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $643($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $643($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $644($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $644($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 68452 + 8 | 0;
  $645($4_1 + 16 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $645($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $34($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $647($5_1 | 0) | 0;
   $2717($5_1 | 0, 84 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $647($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $648($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $648($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $644($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $649($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $653($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $650($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $651($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($655($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (120 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $652($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $654(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $653($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $12_1 = $590($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -120 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $657($12_1 | 0, $656($15_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $654($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $272(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 120) | 0, 8 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $655($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $659((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $656($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $657($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $658(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $658($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $660(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $660($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $661($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $662(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  $12_1 = $617($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $662($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $663($4_1 + 8 | 0 | 0, 0 - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $12_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $663($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $621(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $664(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $664($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $665(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $665($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + Math_imul(0 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0, 60) | 0;
  return $5_1 | 0;
 }
 
 function $666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $669(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $667($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $272(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 60) | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $668($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $670((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $669($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $11_1 = $548($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -60 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $627($11_1 | 0, $618($14_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $670($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $561(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $671($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 60) | 0;
  return $6_1 | 0;
 }
 
 function $672($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $675(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $673($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $674($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $84($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $85($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $83($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($199($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $675($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = $676(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $676($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $677($7_1 | 0, Math_fround(Math_fround(+HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3])), HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $677($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $32_1 = 0, $42_1 = 0, $52_1 = 0, $62_1 = 0, $157_1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 264 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 260 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 256 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 264 | 0) >> 2] | 0;
  HEAP32[($5_1 + 268 | 0) >> 2] = $6_1;
  $678($6_1 | 0) | 0;
  $679($6_1 + 12 | 0 | 0) | 0;
  $679($6_1 + 16 | 0 | 0) | 0;
  $679($6_1 + 20 | 0 | 0) | 0;
  $680($6_1 + 24 | 0 | 0) | 0;
  $680($6_1 + 28 | 0 | 0) | 0;
  $680($6_1 + 32 | 0 | 0) | 0;
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 44 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 48 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 52 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 56 | 0) >> 2] = Math_fround(1.0);
  HEAP32[($5_1 + 252 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 252 | 0) >> 2] | 0) >>> 0 < 4 >>> 0 & 1 | 0)) {
     break label$1
    }
    $681($6_1 | 0, $5_1 + 260 | 0 | 0) | 0;
    HEAP32[($5_1 + 252 | 0) >> 2] = (HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $32_1 = $107($6_1 | 0, 0 | 0) | 0;
  $682($5_1 + 192 | 0 | 0, $107($6_1 | 0, 0 | 0) | 0 | 0, +(88.3));
  $683($32_1 | 0, $5_1 + 192 | 0 | 0);
  $42_1 = $107($6_1 | 0, 1 | 0) | 0;
  $684($5_1 + 136 | 0 | 0, $107($6_1 | 0, 0 | 0) | 0 | 0, +(88.3));
  $683($42_1 | 0, $5_1 + 136 | 0 | 0);
  $52_1 = $107($6_1 | 0, 2 | 0) | 0;
  $682($5_1 + 80 | 0 | 0, $107($6_1 | 0, 0 | 0) | 0 | 0, +(2500.0));
  $683($52_1 | 0, $5_1 + 80 | 0 | 0);
  $62_1 = $107($6_1 | 0, 3 | 0) | 0;
  $684($5_1 + 24 | 0 | 0, $107($6_1 | 0, 0 | 0) | 0 | 0, +(2500.0));
  $683($62_1 | 0, $5_1 + 24 | 0 | 0);
  HEAP32[($5_1 + 20 | 0) >> 2] = $685($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $686($6_1 + 12 | 0 | 0, $5_1 + 20 | 0 | 0) | 0;
  $635($5_1 + 20 | 0 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $685($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $686($6_1 + 16 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
  $635($5_1 + 16 | 0 | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $685($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $686($6_1 + 20 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $635($5_1 + 12 | 0 | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $687($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $688($6_1 + 24 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
  $634($5_1 + 8 | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $687($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $688($6_1 + 28 | 0 | 0, $5_1 + 4 | 0 | 0) | 0;
  $634($5_1 + 4 | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = $687($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $688($6_1 + 32 | 0 | 0, $5_1 | 0) | 0;
  $634($5_1 | 0) | 0;
  $157_1 = HEAP32[($5_1 + 268 | 0) >> 2] | 0;
  global$0 = $5_1 + 272 | 0;
  return $157_1 | 0;
 }
 
 function $678($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $689($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $679($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $690($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $680($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $691($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $681($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($592($5_1 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $692($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 120 | 0;
    break label$1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $693($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $22_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -120 | 0;
  global$0 = $4_1 + 16 | 0;
  return $22_1 | 0;
 }
 
 function $682($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $6_1 = 0, $54_1 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($5_1 + 32 | 0) >> 3] / +HEAPF64[($6_1 + 56 | 0) >> 3];
  HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($5_1 + 32 | 0) >> 3];
  HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] / +$1080(+(+HEAPF64[($5_1 + 24 | 0) >> 3]));
  HEAPF64[$5_1 >> 3] = 2.0 * +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + (+HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3]);
  HEAPF64[$0_1 >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 8 | 0) >> 3] = 2.0 * (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] / +HEAPF64[$5_1 >> 3]);
  HEAPF64[($0_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] / +HEAPF64[$5_1 >> 3];
  $54_1 = +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3];
  HEAPF64[($0_1 + 24 | 0) >> 3] = (2.0 * (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3]) - ($54_1 + $54_1)) / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 32 | 0) >> 3] = (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + (-2.0 * +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3])) / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 40 | 0) >> 3] = 1.0;
  HEAPF64[($0_1 + 48 | 0) >> 3] = +(0 | 0);
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $683($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $12_1 = 0, $17_1 = 0, $22_1 = 0, $27_1 = 0, $32_1 = 0, $37_1 = 0, $44_1 = 0, $51_1 = 0, $58_1 = 0, $65_1 = 0, $72_1 = 0, $5_1 = 0, $123_1 = 0, $136_1 = 0, $149_1 = 0, $162_1 = 0, $175_1 = 0, $188_1 = 0, $192_1 = 0, $208_1 = 0, $224_1 = 0, $240_1 = 0, $256_1 = 0, $272_1 = 0, $288_1 = 0, $292_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 120 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
  $7_1 = 48;
  i64toi32_i32$2 = $6_1 + $7_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $7_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $12_1 = 40;
  i64toi32_i32$2 = $6_1 + $12_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $136_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $136_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = 32;
  i64toi32_i32$2 = $6_1 + $17_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $149_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $17_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $149_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $22_1 = 24;
  i64toi32_i32$2 = $6_1 + $22_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $162_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $22_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $162_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $27_1 = 16;
  i64toi32_i32$2 = $6_1 + $27_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $175_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $27_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $175_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $32_1 = 8;
  i64toi32_i32$2 = $6_1 + $32_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $188_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $32_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $188_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $192_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $192_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  $37_1 = 48;
  i64toi32_i32$2 = (i64toi32_i32$0 + 64 | 0) + $37_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $208_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $37_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $208_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $44_1 = 40;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $44_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $224_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $44_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $224_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $51_1 = 32;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $51_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $240_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $51_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $240_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $58_1 = 24;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $58_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $256_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $58_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $256_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $65_1 = 16;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $65_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $272_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $65_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $272_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $72_1 = 8;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $72_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $288_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $72_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $288_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $292_1 = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $292_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $694($5_1 | 0, i64toi32_i32$1 + 8 | 0 | 0, 5 | 0);
  global$0 = i64toi32_i32$1 + 128 | 0;
  return;
 }
 
 function $684($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $6_1 = 0, $54_1 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($5_1 + 32 | 0) >> 3] / +HEAPF64[($6_1 + 56 | 0) >> 3];
  HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($5_1 + 32 | 0) >> 3];
  HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] / +$1080(+(+HEAPF64[($5_1 + 24 | 0) >> 3]));
  HEAPF64[$5_1 >> 3] = 2.0 * +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + (+HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3]);
  HEAPF64[$0_1 >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3] / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 8 | 0) >> 3] = -2.0 * (+HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3]) / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3] / +HEAPF64[$5_1 >> 3];
  $54_1 = +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3];
  HEAPF64[($0_1 + 24 | 0) >> 3] = (2.0 * (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3]) - ($54_1 + $54_1)) / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 32 | 0) >> 3] = (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + (-2.0 * +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3])) / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 40 | 0) >> 3] = 1.0;
  HEAPF64[($0_1 + 48 | 0) >> 3] = +(0 | 0);
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $685($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = $2713(84 | 0) | 0;
  $695($6_1 | 0, Math_fround(Math_fround(HEAPF32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2])), HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $696($4_1 + 12 | 0 | 0, $6_1 | 0) | 0;
  $13_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $686($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $638($5_1 | 0, $593(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $594(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $606($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $687($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = $2713(84 | 0) | 0;
  $697($6_1 | 0, Math_fround(Math_fround(HEAPF32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2])), HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $698($4_1 + 12 | 0 | 0, $6_1 | 0) | 0;
  $13_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $688($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $637($5_1 | 0, $596(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $597(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $612($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $689($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $600($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $699($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $690($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $702($6_1 | 0) | 0;
  $703($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $691($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $704($6_1 | 0) | 0;
  $705($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $692($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $706($4_1 + 12 | 0 | 0, $5_1 | 0, 1 | 0) | 0;
  $707($590($5_1 | 0) | 0 | 0, $656(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 120 | 0;
  $708($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $693($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $590($5_1 | 0) | 0;
  $711($4_1 | 0, $710($5_1 | 0, ($709($5_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $709($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $707(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $656(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 120 | 0;
  $712($5_1 | 0, $4_1 | 0);
  $22_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $713($4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return $22_1 | 0;
 }
 
 function $694($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $17_1 = 0, $22_1 = 0, $27_1 = 0, $32_1 = 0, $38_1 = 0, $45_1 = 0, $52_1 = 0, $59_1 = 0, $66_1 = 0, $73_1 = 0, $6_1 = 0, $121_1 = 0, $134_1 = 0, $147_1 = 0, $160_1 = 0, $173_1 = 0, $186_1 = 0, $190_1 = 0, $37_1 = 0, $208_1 = 0, $224_1 = 0, $240_1 = 0, $256_1 = 0, $272_1 = 0, $288_1 = 0, $292_1 = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 120 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
  $7_1 = 48;
  i64toi32_i32$2 = $1_1 + $7_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $121_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 64 | 0) + $7_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $121_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $12_1 = 40;
  i64toi32_i32$2 = $1_1 + $12_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $134_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 64 | 0) + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $134_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = 32;
  i64toi32_i32$2 = $1_1 + $17_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $147_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 64 | 0) + $17_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $147_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $22_1 = 24;
  i64toi32_i32$2 = $1_1 + $22_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $160_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 64 | 0) + $22_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $160_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $27_1 = 16;
  i64toi32_i32$2 = $1_1 + $27_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $173_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 64 | 0) + $27_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $173_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $32_1 = 8;
  i64toi32_i32$2 = $1_1 + $32_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $186_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 64 | 0) + $32_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $186_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $190_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $190_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  $37_1 = HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] | 0;
  $38_1 = 48;
  i64toi32_i32$2 = (i64toi32_i32$0 + 64 | 0) + $38_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $208_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 8 | 0) + $38_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $208_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $45_1 = 40;
  i64toi32_i32$2 = ($5_1 + 64 | 0) + $45_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $224_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 8 | 0) + $45_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $224_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $52_1 = 32;
  i64toi32_i32$2 = ($5_1 + 64 | 0) + $52_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $240_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 8 | 0) + $52_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $240_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $59_1 = 24;
  i64toi32_i32$2 = ($5_1 + 64 | 0) + $59_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $256_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 8 | 0) + $59_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $256_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $66_1 = 16;
  i64toi32_i32$2 = ($5_1 + 64 | 0) + $66_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $272_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 8 | 0) + $66_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $272_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $73_1 = 8;
  i64toi32_i32$2 = ($5_1 + 64 | 0) + $73_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $288_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 8 | 0) + $73_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $288_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $292_1 = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $292_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $759($6_1 | 0, i64toi32_i32$1 + 8 | 0 | 0, $37_1 | 0);
  global$0 = i64toi32_i32$1 + 128 | 0;
  return;
 }
 
 function $695($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $782($6_1 | 0) | 0;
  HEAPF32[($6_1 + 80 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  $783($6_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $696($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $784($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $697($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $816($6_1 | 0) | 0;
  HEAPF32[($6_1 + 80 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  $783($6_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $698($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $817($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $699($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $700($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $700($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $701($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $701($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $702($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $703($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $705($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $706($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 120) | 0;
  return $6_1 | 0;
 }
 
 function $707($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $714(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $708($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $709($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (120 | 0) | 0 | 0;
 }
 
 function $710($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $721($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $722($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $651($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($199($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $711($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $723($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$7_1 >> 2] = 0;
    break label$1;
   }
   $725($6_1 | 0, $724($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, 120) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 120) | 0;
  HEAP32[($726($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $712($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $27_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $650($5_1 | 0);
  $6_1 = $590($5_1 | 0) | 0;
  $727($4_1 + 16 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $727($4_1 + 12 | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
  $727($4_1 + 8 | 0 | 0, HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $728($6_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $27_1 = $729($4_1 + 20 | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27_1;
  $730($5_1 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0);
  $730($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0 | 0);
  $730($592($5_1 | 0) | 0 | 0, $726(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $731($5_1 | 0, $709($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $713($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $732($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $652($724($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $733($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $714($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $715(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $715($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $716($6_1 | 0, +(+Math_fround(HEAPF32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2]))) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $716($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $22_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  $22_1 = 0;
  i64toi32_i32$1 = $5_1;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $717($5_1 | 0) | 0;
  HEAPF64[($5_1 + 56 | 0) >> 3] = +HEAPF64[$4_1 >> 3];
  HEAPF64[($5_1 + 64 | 0) >> 3] = 3.141592653589793;
  HEAPF64[($5_1 + 104 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 112 | 0) >> 3] = +(0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $717($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $718($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $718($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $63_1 = 0, $4_1 = 0, $17_1 = 0, $24_1 = 0, $31_1 = 0, $38_1 = 0, $45_1 = 0, $52_1 = 0, $127_1 = 0, $143_1 = 0, $159_1 = 0, $175_1 = 0, $191_1 = 0, $207_1 = 0, $211_1 = 0;
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 124 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  $63_1 = 0;
  i64toi32_i32$1 = $3_1 + 112 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 104 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 96 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 88 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 80 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 72 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = 48;
  i64toi32_i32$2 = (i64toi32_i32$1 + 64 | 0) + $17_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $127_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 8 | 0) + $17_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $127_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $24_1 = 40;
  i64toi32_i32$2 = ($3_1 + 64 | 0) + $24_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 8 | 0) + $24_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $143_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $31_1 = 32;
  i64toi32_i32$2 = ($3_1 + 64 | 0) + $31_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $159_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 8 | 0) + $31_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $159_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $38_1 = 24;
  i64toi32_i32$2 = ($3_1 + 64 | 0) + $38_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $175_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 8 | 0) + $38_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $175_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $45_1 = 16;
  i64toi32_i32$2 = ($3_1 + 64 | 0) + $45_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $191_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 8 | 0) + $45_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $191_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $52_1 = 8;
  i64toi32_i32$2 = ($3_1 + 64 | 0) + $52_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $207_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 8 | 0) + $52_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $207_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
  $211_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $211_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  $719($4_1 | 0, i64toi32_i32$0 + 8 | 0 | 0) | 0;
  global$0 = i64toi32_i32$0 + 128 | 0;
  return $4_1 | 0;
 }
 
 function $719($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $11_1 = 0, $16_1 = 0, $21_1 = 0, $26_1 = 0, $31_1 = 0, $36_1 = 0, $43_1 = 0, $50_1 = 0, $57_1 = 0, $64_1 = 0, $71_1 = 0, $117_1 = 0, $130_1 = 0, $143_1 = 0, $156_1 = 0, $169_1 = 0, $182_1 = 0, $186_1 = 0, $202_1 = 0, $218_1 = 0, $234_1 = 0, $250_1 = 0, $266_1 = 0, $282_1 = 0, $286_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 124 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  $6_1 = 48;
  i64toi32_i32$2 = $1_1 + $6_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $117_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $6_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $117_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = 40;
  i64toi32_i32$2 = $1_1 + $11_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $130_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $11_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $130_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $16_1 = 32;
  i64toi32_i32$2 = $1_1 + $16_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $16_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $143_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $21_1 = 24;
  i64toi32_i32$2 = $1_1 + $21_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $156_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $21_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $156_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $26_1 = 16;
  i64toi32_i32$2 = $1_1 + $26_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $169_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $26_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $169_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $31_1 = 8;
  i64toi32_i32$2 = $1_1 + $31_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $182_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $31_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $182_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $186_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $186_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  $36_1 = 48;
  i64toi32_i32$2 = (i64toi32_i32$0 + 64 | 0) + $36_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $202_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $36_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $202_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $43_1 = 40;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $43_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $218_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $43_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $218_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $50_1 = 32;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $50_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $234_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $50_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $234_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $57_1 = 24;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $57_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $250_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $57_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $250_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $64_1 = 16;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $64_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $266_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $64_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $266_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $71_1 = 8;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $71_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $282_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $71_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $282_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $286_1 = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $286_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $720($5_1 | 0, i64toi32_i32$1 + 8 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 128 | 0;
  return $5_1 | 0;
 }
 
 function $720($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $9_1 = 0, $12_1 = 0, $15_1 = 0, $18_1 = 0, $21_1 = 0, $42_1 = 0, $52_1 = 0, $62_1 = 0, $72_1 = 0, $82_1 = 0, $92_1 = 0, $102_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $42_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $6_1 = 48;
  i64toi32_i32$2 = i64toi32_i32$2 + $6_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $6_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $9_1 = 40;
  i64toi32_i32$2 = $1_1 + $9_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $62_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $9_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $62_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $12_1 = 32;
  i64toi32_i32$2 = $1_1 + $12_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $72_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $72_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $15_1 = 24;
  i64toi32_i32$2 = $1_1 + $15_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $15_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $18_1 = 16;
  i64toi32_i32$2 = $1_1 + $18_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $92_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $18_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $92_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $21_1 = 8;
  i64toi32_i32$2 = $1_1 + $21_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $102_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $21_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $102_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return $5_1 | 0;
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $735($734(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $221() | 0;
  $15_1 = HEAP32[($222($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $722($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $223(65789 | 0);
  wasm2js_trap();
 }
 
 function $723($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $600($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $738($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $724($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $740((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $725($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $739(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $726($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $741((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $727($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $728($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $59_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
  $743($6_1 + 12 | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, $6_1 + 40 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  $20_1 = 8;
  HEAP32[($6_1 + $20_1 | 0) >> 2] = HEAP32[(($6_1 + 12 | 0) + $20_1 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $744($6_1 + 24 | 0 | 0, $6_1 | 0);
  label$1 : {
   label$2 : while (1) {
    if (!(($745($6_1 + 56 | 0 | 0, $6_1 + 52 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $748(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, $746($6_1 + 48 | 0 | 0) | 0 | 0, $747($6_1 + 56 | 0 | 0) | 0 | 0);
    $749($6_1 + 56 | 0 | 0) | 0;
    $749($6_1 + 48 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $750($6_1 + 24 | 0 | 0);
  HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
  $751($6_1 + 24 | 0 | 0) | 0;
  $59_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  global$0 = $6_1 + 64 | 0;
  return $59_1 | 0;
 }
 
 function $729($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $730($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $731($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $732($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $778($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $733($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($779($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (120 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $734($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $736((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = (($227() | 0) >>> 0) / (120 >>> 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $736($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $737(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $737($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $738($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $739($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($735(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $240();
   wasm2js_trap();
  }
  $15_1 = $241(Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 120) | 0, 8 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $740($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $742((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $741($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $604(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $742($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $743($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  return $7_1 | 0;
 }
 
 function $744($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $11_1 = 0, $44_1 = 0, $61_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  $5_1 = 8;
  HEAP32[(($4_1 + 16 | 0) + $5_1 | 0) >> 2] = HEAP32[($1_1 + $5_1 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $44_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = 8;
  HEAP32[($4_1 + $11_1 | 0) >> 2] = HEAP32[(($4_1 + 16 | 0) + $11_1 | 0) >> 2] | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $61_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[$4_1 >> 2] = $61_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $752($0_1 | 0, $4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($729(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) != ($729(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $746($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $754(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $747($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  $8_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -120 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  return $8_1 | 0;
 }
 
 function $748($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $753(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $749($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + -120 | 0;
  return $4_1 | 0;
 }
 
 function $750($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
  return;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   if ((HEAPU8[($4_1 + 12 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $755($4_1 | 0);
  }
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $752($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $6_1 = 8;
  HEAP32[($5_1 + $6_1 | 0) >> 2] = HEAP32[($1_1 + $6_1 | 0) >> 2] | 0;
  HEAP8[($5_1 + 12 | 0) >> 0] = 0;
  return $5_1 | 0;
 }
 
 function $753($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $756(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $754($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $656($761(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $755($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  $765($3_1 + 24 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  $765($3_1 + 16 | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $766($5_1 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $756($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $757($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $757($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $81_1 = 0, $25_1 = 0, $26_1 = 0, $34_1 = 0, $41_1 = 0, $48_1 = 0, $55_1 = 0, $62_1 = 0, $69_1 = 0, $167_1 = 0, $177_1 = 0, $202_1 = 0, $218_1 = 0, $234_1 = 0, $250_1 = 0, $266_1 = 0, $282_1 = 0, $286_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 120 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  $81_1 = 0;
  i64toi32_i32$1 = $5_1;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $717($5_1 | 0) | 0;
  HEAPF64[($5_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 120 | 0) >> 2] | 0) + 56 | 0) >> 3];
  HEAPF64[($5_1 + 64 | 0) >> 3] = 3.141592653589793;
  HEAPF64[($5_1 + 104 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 112 | 0) >> 3] = +(0 | 0);
  $25_1 = $5_1 + 104 | 0;
  i64toi32_i32$2 = (HEAP32[($4_1 + 120 | 0) >> 2] | 0) + 104 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $167_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $25_1;
  HEAP32[i64toi32_i32$0 >> 2] = $167_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $26_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $26_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $177_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $25_1 + $26_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $177_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $758($4_1 + 64 | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, 5 | 0);
  $34_1 = 48;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $34_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $202_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $34_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $202_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $41_1 = 40;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $41_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $218_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $41_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $218_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $48_1 = 32;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $48_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $234_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $48_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $234_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $55_1 = 24;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $55_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $250_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $55_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $250_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $62_1 = 16;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $62_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $266_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $62_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $266_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $69_1 = 8;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $69_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $282_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $69_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $282_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
  $286_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $286_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  $694($5_1 | 0, i64toi32_i32$0 + 8 | 0 | 0, 5 | 0);
  global$0 = i64toi32_i32$0 + 128 | 0;
  return $5_1 | 0;
 }
 
 function $758($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $760($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $759($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $8_1 = 0, $11_1 = 0, $14_1 = 0, $17_1 = 0, $20_1 = 0, $23_1 = 0, $6_1 = 0, $7_1 = 0, $59_1 = 0, $69_1 = 0, $79_1 = 0, $89_1 = 0, $99_1 = 0, $109_1 = 0, $113_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
  $8_1 = 48;
  i64toi32_i32$2 = $1_1 + $8_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $59_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $8_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $59_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = 40;
  i64toi32_i32$2 = $1_1 + $11_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $69_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $11_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $69_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $14_1 = 32;
  i64toi32_i32$2 = $1_1 + $14_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $79_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $14_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $79_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $17_1 = 24;
  i64toi32_i32$2 = $1_1 + $17_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $89_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $17_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $89_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $20_1 = 16;
  i64toi32_i32$2 = $1_1 + $20_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $99_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $20_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $99_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $23_1 = 8;
  i64toi32_i32$2 = $1_1 + $23_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $109_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $23_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $109_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1094(56 | 0, $6_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0);
  global$0 = i64toi32_i32$0 + 64 | 0;
  return;
 }
 
 function $760($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $10_1 = 0, $13_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, $25_1 = 0, $58_1 = 0, $68_1 = 0, $78_1 = 0, $88_1 = 0, $98_1 = 0, $108_1 = 0, $118_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $2_1;
  $1093(56 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, $5_1 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $58_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $58_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $10_1 = 48;
  i64toi32_i32$2 = $5_1 + $10_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $68_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $10_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $68_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $13_1 = 40;
  i64toi32_i32$2 = $5_1 + $13_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $78_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + $13_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $78_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $16_1 = 32;
  i64toi32_i32$2 = $5_1 + $16_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $88_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $16_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $19_1 = 24;
  i64toi32_i32$2 = $5_1 + $19_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $98_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + $19_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $98_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $22_1 = 16;
  i64toi32_i32$2 = $5_1 + $22_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $108_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $22_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $108_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $25_1 = 8;
  i64toi32_i32$2 = $5_1 + $25_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $118_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + $25_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $118_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $761($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $762(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $762($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $763($4_1 + 12 | 0 | 0, 0 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  $11_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $763($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $621(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $764(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $764($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 120) | 0;
  return;
 }
 
 function $765($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $766($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : while (1) {
    if (!(($767($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $657(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $768($5_1 + 12 | 0 | 0) | 0 | 0);
    $769($5_1 + 12 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $767($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $770(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = $770(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = ($745($4_1 + 4 | 0 | 0, $4_1 | 0) | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $768($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $771(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $769($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $772($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $770($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $771($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $656($773(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $772($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 120 | 0;
  return $4_1 | 0;
 }
 
 function $773($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $774(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  $12_1 = $761($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $775($4_1 + 8 | 0 | 0, 0 - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $12_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $775($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $621(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $776(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $776($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $777(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $777($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + Math_imul(0 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0, 120) | 0;
  return $5_1 | 0;
 }
 
 function $778($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $780(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $779($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $781((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $780($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $11_1 = $724($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -120 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $657($11_1 | 0, $656($14_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $660(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $782($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $785($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 68480 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $783($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $786($5_1 + 16 | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 60 | 0) >> 2])));
  $787($5_1 | 0);
  $788($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $784($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $815($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $703($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $785($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 68452 + 8 | 0;
  $789($4_1 + 16 | 0 | 0) | 0;
  HEAPF32[($4_1 + 60 | 0) >> 2] = Math_fround(44100.0);
  HEAPF32[($4_1 + 64 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 68 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($4_1 + 72 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($4_1 + 76 | 0) >> 2] = Math_fround(100.0);
  $787($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $786($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(+Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]) * -2.0 * 1.0e3 / +Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
  $795($5_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2])));
  $796($5_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])));
  $64($5_1 | 0, 1 | 0);
  $804($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $787($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(+$1047(+(10.0), +(+Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]) / 20.0)));
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]));
  $795($4_1 + 16 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2])));
  $796($4_1 + 16 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2])));
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $788($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $804((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $789($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8($4_1 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 1194083328;
  HEAP32[($4_1 + 16 | 0) >> 2] = -1106155405;
  HEAP32[($4_1 + 20 | 0) >> 2] = 1065353216;
  HEAP32[($4_1 + 24 | 0) >> 2] = 1120403456;
  $9_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $9_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = $9_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $9_1;
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(+$1027(+(-1.0)));
  $795($4_1 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2])));
  $796($4_1 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2])));
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $790($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0, $58_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround($791($6_1 + 16 | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]))));
  HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(9.999999974752427e-07);
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($792($5_1 + 32 | 0 | 0, $5_1 + 28 | 0 | 0) | 0) >> 2]);
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(1.0);
  label$1 : {
   if (!(Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]) < Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) & 1 | 0)) {
    break label$1
   }
   HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(0 | 0);
   HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) - Math_fround(1.0));
   HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($792($5_1 + 16 | 0 | 0, $5_1 + 12 | 0 | 0) | 0) >> 2]);
   HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround($793(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) / Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))));
   HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(40.0);
   HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($794($5_1 + 24 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2]);
  }
  $58_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]));
  global$0 = $5_1 + 48 | 0;
  return Math_fround($58_1);
 }
 
 function $791($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0, $36_1 = Math_fround(0), $39_1 = Math_fround(0), $46_1 = Math_fround(0), $50_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]));
    break label$1;
   }
   HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($799(Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]))));
  }
  label$3 : {
   label$4 : {
    if (!(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) > Math_fround(HEAPF32[($31($6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$4
    }
    $36_1 = Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2]);
    break label$3;
   }
   $36_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
  }
  HEAPF32[($5_1 + 12 | 0) >> 2] = $36_1;
  $39_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($31($6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]))) + $39_1);
  $46_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  HEAPF32[($31($6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] = $46_1;
  label$5 : {
   label$6 : {
    if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround($800(Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))));
    break label$5;
   }
   HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  }
  $50_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
  global$0 = $5_1 + 32 | 0;
  return Math_fround($50_1);
 }
 
 function $792($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $801(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $793($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $9_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = Math_fround($1057(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $794($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $802(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $795($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround($797($5_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $796($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround($797($5_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $797($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $15_1 = Math_fround(0), $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) < Math_fround(1.0000000474974513e-03) & 1 | 0)) {
     break label$2
    }
    $15_1 = Math_fround(0 | 0);
    break label$1;
   }
   $15_1 = Math_fround($798(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) / Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])))));
  }
  global$0 = $4_1 + 16 | 0;
  return Math_fround($15_1);
 }
 
 function $798($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($1037(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $799($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
 }
 
 function $800($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(Math_sqrt(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
 }
 
 function $801($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($803($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $802($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($803($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $803($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return Math_fround(HEAPF32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2]) < Math_fround(HEAPF32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2]) & 1 | 0 | 0;
 }
 
 function $804($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $805(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(0 | 0)));
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $805($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $806(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $807(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!(($808($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = $809($4_1 + 16 | 0 | 0) | 0;
    HEAPF32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
    $810($4_1 + 16 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $806($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $811($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $807($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $811($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $808($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($812(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $809($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $810($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
  return $4_1 | 0;
 }
 
 function $811($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $813($4_1 + 12 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $812($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($814(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == ($814(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $813($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $814($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $815($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $816($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $785($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 68512 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $817($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $819($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $705($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $818($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0, $20_1 = Math_fround(0), $31_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($791($6_1 + 16 | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))));
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) < Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) & 1 | 0)) {
     break label$2
    }
    $20_1 = Math_fround(1.0);
    break label$1;
   }
   $20_1 = Math_fround($793(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) - Math_fround(1.0)))));
  }
  HEAPF32[($5_1 + 12 | 0) >> 2] = $20_1;
  $31_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]));
  global$0 = $5_1 + 32 | 0;
  return Math_fround($31_1);
 }
 
 function $819($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $822($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $828(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $823($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 72 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $787($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $824($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 76 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $787($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $825($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 64 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $787($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $826($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 68 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $787($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $827($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $829(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $828($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $829($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $830($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $8_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = Math_fround(+$831(10 | 0, +(+Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) / 20.0)));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($8_1);
 }
 
 function $831($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $10_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $10_1 = +$832(+(+(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0)), +(+HEAPF64[$4_1 >> 3]));
  global$0 = $4_1 + 16 | 0;
  return +$10_1;
 }
 
 function $832($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0, $9_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $9_1 = +$1047(+(+HEAPF64[($4_1 + 8 | 0) >> 3]), +(+HEAPF64[$4_1 >> 3]));
  global$0 = $4_1 + 16 | 0;
  return +$9_1;
 }
 
 function $833($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0;
 }
 
 function $834($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $835($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $835($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $12_1 = $86($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -60 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $627($12_1 | 0, $618($15_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $836($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $355($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $837($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $8_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $23_1 = 0, $24_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $36_1 = 0, $38_1 = 0, $198_1 = 0, $40_1 = 0, $41_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $226_1 = 0, $49_1 = 0, $243_1 = 0, $51_1 = 0, $52_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $271_1 = 0, $58_1 = 0, $285_1 = 0, $60_1 = 0, $61_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $313_1 = 0, $71_1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
  $839();
  $4_1 = 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 72 | 0) >> 2] = 7;
  HEAP32[($3_1 + 68 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 64 | 0) >> 2] = 8;
  HEAP32[($3_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 56 | 0) >> 2] = 9;
  $8_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
  HEAP32[($3_1 + 104 | 0) >> 2] = $3_1 + 55 | 0;
  HEAP32[($3_1 + 100 | 0) >> 2] = $8_1;
  $842();
  HEAP32[($3_1 + 96 | 0) >> 2] = 10;
  HEAP32[($3_1 + 92 | 0) >> 2] = $844() | 0;
  HEAP32[($3_1 + 88 | 0) >> 2] = $845() | 0;
  HEAP32[($3_1 + 84 | 0) >> 2] = 11;
  $15_1 = $847() | 0;
  $16_1 = $848() | 0;
  $17_1 = $849() | 0;
  $18_1 = $850() | 0;
  HEAP32[($3_1 + 232 | 0) >> 2] = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  $20_1 = $851() | 0;
  $21_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  HEAP32[($3_1 + 240 | 0) >> 2] = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
  $23_1 = $852() | 0;
  $24_1 = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
  HEAP32[($3_1 + 236 | 0) >> 2] = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
  $26_1 = $852() | 0;
  $27_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
  $28_1 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
  HEAP32[($3_1 + 244 | 0) >> 2] = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
  fimport$10($15_1 | 0, $16_1 | 0, $17_1 | 0, $18_1 | 0, $20_1 | 0, $21_1 | 0, $23_1 | 0, $24_1 | 0, $26_1 | 0, $27_1 | 0, $28_1 | 0, $853() | 0 | 0, HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 108 | 0) >> 2] = $3_1 + 55 | 0;
  HEAP32[($3_1 + 252 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
  HEAP32[($3_1 + 248 | 0) >> 2] = 12;
  $36_1 = HEAP32[($3_1 + 252 | 0) >> 2] | 0;
  $855(HEAP32[($3_1 + 248 | 0) >> 2] | 0 | 0);
  $38_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
  HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $38_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
  $198_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 112 | 0) >> 2] = $198_1;
  HEAP32[($3_1 + 116 | 0) >> 2] = i64toi32_i32$1;
  $40_1 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
  $41_1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
  HEAP32[($3_1 + 140 | 0) >> 2] = $36_1;
  HEAP32[($3_1 + 136 | 0) >> 2] = 66019;
  HEAP32[($3_1 + 132 | 0) >> 2] = $41_1;
  HEAP32[($3_1 + 128 | 0) >> 2] = $40_1;
  $43_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
  $44_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
  $45_1 = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
  HEAP32[($3_1 + 124 | 0) >> 2] = HEAP32[($3_1 + 132 | 0) >> 2] | 0;
  HEAP32[($3_1 + 120 | 0) >> 2] = $45_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
  $226_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $226_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $856($44_1 | 0, $3_1 + 8 | 0 | 0);
  $49_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = $49_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  $243_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 144 | 0) >> 2] = $243_1;
  HEAP32[($3_1 + 148 | 0) >> 2] = i64toi32_i32$1;
  $51_1 = HEAP32[($3_1 + 144 | 0) >> 2] | 0;
  $52_1 = HEAP32[($3_1 + 148 | 0) >> 2] | 0;
  HEAP32[($3_1 + 172 | 0) >> 2] = $43_1;
  HEAP32[($3_1 + 168 | 0) >> 2] = 66238;
  HEAP32[($3_1 + 164 | 0) >> 2] = $52_1;
  HEAP32[($3_1 + 160 | 0) >> 2] = $51_1;
  $54_1 = HEAP32[($3_1 + 172 | 0) >> 2] | 0;
  $55_1 = HEAP32[($3_1 + 168 | 0) >> 2] | 0;
  $56_1 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
  HEAP32[($3_1 + 156 | 0) >> 2] = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
  HEAP32[($3_1 + 152 | 0) >> 2] = $56_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
  $271_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = $271_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $857($55_1 | 0, $3_1 | 0);
  $58_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
  HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $58_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
  $285_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 176 | 0) >> 2] = $285_1;
  HEAP32[($3_1 + 180 | 0) >> 2] = i64toi32_i32$1;
  $60_1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
  $61_1 = HEAP32[($3_1 + 180 | 0) >> 2] | 0;
  HEAP32[($3_1 + 204 | 0) >> 2] = $54_1;
  HEAP32[($3_1 + 200 | 0) >> 2] = 66240;
  HEAP32[($3_1 + 196 | 0) >> 2] = $61_1;
  HEAP32[($3_1 + 192 | 0) >> 2] = $60_1;
  $63_1 = HEAP32[($3_1 + 204 | 0) >> 2] | 0;
  $64_1 = HEAP32[($3_1 + 200 | 0) >> 2] | 0;
  $65_1 = HEAP32[($3_1 + 192 | 0) >> 2] | 0;
  HEAP32[($3_1 + 188 | 0) >> 2] = HEAP32[($3_1 + 196 | 0) >> 2] | 0;
  HEAP32[($3_1 + 184 | 0) >> 2] = $65_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 184 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 188 | 0) >> 2] | 0;
  $313_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $313_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $858($64_1 | 0, $3_1 + 16 | 0 | 0);
  HEAP32[($3_1 + 216 | 0) >> 2] = $63_1;
  HEAP32[($3_1 + 212 | 0) >> 2] = 65758;
  HEAP32[($3_1 + 208 | 0) >> 2] = 13;
  $71_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
  $860(HEAP32[($3_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 208 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 228 | 0) >> 2] = $71_1;
  HEAP32[($3_1 + 224 | 0) >> 2] = 65754;
  HEAP32[($3_1 + 220 | 0) >> 2] = 14;
  $862(HEAP32[($3_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 220 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 256 | 0;
  return;
 }
 
 function $838($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $19_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 15;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $10_1 = $864($4_1 + 19 | 0 | 0) | 0;
  $14_1 = $865($4_1 + 19 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $19_1 = 0;
  fimport$11($6_1 | 0, $10_1 | 0, $14_1 | 0, $866() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $19_1 & 1 | 0 | 0, $19_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $839() {
  label$1 : {
   label$2 : {
    if (!((HEAPU8[(0 + 96084 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP8[(0 + 96084 | 0) >> 0] = 1;
   fimport$12($867() | 0 | 0, $868() | 0 | 0);
  }
  return;
 }
 
 function $840($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($347($5_1 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $869($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0;
    break label$1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $870($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $841($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $30($6_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $871($6_1 | 0, (HEAP32[($5_1 + 8 | 0) >> 2] | 0) - (HEAP32[$5_1 >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 > (HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $328($6_1 | 0, (HEAP32[$6_1 >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
   }
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $842() {
  
 }
 
 function $843($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $882(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $844() {
  return 0 | 0;
 }
 
 function $845() {
  return 0 | 0;
 }
 
 function $846($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $34($4_1 | 0) | 0;
   $2717($4_1 | 0, 12 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $847() {
  return $883() | 0 | 0;
 }
 
 function $848() {
  return $884() | 0 | 0;
 }
 
 function $849() {
  return $885() | 0 | 0;
 }
 
 function $850() {
  return 0 | 0;
 }
 
 function $851() {
  return 69198 | 0;
 }
 
 function $852() {
  return 69201 | 0;
 }
 
 function $853() {
  return 69203 | 0;
 }
 
 function $854() {
  var $1_1 = 0;
  $1_1 = $2713(12 | 0) | 0;
  $8($1_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $855($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[$3_1 >> 2] = 16;
  $5_1 = $847() | 0;
  $9_1 = $887($3_1 + 7 | 0 | 0) | 0;
  $13_1 = $888($3_1 + 7 | 0 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
  fimport$13($5_1 | 0, $9_1 | 0, $13_1 | 0, $851() | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $856($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 17;
  $8_1 = $847() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $892($4_1 + 11 | 0 | 0) | 0;
  $17_1 = $893($4_1 + 11 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $26_1 = 0;
  fimport$14($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $894() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $895($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0, $26_1 & 1 | 0 | 0, $26_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $857($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 18;
  $8_1 = $847() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $900($4_1 + 11 | 0 | 0) | 0;
  $17_1 = $901($4_1 + 11 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $26_1 = 0;
  fimport$14($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $902() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $903($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0, $26_1 & 1 | 0 | 0, $26_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $858($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 19;
  $8_1 = $847() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $907($4_1 + 11 | 0 | 0) | 0;
  $17_1 = $908($4_1 + 11 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $26_1 = 0;
  fimport$14($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $909() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $910($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0, $26_1 & 1 | 0 | 0, $26_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $859($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < ($30(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $873($0_1 | 0, $872(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
    break label$1;
   }
   $874($0_1 | 0) | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $24_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 20;
  $6_1 = $847() | 0;
  $7_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $11_1 = $915($4_1 + 19 | 0 | 0) | 0;
  $15_1 = $916($4_1 + 19 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $24_1 = 0;
  fimport$14($6_1 | 0, $7_1 | 0, $11_1 | 0, $15_1 | 0, $917() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $918($4_1 + 20 | 0 | 0) | 0 | 0, 0 | 0, $24_1 & 1 | 0 | 0, $24_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $861($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $15_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $15_1 = Math_fround(HEAPF32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2]);
  HEAPF32[($31(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = $15_1;
  global$0 = $5_1 + 16 | 0;
  return 1 & 1 | 0 | 0;
 }
 
 function $862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $24_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 21;
  $6_1 = $847() | 0;
  $7_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $11_1 = $956($4_1 + 19 | 0 | 0) | 0;
  $15_1 = $957($4_1 + 19 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $24_1 = 0;
  fimport$14($6_1 | 0, $7_1 | 0, $11_1 | 0, $15_1 | 0, $958() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $959($4_1 + 20 | 0 | 0) | 0 | 0, 0 | 0, $24_1 & 1 | 0 | 0, $24_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $863($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $12_1 = 0, $35_1 = 0;
  $11_1 = global$0 - 64 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 28 | 0) >> 2] = $8_1;
  $12_1 = HEAP32[($11_1 + 60 | 0) >> 2] | 0;
  FUNCTION_TABLE[$12_1 | 0]($11_1 + 16 | 0, $962(HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0) | 0, $962(HEAP32[($11_1 + 52 | 0) >> 2] | 0 | 0) | 0, $962(HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0) | 0, $962(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) | 0, $962(HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0) | 0, $962(HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0, $962(HEAP32[($11_1 + 32 | 0) >> 2] | 0 | 0) | 0, $962(HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) | 0);
  $35_1 = $963($11_1 + 16 | 0 | 0) | 0;
  $34($11_1 + 16 | 0 | 0) | 0;
  global$0 = $11_1 + 64 | 0;
  return $35_1 | 0;
 }
 
 function $864($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 9 | 0;
 }
 
 function $865($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $964() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $866() {
  return 69364 | 0;
 }
 
 function $867() {
  return $875() | 0 | 0;
 }
 
 function $868() {
  return $876() | 0 | 0;
 }
 
 function $869($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $358($4_1 + 12 | 0 | 0, $5_1 | 0, 1 | 0) | 0;
  $877($349($5_1 | 0) | 0 | 0, $359(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 4 | 0;
  $361($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $870($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $349($5_1 | 0) | 0;
  $351($4_1 | 0, $350($5_1 | 0, ($30($5_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $30($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $877(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $359(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0;
  $353($5_1 | 0, $4_1 | 0);
  $22_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $354($4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return $22_1 | 0;
 }
 
 function $871($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[($347($6_1 | 0) | 0) >> 2] | 0) - (HEAP32[($6_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 >= (HEAP32[($5_1 + 40 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $880($6_1 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP32[($5_1 + 32 | 0) >> 2] = $349($6_1 | 0) | 0;
   $351($5_1 + 12 | 0 | 0, $350($6_1 | 0, ($30($6_1 | 0) | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $30($6_1 | 0) | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   $881($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
   $353($6_1 | 0, $5_1 + 12 | 0 | 0);
   $354($5_1 + 12 | 0 | 0) | 0;
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $872($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function $873($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $943($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $874($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $944($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $875() {
  return 68548 | 0;
 }
 
 function $876() {
  return 95020 | 0;
 }
 
 function $877($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $878(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $878($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $879(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $879($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$6_1 >> 2] = Math_fround(HEAPF32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2]);
  return $6_1 | 0;
 }
 
 function $880($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $24_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $358($5_1 + 8 | 0 | 0, $6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $877($349($6_1 | 0) | 0 | 0, $359(HEAP32[$5_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    $24_1 = (HEAP32[$5_1 >> 2] | 0) + 4 | 0;
    HEAP32[$5_1 >> 2] = $24_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $24_1;
    continue label$2;
   };
  }
  $361($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $881($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $370($5_1 + 8 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $877($367($6_1 | 0) | 0 | 0, $359(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  $371($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $882($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 69044 | 0;
 }
 
 function $883() {
  return 69044 | 0;
 }
 
 function $884() {
  return 69088 | 0;
 }
 
 function $885() {
  return 69144 | 0;
 }
 
 function $886($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $889(FUNCTION_TABLE[HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0]() | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $887($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1 | 0;
 }
 
 function $888($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $890() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $889($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $890() {
  return 69208 | 0;
 }
 
 function $891($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $13_1 = 0, $19_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  $7_1 = $896(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
  $10_1 = HEAP32[$8_1 >> 2] | 0;
  $13_1 = $7_1 + ($9_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($9_1 & 1 | 0)) {
     break label$2
    }
    $19_1 = HEAP32[((HEAP32[$13_1 >> 2] | 0) + $10_1 | 0) >> 2] | 0;
    break label$1;
   }
   $19_1 = $10_1;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($897(Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]))));
  FUNCTION_TABLE[$19_1 | 0]($13_1, $5_1);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $892($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $893($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $898() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $894() {
  return 69224 | 0;
 }
 
 function $895($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2713(8 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $896($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $897($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
 }
 
 function $898() {
  return 69212 | 0;
 }
 
 function $899($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $14_1 = 0, $20_1 = 0, $8_1 = 0, $23_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 16 | 0) >> 2] = $3_1;
  $8_1 = $896(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $10_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
  $11_1 = HEAP32[$9_1 >> 2] | 0;
  $14_1 = $8_1 + ($10_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($10_1 & 1 | 0)) {
     break label$2
    }
    $20_1 = HEAP32[((HEAP32[$14_1 >> 2] | 0) + $11_1 | 0) >> 2] | 0;
    break label$1;
   }
   $20_1 = $11_1;
  }
  $23_1 = $904(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround($897(Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]))));
  FUNCTION_TABLE[$20_1 | 0]($14_1, $23_1, $6_1 + 12 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $900($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $901($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $905() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $902() {
  return 69248 | 0;
 }
 
 function $903($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2713(8 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $904($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $905() {
  return 69232 | 0;
 }
 
 function $906($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $18_1 = 0, $6_1 = 0, $24_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $911(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  $9_1 = HEAP32[$7_1 >> 2] | 0;
  $12_1 = $6_1 + ($8_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($8_1 & 1 | 0)) {
     break label$2
    }
    $18_1 = HEAP32[((HEAP32[$12_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0;
    break label$1;
   }
   $18_1 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = FUNCTION_TABLE[$18_1 | 0]($12_1) | 0;
  $24_1 = $912($4_1 + 4 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $24_1 | 0;
 }
 
 function $907($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $908($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $913() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $909() {
  return 69264 | 0;
 }
 
 function $910($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2713(8 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $911($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $912($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $913() {
  return 69256 | 0;
 }
 
 function $914($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $7_1 = HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  FUNCTION_TABLE[$7_1 | 0]($5_1 + 12 | 0, $919(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0, $904(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0);
  i64toi32_i32$1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $15_1 = $920($5_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $15_1 | 0;
 }
 
 function $915($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $916($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $921() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $917() {
  return 69280 | 0;
 }
 
 function $918($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2713(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $919($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $920($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $28_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!(($922($0_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $924($3_1 + 16 | 0 | 0, $923($0_1 | 0) | 0 | 0) | 0;
    HEAP32[($3_1 + 28 | 0) >> 2] = $925($3_1 + 16 | 0 | 0) | 0;
    $926($3_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   $927($3_1 + 4 | 0 | 0);
   HEAP32[($3_1 + 28 | 0) >> 2] = $925($3_1 + 4 | 0 | 0) | 0;
   $926($3_1 + 4 | 0 | 0) | 0;
  }
  $28_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $28_1 | 0;
 }
 
 function $921() {
  return 69268 | 0;
 }
 
 function $922($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = ($928(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $923($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $930(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $924($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $931($4_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $934($5_1 | 0, fimport$15($932() | 0 | 0, $933($4_1 | 0) | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $925($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = $929(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $926($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   if (!(($935($4_1 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   fimport$16($936($4_1 | 0) | 0 | 0);
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  }
  $10_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $927($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $934($0_1 | 0, 2 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $928($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $929($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $936($4_1 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $930($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $931($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $937($5_1 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $4_1 + 12 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
  $939(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($938(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0))));
  $940(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $932() {
  return $941() | 0 | 0;
 }
 
 function $933($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $942(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $934($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $1063() | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $935($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 > 8 >>> 0 & 1 | 0 | 0;
 }
 
 function $936($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $937($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $938($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2]));
 }
 
 function $939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 8 | 0;
  return;
 }
 
 function $940($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $941() {
  return 95020 | 0;
 }
 
 function $942($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $943($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $945($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $944($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $950($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $945($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $946($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $946($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $947($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $947($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $948($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $948($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $949($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $949($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2]);
  HEAP8[($5_1 + 4 | 0) >> 0] = 1;
  return $5_1 | 0;
 }
 
 function $950($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $951($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $951($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $952($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $952($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $953($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $953($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $954($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $954($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[$4_1 >> 0] = 0;
  HEAP8[($4_1 + 4 | 0) >> 0] = 0;
  return $4_1 | 0;
 }
 
 function $955($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $21_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 16 | 0) >> 2] = $3_1;
  $8_1 = HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  $10_1 = $919(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $12_1 = $904(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround($897(Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]))));
  $21_1 = ($960((FUNCTION_TABLE[$8_1 | 0]($10_1, $12_1, $6_1 + 12 | 0) | 0) & 1 | 0 | 0) | 0) & 1 | 0;
  global$0 = $6_1 + 32 | 0;
  return $21_1 | 0;
 }
 
 function $956($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $957($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $961() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $958() {
  return 69312 | 0;
 }
 
 function $959($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2713(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $960($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 14 | 0) >> 0] = $0_1;
  return (HEAPU8[($3_1 + 14 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $961() {
  return 69296 | 0;
 }
 
 function $962($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $963($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = $2713(12 | 0) | 0;
  $965($5_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $964() {
  return 69328 | 0;
 }
 
 function $965($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $966($385(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $967($5_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, $4_1 + 3 | 0 | 0) | 0;
  $968($5_1 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, $30(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $966($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $967($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $119($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $969($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $968($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $113($6_1 + 4 | 0 | 0, $7_1 | 0) | 0;
  $970($6_1 + 8 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   $971($7_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
   $972($7_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  }
  $973($6_1 + 8 | 0 | 0);
  $974($6_1 + 8 | 0 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $969($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $970($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $975($0_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $971($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($363($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $364($5_1 | 0);
   wasm2js_trap();
  }
  $368($4_1 | 0, $349($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  $20_1 = (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($347($5_1 | 0) | 0) >> 2] = $20_1;
  $377($5_1 | 0, 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $972($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $358($6_1 + 4 | 0 | 0, $7_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $976($349($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $361($6_1 + 4 | 0 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $973($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] = 1;
  return;
 }
 
 function $974($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   if ((HEAPU8[($4_1 + 4 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $114($4_1 | 0);
  }
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $975($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP8[($5_1 + 4 | 0) >> 0] = 0;
  return $5_1 | 0;
 }
 
 function $976($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $20_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $977($6_1 + 8 | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 4 | 0) >> 2] = $979(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $978(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $20_1 = $980(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $20_1 | 0;
 }
 
 function $977($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $981($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $978($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $983(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $979($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $10_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $10_1 = $982(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $980($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $984(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $981($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $978(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = $978(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $985($0_1 | 0, $5_1 + 4 | 0 | 0, $5_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $982($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $986($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  $12_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $12_1 | 0;
 }
 
 function $983($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $359(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $984($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $14_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) - ($359(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) | 0) >> 2 | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $985($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $986($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
  $987($0_1 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $987($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
  $988($0_1 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $988($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $3_1;
  $977($6_1 + 28 | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0);
  $989($6_1 + 20 | 0 | 0, $6_1 + 19 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, $978(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[($6_1 + 12 | 0) >> 2] = $990(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $980(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $991($0_1 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0);
  global$0 = $6_1 + 48 | 0;
  return;
 }
 
 function $989($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[$7_1 >> 2] = $4_1;
  $992($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$7_1 >> 2] | 0 | 0);
  global$0 = $7_1 + 16 | 0;
  return;
 }
 
 function $990($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $993(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $991($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $985($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $992($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) - (HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0) >> 2 | 0;
  $994(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  $995($0_1 | 0, $6_1 + 24 | 0 | 0, $6_1 + 12 | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $993($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $980(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $994($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   $1032(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (((HEAP32[$5_1 >> 2] | 0) - 1 | 0) << 2 | 0) + 4 | 0 | 0) | 0;
  }
  $21_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $995($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $996($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $996($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $997($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $998($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $1009($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $999($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1000($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $15_1 = 0, $19_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(($1011($1010() | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $11_1 = 24;
   $15_1 = 24;
   HEAP32[($4_1 + 76 | 0) >> 2] = (($71($4_1 | 0, (32 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) << $15_1 | 0) >> $15_1 | 0;
  }
  $19_1 = 24;
  $21_1 = ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) << $19_1 | 0) >> $19_1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1001($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $57_1 = 0, $99_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 39 | 0) >> 0] = $5_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) - (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0;
   HEAP32[($8_1 + 28 | 0) >> 2] = $1004(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0;
     break label$3;
    }
    HEAP32[($8_1 + 28 | 0) >> 2] = 0;
   }
   HEAP32[($8_1 + 24 | 0) >> 2] = (HEAP32[($8_1 + 48 | 0) >> 2] | 0) - (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0;
   label$5 : {
    if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!(($1005(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($8_1 + 56 | 0) >> 2] = 0;
     HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
     break label$1;
    }
   }
   label$7 : {
    if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$7
    }
    $57_1 = 24;
    $1006($8_1 + 12 | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, ((HEAPU8[($8_1 + 39 | 0) >> 0] | 0) << $57_1 | 0) >> $57_1 | 0 | 0) | 0;
    label$8 : {
     label$9 : {
      if (!(($1005(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $1007($8_1 + 12 | 0 | 0) | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($8_1 + 56 | 0) >> 2] = 0;
      HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = 1;
      break label$8;
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = 0;
    }
    $2740($8_1 + 12 | 0 | 0) | 0;
    label$10 : {
     switch (HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) {
     case 1:
      break label$1;
     default:
      break label$10;
     };
    }
   }
   HEAP32[($8_1 + 24 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) - (HEAP32[($8_1 + 48 | 0) >> 2] | 0) | 0;
   label$11 : {
    if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$11
    }
    label$12 : {
     if (!(($1005(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($8_1 + 56 | 0) >> 2] = 0;
     HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
     break label$1;
    }
   }
   $1008(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
  }
  $99_1 = HEAP32[($8_1 + 60 | 0) >> 2] | 0;
  global$0 = $8_1 + 64 | 0;
  return $99_1 | 0;
 }
 
 function $1002($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0 | 0;
 }
 
 function $1003($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $1012(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1004($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1005($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $1006($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $160($6_1 | 0, $5_1 + 6 | 0 | 0, $5_1 + 5 | 0 | 0) | 0;
  $15_1 = 24;
  $2748($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, ((HEAPU8[($5_1 + 7 | 0) >> 0] | 0) << $15_1 | 0) >> $15_1 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1007($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $1014($1013(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1008($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1009($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1023(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1010() {
  return -1 | 0;
 }
 
 function $1011($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $1012($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1403($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1013($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($1015($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $1016($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $1017($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1014($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1015($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($1018(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1016($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($1019(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1017($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $1020($1019(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1018($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1021(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1019($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1022(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1020($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1021($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1022($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1023($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $1024($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $1633(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 104624 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1025($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = 24;
  $13_1 = 24;
  $15_1 = ((FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($5_1, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0) | 0) << $13_1 | 0) >> $13_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $1026() {
  $115();
  return;
 }
 
 function $1027($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0.0, $1$hi = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $65_1 = 0.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $12_1 & 2147483647 | 0;
   if ($2_1 >>> 0 < 1072693248 >>> 0) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$1 = $1$hi;
    if ($2_1 + -1072693248 | 0 | $1_1 | 0) {
     break label$2
    }
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $13_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $14_1 = 0
      } else {
       $14_1 = 1
      }
      $15_1 = $14_1;
     } else {
      $15_1 = 0
     }
     $13_1 = $15_1;
    }
    return +($13_1 ? 0.0 : 3.141592653589793);
   }
   return +(0.0 / ($0_1 - $0_1));
  }
  label$3 : {
   label$4 : {
    if ($2_1 >>> 0 > 1071644671 >>> 0) {
     break label$4
    }
    $3_1 = 1.5707963267948966;
    if ($2_1 >>> 0 < 1012924417 >>> 0) {
     break label$3
    }
    return +(6.123233995736766e-17 - $0_1 * +$1028(+($0_1 * $0_1)) - $0_1 + 1.5707963267948966);
   }
   label$5 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break label$5
    }
    $0_1 = ($0_1 + 1.0) * .5;
    $3_1 = +$1076(+$0_1);
    $0_1 = 1.5707963267948966 - ($3_1 + ($3_1 * +$1028(+$0_1) + -6.123233995736766e-17));
    return +($0_1 + $0_1);
   }
   $3_1 = (1.0 - $0_1) * .5;
   $4_1 = +$1076(+$3_1);
   $65_1 = $4_1 * +$1028(+$3_1);
   wasm2js_scratch_store_f64(+$4_1);
   i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $0_1 = $65_1 + ($3_1 - $0_1 * $0_1) / ($4_1 + $0_1) + $0_1;
   $3_1 = $0_1 + $0_1;
  }
  return +$3_1;
 }
 
 function $1028($0_1) {
  $0_1 = +$0_1;
  return +($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / ($0_1 * ($0_1 * ($0_1 * ($0_1 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0));
 }
 
 function $1029($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0.0, $1_1 = 0, $3_1 = 0.0, $1$hi = 0, $15_1 = 0, $4_1 = 0.0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $71_1 = 0.0, $89_1 = 0.0, $90_1 = 0.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $15_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $15_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $15_1 & 2147483647 | 0;
   if ($2_1 >>> 0 < 1072693248 >>> 0) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$1 = $1$hi;
    if ($2_1 + -1072693248 | 0 | $1_1 | 0) {
     break label$2
    }
    return +($0_1 * 1.5707963267948966 + 7.52316384526264e-37);
   }
   return +(0.0 / ($0_1 - $0_1));
  }
  label$3 : {
   label$4 : {
    if ($2_1 >>> 0 > 1071644671 >>> 0) {
     break label$4
    }
    if (($2_1 + -1048576 | 0) >>> 0 < 1044381696 >>> 0) {
     break label$3
    }
    return +($0_1 * +$1030(+($0_1 * $0_1)) + $0_1);
   }
   $3_1 = (1.0 - +$1039(+$0_1)) * .5;
   $0_1 = +$1076(+$3_1);
   $4_1 = +$1030(+$3_1);
   label$5 : {
    label$6 : {
     if ($2_1 >>> 0 < 1072640819 >>> 0) {
      break label$6
     }
     $0_1 = $0_1 * $4_1 + $0_1;
     $0_1 = 1.5707963267948966 - ($0_1 + $0_1 + -6.123233995736766e-17);
     break label$5;
    }
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
    $5_1 = +wasm2js_scratch_load_f64();
    $71_1 = ($0_1 + $0_1) * $4_1;
    $0_1 = ($3_1 - $5_1 * $5_1) / ($0_1 + $5_1);
    $0_1 = .7853981633974483 - ($5_1 + $5_1) - ($71_1 - (6.123233995736766e-17 - ($0_1 + $0_1))) + .7853981633974483;
   }
   $89_1 = -$0_1;
   $90_1 = $0_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
    $16_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17_1 = 0
     } else {
      $17_1 = 1
     }
     $18_1 = $17_1;
    } else {
     $18_1 = 0
    }
    $16_1 = $18_1;
   }
   $0_1 = $16_1 ? $89_1 : $90_1;
  }
  return +$0_1;
 }
 
 function $1030($0_1) {
  $0_1 = +$0_1;
  return +($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / ($0_1 * ($0_1 * ($0_1 * ($0_1 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0));
 }
 
 function $1031($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$17($0_1 | 0, $1_1 | 0, $2_1 | 0);
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($2_1) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    $4_1 = $3_1 & -4 | 0;
    label$8 : {
     if ($3_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($0_1 >>> 0 <= $4_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1032($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = $2_1 + $0_1 | 0;
    if (($1_1 - $3_1 | 0) >>> 0 > (0 - ($2_1 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $1031($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4_1) {
        break label$6
       }
       $3_1 = $0_1;
       break label$3;
      }
      label$7 : {
       if ($0_1 & 3 | 0) {
        break label$7
       }
       $3_1 = $0_1;
       break label$4;
      }
      $3_1 = $0_1;
      label$8 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = $3_1 + 1 | 0;
       if (!($3_1 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4_1) {
       break label$9
      }
      label$10 : {
       if (!($3_1 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $0_1 + $2_1 | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($3_1 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$13 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2_1) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1033($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  return Math_fround(Math_fround($1_1 * Math_fround($1034(Math_fround($0_1 ? Math_fround(-$1_1) : $1_1)))));
 }
 
 function $1034($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF32[($1_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]));
 }
 
 function $1035($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround($1033($0_1 | 0, Math_fround(Math_fround(1584563250285286751870879.0e5)))));
 }
 
 function $1036($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround($1033($0_1 | 0, Math_fround(Math_fround(2.524354896707238e-29)))));
 }
 
 function $1037($0_1) {
  $0_1 = Math_fround($0_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3_1 = 0.0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $1_1 = 0, $2_1 = Math_fround(0), $4_1 = 0.0, $5_1 = 0.0, $6_1 = 0, $18_1 = 0, $55_1 = 0.0, $6$hi = 0, $59$hi = 0, $65_1 = 0, $65$hi = 0;
  label$1 : {
   label$2 : {
    $1_1 = ($1038(Math_fround($0_1)) | 0) & 2047 | 0;
    if ($1_1 >>> 0 < ($1038(Math_fround(Math_fround(88.0))) | 0) >>> 0) {
     break label$2
    }
    $2_1 = Math_fround(0.0);
    if ($0_1 == Math_fround(-Infinity)) {
     break label$1
    }
    label$3 : {
     if ($1_1 >>> 0 < ($1038(Math_fround(Math_fround(Infinity))) | 0) >>> 0) {
      break label$3
     }
     return Math_fround(Math_fround($0_1 + $0_1));
    }
    label$4 : {
     if (!($0_1 > Math_fround(88.72283172607422))) {
      break label$4
     }
     return Math_fround(Math_fround($1035(0 | 0)));
    }
    if (!($0_1 < Math_fround(-103.97207641601562))) {
     break label$2
    }
    return Math_fround(Math_fround($1036(0 | 0)));
   }
   $3_1 = +HEAPF64[(0 + 69672 | 0) >> 3] * +$0_1;
   $4_1 = +HEAPF64[(0 + 69664 | 0) >> 3];
   $5_1 = $3_1 + $4_1;
   $3_1 = $3_1 - ($5_1 - $4_1);
   $55_1 = (+HEAPF64[(0 + 69680 | 0) >> 3] * $3_1 + +HEAPF64[(0 + 69688 | 0) >> 3]) * ($3_1 * $3_1) + (+HEAPF64[(0 + 69696 | 0) >> 3] * $3_1 + 1.0);
   wasm2js_scratch_store_f64(+$5_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $6_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 47;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $18_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $59$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$0 = (($6_1 & 31 | 0) << 3 | 0) + 69376 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $65_1 = i64toi32_i32$1;
   $65$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $59$hi;
   i64toi32_i32$0 = $18_1;
   i64toi32_i32$1 = $65$hi;
   i64toi32_i32$3 = $65_1;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
   $2_1 = Math_fround($55_1 * +wasm2js_scratch_load_f64());
  }
  return Math_fround($2_1);
 }
 
 function $1038($0_1) {
  $0_1 = Math_fround($0_1);
  return (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) >>> 20 | 0 | 0;
 }
 
 function $1039($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $1040($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $3_1 = 0, $3$hi = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $2$hi = 0, $7_1 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$6 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $62$hi = 0, $81$hi = 0, $133_1 = 0, $133$hi = 0, $136$hi = 0, $141$hi = 0;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $3_1 = $25_1;
    $3$hi = i64toi32_i32$1;
    if (!($3_1 | i64toi32_i32$1 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $1041(+$1_1) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    i64toi32_i32$0 = 2146435072;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 52;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $26_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $26_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $26_1 & 2047 | 0;
    if (($6_1 | 0) != (2047 | 0)) {
     break label$1
    }
   }
   $1_1 = $0_1 * $1_1;
   return +($1_1 / $1_1);
  }
  label$3 : {
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $27_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $27_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $5_1 = $27_1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$0 = $3_1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = $3_1;
   return +((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) | 0 ? $0_1 * 0.0 : $0_1);
  }
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $28_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $28_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $7_1 = $28_1 & 2047 | 0;
  label$4 : {
   label$5 : {
    if ($6_1) {
     break label$5
    }
    $6_1 = 0;
    label$6 : {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 12;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $29_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $29_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $3_1 = $29_1;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
      $30_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $31_1 = 0
       } else {
        $31_1 = 1
       }
       $32_1 = $31_1;
      } else {
       $32_1 = 0
      }
      $30_1 = $32_1;
     }
     if ($30_1) {
      break label$6
     }
     label$7 : while (1) {
      $6_1 = $6_1 + -1 | 0;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $33_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $33_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $3_1 = $33_1;
      $3$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$3 | 0)) {
       $34_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$0 >>> 0) {
         $35_1 = 0
        } else {
         $35_1 = 1
        }
        $36_1 = $35_1;
       } else {
        $36_1 = 0
       }
       $34_1 = $36_1;
      }
      if ($34_1) {
       continue label$7
      }
      break label$7;
     };
    }
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = 0;
    $62$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = $62$hi;
    i64toi32_i32$3 = 1 - $6_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $37_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $37_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $3_1 = $37_1;
    $3$hi = i64toi32_i32$2;
    break label$4;
   }
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 1048576;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $3$hi = i64toi32_i32$1;
  }
  label$8 : {
   label$9 : {
    if ($7_1) {
     break label$9
    }
    $7_1 = 0;
    label$10 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 12;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $38_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $38_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $5_1 = $38_1;
     $5$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
      $39_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $40_1 = 0
       } else {
        $40_1 = 1
       }
       $41_1 = $40_1;
      } else {
       $41_1 = 0
      }
      $39_1 = $41_1;
     }
     if ($39_1) {
      break label$10
     }
     label$11 : while (1) {
      $7_1 = $7_1 + -1 | 0;
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $42_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $42_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $5_1 = $42_1;
      $5$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$3 | 0)) {
       $43_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$0 >>> 0) {
         $44_1 = 0
        } else {
         $44_1 = 1
        }
        $45_1 = $44_1;
       } else {
        $45_1 = 0
       }
       $43_1 = $45_1;
      }
      if ($43_1) {
       continue label$11
      }
      break label$11;
     };
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = 0;
    $81$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = $81$hi;
    i64toi32_i32$3 = 1 - $7_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $46_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $46_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $2_1 = $46_1;
    $2$hi = i64toi32_i32$2;
    break label$8;
   }
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 1048576;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
  }
  label$12 : {
   if (($6_1 | 0) <= ($7_1 | 0)) {
    break label$12
   }
   label$13 : while (1) {
    label$14 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     $5_1 = i64toi32_i32$4;
     $5$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
      $47_1 = 1
     } else {
      if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $48_1 = 0
       } else {
        $48_1 = 1
       }
       $49_1 = $48_1;
      } else {
       $49_1 = 0
      }
      $47_1 = $49_1;
     }
     if ($47_1) {
      break label$14
     }
     i64toi32_i32$1 = $5$hi;
     $3_1 = $5_1;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$14
     }
     return +($0_1 * 0.0);
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     $50_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
     $50_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    }
    $3_1 = $50_1;
    $3$hi = i64toi32_i32$1;
    $6_1 = $6_1 + -1 | 0;
    if (($6_1 | 0) > ($7_1 | 0)) {
     continue label$13
    }
    break label$13;
   };
   $6_1 = $7_1;
  }
  label$15 : {
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
   $5_1 = i64toi32_i32$2;
   $5$hi = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
    $51_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0) {
      $52_1 = 0
     } else {
      $52_1 = 1
     }
     $53_1 = $52_1;
    } else {
     $53_1 = 0
    }
    $51_1 = $53_1;
   }
   if ($51_1) {
    break label$15
   }
   i64toi32_i32$1 = $5$hi;
   $3_1 = $5_1;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$15
   }
   return +($0_1 * 0.0);
  }
  label$16 : {
   label$17 : {
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 1048575;
    i64toi32_i32$4 = -1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
     break label$17
    }
    i64toi32_i32$3 = i64toi32_i32$5;
    $5_1 = $3_1;
    $5$hi = i64toi32_i32$3;
    break label$16;
   }
   label$18 : while (1) {
    $6_1 = $6_1 + -1 | 0;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$5 = 524288;
    i64toi32_i32$1 = 0;
    $7_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $54_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $54_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $5_1 = $54_1;
    $5$hi = i64toi32_i32$3;
    $3_1 = $5_1;
    $3$hi = i64toi32_i32$3;
    if ($7_1) {
     continue label$18
    }
    break label$18;
   };
  }
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$4 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$5 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $3_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
  $3$hi = i64toi32_i32$1;
  label$19 : {
   label$20 : {
    if (($6_1 | 0) < (1 | 0)) {
     break label$20
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = -1048576;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $133_1 = i64toi32_i32$0;
    $133$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 52;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $55_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $55_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $136$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $133$hi;
    i64toi32_i32$2 = $133_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$5 = $55_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$1;
    break label$19;
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$1 = 0;
   $141$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$2 = $141$hi;
   i64toi32_i32$5 = 1 - $6_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $56_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $56_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $5_1 = $56_1;
   $5$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$3 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$5 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $1041($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1042($0_1) {
  $0_1 = +$0_1;
  $0_1 = $0_1 - $0_1;
  return +($0_1 / $0_1);
 }
 
 function $1043($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  return +($1_1 * +$1044(+($0_1 ? -$1_1 : $1_1)));
 }
 
 function $1044($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($1_1 + 8 | 0) >> 3]);
 }
 
 function $1045($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$1043($0_1 | 0, +(3105036184601417870297958.0e207)));
 }
 
 function $1046($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$1043($0_1 | 0, +(1.2882297539194267e-231)));
 }
 
 function $1047($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $11_1 = 0.0, $9_1 = 0, i64toi32_i32$4 = 0, $9$hi = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $24_1 = 0, $10_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $12_1 = 0.0, $10$hi = 0, $55_1 = 0.0, $57_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1048(+$0_1) | 0;
  $4_1 = $1048(+$1_1) | 0;
  $5_1 = $4_1 & 2047 | 0;
  $6_1 = $5_1 + -1086 | 0;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $8$hi = i64toi32_i32$0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $9_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $9$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($3_1 + -2047 | 0) >>> 0 < -2046 >>> 0) {
      break label$3
     }
     $7_1 = 0;
     if ($6_1 >>> 0 > -129 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $8$hi;
     if (!($1049($8_1 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$4
     }
     $11_1 = 1.0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = 1072693248;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $24_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $24_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $10_1 = $24_1;
     $10$hi = i64toi32_i32$0;
     if (!($10_1 | i64toi32_i32$0 | 0)) {
      break label$1
     }
     label$5 : {
      label$6 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 1;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $25_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $9_1 = $25_1;
       $9$hi = i64toi32_i32$3;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$2 = -2097152;
       i64toi32_i32$1 = 0;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
        break label$6
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = -2097152;
       i64toi32_i32$2 = 1;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$5
       }
      }
      $11_1 = $0_1 + $1_1;
      break label$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$0 = 2145386496;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     $55_1 = $1_1 * $1_1;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$1 = 2145386496;
     i64toi32_i32$0 = 0;
     $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$0 = $8_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     $11_1 = $57_1 ^ $26_1 | 0 ? 0.0 : $55_1;
     break label$1;
    }
    label$7 : {
     i64toi32_i32$0 = $9$hi;
     if (!($1049($9_1 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$7
     }
     $11_1 = $0_1 * $0_1;
     label$8 : {
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $29_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $30_1 = 0
        } else {
         $30_1 = 1
        }
        $31_1 = $30_1;
       } else {
        $31_1 = 0
       }
       $29_1 = $31_1;
      }
      if ($29_1) {
       break label$8
      }
      i64toi32_i32$1 = $8$hi;
      $11_1 = ($1050($8_1 | 0, i64toi32_i32$1 | 0) | 0 | 0) == (1 | 0) ? -$11_1 : $11_1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $32_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $33_1 = 0
       } else {
        $33_1 = 1
       }
       $34_1 = $33_1;
      } else {
       $34_1 = 0
      }
      $32_1 = $34_1;
     }
     if ($32_1) {
      break label$1
     }
     $11_1 = +$1051(+(1.0 / $11_1));
     break label$1;
    }
    $7_1 = 0;
    label$9 : {
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
      $35_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $36_1 = 0
       } else {
        $36_1 = 1
       }
       $37_1 = $36_1;
      } else {
       $37_1 = 0
      }
      $35_1 = $37_1;
     }
     if ($35_1) {
      break label$9
     }
     label$10 : {
      i64toi32_i32$3 = $8$hi;
      $7_1 = $1050($8_1 | 0, i64toi32_i32$3 | 0) | 0;
      if ($7_1) {
       break label$10
      }
      $11_1 = +$1042(+$0_1);
      break label$1;
     }
     $3_1 = $3_1 & 2047 | 0;
     wasm2js_scratch_store_f64(+$0_1);
     i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $9_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $9$hi = i64toi32_i32$2;
     $7_1 = (($7_1 | 0) == (1 | 0)) << 18 | 0;
    }
    label$11 : {
     if ($6_1 >>> 0 > -129 >>> 0) {
      break label$11
     }
     $11_1 = 1.0;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$0 = 1072693248;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$12 : {
      if ($5_1 >>> 0 > 957 >>> 0) {
       break label$12
      }
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$2 = 1072693248;
      i64toi32_i32$0 = 0;
      $11_1 = (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0 ? $1_1 : -$1_1) + 1.0;
      break label$1;
     }
     label$13 : {
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$0 = $9_1;
      i64toi32_i32$3 = 1072693248;
      i64toi32_i32$2 = 0;
      if (($4_1 >>> 0 > 2047 >>> 0 | 0) == (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0 | 0)) {
       break label$13
      }
      $11_1 = +$1045(0 | 0);
      break label$1;
     }
     $11_1 = +$1046(0 | 0);
     break label$1;
    }
    if ($3_1) {
     break label$2
    }
    wasm2js_scratch_store_f64(+($0_1 * 4503599627370496.0));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = -54525952;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -134217728;
   i64toi32_i32$0 = $8$hi & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $11_1 = +wasm2js_scratch_load_f64();
   i64toi32_i32$0 = $9$hi;
   $12_1 = +$1052($9_1 | 0, i64toi32_i32$0 | 0, $2_1 + 8 | 0 | 0);
   wasm2js_scratch_store_f64(+$12_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -134217728;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $11_1 = +$1053(+($11_1 * $0_1), +(($1_1 - $11_1) * $0_1 + $1_1 * (+HEAPF64[($2_1 + 8 | 0) >> 3] + ($12_1 - $0_1))), $7_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return +$11_1;
 }
 
 function $1048($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $6_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $6_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return $6_1 | 0;
 }
 
 function $1049($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $8_1 = 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  i64toi32_i32$0 = $8_1;
  i64toi32_i32$2 = 2097152;
  i64toi32_i32$3 = 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 2097152;
  i64toi32_i32$3 = 1;
  return i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0 | 0;
 }
 
 function $1050($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, $14_1 = 0, $15_1 = 0, $3_1 = 0, $3$hi = 0, $14$hi = 0, $17$hi = 0;
  $1_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $14_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $14_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $14_1 & 2047 | 0;
   if ($2_1 >>> 0 < 1023 >>> 0) {
    break label$1
   }
   $1_1 = 2;
   if ($2_1 >>> 0 > 1075 >>> 0) {
    break label$1
   }
   $1_1 = 0;
   i64toi32_i32$1 = 0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = 1075 - $2_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $15_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $15_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $3_1 = $15_1;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $17$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $1_1 = !(i64toi32_i32$3 & i64toi32_i32$2 | 0 | i64toi32_i32$1 | 0) ? 2 : 1;
  }
  return $1_1 | 0;
 }
 
 function $1051($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($1_1 + 8 | 0) >> 3]);
 }
 
 function $1052($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0.0, $6_1 = 0.0, i64toi32_i32$4 = 0, $5_1 = 0.0, $7_1 = 0.0, $9_1 = 0, $2_1 = 0, $2$hi = 0, $27_1 = 0, $29_1 = 0, $8_1 = 0.0, $10_1 = 0, $19_1 = 0.0, $28_1 = 0.0, $31_1 = 0, $31$hi = 0, $61_1 = 0.0, $85_1 = 0.0, $93_1 = 0.0, $123_1 = 0.0;
  $10_1 = $1_1;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = -1072076117;
  i64toi32_i32$3 = 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $2_1 = i64toi32_i32$4;
  $2$hi = i64toi32_i32$5;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $27_1 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
   $27_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $3_1 = +($27_1 | 0);
  $19_1 = $3_1 * +HEAPF64[(0 + 71872 | 0) >> 3];
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$5 = $2_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 45;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $29_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $9_1 = ($29_1 & 127 | 0) << 5 | 0;
  $28_1 = $19_1 + +HEAPF64[($9_1 + 71960 | 0) >> 3];
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = -1048576;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
  $31_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $31$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = $31$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
  $0_1 = i64toi32_i32$1;
  $0$hi = i64toi32_i32$4;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$5 = -1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $4_1 = +wasm2js_scratch_load_f64();
  $5_1 = +HEAPF64[($9_1 + 71936 | 0) >> 3];
  $6_1 = $4_1 * $5_1 + -1.0;
  i64toi32_i32$5 = $0$hi;
  wasm2js_scratch_store_i32(0 | 0, $0_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $5_1 = (+wasm2js_scratch_load_f64() - $4_1) * $5_1;
  $4_1 = $6_1 + $5_1;
  $3_1 = $3_1 * +HEAPF64[(0 + 71864 | 0) >> 3] + +HEAPF64[($9_1 + 71952 | 0) >> 3];
  $61_1 = $3_1;
  $3_1 = $4_1 + $3_1;
  $7_1 = +HEAPF64[(0 + 71880 | 0) >> 3];
  $8_1 = $4_1 * $7_1;
  $7_1 = $6_1 * $7_1;
  $6_1 = $6_1 * $7_1;
  $85_1 = $6_1;
  $6_1 = $3_1 + $6_1;
  $93_1 = $28_1 + ($4_1 + ($61_1 - $3_1)) + $5_1 * ($8_1 + $7_1) + ($85_1 + ($3_1 - $6_1));
  $3_1 = $4_1 * $8_1;
  $4_1 = $93_1 + $4_1 * $3_1 * ($3_1 * ($3_1 * ($4_1 * +HEAPF64[(0 + 71928 | 0) >> 3] + +HEAPF64[(0 + 71920 | 0) >> 3]) + ($4_1 * +HEAPF64[(0 + 71912 | 0) >> 3] + +HEAPF64[(0 + 71904 | 0) >> 3])) + ($4_1 * +HEAPF64[(0 + 71896 | 0) >> 3] + +HEAPF64[(0 + 71888 | 0) >> 3]));
  $123_1 = $4_1;
  $4_1 = $6_1 + $4_1;
  HEAPF64[$10_1 >> 3] = $123_1 + ($6_1 - $4_1);
  return +$4_1;
 }
 
 function $1053($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0.0, $7$hi = 0, $7_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $6_1 = 0.0, $26_1 = 0, $8$hi = 0, $72_1 = 0.0, $79_1 = 0.0, $95_1 = 0, $95$hi = 0, $98$hi = 0, $100$hi = 0, $8_1 = 0;
  label$1 : {
   $3_1 = ($1048(+$0_1) | 0) & 2047 | 0;
   $4_1 = $1048(+(5.551115123125783e-17)) | 0;
   if (($3_1 - $4_1 | 0) >>> 0 < (($1048(+(512.0)) | 0) - $4_1 | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    if ($3_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    $0_1 = $0_1 + 1.0;
    return +($2_1 ? -$0_1 : $0_1);
   }
   $4_1 = $3_1 >>> 0 < ($1048(+(1024.0)) | 0) >>> 0;
   $3_1 = 0;
   if ($4_1) {
    break label$1
   }
   label$3 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
     $23_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $24_1 = 0
      } else {
       $24_1 = 1
      }
      $25_1 = $24_1;
     } else {
      $25_1 = 0
     }
     $23_1 = $25_1;
    }
    if ($23_1) {
     break label$3
    }
    return +(+$1046($2_1 | 0));
   }
   return +(+$1045($2_1 | 0));
  }
  $5_1 = +HEAPF64[(0 + 69712 | 0) >> 3];
  $6_1 = $0_1 * +HEAPF64[(0 + 69704 | 0) >> 3] + $5_1;
  $5_1 = $6_1 - $5_1;
  $0_1 = $1_1 + ($5_1 * +HEAPF64[(0 + 69728 | 0) >> 3] + ($5_1 * +HEAPF64[(0 + 69720 | 0) >> 3] + $0_1));
  $1_1 = $0_1 * $0_1;
  $72_1 = $1_1 * $1_1 * ($0_1 * +HEAPF64[(0 + 69760 | 0) >> 3] + +HEAPF64[(0 + 69752 | 0) >> 3]);
  $79_1 = $1_1 * ($0_1 * +HEAPF64[(0 + 69744 | 0) >> 3] + +HEAPF64[(0 + 69736 | 0) >> 3]);
  wasm2js_scratch_store_f64(+$6_1);
  i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $7$hi = i64toi32_i32$2;
  $4_1 = ($7_1 << 4 | 0) & 2032 | 0;
  $0_1 = $72_1 + ($79_1 + (+HEAPF64[($4_1 + 69816 | 0) >> 3] + $0_1));
  i64toi32_i32$3 = $4_1 + 69824 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
  $95_1 = i64toi32_i32$2;
  $95$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = 0;
  $98$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$2 = $98$hi;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = 45;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $26_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $100$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $95$hi;
  i64toi32_i32$5 = $95_1;
  i64toi32_i32$0 = $100$hi;
  i64toi32_i32$1 = $26_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $8_1 = i64toi32_i32$2;
  $8$hi = i64toi32_i32$4;
  label$4 : {
   if ($3_1) {
    break label$4
   }
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$5 = $7$hi;
   return +(+$1054(+$0_1, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, $7_1 | 0, i64toi32_i32$5 | 0));
  }
  i64toi32_i32$5 = $8$hi;
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $1_1 = +wasm2js_scratch_load_f64();
  return +($1_1 * $0_1 + $1_1);
 }
 
 function $1054($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0, $6_1 = 0.0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  label$1 : {
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = -1058013184;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
   $3_1 = +wasm2js_scratch_load_f64();
   return +(($3_1 * $0_1 + $3_1) * 5486124068793688683255936.0e279);
  }
  label$2 : {
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$3 = 1071644672;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$4;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
   $3_1 = +wasm2js_scratch_load_f64();
   $4_1 = $3_1 * $0_1;
   $0_1 = $4_1 + $3_1;
   if (!(+$1039(+$0_1) < 1.0)) {
    break label$2
   }
   $1055(+(+$1051(+(2.2250738585072014e-308)) * 2.2250738585072014e-308));
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$0 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$2 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $5_1 = $0_1 < 0.0 ? -1.0 : 1.0;
   $6_1 = $0_1 + $5_1;
   $0_1 = $6_1 + ($4_1 + ($3_1 - $0_1) + ($0_1 + ($5_1 - $6_1))) - $5_1;
   $0_1 = (wasm2js_f64$0 = +wasm2js_scratch_load_f64(), wasm2js_f64$1 = $0_1, wasm2js_i32$0 = $0_1 == 0.0, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
  }
  return +($0_1 * 2.2250738585072014e-308);
 }
 
 function $1055($0_1) {
  $0_1 = +$0_1;
  HEAPF64[((global$0 - 16 | 0) + 8 | 0) >> 3] = $0_1;
 }
 
 function $1056($0_1) {
  $0_1 = Math_fround($0_1);
  $0_1 = Math_fround($0_1 - $0_1);
  return Math_fround(Math_fround($0_1 / $0_1));
 }
 
 function $1057($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $3_1 = 0, $6_1 = Math_fround(0), $2_1 = 0, $5_1 = 0, $7_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0;
  $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
  $3_1 = $1058($2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
       if (($4_1 + -2139095040 | 0) >>> 0 < -2130706432 >>> 0) {
        break label$5
       }
       $5_1 = 0;
       if ($3_1) {
        break label$4
       }
       break label$2;
      }
      if (!$3_1) {
       break label$3
      }
     }
     $6_1 = Math_fround(1.0);
     if (($4_1 | 0) == (1065353216 | 0)) {
      break label$1
     }
     $3_1 = $2_1 << 1 | 0;
     if (!$3_1) {
      break label$1
     }
     label$6 : {
      label$7 : {
       $4_1 = $4_1 << 1 | 0;
       if ($4_1 >>> 0 > -16777216 >>> 0) {
        break label$7
       }
       if ($3_1 >>> 0 < -16777215 >>> 0) {
        break label$6
       }
      }
      return Math_fround(Math_fround($0_1 + $1_1));
     }
     if (($4_1 | 0) == (2130706432 | 0)) {
      break label$1
     }
     return Math_fround($4_1 >>> 0 < 2130706432 >>> 0 ^ ($2_1 | 0) < (0 | 0) | 0 ? Math_fround(0.0) : Math_fround($1_1 * $1_1));
    }
    label$8 : {
     if (!($1058($4_1 | 0) | 0)) {
      break label$8
     }
     $6_1 = Math_fround($0_1 * $0_1);
     label$9 : {
      if (($4_1 | 0) > (-1 | 0)) {
       break label$9
      }
      $6_1 = ($1059($2_1 | 0) | 0 | 0) == (1 | 0) ? Math_fround(-$6_1) : $6_1;
     }
     if (($2_1 | 0) > (-1 | 0)) {
      break label$1
     }
     return Math_fround(Math_fround($1060(Math_fround(Math_fround(Math_fround(1.0) / $6_1)))));
    }
    $5_1 = 0;
    label$10 : {
     if (($4_1 | 0) > (-1 | 0)) {
      break label$10
     }
     label$11 : {
      $3_1 = $1059($2_1 | 0) | 0;
      if ($3_1) {
       break label$11
      }
      return Math_fround(Math_fround($1056(Math_fround($0_1))));
     }
     $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & 2147483647 | 0;
     $5_1 = (($3_1 | 0) == (1 | 0)) << 16 | 0;
    }
    if ($4_1 >>> 0 > 8388607 >>> 0) {
     break label$2
    }
    $4_1 = ((wasm2js_scratch_store_f32(Math_fround($0_1 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) & 2147483647 | 0) + -192937984 | 0;
   }
   label$12 : {
    $7_1 = +$1061($4_1 | 0) * +$1_1;
    wasm2js_scratch_store_f64(+$7_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147450880;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 1079967744;
    i64toi32_i32$3 = 1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$12
    }
    label$13 : {
     if (!($7_1 > 127.99999995700433)) {
      break label$13
     }
     return Math_fround(Math_fround($1035($5_1 | 0)));
    }
    if (!($7_1 <= -150.0)) {
     break label$12
    }
    return Math_fround(Math_fround($1036($5_1 | 0)));
   }
   $6_1 = Math_fround($1062(+$7_1, $5_1 | 0));
  }
  return Math_fround($6_1);
 }
 
 function $1058($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 << 1 | 0) + 16777216 | 0) >>> 0 < 16777217 >>> 0 | 0;
 }
 
 function $1059($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = ($0_1 >>> 23 | 0) & 255 | 0;
   if ($2_1 >>> 0 < 127 >>> 0) {
    break label$1
   }
   $1_1 = 2;
   if ($2_1 >>> 0 > 150 >>> 0) {
    break label$1
   }
   $1_1 = 0;
   $2_1 = 1 << (150 - $2_1 | 0) | 0;
   if (($2_1 + -1 | 0) & $0_1 | 0) {
    break label$1
   }
   $1_1 = $2_1 & $0_1 | 0 ? 1 : 2;
  }
  return $1_1 | 0;
 }
 
 function $1060($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF32[($1_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]));
 }
 
 function $1061($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0.0, $1_1 = 0, $3_1 = 0.0, $12_1 = 0.0;
  $1_1 = $0_1 + -1060306944 | 0;
  $12_1 = +(wasm2js_scratch_store_i32(2, $0_1 - ($1_1 & -8388608 | 0) | 0), wasm2js_scratch_load_f32());
  $0_1 = ($1_1 >>> 15 | 0) & 240 | 0;
  $2_1 = $12_1 * +HEAPF64[($0_1 + 76032 | 0) >> 3] + -1.0;
  $3_1 = $2_1 * $2_1;
  return +((+HEAPF64[(0 + 76288 | 0) >> 3] * $2_1 + +HEAPF64[(0 + 76296 | 0) >> 3]) * ($3_1 * $3_1) + ((+HEAPF64[(0 + 76304 | 0) >> 3] * $2_1 + +HEAPF64[(0 + 76312 | 0) >> 3]) * $3_1 + (+HEAPF64[(0 + 76320 | 0) >> 3] * $2_1 + (+HEAPF64[($0_1 + 76040 | 0) >> 3] + +($1_1 >> 23 | 0 | 0)))));
 }
 
 function $1062($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $2_1 = 0.0, $3_1 = 0.0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $27_1 = 0.0, $32$hi = 0, $34$hi = 0, $40_1 = 0, $40$hi = 0;
  $2_1 = +HEAPF64[(0 + 69632 | 0) >> 3];
  $3_1 = $0_1 + $2_1;
  $0_1 = $0_1 - ($3_1 - $2_1);
  $27_1 = (+HEAPF64[(0 + 69640 | 0) >> 3] * $0_1 + +HEAPF64[(0 + 69648 | 0) >> 3]) * ($0_1 * $0_1) + (+HEAPF64[(0 + 69656 | 0) >> 3] * $0_1 + 1.0);
  wasm2js_scratch_store_f64(+$3_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $32$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = $32$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
   $17_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
  }
  $34$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$5 = (($4_1 & 31 | 0) << 3 | 0) + 69376 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
  $40_1 = i64toi32_i32$2;
  $40$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $34$hi;
  i64toi32_i32$5 = $17_1;
  i64toi32_i32$2 = $40$hi;
  i64toi32_i32$3 = $40_1;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
  return Math_fround(Math_fround($27_1 * +wasm2js_scratch_load_f64()));
 }
 
 function $1063() {
  return $1067() | 0 | 0;
 }
 
 function $1064($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = $1_1;
   $3_1 = $0_1 + $2_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1065() {
  return 42 | 0;
 }
 
 function $1066() {
  return $1065() | 0 | 0;
 }
 
 function $1067() {
  return 96144 | 0;
 }
 
 function $1068() {
  HEAP32[(0 + 96240 | 0) >> 2] = 96120;
  HEAP32[(0 + 96168 | 0) >> 2] = $1066() | 0;
 }
 
 function $1069($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0;
  $3_1 = $0_1 * $0_1;
  $4_1 = $3_1 * ($3_1 * $3_1) * ($3_1 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3_1 * ($3_1 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $5_1 = $0_1 * $3_1;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return +($5_1 * ($3_1 * $4_1 + -.16666666666666632) + $0_1);
  }
  return +($0_1 - ($3_1 * ($1_1 * .5 - $5_1 * $4_1) - $1_1 + $5_1 * .16666666666666632));
 }
 
 function $1070($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if ($1_1 >>> 0 >= 2047 >>> 0) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = ($1_1 >>> 0 < 3069 >>> 0 ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   label$4 : {
    if ($1_1 >>> 0 <= -1992 >>> 0) {
     break label$4
    }
    $1_1 = $1_1 + 969 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = ($1_1 >>> 0 > -2960 >>> 0 ? $1_1 : -2960) + 1938 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $1071($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $1072($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $20_1 = 0.0, $11_1 = 0, $6_1 = 0, $5_1 = 0, $13_1 = 0, $21_1 = 0.0, $10_1 = 0, $8_1 = 0, $9_1 = 0, $19_1 = 0, $12_1 = 0, $14_1 = 0, $22_1 = 0.0, $7_1 = 0, $16_1 = 0, $18_1 = 0, $15_1 = 0, $17_1 = 0, $203_1 = 0, $206_1 = 0, $518_1 = 0.0, $556_1 = 0.0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $6_1 = ($2_1 + -3 | 0 | 0) / (24 | 0) | 0;
  $7_1 = ($6_1 | 0) > (0 | 0) ? $6_1 : 0;
  $8_1 = Math_imul($7_1, -24) + $2_1 | 0;
  label$1 : {
   $9_1 = HEAP32[(($4_1 << 2 | 0) + 76336 | 0) >> 2] | 0;
   $10_1 = $3_1 + -1 | 0;
   if (($9_1 + $10_1 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11_1 = $9_1 + $3_1 | 0;
   $2_1 = $7_1 - $10_1 | 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) >= (0 | 0)) {
       break label$4
      }
      $20_1 = 0.0;
      break label$3;
     }
     $20_1 = +(HEAP32[(($2_1 << 2 | 0) + 76352 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = $20_1;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($11_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $12_1 = $8_1 + -24 | 0;
  $11_1 = 0;
  $13_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
  $14_1 = ($3_1 | 0) < (1 | 0);
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     if (!$14_1) {
      break label$7
     }
     $20_1 = 0.0;
     break label$6;
    }
    $6_1 = $11_1 + $10_1 | 0;
    $2_1 = 0;
    $20_1 = 0.0;
    label$8 : while (1) {
     $20_1 = +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3] + $20_1;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $20_1;
   $2_1 = ($11_1 | 0) == ($13_1 | 0);
   $11_1 = $11_1 + 1 | 0;
   if (!$2_1) {
    continue label$5
   }
   break label$5;
  };
  $15_1 = 47 - $8_1 | 0;
  $16_1 = 48 - $8_1 | 0;
  $17_1 = $8_1 + -25 | 0;
  $11_1 = $9_1;
  label$9 : {
   label$10 : while (1) {
    $20_1 = +HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3];
    $2_1 = 0;
    $6_1 = $11_1;
    label$11 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$11
     }
     label$12 : while (1) {
      label$13 : {
       label$14 : {
        $21_1 = $20_1 * 5.9604644775390625e-08;
        if (!(Math_abs($21_1) < 2147483648.0)) {
         break label$14
        }
        $13_1 = ~~$21_1;
        break label$13;
       }
       $13_1 = -2147483648;
      }
      $14_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
      label$15 : {
       label$16 : {
        $21_1 = +($13_1 | 0);
        $20_1 = $21_1 * -16777216.0 + $20_1;
        if (!(Math_abs($20_1) < 2147483648.0)) {
         break label$16
        }
        $13_1 = ~~$20_1;
        break label$15;
       }
       $13_1 = -2147483648;
      }
      HEAP32[$14_1 >> 2] = $13_1;
      $6_1 = $6_1 + -1 | 0;
      $20_1 = +HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] + $21_1;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($11_1 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    $20_1 = +$1070(+$20_1, $12_1 | 0);
    label$17 : {
     label$18 : {
      $20_1 = $20_1 + +$1071(+($20_1 * .125)) * -8.0;
      if (!(Math_abs($20_1) < 2147483648.0)) {
       break label$18
      }
      $10_1 = ~~$20_1;
      break label$17;
     }
     $10_1 = -2147483648;
    }
    $20_1 = $20_1 - +($10_1 | 0);
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         $18_1 = ($12_1 | 0) < (1 | 0);
         if ($18_1) {
          break label$23
         }
         $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
         $203_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         $206_1 = $2_1;
         $2_1 = $2_1 >> $16_1 | 0;
         $6_1 = $206_1 - ($2_1 << $16_1 | 0) | 0;
         HEAP32[$203_1 >> 2] = $6_1;
         $19_1 = $6_1 >> $15_1 | 0;
         $10_1 = $2_1 + $10_1 | 0;
         break label$22;
        }
        if ($12_1) {
         break label$21
        }
        $19_1 = (HEAP32[((($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($19_1 | 0) < (1 | 0)) {
        break label$19
       }
       break label$20;
      }
      $19_1 = 2;
      if ($20_1 >= .5) {
       break label$20
      }
      $19_1 = 0;
      break label$19;
     }
     $2_1 = 0;
     $13_1 = 0;
     $6_1 = 1;
     label$24 : {
      if (($11_1 | 0) < (1 | 0)) {
       break label$24
      }
      label$25 : while (1) {
       $14_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
       $6_1 = HEAP32[$14_1 >> 2] | 0;
       label$26 : {
        label$27 : {
         label$28 : {
          label$29 : {
           if (!$13_1) {
            break label$29
           }
           $13_1 = 16777215;
           break label$28;
          }
          if (!$6_1) {
           break label$27
          }
          $13_1 = 16777216;
         }
         HEAP32[$14_1 >> 2] = $13_1 - $6_1 | 0;
         $13_1 = 1;
         $6_1 = 0;
         break label$26;
        }
        $13_1 = 0;
        $6_1 = 1;
       }
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     label$30 : {
      if ($18_1) {
       break label$30
      }
      $2_1 = 8388607;
      label$31 : {
       switch ($17_1 | 0) {
       case 1:
        $2_1 = 4194303;
        break;
       case 0:
        break label$31;
       default:
        break label$30;
       };
      }
      $13_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$13_1 >> 2] = (HEAP32[$13_1 >> 2] | 0) & $2_1 | 0;
     }
     $10_1 = $10_1 + 1 | 0;
     if (($19_1 | 0) != (2 | 0)) {
      break label$19
     }
     $20_1 = 1.0 - $20_1;
     $19_1 = 2;
     if ($6_1) {
      break label$19
     }
     $20_1 = $20_1 - +$1070(+(1.0), $12_1 | 0);
    }
    label$33 : {
     if ($20_1 != 0.0) {
      break label$33
     }
     $6_1 = 0;
     $2_1 = $11_1;
     label$34 : {
      if (($2_1 | 0) <= ($9_1 | 0)) {
       break label$34
      }
      label$35 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       $6_1 = HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | $6_1 | 0;
       if (($2_1 | 0) > ($9_1 | 0)) {
        continue label$35
       }
       break label$35;
      };
      if (!$6_1) {
       break label$34
      }
      $8_1 = $12_1;
      label$36 : while (1) {
       $8_1 = $8_1 + -24 | 0;
       $11_1 = $11_1 + -1 | 0;
       if (!(HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$36
       }
       break label$9;
      };
     }
     $2_1 = 1;
     label$37 : while (1) {
      $6_1 = $2_1;
      $2_1 = $2_1 + 1 | 0;
      if (!(HEAP32[(($5_1 + 480 | 0) + (($9_1 - $6_1 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$37
      }
      break label$37;
     };
     $13_1 = $6_1 + $11_1 | 0;
     label$38 : while (1) {
      $6_1 = $11_1 + $3_1 | 0;
      $11_1 = $11_1 + 1 | 0;
      HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11_1 + $7_1 | 0) << 2 | 0) + 76352 | 0) >> 2] | 0 | 0);
      $2_1 = 0;
      $20_1 = 0.0;
      label$39 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$39
       }
       label$40 : while (1) {
        $20_1 = +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3] + $20_1;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         continue label$40
        }
        break label$40;
       };
      }
      HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $20_1;
      if (($11_1 | 0) < ($13_1 | 0)) {
       continue label$38
      }
      break label$38;
     };
     $11_1 = $13_1;
     continue label$10;
    }
    break label$10;
   };
   label$41 : {
    label$42 : {
     $20_1 = +$1070(+$20_1, 24 - $8_1 | 0 | 0);
     if (!($20_1 >= 16777216.0)) {
      break label$42
     }
     $3_1 = $11_1 << 2 | 0;
     label$43 : {
      label$44 : {
       $21_1 = $20_1 * 5.9604644775390625e-08;
       if (!(Math_abs($21_1) < 2147483648.0)) {
        break label$44
       }
       $2_1 = ~~$21_1;
       break label$43;
      }
      $2_1 = -2147483648;
     }
     $3_1 = ($5_1 + 480 | 0) + $3_1 | 0;
     label$45 : {
      label$46 : {
       $20_1 = +($2_1 | 0) * -16777216.0 + $20_1;
       if (!(Math_abs($20_1) < 2147483648.0)) {
        break label$46
       }
       $6_1 = ~~$20_1;
       break label$45;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$3_1 >> 2] = $6_1;
     $11_1 = $11_1 + 1 | 0;
     break label$41;
    }
    label$47 : {
     label$48 : {
      if (!(Math_abs($20_1) < 2147483648.0)) {
       break label$48
      }
      $2_1 = ~~$20_1;
      break label$47;
     }
     $2_1 = -2147483648;
    }
    $8_1 = $12_1;
   }
   HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
  $20_1 = +$1070(+(1.0), $8_1 | 0);
  label$49 : {
   if (($11_1 | 0) < (0 | 0)) {
    break label$49
   }
   $3_1 = $11_1;
   label$50 : while (1) {
    $2_1 = $3_1;
    HEAPF64[($5_1 + ($2_1 << 3 | 0) | 0) >> 3] = $20_1 * +(HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $3_1 = $2_1 + -1 | 0;
    $20_1 = $20_1 * 5.9604644775390625e-08;
    if ($2_1) {
     continue label$50
    }
    break label$50;
   };
   $6_1 = $11_1;
   label$51 : while (1) {
    $20_1 = 0.0;
    $2_1 = 0;
    label$52 : {
     $13_1 = $11_1 - $6_1 | 0;
     $0_1 = ($9_1 | 0) < ($13_1 | 0) ? $9_1 : $13_1;
     if (($0_1 | 0) < (0 | 0)) {
      break label$52
     }
     label$53 : while (1) {
      $20_1 = +HEAPF64[(($2_1 << 3 | 0) + 79120 | 0) >> 3] * +HEAPF64[($5_1 + (($2_1 + $6_1 | 0) << 3 | 0) | 0) >> 3] + $20_1;
      $3_1 = ($2_1 | 0) != ($0_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$53
      }
      break label$53;
     };
    }
    HEAPF64[(($5_1 + 160 | 0) + ($13_1 << 3 | 0) | 0) >> 3] = $20_1;
    $2_1 = ($6_1 | 0) > (0 | 0);
    $6_1 = $6_1 + -1 | 0;
    if ($2_1) {
     continue label$51
    }
    break label$51;
   };
  }
  label$54 : {
   label$55 : {
    label$56 : {
     switch ($4_1 | 0) {
     case 3:
      $22_1 = 0.0;
      label$59 : {
       if (($11_1 | 0) < (1 | 0)) {
        break label$59
       }
       $20_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$60 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $21_1 = +HEAPF64[$6_1 >> 3];
        $518_1 = $21_1;
        $21_1 = $21_1 + $20_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $20_1 + ($518_1 - $21_1);
        HEAPF64[$6_1 >> 3] = $21_1;
        $6_1 = $2_1 >>> 0 > 1 >>> 0;
        $20_1 = $21_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$60
        }
        break label$60;
       };
       if (($11_1 | 0) == (1 | 0)) {
        break label$59
       }
       $20_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$61 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $21_1 = +HEAPF64[$6_1 >> 3];
        $556_1 = $21_1;
        $21_1 = $21_1 + $20_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $20_1 + ($556_1 - $21_1);
        HEAPF64[$6_1 >> 3] = $21_1;
        $6_1 = $2_1 >>> 0 > 2 >>> 0;
        $20_1 = $21_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$61
        }
        break label$61;
       };
       $22_1 = 0.0;
       label$62 : while (1) {
        $22_1 = $22_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (2 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$62
        }
        break label$62;
       };
      }
      $20_1 = +HEAPF64[($5_1 + 160 | 0) >> 3];
      if ($19_1) {
       break label$55
      }
      HEAPF64[$1_1 >> 3] = $20_1;
      $20_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
      HEAPF64[($1_1 + 16 | 0) >> 3] = $22_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $20_1;
      break label$54;
     case 0:
      $20_1 = 0.0;
      label$63 : {
       if (($11_1 | 0) < (0 | 0)) {
        break label$63
       }
       label$64 : while (1) {
        $2_1 = $11_1;
        $11_1 = $2_1 + -1 | 0;
        $20_1 = $20_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
        if ($2_1) {
         continue label$64
        }
        break label$64;
       };
      }
      HEAPF64[$1_1 >> 3] = $19_1 ? -$20_1 : $20_1;
      break label$54;
     case 1:
     case 2:
      break label$56;
     default:
      break label$54;
     };
    }
    $20_1 = 0.0;
    label$65 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$65
     }
     $3_1 = $11_1;
     label$66 : while (1) {
      $2_1 = $3_1;
      $3_1 = $2_1 + -1 | 0;
      $20_1 = $20_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      if ($2_1) {
       continue label$66
      }
      break label$66;
     };
    }
    HEAPF64[$1_1 >> 3] = $19_1 ? -$20_1 : $20_1;
    $20_1 = +HEAPF64[($5_1 + 160 | 0) >> 3] - $20_1;
    $2_1 = 1;
    label$67 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$67
     }
     label$68 : while (1) {
      $20_1 = $20_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) != ($11_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$68
      }
      break label$68;
     };
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $19_1 ? -$20_1 : $20_1;
    break label$54;
   }
   HEAPF64[$1_1 >> 3] = -$20_1;
   $20_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
   HEAPF64[($1_1 + 16 | 0) >> 3] = -$22_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = -$20_1;
  }
  global$0 = $5_1 + 560 | 0;
  return $10_1 & 7 | 0 | 0;
 }
 
 function $1073($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $9_1 = 0.0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0.0, $4_1 = 0, $5_1 = 0, $11_1 = 0.0, $12_1 = 0.0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $189_1 = 0, $215_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $8_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3_1 = $21_1;
      $4_1 = $3_1 & 2147483647 | 0;
      if ($4_1 >>> 0 > 1074752122 >>> 0) {
       break label$4
      }
      if (($3_1 & 1048575 | 0 | 0) == (598523 | 0)) {
       break label$3
      }
      label$5 : {
       if ($4_1 >>> 0 > 1073928572 >>> 0) {
        break label$5
       }
       label$6 : {
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$0 = $8_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $22_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $23_1 = 0
          } else {
           $23_1 = 1
          }
          $24_1 = $23_1;
         } else {
          $24_1 = 0
         }
         $22_1 = $24_1;
        }
        if ($22_1) {
         break label$6
        }
        $0_1 = $0_1 + -1.5707963267341256;
        $9_1 = $0_1 + -6.077100506506192e-11;
        HEAPF64[$1_1 >> 3] = $9_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -6.077100506506192e-11;
        $3_1 = 1;
        break label$1;
       }
       $0_1 = $0_1 + 1.5707963267341256;
       $9_1 = $0_1 + 6.077100506506192e-11;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 6.077100506506192e-11;
       $3_1 = -1;
       break label$1;
      }
      label$7 : {
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$3 = $8_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $25_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $26_1 = 0
         } else {
          $26_1 = 1
         }
         $27_1 = $26_1;
        } else {
         $27_1 = 0
        }
        $25_1 = $27_1;
       }
       if ($25_1) {
        break label$7
       }
       $0_1 = $0_1 + -3.1415926534682512;
       $9_1 = $0_1 + -1.2154201013012384e-10;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -1.2154201013012384e-10;
       $3_1 = 2;
       break label$1;
      }
      $0_1 = $0_1 + 3.1415926534682512;
      $9_1 = $0_1 + 1.2154201013012384e-10;
      HEAPF64[$1_1 >> 3] = $9_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 1.2154201013012384e-10;
      $3_1 = -2;
      break label$1;
     }
     label$8 : {
      if ($4_1 >>> 0 > 1075594811 >>> 0) {
       break label$8
      }
      label$9 : {
       if ($4_1 >>> 0 > 1075183036 >>> 0) {
        break label$9
       }
       if (($4_1 | 0) == (1074977148 | 0)) {
        break label$3
       }
       label$10 : {
        i64toi32_i32$3 = $8$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $28_1 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $29_1 = 0
          } else {
           $29_1 = 1
          }
          $30_1 = $29_1;
         } else {
          $30_1 = 0
         }
         $28_1 = $30_1;
        }
        if ($28_1) {
         break label$10
        }
        $0_1 = $0_1 + -4.712388980202377;
        $9_1 = $0_1 + -1.8231301519518578e-10;
        HEAPF64[$1_1 >> 3] = $9_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -1.8231301519518578e-10;
        $3_1 = 3;
        break label$1;
       }
       $0_1 = $0_1 + 4.712388980202377;
       $9_1 = $0_1 + 1.8231301519518578e-10;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 1.8231301519518578e-10;
       $3_1 = -3;
       break label$1;
      }
      if (($4_1 | 0) == (1075388923 | 0)) {
       break label$3
      }
      label$11 : {
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $31_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $32_1 = 0
         } else {
          $32_1 = 1
         }
         $33_1 = $32_1;
        } else {
         $33_1 = 0
        }
        $31_1 = $33_1;
       }
       if ($31_1) {
        break label$11
       }
       $0_1 = $0_1 + -6.2831853069365025;
       $9_1 = $0_1 + -2.430840202602477e-10;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -2.430840202602477e-10;
       $3_1 = 4;
       break label$1;
      }
      $0_1 = $0_1 + 6.2831853069365025;
      $9_1 = $0_1 + 2.430840202602477e-10;
      HEAPF64[$1_1 >> 3] = $9_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 2.430840202602477e-10;
      $3_1 = -4;
      break label$1;
     }
     if ($4_1 >>> 0 > 1094263290 >>> 0) {
      break label$2
     }
    }
    $9_1 = $0_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $10_1 = $0_1 + $9_1 * -1.5707963267341256;
    $11_1 = $9_1 * 6.077100506506192e-11;
    $12_1 = $10_1 - $11_1;
    $5_1 = $12_1 < -.7853981633974483;
    label$12 : {
     label$13 : {
      if (!(Math_abs($9_1) < 2147483648.0)) {
       break label$13
      }
      $3_1 = ~~$9_1;
      break label$12;
     }
     $3_1 = -2147483648;
    }
    label$14 : {
     label$15 : {
      if (!$5_1) {
       break label$15
      }
      $3_1 = $3_1 + -1 | 0;
      $9_1 = $9_1 + -1.0;
      $11_1 = $9_1 * 6.077100506506192e-11;
      $10_1 = $0_1 + $9_1 * -1.5707963267341256;
      break label$14;
     }
     if (!($12_1 > .7853981633974483)) {
      break label$14
     }
     $3_1 = $3_1 + 1 | 0;
     $9_1 = $9_1 + 1.0;
     $11_1 = $9_1 * 6.077100506506192e-11;
     $10_1 = $0_1 + $9_1 * -1.5707963267341256;
    }
    $0_1 = $10_1 - $11_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    label$16 : {
     $5_1 = $4_1 >>> 20 | 0;
     $189_1 = $5_1;
     wasm2js_scratch_store_f64(+$0_1);
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 52;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $34_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $34_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     if (($189_1 - ($34_1 & 2047 | 0) | 0 | 0) < (17 | 0)) {
      break label$16
     }
     $0_1 = $9_1 * 6.077100506303966e-11;
     $12_1 = $10_1 - $0_1;
     $11_1 = $9_1 * 2.0222662487959506e-21 - ($10_1 - $12_1 - $0_1);
     $0_1 = $12_1 - $11_1;
     HEAPF64[$1_1 >> 3] = $0_1;
     label$17 : {
      $215_1 = $5_1;
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $35_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $35_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($215_1 - ($35_1 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break label$17
      }
      $10_1 = $12_1;
      break label$16;
     }
     $0_1 = $9_1 * 2.0222662487111665e-21;
     $10_1 = $12_1 - $0_1;
     $11_1 = $9_1 * 8.4784276603689e-32 - ($12_1 - $10_1 - $0_1);
     $0_1 = $10_1 - $11_1;
     HEAPF64[$1_1 >> 3] = $0_1;
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $10_1 - $0_1 - $11_1;
    break label$1;
   }
   label$18 : {
    if ($4_1 >>> 0 < 2146435072 >>> 0) {
     break label$18
    }
    $0_1 = $0_1 - $0_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
    $3_1 = 0;
    break label$1;
   }
   $6_1 = $2_1 + 16 | 0 | 8 | 0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $3_1 = $2_1 + 16 | 0;
   $5_1 = 1;
   label$19 : while (1) {
    label$20 : {
     label$21 : {
      if (!(Math_abs($0_1) < 2147483648.0)) {
       break label$21
      }
      $7_1 = ~~$0_1;
      break label$20;
     }
     $7_1 = -2147483648;
    }
    $9_1 = +($7_1 | 0);
    HEAPF64[$3_1 >> 3] = $9_1;
    $0_1 = ($0_1 - $9_1) * 16777216.0;
    $7_1 = $5_1 & 1 | 0;
    $5_1 = 0;
    $3_1 = $6_1;
    if ($7_1) {
     continue label$19
    }
    break label$19;
   };
   HEAPF64[($2_1 + 32 | 0) >> 3] = $0_1;
   $3_1 = 2;
   label$22 : while (1) {
    $5_1 = $3_1;
    $3_1 = $3_1 + -1 | 0;
    if (+HEAPF64[(($2_1 + 16 | 0) + ($5_1 << 3 | 0) | 0) >> 3] == 0.0) {
     continue label$22
    }
    break label$22;
   };
   $3_1 = $1072($2_1 + 16 | 0 | 0, $2_1 | 0, ($4_1 >>> 20 | 0) + -1046 | 0 | 0, $5_1 + 1 | 0 | 0, 1 | 0) | 0;
   $0_1 = +HEAPF64[$2_1 >> 3];
   label$23 : {
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $36_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $37_1 = 0
      } else {
       $37_1 = 1
      }
      $38_1 = $37_1;
     } else {
      $38_1 = 0
     }
     $36_1 = $38_1;
    }
    if ($36_1) {
     break label$23
    }
    HEAPF64[$1_1 >> 3] = -$0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = -+HEAPF64[($2_1 + 8 | 0) >> 3];
    $3_1 = 0 - $3_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $0_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = +HEAPF64[($2_1 + 8 | 0) >> 3];
  }
  global$0 = $2_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $1074($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $2_1 = 0.0, $3_1 = 0.0, $4_1 = 0.0, $16_1 = 0.0;
  $2_1 = $0_1 * $0_1;
  $3_1 = $2_1 * .5;
  $4_1 = 1.0 - $3_1;
  $16_1 = 1.0 - $4_1 - $3_1;
  $3_1 = $2_1 * $2_1;
  return +($4_1 + ($16_1 + ($2_1 * ($2_1 * ($2_1 * ($2_1 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3_1 * $3_1 * ($2_1 * ($2_1 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0_1 * $1_1)));
 }
 
 function $1075($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $3_1 = 0.0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $9_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 < 1045430272 >>> 0) {
     break label$1
    }
    $0_1 = +$1069(+$0_1, +(0.0), 0 | 0);
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $0_1 = $0_1 - $0_1;
    break label$1;
   }
   $2_1 = $1073(+$0_1, $1_1 | 0) | 0;
   $0_1 = +HEAPF64[($1_1 + 8 | 0) >> 3];
   $3_1 = +HEAPF64[$1_1 >> 3];
   label$4 : {
    switch ($2_1 & 3 | 0 | 0) {
    default:
     $0_1 = +$1069(+$3_1, +$0_1, 1 | 0);
     break label$1;
    case 1:
     $0_1 = +$1074(+$3_1, +$0_1);
     break label$1;
    case 2:
     $0_1 = -+$1069(+$3_1, +$0_1, 1 | 0);
     break label$1;
    case 3:
     break label$4;
    };
   }
   $0_1 = -+$1074(+$3_1, +$0_1);
  }
  global$0 = $1_1 + 16 | 0;
  return +$0_1;
 }
 
 function $1076($0_1) {
  $0_1 = +$0_1;
  return +Math_sqrt($0_1);
 }
 
 function $1077($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = ($1078($0_1 | 0) | 0) + 1 | 0;
   $2_1 = $1082($1_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $1031($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1078($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$1_1 >> 0] | 0) {
      break label$3
     }
     return $1_1 - $1_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (HEAPU8[$1_1 >> 0] | 0) {
      continue label$4
     }
     break label$1;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : while (1) {
    $1_1 = $2_1;
    $2_1 = $1_1 + 1 | 0;
    if (HEAPU8[$1_1 >> 0] | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1079($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $8_1 = 0.0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6_1 = 0.0, $3_1 = 0, $4_1 = 0, $20_1 = 0, $22_1 = 0, $23_1 = 0, $5_1 = 0, $7_1 = 0.0, $3$hi = 0, $18_1 = 0.0, $19_1 = 0.0, $21_1 = 0.0, $115_1 = 0.0;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = 2147483640;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 1072010279;
    i64toi32_i32$3 = 1;
    $4_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    if (!$4_1) {
     break label$2
    }
    break label$1;
   }
   $18_1 = .7853981633974483 - Math_abs($0_1);
   $19_1 = $1_1;
   $21_1 = -$1_1;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $20_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
      $22_1 = 0
     } else {
      $22_1 = 1
     }
     $23_1 = $22_1;
    } else {
     $23_1 = 0
    }
    $20_1 = $23_1;
   }
   $5_1 = $20_1;
   $0_1 = $18_1 + (3.061616997868383e-17 - ($5_1 ? $19_1 : $21_1));
   $1_1 = 0.0;
  }
  $6_1 = $0_1 * $0_1;
  $7_1 = $0_1 * $6_1;
  $8_1 = $6_1 * $6_1;
  $6_1 = $7_1 * .3333333333333341 + ($6_1 * ($7_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * -1.8558637485527546e-05 + 7.817944429395571e-05) + 5.880412408202641e-04) + 3.5920791075913124e-03) + .021869488294859542) + .13333333333320124 + $6_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * 2.590730518636337e-05 + 7.140724913826082e-05) + 2.464631348184699e-04) + 1.4562094543252903e-03) + .0088632398235993) + .05396825397622605)) + $1_1) + $1_1);
  $8_1 = $0_1 + $6_1;
  label$3 : {
   if ($4_1) {
    break label$3
   }
   $1_1 = +(1 - ($2_1 << 1 | 0) | 0 | 0);
   $8_1 = $0_1 + ($6_1 - $8_1 * $8_1 / ($8_1 + $1_1));
   $8_1 = $1_1 - ($8_1 + $8_1);
   return +($5_1 & 1 | 0 ? $8_1 : -$8_1);
  }
  label$4 : {
   if (!$2_1) {
    break label$4
   }
   $1_1 = -1.0 / $8_1;
   $115_1 = $1_1;
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $1_1 = +wasm2js_scratch_load_f64();
   wasm2js_scratch_store_f64(+$8_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $8_1 = +wasm2js_scratch_load_f64();
   $8_1 = $115_1 * ($1_1 * ($6_1 - ($8_1 - $0_1)) + ($1_1 * $8_1 + 1.0)) + $1_1;
  }
  return +$8_1;
 }
 
 function $1080($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $8_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 < 1044381696 >>> 0) {
     break label$1
    }
    $0_1 = +$1079(+$0_1, +(0.0), 0 | 0);
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $0_1 = $0_1 - $0_1;
    break label$1;
   }
   $2_1 = $1073(+$0_1, $1_1 | 0) | 0;
   $0_1 = +$1079(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), $2_1 & 1 | 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return +$0_1;
 }
 
 function $1081() {
  return 96276 | 0;
 }
 
 function $1082($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $9_1 = 0, $79_1 = 0, $183_1 = 0, $774_1 = 0, $776_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if ($0_1 >>> 0 > 244 >>> 0) {
              break label$11
             }
             label$12 : {
              $2_1 = HEAP32[(0 + 96280 | 0) >> 2] | 0;
              $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & 504 | 0;
              $4_1 = $3_1 >>> 3 | 0;
              $0_1 = $2_1 >>> $4_1 | 0;
              if (!($0_1 & 3 | 0)) {
               break label$12
              }
              label$13 : {
               label$14 : {
                $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                $4_1 = $3_1 << 3 | 0;
                $0_1 = $4_1 + 96320 | 0;
                $4_1 = HEAP32[($4_1 + 96328 | 0) >> 2] | 0;
                $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                if (($0_1 | 0) != ($5_1 | 0)) {
                 break label$14
                }
                HEAP32[(0 + 96280 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                break label$13;
               }
               HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
               HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
              }
              $0_1 = $4_1 + 8 | 0;
              $3_1 = $3_1 << 3 | 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $4_1 = $4_1 + $3_1 | 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              break label$1;
             }
             $6_1 = HEAP32[(0 + 96288 | 0) >> 2] | 0;
             if ($3_1 >>> 0 <= $6_1 >>> 0) {
              break label$10
             }
             label$15 : {
              if (!$0_1) {
               break label$15
              }
              label$16 : {
               label$17 : {
                $79_1 = $0_1 << $4_1 | 0;
                $0_1 = 2 << $4_1 | 0;
                $4_1 = __wasm_ctz_i32($79_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0 | 0) | 0;
                $0_1 = $4_1 << 3 | 0;
                $5_1 = $0_1 + 96320 | 0;
                $0_1 = HEAP32[($0_1 + 96328 | 0) >> 2] | 0;
                $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if (($5_1 | 0) != ($7_1 | 0)) {
                 break label$17
                }
                $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
                HEAP32[(0 + 96280 | 0) >> 2] = $2_1;
                break label$16;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $7_1 = $0_1 + $3_1 | 0;
              $4_1 = $4_1 << 3 | 0;
              $3_1 = $4_1 - $3_1 | 0;
              HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
              HEAP32[($0_1 + $4_1 | 0) >> 2] = $3_1;
              label$18 : {
               if (!$6_1) {
                break label$18
               }
               $5_1 = ($6_1 & -8 | 0) + 96320 | 0;
               $4_1 = HEAP32[(0 + 96300 | 0) >> 2] | 0;
               label$19 : {
                label$20 : {
                 $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
                 if ($2_1 & $8_1 | 0) {
                  break label$20
                 }
                 HEAP32[(0 + 96280 | 0) >> 2] = $2_1 | $8_1 | 0;
                 $8_1 = $5_1;
                 break label$19;
                }
                $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               }
               HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
               HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
               HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
              }
              $0_1 = $0_1 + 8 | 0;
              HEAP32[(0 + 96300 | 0) >> 2] = $7_1;
              HEAP32[(0 + 96288 | 0) >> 2] = $3_1;
              break label$1;
             }
             $9_1 = HEAP32[(0 + 96284 | 0) >> 2] | 0;
             if (!$9_1) {
              break label$10
             }
             $7_1 = HEAP32[(((__wasm_ctz_i32($9_1 | 0) | 0) << 2 | 0) + 96584 | 0) >> 2] | 0;
             $4_1 = ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
             $5_1 = $7_1;
             label$21 : {
              label$22 : while (1) {
               label$23 : {
                $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                if ($0_1) {
                 break label$23
                }
                $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$21
                }
               }
               $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $183_1 = $5_1;
               $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
               $4_1 = $5_1 ? $183_1 : $4_1;
               $7_1 = $5_1 ? $0_1 : $7_1;
               $5_1 = $0_1;
               continue label$22;
              };
             }
             $10_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
             label$24 : {
              $0_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
              if (($0_1 | 0) == ($7_1 | 0)) {
               break label$24
              }
              $5_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
              HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
              break label$2;
             }
             label$25 : {
              label$26 : {
               $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
               if (!$5_1) {
                break label$26
               }
               $8_1 = $7_1 + 20 | 0;
               break label$25;
              }
              $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
              if (!$5_1) {
               break label$9
              }
              $8_1 = $7_1 + 16 | 0;
             }
             label$27 : while (1) {
              $11_1 = $8_1;
              $0_1 = $5_1;
              $8_1 = $0_1 + 20 | 0;
              $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
              if ($5_1) {
               continue label$27
              }
              $8_1 = $0_1 + 16 | 0;
              $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
              if ($5_1) {
               continue label$27
              }
              break label$27;
             };
             HEAP32[$11_1 >> 2] = 0;
             break label$2;
            }
            $3_1 = -1;
            if ($0_1 >>> 0 > -65 >>> 0) {
             break label$10
            }
            $4_1 = $0_1 + 11 | 0;
            $3_1 = $4_1 & -8 | 0;
            $10_1 = HEAP32[(0 + 96284 | 0) >> 2] | 0;
            if (!$10_1) {
             break label$10
            }
            $6_1 = 31;
            label$28 : {
             if ($0_1 >>> 0 > 16777204 >>> 0) {
              break label$28
             }
             $0_1 = Math_clz32($4_1 >>> 8 | 0);
             $6_1 = ((($3_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
            }
            $4_1 = 0 - $3_1 | 0;
            label$29 : {
             label$30 : {
              label$31 : {
               label$32 : {
                $5_1 = HEAP32[(($6_1 << 2 | 0) + 96584 | 0) >> 2] | 0;
                if ($5_1) {
                 break label$32
                }
                $0_1 = 0;
                $8_1 = 0;
                break label$31;
               }
               $0_1 = 0;
               $7_1 = $3_1 << (($6_1 | 0) == (31 | 0) ? 0 : 25 - ($6_1 >>> 1 | 0) | 0) | 0;
               $8_1 = 0;
               label$33 : while (1) {
                label$34 : {
                 $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                 if ($2_1 >>> 0 >= $4_1 >>> 0) {
                  break label$34
                 }
                 $4_1 = $2_1;
                 $8_1 = $5_1;
                 if ($4_1) {
                  break label$34
                 }
                 $4_1 = 0;
                 $8_1 = $5_1;
                 $0_1 = $5_1;
                 break label$30;
                }
                $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                $11_1 = HEAP32[(($5_1 + (($7_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                $0_1 = $2_1 ? (($2_1 | 0) == ($11_1 | 0) ? $0_1 : $2_1) : $0_1;
                $7_1 = $7_1 << 1 | 0;
                $5_1 = $11_1;
                if ($5_1) {
                 continue label$33
                }
                break label$33;
               };
              }
              label$35 : {
               if ($0_1 | $8_1 | 0) {
                break label$35
               }
               $8_1 = 0;
               $0_1 = 2 << $6_1 | 0;
               $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $10_1 | 0;
               if (!$0_1) {
                break label$10
               }
               $0_1 = HEAP32[(((__wasm_ctz_i32($0_1 | 0) | 0) << 2 | 0) + 96584 | 0) >> 2] | 0;
              }
              if (!$0_1) {
               break label$29
              }
             }
             label$36 : while (1) {
              $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $7_1 = $2_1 >>> 0 < $4_1 >>> 0;
              label$37 : {
               $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
               if ($5_1) {
                break label$37
               }
               $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
              }
              $4_1 = $7_1 ? $2_1 : $4_1;
              $8_1 = $7_1 ? $0_1 : $8_1;
              $0_1 = $5_1;
              if ($0_1) {
               continue label$36
              }
              break label$36;
             };
            }
            if (!$8_1) {
             break label$10
            }
            if ($4_1 >>> 0 >= ((HEAP32[(0 + 96288 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
             break label$10
            }
            $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
            label$38 : {
             $0_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
             if (($0_1 | 0) == ($8_1 | 0)) {
              break label$38
             }
             $5_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
             HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
             break label$3;
            }
            label$39 : {
             label$40 : {
              $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
              if (!$5_1) {
               break label$40
              }
              $7_1 = $8_1 + 20 | 0;
              break label$39;
             }
             $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
             if (!$5_1) {
              break label$8
             }
             $7_1 = $8_1 + 16 | 0;
            }
            label$41 : while (1) {
             $2_1 = $7_1;
             $0_1 = $5_1;
             $7_1 = $0_1 + 20 | 0;
             $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
             if ($5_1) {
              continue label$41
             }
             $7_1 = $0_1 + 16 | 0;
             $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
             if ($5_1) {
              continue label$41
             }
             break label$41;
            };
            HEAP32[$2_1 >> 2] = 0;
            break label$3;
           }
           label$42 : {
            $0_1 = HEAP32[(0 + 96288 | 0) >> 2] | 0;
            if ($0_1 >>> 0 < $3_1 >>> 0) {
             break label$42
            }
            $4_1 = HEAP32[(0 + 96300 | 0) >> 2] | 0;
            label$43 : {
             label$44 : {
              $5_1 = $0_1 - $3_1 | 0;
              if ($5_1 >>> 0 < 16 >>> 0) {
               break label$44
              }
              $7_1 = $4_1 + $3_1 | 0;
              HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
              HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
              HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              break label$43;
             }
             HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
             $0_1 = $4_1 + $0_1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             $7_1 = 0;
             $5_1 = 0;
            }
            HEAP32[(0 + 96288 | 0) >> 2] = $5_1;
            HEAP32[(0 + 96300 | 0) >> 2] = $7_1;
            $0_1 = $4_1 + 8 | 0;
            break label$1;
           }
           label$45 : {
            $7_1 = HEAP32[(0 + 96292 | 0) >> 2] | 0;
            if ($7_1 >>> 0 <= $3_1 >>> 0) {
             break label$45
            }
            $4_1 = $7_1 - $3_1 | 0;
            HEAP32[(0 + 96292 | 0) >> 2] = $4_1;
            $0_1 = HEAP32[(0 + 96304 | 0) >> 2] | 0;
            $5_1 = $0_1 + $3_1 | 0;
            HEAP32[(0 + 96304 | 0) >> 2] = $5_1;
            HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
            $0_1 = $0_1 + 8 | 0;
            break label$1;
           }
           label$46 : {
            label$47 : {
             if (!(HEAP32[(0 + 96752 | 0) >> 2] | 0)) {
              break label$47
             }
             $4_1 = HEAP32[(0 + 96760 | 0) >> 2] | 0;
             break label$46;
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = -1;
            HEAP32[(i64toi32_i32$1 + 96764 | 0) >> 2] = -1;
            HEAP32[(i64toi32_i32$1 + 96768 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 4096;
            HEAP32[(i64toi32_i32$1 + 96756 | 0) >> 2] = 4096;
            HEAP32[(i64toi32_i32$1 + 96760 | 0) >> 2] = i64toi32_i32$0;
            HEAP32[(0 + 96752 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
            HEAP32[(0 + 96772 | 0) >> 2] = 0;
            HEAP32[(0 + 96724 | 0) >> 2] = 0;
            $4_1 = 4096;
           }
           $0_1 = 0;
           $6_1 = $3_1 + 47 | 0;
           $2_1 = $4_1 + $6_1 | 0;
           $11_1 = 0 - $4_1 | 0;
           $8_1 = $2_1 & $11_1 | 0;
           if ($8_1 >>> 0 <= $3_1 >>> 0) {
            break label$1
           }
           $0_1 = 0;
           label$48 : {
            $4_1 = HEAP32[(0 + 96720 | 0) >> 2] | 0;
            if (!$4_1) {
             break label$48
            }
            $5_1 = HEAP32[(0 + 96712 | 0) >> 2] | 0;
            $10_1 = $5_1 + $8_1 | 0;
            if ($10_1 >>> 0 <= $5_1 >>> 0) {
             break label$1
            }
            if ($10_1 >>> 0 > $4_1 >>> 0) {
             break label$1
            }
           }
           label$49 : {
            label$50 : {
             if ((HEAPU8[(0 + 96724 | 0) >> 0] | 0) & 4 | 0) {
              break label$50
             }
             label$51 : {
              label$52 : {
               label$53 : {
                label$54 : {
                 label$55 : {
                  $4_1 = HEAP32[(0 + 96304 | 0) >> 2] | 0;
                  if (!$4_1) {
                   break label$55
                  }
                  $0_1 = 96728;
                  label$56 : while (1) {
                   label$57 : {
                    $5_1 = HEAP32[$0_1 >> 2] | 0;
                    if ($4_1 >>> 0 < $5_1 >>> 0) {
                     break label$57
                    }
                    if ($4_1 >>> 0 < ($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0) {
                     break label$54
                    }
                   }
                   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                   if ($0_1) {
                    continue label$56
                   }
                   break label$56;
                  };
                 }
                 $7_1 = $1091(0 | 0) | 0;
                 if (($7_1 | 0) == (-1 | 0)) {
                  break label$51
                 }
                 $2_1 = $8_1;
                 label$58 : {
                  $0_1 = HEAP32[(0 + 96756 | 0) >> 2] | 0;
                  $4_1 = $0_1 + -1 | 0;
                  if (!($4_1 & $7_1 | 0)) {
                   break label$58
                  }
                  $2_1 = ($8_1 - $7_1 | 0) + (($4_1 + $7_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
                 }
                 if ($2_1 >>> 0 <= $3_1 >>> 0) {
                  break label$51
                 }
                 label$59 : {
                  $0_1 = HEAP32[(0 + 96720 | 0) >> 2] | 0;
                  if (!$0_1) {
                   break label$59
                  }
                  $4_1 = HEAP32[(0 + 96712 | 0) >> 2] | 0;
                  $5_1 = $4_1 + $2_1 | 0;
                  if ($5_1 >>> 0 <= $4_1 >>> 0) {
                   break label$51
                  }
                  if ($5_1 >>> 0 > $0_1 >>> 0) {
                   break label$51
                  }
                 }
                 $0_1 = $1091($2_1 | 0) | 0;
                 if (($0_1 | 0) != ($7_1 | 0)) {
                  break label$53
                 }
                 break label$49;
                }
                $2_1 = ($2_1 - $7_1 | 0) & $11_1 | 0;
                $7_1 = $1091($2_1 | 0) | 0;
                if (($7_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
                 break label$52
                }
                $0_1 = $7_1;
               }
               if (($0_1 | 0) == (-1 | 0)) {
                break label$51
               }
               label$60 : {
                if ($2_1 >>> 0 < ($3_1 + 48 | 0) >>> 0) {
                 break label$60
                }
                $7_1 = $0_1;
                break label$49;
               }
               $4_1 = HEAP32[(0 + 96760 | 0) >> 2] | 0;
               $4_1 = (($6_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
               if (($1091($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                break label$51
               }
               $2_1 = $4_1 + $2_1 | 0;
               $7_1 = $0_1;
               break label$49;
              }
              if (($7_1 | 0) != (-1 | 0)) {
               break label$49
              }
             }
             HEAP32[(0 + 96724 | 0) >> 2] = HEAP32[(0 + 96724 | 0) >> 2] | 0 | 4 | 0;
            }
            $7_1 = $1091($8_1 | 0) | 0;
            $0_1 = $1091(0 | 0) | 0;
            if (($7_1 | 0) == (-1 | 0)) {
             break label$5
            }
            if (($0_1 | 0) == (-1 | 0)) {
             break label$5
            }
            if ($7_1 >>> 0 >= $0_1 >>> 0) {
             break label$5
            }
            $2_1 = $0_1 - $7_1 | 0;
            if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
             break label$5
            }
           }
           $0_1 = (HEAP32[(0 + 96712 | 0) >> 2] | 0) + $2_1 | 0;
           HEAP32[(0 + 96712 | 0) >> 2] = $0_1;
           label$61 : {
            if ($0_1 >>> 0 <= (HEAP32[(0 + 96716 | 0) >> 2] | 0) >>> 0) {
             break label$61
            }
            HEAP32[(0 + 96716 | 0) >> 2] = $0_1;
           }
           label$62 : {
            label$63 : {
             $4_1 = HEAP32[(0 + 96304 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$63
             }
             $0_1 = 96728;
             label$64 : while (1) {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($7_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
               break label$62
              }
              $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$64
              }
              break label$7;
             };
            }
            label$65 : {
             label$66 : {
              $0_1 = HEAP32[(0 + 96296 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$66
              }
              if ($7_1 >>> 0 >= $0_1 >>> 0) {
               break label$65
              }
             }
             HEAP32[(0 + 96296 | 0) >> 2] = $7_1;
            }
            $0_1 = 0;
            HEAP32[(0 + 96732 | 0) >> 2] = $2_1;
            HEAP32[(0 + 96728 | 0) >> 2] = $7_1;
            HEAP32[(0 + 96312 | 0) >> 2] = -1;
            HEAP32[(0 + 96316 | 0) >> 2] = HEAP32[(0 + 96752 | 0) >> 2] | 0;
            HEAP32[(0 + 96740 | 0) >> 2] = 0;
            label$67 : while (1) {
             $4_1 = $0_1 << 3 | 0;
             $5_1 = $4_1 + 96320 | 0;
             HEAP32[($4_1 + 96328 | 0) >> 2] = $5_1;
             HEAP32[($4_1 + 96332 | 0) >> 2] = $5_1;
             $0_1 = $0_1 + 1 | 0;
             if (($0_1 | 0) != (32 | 0)) {
              continue label$67
             }
             break label$67;
            };
            $0_1 = $2_1 + -40 | 0;
            $4_1 = (-8 - $7_1 | 0) & 7 | 0;
            $5_1 = $0_1 - $4_1 | 0;
            HEAP32[(0 + 96292 | 0) >> 2] = $5_1;
            $4_1 = $7_1 + $4_1 | 0;
            HEAP32[(0 + 96304 | 0) >> 2] = $4_1;
            HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
            HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
            HEAP32[(0 + 96308 | 0) >> 2] = HEAP32[(0 + 96768 | 0) >> 2] | 0;
            break label$6;
           }
           if ($4_1 >>> 0 >= $7_1 >>> 0) {
            break label$7
           }
           if ($4_1 >>> 0 < $5_1 >>> 0) {
            break label$7
           }
           if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & 8 | 0) {
            break label$7
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
           $0_1 = (-8 - $4_1 | 0) & 7 | 0;
           $5_1 = $4_1 + $0_1 | 0;
           HEAP32[(0 + 96304 | 0) >> 2] = $5_1;
           $7_1 = (HEAP32[(0 + 96292 | 0) >> 2] | 0) + $2_1 | 0;
           $0_1 = $7_1 - $0_1 | 0;
           HEAP32[(0 + 96292 | 0) >> 2] = $0_1;
           HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[(($4_1 + $7_1 | 0) + 4 | 0) >> 2] = 40;
           HEAP32[(0 + 96308 | 0) >> 2] = HEAP32[(0 + 96768 | 0) >> 2] | 0;
           break label$6;
          }
          $0_1 = 0;
          break label$2;
         }
         $0_1 = 0;
         break label$3;
        }
        label$68 : {
         if ($7_1 >>> 0 >= (HEAP32[(0 + 96296 | 0) >> 2] | 0) >>> 0) {
          break label$68
         }
         HEAP32[(0 + 96296 | 0) >> 2] = $7_1;
        }
        $5_1 = $7_1 + $2_1 | 0;
        $0_1 = 96728;
        label$69 : {
         label$70 : {
          label$71 : while (1) {
           $8_1 = HEAP32[$0_1 >> 2] | 0;
           if (($8_1 | 0) == ($5_1 | 0)) {
            break label$70
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$71
           }
           break label$69;
          };
         }
         if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
          break label$4
         }
        }
        $0_1 = 96728;
        label$72 : {
         label$73 : while (1) {
          label$74 : {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           if ($4_1 >>> 0 < $5_1 >>> 0) {
            break label$74
           }
           $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
           if ($4_1 >>> 0 < $5_1 >>> 0) {
            break label$72
           }
          }
          $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          continue label$73;
         };
        }
        $0_1 = $2_1 + -40 | 0;
        $8_1 = (-8 - $7_1 | 0) & 7 | 0;
        $11_1 = $0_1 - $8_1 | 0;
        HEAP32[(0 + 96292 | 0) >> 2] = $11_1;
        $8_1 = $7_1 + $8_1 | 0;
        HEAP32[(0 + 96304 | 0) >> 2] = $8_1;
        HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
        HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 96308 | 0) >> 2] = HEAP32[(0 + 96768 | 0) >> 2] | 0;
        $0_1 = ($5_1 + ((39 - $5_1 | 0) & 7 | 0) | 0) + -47 | 0;
        $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
        HEAP32[($8_1 + 4 | 0) >> 2] = 27;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96736 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96740 | 0) >> 2] | 0;
        $774_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $8_1 + 16 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $774_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96728 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96732 | 0) >> 2] | 0;
        $776_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1;
        HEAP32[($8_1 + 8 | 0) >> 2] = $776_1;
        HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[(0 + 96736 | 0) >> 2] = $8_1 + 8 | 0;
        HEAP32[(0 + 96732 | 0) >> 2] = $2_1;
        HEAP32[(0 + 96728 | 0) >> 2] = $7_1;
        HEAP32[(0 + 96740 | 0) >> 2] = 0;
        $0_1 = $8_1 + 24 | 0;
        label$75 : while (1) {
         HEAP32[($0_1 + 4 | 0) >> 2] = 7;
         $7_1 = $0_1 + 8 | 0;
         $0_1 = $0_1 + 4 | 0;
         if ($7_1 >>> 0 < $5_1 >>> 0) {
          continue label$75
         }
         break label$75;
        };
        if (($8_1 | 0) == ($4_1 | 0)) {
         break label$6
        }
        HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
        $7_1 = $8_1 - $4_1 | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 | 1 | 0;
        HEAP32[$8_1 >> 2] = $7_1;
        label$76 : {
         label$77 : {
          if ($7_1 >>> 0 > 255 >>> 0) {
           break label$77
          }
          $0_1 = ($7_1 & -8 | 0) + 96320 | 0;
          label$78 : {
           label$79 : {
            $5_1 = HEAP32[(0 + 96280 | 0) >> 2] | 0;
            $7_1 = 1 << ($7_1 >>> 3 | 0) | 0;
            if ($5_1 & $7_1 | 0) {
             break label$79
            }
            HEAP32[(0 + 96280 | 0) >> 2] = $5_1 | $7_1 | 0;
            $5_1 = $0_1;
            break label$78;
           }
           $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          }
          HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
          HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
          $7_1 = 12;
          $8_1 = 8;
          break label$76;
         }
         $0_1 = 31;
         label$80 : {
          if ($7_1 >>> 0 > 16777215 >>> 0) {
           break label$80
          }
          $0_1 = Math_clz32($7_1 >>> 8 | 0);
          $0_1 = ((($7_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
         }
         HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
         i64toi32_i32$1 = $4_1;
         i64toi32_i32$0 = 0;
         HEAP32[($4_1 + 16 | 0) >> 2] = 0;
         HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
         $5_1 = ($0_1 << 2 | 0) + 96584 | 0;
         label$81 : {
          label$82 : {
           label$83 : {
            $8_1 = HEAP32[(0 + 96284 | 0) >> 2] | 0;
            $2_1 = 1 << $0_1 | 0;
            if ($8_1 & $2_1 | 0) {
             break label$83
            }
            HEAP32[(0 + 96284 | 0) >> 2] = $8_1 | $2_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$82;
           }
           $0_1 = $7_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $8_1 = HEAP32[$5_1 >> 2] | 0;
           label$84 : while (1) {
            $5_1 = $8_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7_1 | 0)) {
             break label$81
            }
            $8_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $2_1 = $5_1 + ($8_1 & 4 | 0) | 0;
            $8_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
            if ($8_1) {
             continue label$84
            }
            break label$84;
           };
           HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          $7_1 = 8;
          $8_1 = 12;
          $5_1 = $4_1;
          $0_1 = $4_1;
          break label$76;
         }
         $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
         $0_1 = 0;
         $7_1 = 24;
         $8_1 = 12;
        }
        HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
        HEAP32[($4_1 + $7_1 | 0) >> 2] = $0_1;
       }
       $0_1 = HEAP32[(0 + 96292 | 0) >> 2] | 0;
       if ($0_1 >>> 0 <= $3_1 >>> 0) {
        break label$5
       }
       $4_1 = $0_1 - $3_1 | 0;
       HEAP32[(0 + 96292 | 0) >> 2] = $4_1;
       $0_1 = HEAP32[(0 + 96304 | 0) >> 2] | 0;
       $5_1 = $0_1 + $3_1 | 0;
       HEAP32[(0 + 96304 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
       $0_1 = $0_1 + 8 | 0;
       break label$1;
      }
      HEAP32[($1081() | 0) >> 2] = 48;
      $0_1 = 0;
      break label$1;
     }
     HEAP32[$0_1 >> 2] = $7_1;
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
     $0_1 = $1083($7_1 | 0, $8_1 | 0, $3_1 | 0) | 0;
     break label$1;
    }
    label$85 : {
     if (!$11_1) {
      break label$85
     }
     label$86 : {
      label$87 : {
       $7_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $5_1 = ($7_1 << 2 | 0) + 96584 | 0;
       if (($8_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
        break label$87
       }
       HEAP32[$5_1 >> 2] = $0_1;
       if ($0_1) {
        break label$86
       }
       $10_1 = $10_1 & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       HEAP32[(0 + 96284 | 0) >> 2] = $10_1;
       break label$85;
      }
      label$88 : {
       label$89 : {
        if ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
         break label$89
        }
        HEAP32[($11_1 + 16 | 0) >> 2] = $0_1;
        break label$88;
       }
       HEAP32[($11_1 + 20 | 0) >> 2] = $0_1;
      }
      if (!$0_1) {
       break label$85
      }
     }
     HEAP32[($0_1 + 24 | 0) >> 2] = $11_1;
     label$90 : {
      $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$90
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
     }
     $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$85
     }
     HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
    }
    label$91 : {
     label$92 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$92
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$91;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $7_1 = $8_1 + $3_1 | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($7_1 + $4_1 | 0) >> 2] = $4_1;
     label$93 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$93
      }
      $0_1 = ($4_1 & -8 | 0) + 96320 | 0;
      label$94 : {
       label$95 : {
        $3_1 = HEAP32[(0 + 96280 | 0) >> 2] | 0;
        $4_1 = 1 << ($4_1 >>> 3 | 0) | 0;
        if ($3_1 & $4_1 | 0) {
         break label$95
        }
        HEAP32[(0 + 96280 | 0) >> 2] = $3_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$94;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $7_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      break label$91;
     }
     $0_1 = 31;
     label$96 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$96
      }
      $0_1 = Math_clz32($4_1 >>> 8 | 0);
      $0_1 = ((($4_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
     }
     HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$0 = 0;
     HEAP32[($7_1 + 16 | 0) >> 2] = 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $3_1 = ($0_1 << 2 | 0) + 96584 | 0;
     label$97 : {
      label$98 : {
       label$99 : {
        $5_1 = 1 << $0_1 | 0;
        if ($10_1 & $5_1 | 0) {
         break label$99
        }
        HEAP32[(0 + 96284 | 0) >> 2] = $10_1 | $5_1 | 0;
        HEAP32[$3_1 >> 2] = $7_1;
        HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
        break label$98;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       label$100 : while (1) {
        $3_1 = $5_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$97
        }
        $5_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = $3_1 + ($5_1 & 4 | 0) | 0;
        $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        if ($5_1) {
         continue label$100
        }
        break label$100;
       };
       HEAP32[($2_1 + 16 | 0) >> 2] = $7_1;
       HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $7_1;
      break label$91;
     }
     $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
     HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
     HEAP32[($7_1 + 24 | 0) >> 2] = 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$101 : {
    if (!$10_1) {
     break label$101
    }
    label$102 : {
     label$103 : {
      $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
      $5_1 = ($8_1 << 2 | 0) + 96584 | 0;
      if (($7_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
       break label$103
      }
      HEAP32[$5_1 >> 2] = $0_1;
      if ($0_1) {
       break label$102
      }
      HEAP32[(0 + 96284 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
      break label$101;
     }
     label$104 : {
      label$105 : {
       if ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
        break label$105
       }
       HEAP32[($10_1 + 16 | 0) >> 2] = $0_1;
       break label$104;
      }
      HEAP32[($10_1 + 20 | 0) >> 2] = $0_1;
     }
     if (!$0_1) {
      break label$101
     }
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = $10_1;
    label$106 : {
     $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$106
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
    }
    $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$101
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
   }
   label$107 : {
    label$108 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$108
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $7_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$107;
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $3_1 = $7_1 + $3_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($3_1 + $4_1 | 0) >> 2] = $4_1;
    label$109 : {
     if (!$6_1) {
      break label$109
     }
     $5_1 = ($6_1 & -8 | 0) + 96320 | 0;
     $0_1 = HEAP32[(0 + 96300 | 0) >> 2] | 0;
     label$110 : {
      label$111 : {
       $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
       if ($8_1 & $2_1 | 0) {
        break label$111
       }
       HEAP32[(0 + 96280 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $5_1;
       break label$110;
      }
      $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 96300 | 0) >> 2] = $3_1;
    HEAP32[(0 + 96288 | 0) >> 2] = $4_1;
   }
   $0_1 = $7_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1083($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $6_1 = 0, $9_1 = 0;
  $3_1 = $0_1 + ((-8 - $0_1 | 0) & 7 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 | 3 | 0;
  $4_1 = $1_1 + ((-8 - $1_1 | 0) & 7 | 0) | 0;
  $5_1 = $3_1 + $2_1 | 0;
  $0_1 = $4_1 - $5_1 | 0;
  label$1 : {
   label$2 : {
    if (($4_1 | 0) != (HEAP32[(0 + 96304 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[(0 + 96304 | 0) >> 2] = $5_1;
    $2_1 = (HEAP32[(0 + 96292 | 0) >> 2] | 0) + $0_1 | 0;
    HEAP32[(0 + 96292 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
    break label$1;
   }
   label$3 : {
    if (($4_1 | 0) != (HEAP32[(0 + 96300 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[(0 + 96300 | 0) >> 2] = $5_1;
    $2_1 = (HEAP32[(0 + 96288 | 0) >> 2] | 0) + $0_1 | 0;
    HEAP32[(0 + 96288 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
    HEAP32[($5_1 + $2_1 | 0) >> 2] = $2_1;
    break label$1;
   }
   label$4 : {
    $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if (($1_1 & 3 | 0 | 0) != (1 | 0)) {
     break label$4
    }
    $6_1 = $1_1 & -8 | 0;
    $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      if ($1_1 >>> 0 > 255 >>> 0) {
       break label$6
      }
      label$7 : {
       $7_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($7_1 | 0)) {
        break label$7
       }
       HEAP32[(0 + 96280 | 0) >> 2] = (HEAP32[(0 + 96280 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $1_1 >>> 3 | 0 | 0) | 0) | 0;
       break label$5;
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
      break label$5;
     }
     $8_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       if (($2_1 | 0) == ($4_1 | 0)) {
        break label$9
       }
       $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
       break label$8;
      }
      label$10 : {
       label$11 : {
        label$12 : {
         $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
         if (!$1_1) {
          break label$12
         }
         $7_1 = $4_1 + 20 | 0;
         break label$11;
        }
        $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        if (!$1_1) {
         break label$10
        }
        $7_1 = $4_1 + 16 | 0;
       }
       label$13 : while (1) {
        $9_1 = $7_1;
        $2_1 = $1_1;
        $7_1 = $2_1 + 20 | 0;
        $1_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        if ($1_1) {
         continue label$13
        }
        $7_1 = $2_1 + 16 | 0;
        $1_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        if ($1_1) {
         continue label$13
        }
        break label$13;
       };
       HEAP32[$9_1 >> 2] = 0;
       break label$8;
      }
      $2_1 = 0;
     }
     if (!$8_1) {
      break label$5
     }
     label$14 : {
      label$15 : {
       $7_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
       $1_1 = ($7_1 << 2 | 0) + 96584 | 0;
       if (($4_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
        break label$15
       }
       HEAP32[$1_1 >> 2] = $2_1;
       if ($2_1) {
        break label$14
       }
       HEAP32[(0 + 96284 | 0) >> 2] = (HEAP32[(0 + 96284 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$5;
      }
      label$16 : {
       label$17 : {
        if ((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
         break label$17
        }
        HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
        break label$16;
       }
       HEAP32[($8_1 + 20 | 0) >> 2] = $2_1;
      }
      if (!$2_1) {
       break label$5
      }
     }
     HEAP32[($2_1 + 24 | 0) >> 2] = $8_1;
     label$18 : {
      $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$18
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
     }
     $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$5
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
    }
    $0_1 = $6_1 + $0_1 | 0;
    $4_1 = $4_1 + $6_1 | 0;
    $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $1_1 & -2 | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
   HEAP32[($5_1 + $0_1 | 0) >> 2] = $0_1;
   label$19 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$19
    }
    $2_1 = ($0_1 & -8 | 0) + 96320 | 0;
    label$20 : {
     label$21 : {
      $1_1 = HEAP32[(0 + 96280 | 0) >> 2] | 0;
      $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
      if ($1_1 & $0_1 | 0) {
       break label$21
      }
      HEAP32[(0 + 96280 | 0) >> 2] = $1_1 | $0_1 | 0;
      $0_1 = $2_1;
      break label$20;
     }
     $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
    break label$1;
   }
   $2_1 = 31;
   label$22 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$22
    }
    $2_1 = Math_clz32($0_1 >>> 8 | 0);
    $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   $1_1 = ($2_1 << 2 | 0) + 96584 | 0;
   label$23 : {
    label$24 : {
     label$25 : {
      $7_1 = HEAP32[(0 + 96284 | 0) >> 2] | 0;
      $4_1 = 1 << $2_1 | 0;
      if ($7_1 & $4_1 | 0) {
       break label$25
      }
      HEAP32[(0 + 96284 | 0) >> 2] = $7_1 | $4_1 | 0;
      HEAP32[$1_1 >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
      break label$24;
     }
     $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
     $7_1 = HEAP32[$1_1 >> 2] | 0;
     label$26 : while (1) {
      $1_1 = $7_1;
      if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
       break label$23
      }
      $7_1 = $2_1 >>> 29 | 0;
      $2_1 = $2_1 << 1 | 0;
      $4_1 = $1_1 + ($7_1 & 4 | 0) | 0;
      $7_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      if ($7_1) {
       continue label$26
      }
      break label$26;
     };
     HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
    break label$1;
   }
   $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  }
  return $3_1 + 8 | 0 | 0;
 }
 
 function $1084($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $1_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 2 | 0)) {
     break label$1
    }
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $4_1 | 0;
    if ($1_1 >>> 0 < (HEAP32[(0 + 96296 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $0_1 = $4_1 + $0_1 | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($1_1 | 0) == (HEAP32[(0 + 96300 | 0) >> 2] | 0 | 0)) {
         break label$6
        }
        $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        label$7 : {
         if ($4_1 >>> 0 > 255 >>> 0) {
          break label$7
         }
         $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
         if (($2_1 | 0) != ($5_1 | 0)) {
          break label$5
         }
         HEAP32[(0 + 96280 | 0) >> 2] = (HEAP32[(0 + 96280 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
         break label$2;
        }
        $6_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
        label$8 : {
         if (($2_1 | 0) == ($1_1 | 0)) {
          break label$8
         }
         $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
         HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
         HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
         break label$3;
        }
        label$9 : {
         label$10 : {
          $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$10
          }
          $5_1 = $1_1 + 20 | 0;
          break label$9;
         }
         $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$4
         }
         $5_1 = $1_1 + 16 | 0;
        }
        label$11 : while (1) {
         $7_1 = $5_1;
         $2_1 = $4_1;
         $5_1 = $2_1 + 20 | 0;
         $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$11
         }
         $5_1 = $2_1 + 16 | 0;
         $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$11
         }
         break label$11;
        };
        HEAP32[$7_1 >> 2] = 0;
        break label$3;
       }
       $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
        break label$2
       }
       HEAP32[(0 + 96288 | 0) >> 2] = $0_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
       HEAP32[$3_1 >> 2] = $0_1;
       return;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
      break label$2;
     }
     $2_1 = 0;
    }
    if (!$6_1) {
     break label$2
    }
    label$12 : {
     label$13 : {
      $5_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      $4_1 = ($5_1 << 2 | 0) + 96584 | 0;
      if (($1_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
       break label$13
      }
      HEAP32[$4_1 >> 2] = $2_1;
      if ($2_1) {
       break label$12
      }
      HEAP32[(0 + 96284 | 0) >> 2] = (HEAP32[(0 + 96284 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$2;
     }
     label$14 : {
      label$15 : {
       if ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$15
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       break label$14;
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
     }
     if (!$2_1) {
      break label$2
     }
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
    label$16 : {
     $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$16
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
    }
    $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$2
    }
    HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
   }
   if ($1_1 >>> 0 >= $3_1 >>> 0) {
    break label$1
   }
   $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   label$17 : {
    label$18 : {
     label$19 : {
      label$20 : {
       label$21 : {
        if ($4_1 & 2 | 0) {
         break label$21
        }
        label$22 : {
         if (($3_1 | 0) != (HEAP32[(0 + 96304 | 0) >> 2] | 0 | 0)) {
          break label$22
         }
         HEAP32[(0 + 96304 | 0) >> 2] = $1_1;
         $0_1 = (HEAP32[(0 + 96292 | 0) >> 2] | 0) + $0_1 | 0;
         HEAP32[(0 + 96292 | 0) >> 2] = $0_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
         if (($1_1 | 0) != (HEAP32[(0 + 96300 | 0) >> 2] | 0 | 0)) {
          break label$1
         }
         HEAP32[(0 + 96288 | 0) >> 2] = 0;
         HEAP32[(0 + 96300 | 0) >> 2] = 0;
         return;
        }
        label$23 : {
         if (($3_1 | 0) != (HEAP32[(0 + 96300 | 0) >> 2] | 0 | 0)) {
          break label$23
         }
         HEAP32[(0 + 96300 | 0) >> 2] = $1_1;
         $0_1 = (HEAP32[(0 + 96288 | 0) >> 2] | 0) + $0_1 | 0;
         HEAP32[(0 + 96288 | 0) >> 2] = $0_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
         HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
         return;
        }
        $0_1 = ($4_1 & -8 | 0) + $0_1 | 0;
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        label$24 : {
         if ($4_1 >>> 0 > 255 >>> 0) {
          break label$24
         }
         label$25 : {
          $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
          if (($2_1 | 0) != ($5_1 | 0)) {
           break label$25
          }
          HEAP32[(0 + 96280 | 0) >> 2] = (HEAP32[(0 + 96280 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
          break label$18;
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
         HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
         break label$18;
        }
        $6_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
        label$26 : {
         if (($2_1 | 0) == ($3_1 | 0)) {
          break label$26
         }
         $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
         HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
         break label$19;
        }
        label$27 : {
         label$28 : {
          $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$28
          }
          $5_1 = $3_1 + 20 | 0;
          break label$27;
         }
         $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$20
         }
         $5_1 = $3_1 + 16 | 0;
        }
        label$29 : while (1) {
         $7_1 = $5_1;
         $2_1 = $4_1;
         $5_1 = $2_1 + 20 | 0;
         $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$29
         }
         $5_1 = $2_1 + 16 | 0;
         $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$29
         }
         break label$29;
        };
        HEAP32[$7_1 >> 2] = 0;
        break label$19;
       }
       HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
       HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
       break label$17;
      }
      $2_1 = 0;
     }
     if (!$6_1) {
      break label$18
     }
     label$30 : {
      label$31 : {
       $5_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
       $4_1 = ($5_1 << 2 | 0) + 96584 | 0;
       if (($3_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break label$31
       }
       HEAP32[$4_1 >> 2] = $2_1;
       if ($2_1) {
        break label$30
       }
       HEAP32[(0 + 96284 | 0) >> 2] = (HEAP32[(0 + 96284 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$18;
      }
      label$32 : {
       label$33 : {
        if ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$33
        }
        HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
        break label$32;
       }
       HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      }
      if (!$2_1) {
       break label$18
      }
     }
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     label$34 : {
      $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$34
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
     }
     $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$18
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    if (($1_1 | 0) != (HEAP32[(0 + 96300 | 0) >> 2] | 0 | 0)) {
     break label$17
    }
    HEAP32[(0 + 96288 | 0) >> 2] = $0_1;
    return;
   }
   label$35 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$35
    }
    $2_1 = ($0_1 & -8 | 0) + 96320 | 0;
    label$36 : {
     label$37 : {
      $4_1 = HEAP32[(0 + 96280 | 0) >> 2] | 0;
      $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
      if ($4_1 & $0_1 | 0) {
       break label$37
      }
      HEAP32[(0 + 96280 | 0) >> 2] = $4_1 | $0_1 | 0;
      $0_1 = $2_1;
      break label$36;
     }
     $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $2_1 = 31;
   label$38 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$38
    }
    $2_1 = Math_clz32($0_1 >>> 8 | 0);
    $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   $5_1 = ($2_1 << 2 | 0) + 96584 | 0;
   label$39 : {
    label$40 : {
     label$41 : {
      label$42 : {
       $4_1 = HEAP32[(0 + 96284 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($4_1 & $3_1 | 0) {
        break label$42
       }
       HEAP32[(0 + 96284 | 0) >> 2] = $4_1 | $3_1 | 0;
       HEAP32[$5_1 >> 2] = $1_1;
       $0_1 = 8;
       $2_1 = 24;
       break label$41;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      label$43 : while (1) {
       $4_1 = $5_1;
       if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$40
       }
       $5_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = $4_1 + ($5_1 & 4 | 0) | 0;
       $5_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if ($5_1) {
        continue label$43
       }
       break label$43;
      };
      HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
      $0_1 = 8;
      $2_1 = 24;
      $5_1 = $4_1;
     }
     $4_1 = $1_1;
     $3_1 = $1_1;
     break label$39;
    }
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    $3_1 = 0;
    $0_1 = 24;
    $2_1 = 8;
   }
   HEAP32[($1_1 + $2_1 | 0) >> 2] = $5_1;
   HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($1_1 + $0_1 | 0) >> 2] = $3_1;
   $1_1 = (HEAP32[(0 + 96312 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 96312 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $1085($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $1082($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($1081() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $1086($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $1082($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $1031($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $1084($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $1086($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2_1 & 3 | 0) {
     break label$2
    }
    $4_1 = 0;
    if ($1_1 >>> 0 < 256 >>> 0) {
     break label$1
    }
    label$3 : {
     if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$3
     }
     $4_1 = $0_1;
     if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 96760 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   $5_1 = $0_1 + $3_1 | 0;
   label$4 : {
    label$5 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$5
     }
     $3_1 = $3_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$4
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $1089($1_1 | 0, $3_1 | 0);
     break label$4;
    }
    $4_1 = 0;
    label$6 : {
     if (($5_1 | 0) != (HEAP32[(0 + 96304 | 0) >> 2] | 0 | 0)) {
      break label$6
     }
     $3_1 = (HEAP32[(0 + 96292 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 <= $1_1 >>> 0) {
      break label$1
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
     $2_1 = $0_1 + $1_1 | 0;
     $1_1 = $3_1 - $1_1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 96292 | 0) >> 2] = $1_1;
     HEAP32[(0 + 96304 | 0) >> 2] = $2_1;
     break label$4;
    }
    label$7 : {
     if (($5_1 | 0) != (HEAP32[(0 + 96300 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     $4_1 = 0;
     $3_1 = (HEAP32[(0 + 96288 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$1
     }
     label$8 : {
      label$9 : {
       $4_1 = $3_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break label$9
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $3_1 = $0_1 + $3_1 | 0;
       HEAP32[$3_1 >> 2] = $4_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$8;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 96300 | 0) >> 2] = $1_1;
     HEAP32[(0 + 96288 | 0) >> 2] = $4_1;
     break label$4;
    }
    $4_1 = 0;
    $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($6_1 & 2 | 0) {
     break label$1
    }
    $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
    if ($7_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    $8_1 = $7_1 - $1_1 | 0;
    $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    label$10 : {
     label$11 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$11
      }
      label$12 : {
       $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$12
       }
       HEAP32[(0 + 96280 | 0) >> 2] = (HEAP32[(0 + 96280 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 >>> 3 | 0 | 0) | 0) | 0;
       break label$10;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
      break label$10;
     }
     $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$13 : {
      label$14 : {
       if (($3_1 | 0) == ($5_1 | 0)) {
        break label$14
       }
       $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
       break label$13;
      }
      label$15 : {
       label$16 : {
        label$17 : {
         $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$17
         }
         $6_1 = $5_1 + 20 | 0;
         break label$16;
        }
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if (!$4_1) {
         break label$15
        }
        $6_1 = $5_1 + 16 | 0;
       }
       label$18 : while (1) {
        $10_1 = $6_1;
        $3_1 = $4_1;
        $6_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$18
        }
        $6_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$18
        }
        break label$18;
       };
       HEAP32[$10_1 >> 2] = 0;
       break label$13;
      }
      $3_1 = 0;
     }
     if (!$9_1) {
      break label$10
     }
     label$19 : {
      label$20 : {
       $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $4_1 = ($6_1 << 2 | 0) + 96584 | 0;
       if (($5_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break label$20
       }
       HEAP32[$4_1 >> 2] = $3_1;
       if ($3_1) {
        break label$19
       }
       HEAP32[(0 + 96284 | 0) >> 2] = (HEAP32[(0 + 96284 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
       break label$10;
      }
      label$21 : {
       label$22 : {
        if ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
         break label$22
        }
        HEAP32[($9_1 + 16 | 0) >> 2] = $3_1;
        break label$21;
       }
       HEAP32[($9_1 + 20 | 0) >> 2] = $3_1;
      }
      if (!$3_1) {
       break label$10
      }
     }
     HEAP32[($3_1 + 24 | 0) >> 2] = $9_1;
     label$23 : {
      $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$23
      }
      HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
     }
     $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$10
     }
     HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
    }
    label$24 : {
     if ($8_1 >>> 0 > 15 >>> 0) {
      break label$24
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $7_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$4;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
    $3_1 = $0_1 + $7_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $1089($1_1 | 0, $8_1 | 0);
   }
   $4_1 = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $1087($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = 16;
  label$1 : {
   label$2 : {
    $3_1 = $0_1 >>> 0 > 16 >>> 0 ? $0_1 : 16;
    if ($3_1 & ($3_1 + -1 | 0) | 0) {
     break label$2
    }
    $0_1 = $3_1;
    break label$1;
   }
   label$3 : while (1) {
    $0_1 = $2_1;
    $2_1 = $0_1 << 1 | 0;
    if ($0_1 >>> 0 < $3_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   if ($1_1 >>> 0 < (-64 - $0_1 | 0) >>> 0) {
    break label$4
   }
   HEAP32[($1081() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$5 : {
   $1_1 = $1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0;
   $2_1 = $1082(($1_1 + $0_1 | 0) + 12 | 0 | 0) | 0;
   if ($2_1) {
    break label$5
   }
   return 0 | 0;
  }
  $3_1 = $2_1 + -8 | 0;
  label$6 : {
   label$7 : {
    if (($0_1 + -1 | 0) & $2_1 | 0) {
     break label$7
    }
    $0_1 = $3_1;
    break label$6;
   }
   $4_1 = $2_1 + -4 | 0;
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   $2_1 = ((($2_1 + $0_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0) + -8 | 0;
   $0_1 = $2_1 + (($2_1 - $3_1 | 0) >>> 0 > 15 >>> 0 ? 0 : $0_1) | 0;
   $2_1 = $0_1 - $3_1 | 0;
   $6_1 = ($5_1 & -8 | 0) - $2_1 | 0;
   label$8 : {
    if ($5_1 & 3 | 0) {
     break label$8
    }
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$0_1 >> 2] = $3_1 + $2_1 | 0;
    break label$6;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $0_1 + $6_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   HEAP32[$4_1 >> 2] = $2_1 | ((HEAP32[$4_1 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $3_1 + $2_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $1089($3_1 | 0, $2_1 | 0);
  }
  label$9 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 3 | 0)) {
    break label$9
   }
   $3_1 = $2_1 & -8 | 0;
   if ($3_1 >>> 0 <= ($1_1 + 16 | 0) >>> 0) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
   $2_1 = $0_1 + $1_1 | 0;
   $1_1 = $3_1 - $1_1 | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 3 | 0;
   $3_1 = $0_1 + $3_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $1089($2_1 | 0, $1_1 | 0);
  }
  return $0_1 + 8 | 0 | 0;
 }
 
 function $1088($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 | 0) != (8 | 0)) {
      break label$3
     }
     $1_1 = $1082($2_1 | 0) | 0;
     break label$2;
    }
    $3_1 = 28;
    if ($1_1 >>> 0 < 4 >>> 0) {
     break label$1
    }
    if ($1_1 & 3 | 0) {
     break label$1
    }
    $4_1 = $1_1 >>> 2 | 0;
    if ($4_1 & ($4_1 + -1 | 0) | 0) {
     break label$1
    }
    label$4 : {
     if ($2_1 >>> 0 <= (-64 - $1_1 | 0) >>> 0) {
      break label$4
     }
     return 48 | 0;
    }
    $1_1 = $1087(($1_1 >>> 0 > 16 >>> 0 ? $1_1 : 16) | 0, $2_1 | 0) | 0;
   }
   label$5 : {
    if ($1_1) {
     break label$5
    }
    return 48 | 0;
   }
   HEAP32[$0_1 >> 2] = $1_1;
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $1089($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 2 | 0)) {
     break label$1
    }
    $4_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $4_1 + $1_1 | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $0_1 = $0_1 - $4_1 | 0;
        if (($0_1 | 0) == (HEAP32[(0 + 96300 | 0) >> 2] | 0 | 0)) {
         break label$6
        }
        $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        label$7 : {
         if ($4_1 >>> 0 > 255 >>> 0) {
          break label$7
         }
         $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         if (($3_1 | 0) != ($5_1 | 0)) {
          break label$5
         }
         HEAP32[(0 + 96280 | 0) >> 2] = (HEAP32[(0 + 96280 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
         break label$2;
        }
        $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
        label$8 : {
         if (($3_1 | 0) == ($0_1 | 0)) {
          break label$8
         }
         $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
         break label$3;
        }
        label$9 : {
         label$10 : {
          $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$10
          }
          $5_1 = $0_1 + 20 | 0;
          break label$9;
         }
         $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$4
         }
         $5_1 = $0_1 + 16 | 0;
        }
        label$11 : while (1) {
         $7_1 = $5_1;
         $3_1 = $4_1;
         $5_1 = $3_1 + 20 | 0;
         $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$11
         }
         $5_1 = $3_1 + 16 | 0;
         $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$11
         }
         break label$11;
        };
        HEAP32[$7_1 >> 2] = 0;
        break label$3;
       }
       $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
        break label$2
       }
       HEAP32[(0 + 96288 | 0) >> 2] = $1_1;
       HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
       HEAP32[$2_1 >> 2] = $1_1;
       return;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
      break label$2;
     }
     $3_1 = 0;
    }
    if (!$6_1) {
     break label$2
    }
    label$12 : {
     label$13 : {
      $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $4_1 = ($5_1 << 2 | 0) + 96584 | 0;
      if (($0_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
       break label$13
      }
      HEAP32[$4_1 >> 2] = $3_1;
      if ($3_1) {
       break label$12
      }
      HEAP32[(0 + 96284 | 0) >> 2] = (HEAP32[(0 + 96284 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$2;
     }
     label$14 : {
      label$15 : {
       if ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
        break label$15
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       break label$14;
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     }
     if (!$3_1) {
      break label$2
     }
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
    label$16 : {
     $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$16
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
    }
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$2
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
   }
   label$17 : {
    label$18 : {
     label$19 : {
      label$20 : {
       label$21 : {
        $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        if ($4_1 & 2 | 0) {
         break label$21
        }
        label$22 : {
         if (($2_1 | 0) != (HEAP32[(0 + 96304 | 0) >> 2] | 0 | 0)) {
          break label$22
         }
         HEAP32[(0 + 96304 | 0) >> 2] = $0_1;
         $1_1 = (HEAP32[(0 + 96292 | 0) >> 2] | 0) + $1_1 | 0;
         HEAP32[(0 + 96292 | 0) >> 2] = $1_1;
         HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
         if (($0_1 | 0) != (HEAP32[(0 + 96300 | 0) >> 2] | 0 | 0)) {
          break label$1
         }
         HEAP32[(0 + 96288 | 0) >> 2] = 0;
         HEAP32[(0 + 96300 | 0) >> 2] = 0;
         return;
        }
        label$23 : {
         if (($2_1 | 0) != (HEAP32[(0 + 96300 | 0) >> 2] | 0 | 0)) {
          break label$23
         }
         HEAP32[(0 + 96300 | 0) >> 2] = $0_1;
         $1_1 = (HEAP32[(0 + 96288 | 0) >> 2] | 0) + $1_1 | 0;
         HEAP32[(0 + 96288 | 0) >> 2] = $1_1;
         HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
         HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
         return;
        }
        $1_1 = ($4_1 & -8 | 0) + $1_1 | 0;
        $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        label$24 : {
         if ($4_1 >>> 0 > 255 >>> 0) {
          break label$24
         }
         label$25 : {
          $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
          if (($3_1 | 0) != ($5_1 | 0)) {
           break label$25
          }
          HEAP32[(0 + 96280 | 0) >> 2] = (HEAP32[(0 + 96280 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
          break label$18;
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
         break label$18;
        }
        $6_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
        label$26 : {
         if (($3_1 | 0) == ($2_1 | 0)) {
          break label$26
         }
         $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
         break label$19;
        }
        label$27 : {
         label$28 : {
          $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$28
          }
          $5_1 = $2_1 + 20 | 0;
          break label$27;
         }
         $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$20
         }
         $5_1 = $2_1 + 16 | 0;
        }
        label$29 : while (1) {
         $7_1 = $5_1;
         $3_1 = $4_1;
         $5_1 = $3_1 + 20 | 0;
         $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$29
         }
         $5_1 = $3_1 + 16 | 0;
         $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$29
         }
         break label$29;
        };
        HEAP32[$7_1 >> 2] = 0;
        break label$19;
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
       HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
       break label$17;
      }
      $3_1 = 0;
     }
     if (!$6_1) {
      break label$18
     }
     label$30 : {
      label$31 : {
       $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
       $4_1 = ($5_1 << 2 | 0) + 96584 | 0;
       if (($2_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break label$31
       }
       HEAP32[$4_1 >> 2] = $3_1;
       if ($3_1) {
        break label$30
       }
       HEAP32[(0 + 96284 | 0) >> 2] = (HEAP32[(0 + 96284 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$18;
      }
      label$32 : {
       label$33 : {
        if ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$33
        }
        HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
        break label$32;
       }
       HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      }
      if (!$3_1) {
       break label$18
      }
     }
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     label$34 : {
      $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$34
      }
      HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
     }
     $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$18
     }
     HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
    if (($0_1 | 0) != (HEAP32[(0 + 96300 | 0) >> 2] | 0 | 0)) {
     break label$17
    }
    HEAP32[(0 + 96288 | 0) >> 2] = $1_1;
    return;
   }
   label$35 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$35
    }
    $3_1 = ($1_1 & -8 | 0) + 96320 | 0;
    label$36 : {
     label$37 : {
      $4_1 = HEAP32[(0 + 96280 | 0) >> 2] | 0;
      $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
      if ($4_1 & $1_1 | 0) {
       break label$37
      }
      HEAP32[(0 + 96280 | 0) >> 2] = $4_1 | $1_1 | 0;
      $1_1 = $3_1;
      break label$36;
     }
     $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    return;
   }
   $3_1 = 31;
   label$38 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$38
    }
    $3_1 = Math_clz32($1_1 >>> 8 | 0);
    $3_1 = ((($1_1 >>> (38 - $3_1 | 0) | 0) & 1 | 0) - ($3_1 << 1 | 0) | 0) + 62 | 0;
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   $4_1 = ($3_1 << 2 | 0) + 96584 | 0;
   label$39 : {
    label$40 : {
     label$41 : {
      $5_1 = HEAP32[(0 + 96284 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($5_1 & $2_1 | 0) {
       break label$41
      }
      HEAP32[(0 + 96284 | 0) >> 2] = $5_1 | $2_1 | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
      break label$40;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $5_1 = HEAP32[$4_1 >> 2] | 0;
     label$42 : while (1) {
      $4_1 = $5_1;
      if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$39
      }
      $5_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = $4_1 + ($5_1 & 4 | 0) | 0;
      $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
      if ($5_1) {
       continue label$42
      }
      break label$42;
     };
     HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $1090() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $1091($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 95576 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 7 | 0) & -8 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if ($0_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
    }
    if ($0_1 >>> 0 <= ($1090() | 0) >>> 0) {
     break label$1
    }
    if (fimport$18($0_1 | 0) | 0) {
     break label$1
    }
   }
   HEAP32[($1081() | 0) >> 2] = 48;
   return -1 | 0;
  }
  HEAP32[(0 + 95576 | 0) >> 2] = $0_1;
  return $1_1 | 0;
 }
 
 function $1092($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$3
     }
     if (($1_1 | $0_1 | 0) & 3 | 0) {
      break label$2
     }
     label$4 : while (1) {
      if ((HEAP32[$0_1 >> 2] | 0 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$2
      }
      $1_1 = $1_1 + 4 | 0;
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   label$5 : {
    label$6 : while (1) {
     $3_1 = HEAPU8[$0_1 >> 0] | 0;
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($3_1 | 0) != ($4_1 | 0)) {
      break label$5
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$1
     }
     continue label$6;
    };
   }
   return $3_1 - $4_1 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $1093($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $50_1 = 0, $53_1 = 0, $56_1 = 0;
  label$1 : {
   label$2 : {
    switch ($0_1 + -1 | 0 | 0) {
    case 0:
     label$6 : {
      switch ($3_1 + -1 | 0 | 0) {
      default:
       HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       return;
      case 0:
      case 1:
       HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       return;
      case 4:
       break label$6;
      };
     }
     HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
     return;
    case 1:
     if ($1_1 & 1 | 0) {
      break label$1
     }
     label$9 : {
      switch ($3_1 + -1 | 0 | 0) {
      default:
       HEAP16[$2_1 >> 1] = HEAPU16[$1_1 >> 1] | 0;
       return;
      case 0:
      case 1:
       HEAP16[$2_1 >> 1] = HEAPU16[$1_1 >> 1] | 0;
       return;
      case 4:
       break label$9;
      };
     }
     HEAP16[$2_1 >> 1] = HEAPU16[$1_1 >> 1] | 0;
     return;
    case 3:
     if ($1_1 & 3 | 0) {
      break label$1
     }
     label$12 : {
      switch ($3_1 + -1 | 0 | 0) {
      default:
       HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
       return;
      case 0:
      case 1:
       HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
       return;
      case 4:
       break label$12;
      };
     }
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 7:
     break label$2;
    default:
     break label$1;
    };
   }
   if ($1_1 & 7 | 0) {
    break label$1
   }
   label$15 : {
    switch ($3_1 + -1 | 0 | 0) {
    default:
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $50_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[$2_1 >> 2] = $50_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 0:
    case 1:
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $53_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[$2_1 >> 2] = $53_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 4:
     break label$15;
    };
   }
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $56_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $56_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   return;
  }
  $4_1 = (((($1_1 >>> 20 | 0) ^ ($1_1 >>> 4 | 0) | 0) & 1023 | 0) << 2 | 0) + 96784 | 0;
  label$18 : while (1) {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = $3_1 ? $3_1 : 1;
   if ($3_1) {
    continue label$18
   }
   break label$18;
  };
  $1031($2_1 | 0, $1_1 | 0, $0_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
 }
 
 function $1094($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $5$hi = 0;
  label$1 : {
   label$2 : {
    switch ($0_1 + -1 | 0 | 0) {
    case 0:
     $4_1 = HEAPU8[$2_1 >> 0] | 0;
     label$6 : {
      switch ($3_1 + -3 | 0 | 0) {
      default:
       break label$6;
      };
     }
     HEAP8[$1_1 >> 0] = $4_1;
     return;
    case 1:
     if ($1_1 & 1 | 0) {
      break label$1
     }
     $4_1 = HEAPU16[$2_1 >> 1] | 0;
     label$7 : {
      switch ($3_1 + -3 | 0 | 0) {
      default:
       break label$7;
      };
     }
     HEAP16[$1_1 >> 1] = $4_1;
     return;
    case 3:
     if ($1_1 & 3 | 0) {
      break label$1
     }
     $4_1 = HEAP32[$2_1 >> 2] | 0;
     label$8 : {
      switch ($3_1 + -3 | 0 | 0) {
      default:
       break label$8;
      };
     }
     HEAP32[$1_1 >> 2] = $4_1;
     return;
    case 7:
     break label$2;
    default:
     break label$1;
    };
   }
   if ($1_1 & 7 | 0) {
    break label$1
   }
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $5_1 = HEAP32[$2_1 >> 2] | 0;
   $5$hi = i64toi32_i32$1;
   label$9 : {
    switch ($3_1 + -3 | 0 | 0) {
    default:
     break label$9;
    };
   }
   i64toi32_i32$1 = $5$hi;
   HEAP32[$1_1 >> 2] = $5_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   return;
  }
  $4_1 = (((($1_1 >>> 20 | 0) ^ ($1_1 >>> 4 | 0) | 0) & 1023 | 0) << 2 | 0) + 96784 | 0;
  label$10 : while (1) {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = $3_1 ? $3_1 : 1;
   if ($3_1) {
    continue label$10
   }
   break label$10;
  };
  $1031($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
 }
 
 function $1095() {
  return ($1096() | 0 | 0) > (0 | 0) | 0;
 }
 
 function $1096() {
  return $2780() | 0 | 0;
 }
 
 function $1097($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = $1_1 & 255 | 0;
      if (!$2_1) {
       break label$4
      }
      label$5 : {
       if (!($0_1 & 3 | 0)) {
        break label$5
       }
       $3_1 = $1_1 & 255 | 0;
       label$6 : while (1) {
        $4_1 = HEAPU8[$0_1 >> 0] | 0;
        if (!$4_1) {
         break label$1
        }
        if (($4_1 | 0) == ($3_1 | 0)) {
         break label$1
        }
        $0_1 = $0_1 + 1 | 0;
        if ($0_1 & 3 | 0) {
         continue label$6
        }
        break label$6;
       };
      }
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
       break label$3
      }
      $2_1 = Math_imul($2_1, 16843009);
      label$7 : while (1) {
       $4_1 = $3_1 ^ $2_1 | 0;
       if (((16843008 - $4_1 | 0 | $4_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
        break label$3
       }
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $4_1 = $0_1 + 4 | 0;
       $0_1 = $4_1;
       if ((($3_1 | (16843008 - $3_1 | 0) | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
        continue label$7
       }
       break label$2;
      };
     }
     return $0_1 + ($1078($0_1 | 0) | 0) | 0 | 0;
    }
    $4_1 = $0_1;
   }
   label$8 : while (1) {
    $0_1 = $4_1;
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $4_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) != ($1_1 & 255 | 0 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  return $0_1 | 0;
 }
 
 function $1098($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($1081() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $1099($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $1098($2858($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $2_1 ? -1 : $1_1;
  i64toi32_i32$2 = $2_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $1100($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $1099(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1101($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $4_1 = $3_1 + 16 | 0;
  $7_1 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($1098(fimport$19(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        break label$5
       }
       $5_1 = $4_1;
       break label$4;
      }
      label$6 : while (1) {
       $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$3
       }
       label$7 : {
        if (($1_1 | 0) > (-1 | 0)) {
         break label$7
        }
        $5_1 = $4_1;
        break label$2;
       }
       $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       $9_1 = $1_1 >>> 0 > $8_1 >>> 0;
       $5_1 = $4_1 + ($9_1 << 3 | 0) | 0;
       $8_1 = $1_1 - ($9_1 ? $8_1 : 0) | 0;
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + $8_1 | 0;
       $4_1 = $4_1 + ($9_1 ? 12 : 4) | 0;
       HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $1_1 | 0;
       $4_1 = $5_1;
       $7_1 = $7_1 - $9_1 | 0;
       if (!($1098(fimport$19(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $4_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $1_1 = $2_1;
    break label$1;
   }
   $1_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $1_1 = $2_1 - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1102($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = 0;
  $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($5_1 | 0) != (0 | 0)) | 0;
  $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
  $5_1 = 32;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1098(fimport$20(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($5_1 | 0) > (0 | 0)) {
      break label$2
     }
     $5_1 = $5_1 ? 32 : 16;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | $5_1 | 0;
    break label$1;
   }
   $4_1 = $5_1;
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($5_1 >>> 0 <= $6_1 >>> 0) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + ($5_1 - $6_1 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[(($1_1 + $2_1 | 0) + -1 | 0) >> 0] = HEAPU8[$4_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $1103($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1104($0_1) {
  $0_1 = $0_1 | 0;
  return $1098(fimport$21($1103(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $1106($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1107($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $1109($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $1111($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1112($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1113() {
  $1111(100880 | 0);
  return 100884 | 0;
 }
 
 function $1114() {
  $1112(100880 | 0);
 }
 
 function $1115($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1116($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1117($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $1_1 = 0;
   label$2 : {
    if (!(HEAP32[(0 + 95872 | 0) >> 2] | 0)) {
     break label$2
    }
    $1_1 = $1117(HEAP32[(0 + 95872 | 0) >> 2] | 0 | 0) | 0;
   }
   label$3 : {
    if (!(HEAP32[(0 + 96024 | 0) >> 2] | 0)) {
     break label$3
    }
    $1_1 = $1117(HEAP32[(0 + 96024 | 0) >> 2] | 0 | 0) | 0 | $1_1 | 0;
   }
   label$4 : {
    $0_1 = HEAP32[($1113() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
        break label$7
       }
       $2_1 = 1;
       break label$6;
      }
      $2_1 = !($1115($0_1 | 0) | 0);
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      $1_1 = $1117($0_1 | 0) | 0 | $1_1 | 0;
     }
     label$9 : {
      if ($2_1) {
       break label$9
      }
      $1116($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $1114();
   return $1_1 | 0;
  }
  label$10 : {
   label$11 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$11
    }
    $2_1 = 1;
    break label$10;
   }
   $2_1 = !($1115($0_1 | 0) | 0);
  }
  label$12 : {
   label$13 : {
    label$14 : {
     if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break label$14
     }
     FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
     if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
      break label$14
     }
     $1_1 = -1;
     if (!$2_1) {
      break label$13
     }
     break label$12;
    }
    label$15 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($1_1 | 0) == ($3_1 | 0)) {
      break label$15
     }
     i64toi32_i32$1 = $1_1 - $3_1 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1_1 = 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    if ($2_1) {
     break label$12
    }
   }
   $1116($0_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $1118($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $1119() {
  fimport$22();
  wasm2js_trap();
 }
 
 function $1120($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $1121($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($1120($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if ($1_1 >>> 0 <= ($3_1 - $4_1 | 0) >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     if (!$1_1) {
      break label$5
     }
     $3_1 = $1_1;
     label$6 : {
      label$7 : while (1) {
       $5_1 = $0_1 + $3_1 | 0;
       if ((HEAPU8[($5_1 + -1 | 0) >> 0] | 0 | 0) == (10 | 0)) {
        break label$6
       }
       $3_1 = $3_1 + -1 | 0;
       if (!$3_1) {
        break label$5
       }
       continue label$7;
      };
     }
     $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      break label$1
     }
     $1_1 = $1_1 - $3_1 | 0;
     $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     break label$4;
    }
    $5_1 = $0_1;
    $3_1 = 0;
   }
   $1031($4_1 | 0, $5_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $1122($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $1121($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $1115($3_1 | 0) | 0;
   $0_1 = $1121($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $1116($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $1123($0_1) {
  $0_1 = $0_1 | 0;
  return $1405($0_1 | 0) | 0 | 0;
 }
 
 function $1124($0_1) {
  $0_1 = $0_1 | 0;
  $1123($0_1 | 0) | 0;
  $2717($0_1 | 0, 80 | 0);
 }
 
 function $1125($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 79192;
  $1628($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1126($0_1) {
  $0_1 = $0_1 | 0;
  $1125($0_1 | 0) | 0;
  $2717($0_1 | 0, 32 | 0);
 }
 
 function $1127($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 79192;
  $2243($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $1128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1129($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $1130($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1131($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1131($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1132($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1131($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1133($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1134($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1135($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 - $5_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $1136($3_1 + 12 | 0 | 0, $1136($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $1137($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $1138($0_1 | 0, $5_1 | 0);
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP8[$1_1 >> 0] = $1139($5_1 | 0) | 0;
     $5_1 = 1;
    }
    $1_1 = $1_1 + $5_1 | 0;
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1140($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1137($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1141($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $1139($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 << 24 >> 24 | 0;
 }
 
 function $1140($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1287($2_1 + 15 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1141($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1288($0_1 | 0, $0_1 + $1_1 | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1142($0_1) {
  $0_1 = $0_1 | 0;
  return $1143() | 0 | 0;
 }
 
 function $1143() {
  return -1 | 0;
 }
 
 function $1144($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($1143() | 0 | 0)) {
    break label$1
   }
   return $1143() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $1145(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $1145($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 & 255 | 0 | 0;
 }
 
 function $1146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1143() | 0 | 0;
 }
 
 function $1147($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $1143() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1145(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $7_1 - $6_1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $1136($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $1137(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $6_1 + (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $6_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1143() | 0 | 0;
 }
 
 function $1149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1150($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1149($0_1 | 0, 79288 | 0) | 0;
  $1123($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1151($0_1) {
  $0_1 = $0_1 | 0;
  return $1150($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1152($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1150($0_1 | 0) | 0 | 0, 88 | 0);
 }
 
 function $1153($0_1) {
  $0_1 = $0_1 | 0;
  $1152($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1154($0_1) {
  $0_1 = $0_1 | 0;
  return $1164($0_1 | 0) | 0 | 0;
 }
 
 function $1155($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $1156($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($1165($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1182($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   label$2 : {
    if (!($1166($1_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    if (($1167($1165($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $1163($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $1183($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1157($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1158($0_1) {
  $0_1 = $0_1 | 0;
  return $1633($0_1 | 0, 104624 | 0) | 0 | 0;
 }
 
 function $1159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1168($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1160($0_1) {
  $0_1 = $0_1 | 0;
  return ($1169(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 24 >> 24 | 0;
 }
 
 function $1161($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ((HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1162($0_1) {
  $0_1 = $0_1 | 0;
  $1170(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1163($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1171($0_1 | 0, $1_1 | 0);
 }
 
 function $1164($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
 }
 
 function $1165($0_1) {
  $0_1 = $0_1 | 0;
  return $1174($0_1 | 0) | 0 | 0;
 }
 
 function $1166($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1167($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1168($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1393($0_1 | 0) | 0) ^ ($1393($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1169($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $1145(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $1170($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $1145(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $1171($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1403($0_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | $1_1 | 0 | 0);
 }
 
 function $1172($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $1173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1145($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 1 | 0;
  HEAP8[$2_1 >> 0] = $1_1;
  return $1145($1_1 | 0) | 0 | 0;
 }
 
 function $1174($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $1175() {
  return $1176() | 0 | 0;
 }
 
 function $1176() {
  return 2147483647 | 0;
 }
 
 function $1177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1178($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1177($0_1 | 0, 79336 | 0) | 0;
  $1123($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1179($0_1) {
  $0_1 = $0_1 | 0;
  return $1178($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1180($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1178($0_1 | 0) | 0 | 0, 84 | 0);
 }
 
 function $1181($0_1) {
  $0_1 = $0_1 | 0;
  $1180($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1182($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($1154($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($1155($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1156($1155($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $1183($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1165($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1154($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($1157($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($1095() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1167($1165($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1163($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1165($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1185($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $1186($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($1172($1173($2_1 | 0, $1_1 | 0) | 0 | 0, $1143() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $1188($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1182($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
  label$1 : {
   if (!($1166($2_1 + 8 | 0 | 0) | 0)) {
    break label$1
   }
   $3_1 = $1184($2_1 + 4 | 0 | 0, $0_1 | 0) | 0;
   $1187($1186($3_1 | 0) | 0 | 0, $1_1 | 0) | 0;
   if (!($1185($3_1 | 0) | 0)) {
    break label$1
   }
   $1163($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  $1183($2_1 + 8 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1190($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1191($0_1) {
  $0_1 = $0_1 | 0;
  return $1405($0_1 | 0) | 0 | 0;
 }
 
 function $1192($0_1) {
  $0_1 = $0_1 | 0;
  $1191($0_1 | 0) | 0;
  $2717($0_1 | 0, 80 | 0);
 }
 
 function $1193($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 79352;
  $1628($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1194($0_1) {
  $0_1 = $0_1 | 0;
  $1193($0_1 | 0) | 0;
  $2717($0_1 | 0, 32 | 0);
 }
 
 function $1195($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 79352;
  $2243($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $1196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1197($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $1198($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1131($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1199($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1131($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1200($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1201($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1202($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = ($6_1 - $5_1 | 0) >> 2 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $1136($3_1 + 12 | 0 | 0, $1136($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $1203($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $1204($0_1 | 0, $5_1 | 0);
      $1_1 = $1_1 + ($5_1 << 2 | 0) | 0;
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP32[$1_1 >> 2] = $1205($5_1 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $5_1 = 1;
    }
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1203($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1206($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1204($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
 }
 
 function $1205($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1206($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1313($0_1 | 0, $0_1 + ($1_1 << 2 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1207($0_1) {
  $0_1 = $0_1 | 0;
  return $1208() | 0 | 0;
 }
 
 function $1208() {
  return -1 | 0;
 }
 
 function $1209($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($1208() | 0 | 0)) {
    break label$1
   }
   return $1208() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $1210(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1210($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1211($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1208() | 0 | 0;
 }
 
 function $1212($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $1208() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1210(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = ($7_1 - $6_1 | 0) >> 2 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $1136($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $1203(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    $7_1 = $6_1 << 2 | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $7_1 | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $7_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1208() | 0 | 0;
 }
 
 function $1214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1215($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1214($0_1 | 0, 79448 | 0) | 0;
  $1191($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1216($0_1) {
  $0_1 = $0_1 | 0;
  return $1215($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1217($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1215($0_1 | 0) | 0 | 0, 88 | 0);
 }
 
 function $1218($0_1) {
  $0_1 = $0_1 | 0;
  $1217($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1219($0_1) {
  $0_1 = $0_1 | 0;
  return $1164($0_1 | 0) | 0 | 0;
 }
 
 function $1220($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $1221($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($1228($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1241($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   label$2 : {
    if (!($1229($1_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    if (($1230($1228($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $1227($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $1242($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1222($0_1) {
  $0_1 = $0_1 | 0;
  return $1633($0_1 | 0, 104616 | 0) | 0 | 0;
 }
 
 function $1223($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1231($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1224($0_1) {
  $0_1 = $0_1 | 0;
  return $1232(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1225($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1226($0_1) {
  $0_1 = $0_1 | 0;
  $1233(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1171($0_1 | 0, $1_1 | 0);
 }
 
 function $1228($0_1) {
  $0_1 = $0_1 | 0;
  return $1174($0_1 | 0) | 0 | 0;
 }
 
 function $1229($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1230($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1395($0_1 | 0) | 0) ^ ($1395($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1232($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $1210(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1233($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $1210(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1234($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $1235($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1210($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 4 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  return $1210($1_1 | 0) | 0 | 0;
 }
 
 function $1236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1237($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1236($0_1 | 0, 79496 | 0) | 0;
  $1191($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1238($0_1) {
  $0_1 = $0_1 | 0;
  return $1237($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1239($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1237($0_1 | 0) | 0 | 0, 84 | 0);
 }
 
 function $1240($0_1) {
  $0_1 = $0_1 | 0;
  $1239($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($1219($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($1220($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1221($1220($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $1242($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1228($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1219($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($1157($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($1095() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1230($1228($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1227($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1243($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1244($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($1234($1235($2_1 | 0, $1_1 | 0) | 0 | 0, $1208() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $1245($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1246($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1247($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $1248($0_1 | 0, $1_1 + 15 | 0 | 0, $1_1 + 14 | 0 | 0) | 0;
  $1249($0_1 | 0, 0 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1248($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1340($1339($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1250($0_1) {
  $0_1 = $0_1 | 0;
  return $1254($1253($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1251($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1255($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1252($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2240($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $1253($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1257($0_1 | 0) | 0)) {
    break label$1
   }
   return $1343($0_1 | 0) | 0 | 0;
  }
  return $1344($0_1 | 0) | 0 | 0;
 }
 
 function $1254($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $37_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1258($0_1 | 0);
  label$1 : {
   if (!($1257($0_1 | 0) | 0)) {
    break label$1
   }
   $1348($1260($0_1 | 0) | 0 | 0, $1343($0_1 | 0) | 0 | 0, $1275($0_1 | 0) | 0 | 0);
  }
  $3_1 = $1271($1_1 | 0) | 0;
  $4_1 = $1257($1_1 | 0) | 0;
  $1349($0_1 | 0, $1_1 | 0);
  $5_1 = $1259($1_1 | 0) | 0;
  $6_1 = $1259($0_1 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $37_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $37_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1350($1_1 | 0, 0 | 0);
  $5_1 = $1344($1_1 | 0) | 0;
  HEAP8[($2_1 + 15 | 0) >> 0] = 0;
  $1351($5_1 | 0, $2_1 + 15 | 0 | 0);
  label$2 : {
   label$3 : {
    $5_1 = ($0_1 | 0) == ($1_1 | 0);
    if ($5_1) {
     break label$3
    }
    if ($4_1) {
     break label$3
    }
    $1269($1_1 | 0, $3_1 | 0);
    break label$2;
   }
   $1249($1_1 | 0, 0 | 0);
  }
  $1_1 = $1257($0_1 | 0) | 0;
  label$4 : {
   if ($5_1) {
    break label$4
   }
   if ($1_1) {
    break label$4
   }
   $1249($0_1 | 0, $1261($0_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $1257($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1268($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $1258($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1259($0_1) {
  $0_1 = $0_1 | 0;
  return $1347($0_1 | 0) | 0 | 0;
 }
 
 function $1260($0_1) {
  $0_1 = $0_1 | 0;
  return $1353($0_1 | 0) | 0 | 0;
 }
 
 function $1261($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1268($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0 | 0;
 }
 
 function $1262($0_1) {
  $0_1 = $0_1 | 0;
  $1264($0_1 | 0) | 0;
 }
 
 function $1263($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $1265($0_1 | 0, $4_1 + 15 | 0 | 0, $3_1 | 0) | 0;
  $1266($3_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1264($0_1) {
  $0_1 = $0_1 | 0;
  return $1362($0_1 | 0) | 0 | 0;
 }
 
 function $1265($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1365($1364($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1266($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1367($0_1 | 0, $1_1 | 0, $2_1 | 0, $1366($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $1267($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1268($0_1) {
  $0_1 = $0_1 | 0;
  return $1346($0_1 | 0) | 0 | 0;
 }
 
 function $1269($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1270($0_1) {
  $0_1 = $0_1 | 0;
  return $1307($1388($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1271($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1257($0_1 | 0) | 0)) {
    break label$1
   }
   return $1276($0_1 | 0) | 0 | 0;
  }
  return $1261($0_1 | 0) | 0 | 0;
 }
 
 function $1272($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 10;
  label$1 : {
   if (!($1257($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($1275($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2751($0_1 | 0, $1_1 | 0, 0 | 0);
 }
 
 function $1274($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1172($0_1 | 0, $1143() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($1143() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1275($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1268($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1276($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1268($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1277($0_1) {
  $0_1 = $0_1 | 0;
  return $1270($0_1 | 0) | 0 | 0;
 }
 
 function $1278($0_1) {
  $0_1 = $0_1 | 0;
  return $1633($0_1 | 0, 104632 | 0) | 0 | 0;
 }
 
 function $1279($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1283($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1281($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1282() {
  $1119();
  wasm2js_trap();
 }
 
 function $1283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1392($2_1 + 15 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1284($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1285($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1286($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1287($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1288($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1289($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1289($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1290($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1290($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1291($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1291($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1292($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1294($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1293($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $1295($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1296($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1297($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1292($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1298($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1293($0_1) {
  $0_1 = $0_1 | 0;
  return $1300($0_1 | 0) | 0 | 0;
 }
 
 function $1294($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1299($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
 }
 
 function $1295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1302($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1303($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1297($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1301($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1298($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1304($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1304($2_1 | 0) | 0;
  $1305($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1299($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $2_1 - $1_1 | 0;
  $1308($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $2_1 | 0;
  $1309($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1300($0_1) {
  $0_1 = $0_1 | 0;
  return $1254($0_1 | 0) | 0 | 0;
 }
 
 function $1301($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1311($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1303($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1254($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1304($0_1) {
  $0_1 = $0_1 | 0;
  return $1306($0_1 | 0) | 0 | 0;
 }
 
 function $1305($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1306($0_1) {
  $0_1 = $0_1 | 0;
  return $1307($0_1 | 0) | 0 | 0;
 }
 
 function $1307($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1308($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1032($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1309($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1310($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1310($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1311($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1312($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1312($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1307($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1313($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1314($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1314($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1315($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1315($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1316($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1316($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1317($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1319($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1318($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $1320($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1321($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1322($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1317($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1323($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1318($0_1) {
  $0_1 = $0_1 | 0;
  return $1325($0_1 | 0) | 0 | 0;
 }
 
 function $1319($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1324($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
 }
 
 function $1320($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1327($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1328($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1322($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1323($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1329($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1329($2_1 | 0) | 0;
  $1330($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1324($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $2_1 - $1_1 | 0;
  $1333($3_1 | 0, $1_1 | 0, $2_1 >> 2 | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $2_1 | 0;
  $1334($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1325($0_1) {
  $0_1 = $0_1 | 0;
  return $1336($0_1 | 0) | 0 | 0;
 }
 
 function $1326($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1327($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1337($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1328($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1336($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1329($0_1) {
  $0_1 = $0_1 | 0;
  return $1331($0_1 | 0) | 0 | 0;
 }
 
 function $1330($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1331($0_1) {
  $0_1 = $0_1 | 0;
  return $1332($0_1 | 0) | 0 | 0;
 }
 
 function $1332($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1333($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1032($0_1 | 0, $1_1 | 0, $2_1 << 2 | 0 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1334($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1335($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1335($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1336($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1337($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1338($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1332($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1339($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1340($0_1) {
  $0_1 = $0_1 | 0;
  return $1341($0_1 | 0) | 0 | 0;
 }
 
 function $1341($0_1) {
  $0_1 = $0_1 | 0;
  return $1342($0_1 | 0) | 0 | 0;
 }
 
 function $1342($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1343($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1259($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1344($0_1) {
  $0_1 = $0_1 | 0;
  return $1345($1259($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1345($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1346($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1347($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1348($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1352($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1349($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1354($0_1 | 0, $1_1 | 0);
 }
 
 function $1350($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1259($0_1 | 0) | 0;
  HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($1_1 & 127 | 0) | 0;
  $0_1 = $1259($0_1 | 0) | 0;
  HEAP8[($0_1 + 11 | 0) >> 0] = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 127 | 0;
 }
 
 function $1351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
 }
 
 function $1352($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1355($1_1 | 0, $2_1 | 0, 1 | 0);
 }
 
 function $1353($0_1) {
  $0_1 = $0_1 | 0;
  return $1361($0_1 | 0) | 0 | 0;
 }
 
 function $1354($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1260($1_1 | 0) | 0;
  $1260($0_1 | 0) | 0;
 }
 
 function $1355($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!($1356($2_1 | 0) | 0)) {
    break label$1
   }
   $1357($0_1 | 0, $1_1 | 0, $2_1 | 0);
   return;
  }
  $1358($0_1 | 0, $1_1 | 0);
 }
 
 function $1356($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 > 8 >>> 0 | 0;
 }
 
 function $1357($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1359($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1358($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1360($0_1 | 0, $1_1 | 0);
 }
 
 function $1359($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2724($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1360($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2717($0_1 | 0, $1_1 | 0);
 }
 
 function $1361($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1362($0_1) {
  $0_1 = $0_1 | 0;
  return $1363($0_1 | 0) | 0 | 0;
 }
 
 function $1363($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1364($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1365($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1366($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1368($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1367($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if ($3_1 >>> 0 > ($1369($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1370($3_1 | 0) | 0)) {
      break label$3
     }
     $1350($0_1 | 0, $3_1 | 0);
     $5_1 = $1344($0_1 | 0) | 0;
     break label$2;
    }
    $1372($4_1 + 8 | 0 | 0, $1260($0_1 | 0) | 0 | 0, ($1371($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $1373($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1374($0_1 | 0, $5_1 | 0);
    $1375($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1376($0_1 | 0, $3_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1351($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($4_1 + 7 | 0) >> 0] = 0;
   $1351($5_1 | 0, $4_1 + 7 | 0 | 0);
   $1249($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1377($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1368($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1369($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1378($1264($0_1 | 0) | 0 | 0) | 0;
  return ($0_1 >>> ($0_1 >>> 0 > (($1379() | 0) >>> 1 | 0) >>> 0) | 0) + -8 | 0 | 0;
 }
 
 function $1370($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 11 >>> 0 | 0;
 }
 
 function $1371($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  label$1 : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0_1 = $1382($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1372($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1381($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1373($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1374($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1259($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1375($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1259($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
  $0_1 = $1259($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
 }
 
 function $1376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1259($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1377($0_1) {
  $0_1 = $0_1 | 0;
  $1380(66169 | 0);
  wasm2js_trap();
 }
 
 function $1378($0_1) {
  $0_1 = $0_1 | 0;
  return $1379() | 0 | 0;
 }
 
 function $1379() {
  return $1383() | 0 | 0;
 }
 
 function $1380($0_1) {
  $0_1 = $0_1 | 0;
  $1119();
  wasm2js_trap();
 }
 
 function $1381($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 <= ($1378($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   $1384();
   wasm2js_trap();
  }
  return $1385($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1382($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 7 | 0) & -8 | 0 | 0;
 }
 
 function $1383() {
  return -1 | 0;
 }
 
 function $1384() {
  $1119();
  wasm2js_trap();
 }
 
 function $1385($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($1356($1_1 | 0) | 0)) {
    break label$1
   }
   return $1386($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  return $1387($0_1 | 0) | 0 | 0;
 }
 
 function $1386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2719($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1387($0_1) {
  $0_1 = $0_1 | 0;
  return $2713($0_1 | 0) | 0 | 0;
 }
 
 function $1388($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1257($0_1 | 0) | 0)) {
    break label$1
   }
   return $1389($0_1 | 0) | 0 | 0;
  }
  return $1390($0_1 | 0) | 0 | 0;
 }
 
 function $1389($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1268($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1390($0_1) {
  $0_1 = $0_1 | 0;
  return $1391($1268($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1391($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1392($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $1393($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($1172($1169($1_1 | 0) | 0 | 0, $1143() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $1394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1395($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($1234($1232($1_1 | 0) | 0 | 0, $1208() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $1396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = $1398($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  $2743($0_1 | 0, $1_1 | 0, $1399($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1398($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1340($1364($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1399($0_1) {
  $0_1 = $0_1 | 0;
  return $1409($0_1 | 0) | 0 | 0;
 }
 
 function $1400($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    return;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $2_1 << 2 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0 | 0]($1_1, $0_1, HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
   continue label$1;
  };
 }
 
 function $1401($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2240($0_1 | 0, $1_1 + 28 | 0 | 0) | 0;
 }
 
 function $1402($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1404($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1403($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1_1 | !(HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $1_1 | 0)) {
    break label$1
   }
   $1407(65862 | 0);
   wasm2js_trap();
  }
 }
 
 function $1404($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1392($2_1 + 15 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1405($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 80064;
  $1400($0_1 | 0, 0 | 0);
  $1628($0_1 + 28 | 0 | 0) | 0;
  $1084(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  $1084(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
  $1084(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
  $1084(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $1406($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1405($0_1 | 0) | 0 | 0, 72 | 0);
 }
 
 function $1407($0_1) {
  $0_1 = $0_1 | 0;
  $1119();
  wasm2js_trap();
 }
 
 function $1408($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4098;
  HEAP32[($0_1 + 8 | 0) >> 2] = 6;
  HEAP32[($0_1 + 16 | 0) >> 2] = !$1_1;
  $1064($0_1 + 32 | 0 | 0, 0 | 0, 40 | 0) | 0;
  $2243($0_1 + 28 | 0 | 0) | 0;
 }
 
 function $1409($0_1) {
  $0_1 = $0_1 | 0;
  return $1078($0_1 | 0) | 0 | 0;
 }
 
 function $1410($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1411($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1412($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1413($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $1414($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 0 | 0;
 }
 
 function $1415($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = -1;
  label$1 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$3
     }
     $3_1 = 1;
     break label$2;
    }
    $3_1 = !($1115($1_1 | 0) | 0);
   }
   label$4 : {
    label$5 : {
     label$6 : {
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($4_1) {
       break label$6
      }
      $1118($1_1 | 0) | 0;
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$5
      }
     }
     if ($4_1 >>> 0 > ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + -8 | 0) >>> 0) {
      break label$4
     }
    }
    if ($3_1) {
     break label$1
    }
    $1116($1_1 | 0);
    return -1 | 0;
   }
   $2_1 = $4_1 + -1 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   HEAP8[$2_1 >> 0] = $0_1;
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
   label$7 : {
    if ($3_1) {
     break label$7
    }
    $1116($1_1 | 0);
   }
   $2_1 = $0_1 & 255 | 0;
  }
  return $2_1 | 0;
 }
 
 function $1416($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($1118($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1417($0_1) {
  $0_1 = $0_1 | 0;
  return $1418($0_1 | 0) | 0 | 0;
 }
 
 function $1418($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    if (($1_1 & 1073741823 | 0 | 0) != (HEAP32[(($1067() | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($1_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    return HEAPU8[$1_1 >> 0] | 0 | 0;
   }
   return $1416($0_1 | 0) | 0 | 0;
  }
  return $1419($0_1 | 0) | 0 | 0;
 }
 
 function $1419($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $0_1 + 76 | 0;
   if (!($1420($1_1 | 0) | 0)) {
    break label$1
   }
   $1115($0_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$2;
   }
   $0_1 = $1416($0_1 | 0) | 0;
  }
  label$4 : {
   if (!(($1421($1_1 | 0) | 0) & 1073741824 | 0)) {
    break label$4
   }
   $1422($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1420($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
  return $1_1 | 0;
 }
 
 function $1421($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1422($0_1) {
  $0_1 = $0_1 | 0;
  $1105($0_1 | 0, 1 | 0) | 0;
 }
 
 function $1423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $2_1 = 1;
    break label$1;
   }
   $2_1 = !($1115($0_1 | 0) | 0);
  }
  label$3 : {
   label$4 : {
    if ($1_1) {
     break label$4
    }
    $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    break label$3;
   }
   label$5 : {
    if (HEAP32[($0_1 + 136 | 0) >> 2] | 0) {
     break label$5
    }
    HEAP32[($0_1 + 136 | 0) >> 2] = HEAP32[(HEAP32[(($1067() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0 ? 80192 : 80168;
   }
   $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if ($3_1) {
    break label$3
   }
   $3_1 = ($1_1 | 0) < (1 | 0) ? -1 : 1;
   HEAP32[($0_1 + 72 | 0) >> 2] = $3_1;
  }
  label$6 : {
   if ($2_1) {
    break label$6
   }
   $1116($0_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1424($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    if (!$2_1) {
     break label$3
    }
    label$4 : {
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     $4_1 = $3_1 << 24 >> 24;
     if (($4_1 | 0) < (0 | 0)) {
      break label$4
     }
     label$5 : {
      if (!$0_1) {
       break label$5
      }
      HEAP32[$0_1 >> 2] = $3_1;
     }
     return ($4_1 | 0) != (0 | 0) | 0;
    }
    label$6 : {
     if (HEAP32[(HEAP32[(($1067() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
      break label$6
     }
     $1_1 = 1;
     if (!$0_1) {
      break label$2
     }
     HEAP32[$0_1 >> 2] = $4_1 & 57343 | 0;
     return 1 | 0;
    }
    $4_1 = $3_1 + -194 | 0;
    if ($4_1 >>> 0 > 50 >>> 0) {
     break label$3
    }
    $4_1 = HEAP32[(($4_1 << 2 | 0) + 80224 | 0) >> 2] | 0;
    label$7 : {
     if ($2_1 >>> 0 > 3 >>> 0) {
      break label$7
     }
     if (($4_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
      break label$3
     }
    }
    $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $2_1 = $3_1 >>> 3 | 0;
    if (($2_1 + -16 | 0 | ($2_1 + ($4_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
     break label$3
    }
    label$8 : {
     $2_1 = $3_1 + -128 | 0 | ($4_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$8
     }
     $1_1 = 2;
     if (!$0_1) {
      break label$2
     }
     HEAP32[$0_1 >> 2] = $2_1;
     return 2 | 0;
    }
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    $2_1 = $2_1 << 6 | 0;
    $4_1 = $4_1 | $2_1 | 0;
    label$9 : {
     if (($2_1 | 0) < (0 | 0)) {
      break label$9
     }
     $1_1 = 3;
     if (!$0_1) {
      break label$2
     }
     HEAP32[$0_1 >> 2] = $4_1;
     return 3 | 0;
    }
    $2_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
    if ($2_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    $1_1 = 4;
    if (!$0_1) {
     break label$2
    }
    HEAP32[$0_1 >> 2] = $2_1 | ($4_1 << 6 | 0) | 0;
    return 4 | 0;
   }
   HEAP32[($1081() | 0) >> 2] = 25;
   $1_1 = -1;
  }
  return $1_1 | 0;
 }
 
 function $1425($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = $3_1 ? $3_1 : 102976;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      return 0 | 0;
     }
     $5_1 = -2;
     if (!$2_1) {
      break label$2
     }
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $5_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $5_1 = HEAPU8[$1_1 >> 0] | 0;
       $3_1 = $5_1 << 24 >> 24;
       if (($3_1 | 0) < (0 | 0)) {
        break label$7
       }
       label$8 : {
        if (!$0_1) {
         break label$8
        }
        HEAP32[$0_1 >> 2] = $5_1;
       }
       return ($3_1 | 0) != (0 | 0) | 0;
      }
      label$9 : {
       if (HEAP32[(HEAP32[(($1067() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
        break label$9
       }
       $5_1 = 1;
       if (!$0_1) {
        break label$2
       }
       HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
       return 1 | 0;
      }
      $3_1 = $5_1 + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(($3_1 << 2 | 0) + 80224 | 0) >> 2] | 0;
      $5_1 = $2_1 + -1 | 0;
      if (!$5_1) {
       break label$1
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $6_1 = HEAPU8[$1_1 >> 0] | 0;
     $7_1 = $6_1 >>> 3 | 0;
     if (($7_1 + -16 | 0 | (($3_1 >> 26 | 0) + $7_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$10 : while (1) {
      $5_1 = $5_1 + -1 | 0;
      label$11 : {
       $3_1 = ($6_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$11
       }
       HEAP32[$4_1 >> 2] = 0;
       label$12 : {
        if (!$0_1) {
         break label$12
        }
        HEAP32[$0_1 >> 2] = $3_1;
       }
       return $2_1 - $5_1 | 0 | 0;
      }
      if (!$5_1) {
       break label$1
      }
      $1_1 = $1_1 + 1 | 0;
      $6_1 = HEAP8[$1_1 >> 0] | 0;
      if (($6_1 | 0) < (-64 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($1081() | 0) >> 2] = 25;
    $5_1 = -1;
   }
   return $5_1 | 0;
  }
  HEAP32[$4_1 >> 2] = $3_1;
  return -2 | 0;
 }
 
 function $1426($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $1067() | 0;
  $2_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
    break label$1
   }
   $1423($0_1 | 0, 1 | 0) | 0;
  }
  HEAP32[($1_1 + 96 | 0) >> 2] = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
  $0_1 = $1427($0_1 | 0) | 0;
  HEAP32[($1_1 + 96 | 0) >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1427($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$3
     }
     $2_1 = $1424($1_1 + 28 | 0 | 0, $2_1 | 0, $3_1 - $2_1 | 0 | 0) | 0;
     if (($2_1 | 0) == (-1 | 0)) {
      break label$3
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + ($2_1 >>> 0 > 1 >>> 0 ? $2_1 : 1) | 0;
     break label$2;
    }
    HEAP32[($1_1 + 16 | 0) >> 2] = 0;
    HEAP32[($1_1 + 20 | 0) >> 2] = 0;
    $2_1 = 0;
    label$4 : while (1) {
     $4_1 = $2_1;
     label$5 : {
      label$6 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       HEAP8[($1_1 + 15 | 0) >> 0] = HEAPU8[$2_1 >> 0] | 0;
       break label$5;
      }
      $2_1 = $1416($0_1 | 0) | 0;
      HEAP8[($1_1 + 15 | 0) >> 0] = $2_1;
      if (($2_1 | 0) > (-1 | 0)) {
       break label$5
      }
      $2_1 = -1;
      if (!($4_1 & 1 | 0)) {
       break label$1
      }
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
      HEAP32[($1081() | 0) >> 2] = 25;
      break label$1;
     }
     $2_1 = 1;
     $3_1 = $1425($1_1 + 28 | 0 | 0, $1_1 + 15 | 0 | 0, 1 | 0, $1_1 + 16 | 0 | 0) | 0;
     if (($3_1 | 0) == (-2 | 0)) {
      continue label$4
     }
     break label$4;
    };
    $2_1 = -1;
    if (($3_1 | 0) != (-1 | 0)) {
     break label$2
    }
    if (!($4_1 & 1 | 0)) {
     break label$1
    }
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
    $1415(HEAPU8[($1_1 + 15 | 0) >> 0] | 0 | 0, $0_1 | 0) | 0;
    break label$1;
   }
   $2_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
  }
  global$0 = $1_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1428($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   return $1426($0_1 | 0) | 0 | 0;
  }
  $1_1 = $1115($0_1 | 0) | 0;
  $2_1 = $1426($0_1 | 0) | 0;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $1116($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1429($0_1) {
  $0_1 = $0_1 | 0;
  return $1428($0_1 | 0) | 0 | 0;
 }
 
 function $1430($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($1067() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($1081() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($1081() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $1431($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $7_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1067() | 0;
  $4_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $5_1 = 1;
    break label$1;
   }
   $5_1 = !($1115($1_1 | 0) | 0);
  }
  label$3 : {
   if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
    break label$3
   }
   $1423($1_1 | 0, 1 | 0) | 0;
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
  $6_1 = 0;
  label$4 : {
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break label$4
   }
   $1118($1_1 | 0) | 0;
   $6_1 = !(HEAP32[($1_1 + 4 | 0) >> 2] | 0);
  }
  $7_1 = -1;
  label$5 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break label$5
   }
   if ($6_1) {
    break label$5
   }
   $6_1 = $1430($2_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0) | 0;
   if (($6_1 | 0) < (0 | 0)) {
    break label$5
   }
   $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if ($8_1 >>> 0 < (((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + $6_1 | 0) + -8 | 0) >>> 0) {
    break label$5
   }
   label$6 : {
    label$7 : {
     if ($0_1 >>> 0 > 127 >>> 0) {
      break label$7
     }
     $7_1 = $8_1 + -1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
     HEAP8[$7_1 >> 0] = $0_1;
     break label$6;
    }
    $7_1 = $8_1 - $6_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
    $1031($7_1 | 0, $2_1 + 12 | 0 | 0, $6_1 | 0) | 0;
   }
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
   $7_1 = $0_1;
  }
  label$8 : {
   if ($5_1) {
    break label$8
   }
   $1116($1_1 | 0);
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = $4_1;
  global$0 = $2_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $1432($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    label$3 : {
     if (!($1120($0_1 | 0) | 0)) {
      break label$3
     }
     $3_1 = -1;
     break label$1;
    }
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   label$4 : {
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
    $3_1 = $1_1 & 255 | 0;
    if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $1_1;
    break label$1;
   }
   label$5 : {
    if ((FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) == (1 | 0)) {
     break label$5
    }
    $3_1 = -1;
    break label$1;
   }
   $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $1430($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1434($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1067() | 0;
  $4_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
    break label$1
   }
   $1423($1_1 | 0, 1 | 0) | 0;
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0_1 >>> 0 > 127 >>> 0) {
       break label$5
      }
      label$6 : {
       if (($0_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
       if (($5_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       HEAP32[($1_1 + 20 | 0) >> 2] = $5_1 + 1 | 0;
       HEAP8[$5_1 >> 0] = $0_1;
       break label$2;
      }
      $0_1 = $1432($1_1 | 0, $0_1 | 0) | 0;
      break label$4;
     }
     label$7 : {
      $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (($5_1 + 4 | 0) >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
       break label$7
      }
      $5_1 = $1433($5_1 | 0, $0_1 | 0) | 0;
      if (($5_1 | 0) < (0 | 0)) {
       break label$3
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + $5_1 | 0;
      break label$4;
     }
     $5_1 = $1433($2_1 + 12 | 0 | 0, $0_1 | 0) | 0;
     if (($5_1 | 0) < (0 | 0)) {
      break label$3
     }
     if (($1121($2_1 + 12 | 0 | 0, $5_1 | 0, $1_1 | 0) | 0) >>> 0 < $5_1 >>> 0) {
      break label$3
     }
    }
    if (($0_1 | 0) != (-1 | 0)) {
     break label$2
    }
   }
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | 32 | 0;
   $0_1 = -1;
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = $4_1;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   return $1434($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  $2_1 = $1115($1_1 | 0) | 0;
  $0_1 = $1434($0_1 | 0, $1_1 | 0) | 0;
  label$2 : {
   if (!$2_1) {
    break label$2
   }
   $1116($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1436() {
  $1437(103660 | 0) | 0;
 }
 
 function $1437($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 104017 | 0) >> 0] | 0) {
    break label$1
   }
   $1438(104016 | 0) | 0;
   $1414(84 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104017 | 0) >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $1438($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[(0 + 80100 | 0) >> 2] | 0;
  $1439(103664 | 0, $1_1 | 0, 103720 | 0) | 0;
  $1440(102980 | 0, 103664 | 0) | 0;
  $2_1 = HEAP32[(0 + 80104 | 0) >> 2] | 0;
  $1441(103728 | 0, $2_1 | 0, 103776 | 0) | 0;
  $1442(103156 | 0, 103728 | 0) | 0;
  $3_1 = HEAP32[(0 + 80108 | 0) >> 2] | 0;
  $1441(103784 | 0, $3_1 | 0, 103832 | 0) | 0;
  $1442(103324 | 0, 103784 | 0) | 0;
  $1442(103492 | 0, $1165((HEAP32[((HEAP32[(0 + 103324 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103324 | 0 | 0) | 0 | 0) | 0;
  $1443((HEAP32[((HEAP32[(0 + 102980 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 102980 | 0 | 0, 103156 | 0) | 0;
  $1444((HEAP32[((HEAP32[(0 + 103324 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103324 | 0 | 0) | 0;
  $1443((HEAP32[((HEAP32[(0 + 103324 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103324 | 0 | 0, 103156 | 0) | 0;
  $1445(103840 | 0, $1_1 | 0, 103896 | 0) | 0;
  $1446(103068 | 0, 103840 | 0) | 0;
  $1447(103904 | 0, $2_1 | 0, 103952 | 0) | 0;
  $1448(103240 | 0, 103904 | 0) | 0;
  $1447(103960 | 0, $3_1 | 0, 104008 | 0) | 0;
  $1448(103408 | 0, 103960 | 0) | 0;
  $1448(103576 | 0, $1228((HEAP32[((HEAP32[(0 + 103408 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103408 | 0 | 0) | 0 | 0) | 0;
  $1449((HEAP32[((HEAP32[(0 + 103068 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103068 | 0 | 0, 103240 | 0) | 0;
  $1444((HEAP32[((HEAP32[(0 + 103408 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103408 | 0 | 0) | 0;
  $1449((HEAP32[((HEAP32[(0 + 103408 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103408 | 0 | 0, 103240 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1439($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1127($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 80436;
  $2_1 = $1143() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
  $1252($3_1 + 12 | 0 | 0, $0_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 12 | 0);
  $1628($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1440($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1450($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79248 + 12 | 0;
  HEAP32[$2_1 >> 2] = 79248 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $1451($0_1 + (HEAP32[(0 + 79248 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1441($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1127($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 80536;
  $1252($3_1 + 12 | 0 | 0, $0_1 | 0);
  $1_1 = $1278($3_1 + 12 | 0 | 0) | 0;
  $1628($3_1 + 12 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1279($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1450($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79296 + 12 | 0;
  HEAP32[$2_1 >> 2] = 79296 + 32 | 0;
  $1451($0_1 + (HEAP32[(0 + 79296 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1443($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1444($0_1) {
  $0_1 = $0_1 | 0;
  $1452($0_1 | 0, 8192 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1445($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1195($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 80640;
  $2_1 = $1208() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
  $1453($3_1 + 12 | 0 | 0, $0_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 12 | 0);
  $1628($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1446($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1454($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79408 + 12 | 0;
  HEAP32[$2_1 >> 2] = 79408 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $1455($0_1 + (HEAP32[(0 + 79408 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1447($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1195($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 80740;
  $1453($3_1 + 12 | 0 | 0, $0_1 | 0);
  $1_1 = $1456($3_1 + 12 | 0 | 0) | 0;
  $1628($3_1 + 12 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1457($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1448($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1454($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79456 + 12 | 0;
  HEAP32[$2_1 >> 2] = 79456 + 32 | 0;
  $1455($0_1 + (HEAP32[(0 + 79456 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1449($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1450($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1471($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79504 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1451($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1408($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $1143() | 0;
 }
 
 function $1452($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 | $1_1 | 0;
  return $2_1 | 0;
 }
 
 function $1453($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2240($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $1454($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1471($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79780 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1455($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1408($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $1208() | 0;
 }
 
 function $1456($0_1) {
  $0_1 = $0_1 | 0;
  return $1633($0_1 | 0, 104640 | 0) | 0 | 0;
 }
 
 function $1457($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1458($0_1) {
  $0_1 = $0_1 | 0;
  $1156(103156 | 0) | 0;
  $1156(103492 | 0) | 0;
  $1221(103240 | 0) | 0;
  $1221(103576 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1459($0_1) {
  $0_1 = $0_1 | 0;
  $1458(104016 | 0) | 0;
 }
 
 function $1460($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1125($0_1 | 0) | 0 | 0, 56 | 0);
 }
 
 function $1461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1278($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1285($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $1279(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $2735(65681 | 0);
   wasm2js_trap();
  }
 }
 
 function $1462($0_1) {
  $0_1 = $0_1 | 0;
  return $1463($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1463($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $1143() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if ((HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
     }
     if (!($1467(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $2_1 + 24 | 0 | 0) | 0)) {
      break label$3
     }
     $3_1 = $1145(HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0;
     label$5 : {
      label$6 : {
       if ($1_1) {
        break label$6
       }
       if (!($1466($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0)) {
        break label$3
       }
       break label$5;
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
     }
     $3_1 = $1145(HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0;
     break label$1;
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = 1;
    $3_1 = 0;
    $5_1 = HEAP32[($1468($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
    $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
    label$7 : {
     label$8 : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      $4_1 = $1417(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break label$3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label$8;
     };
    }
    $6_1 = ($2_1 + 23 | 0) + 1 | 0;
    label$9 : {
     label$10 : {
      label$11 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$12 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($1281(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 23 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 2:
         break label$10;
        case 0:
         break label$12;
        case 1:
         break label$3;
        default:
         break label$9;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break label$3
       }
       $3_1 = $1417(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break label$3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label$11;
      };
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
    }
    label$13 : {
     label$14 : {
      if ($1_1) {
       break label$14
      }
      label$15 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break label$13
       }
       $5_1 = $5_1 + -1 | 0;
       if (($1415($1145(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break label$3
       }
       continue label$15;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $1145(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    }
    $3_1 = $1145(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    break label$1;
   }
   $3_1 = $1143() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1464($0_1) {
  $0_1 = $0_1 | 0;
  return $1463($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1465($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!($1172($1_1 | 0, $1143() | 0 | 0) | 0)) {
     break label$2
    }
    if (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($1172($1_1 | 0, $1143() | 0 | 0) | 0) ^ 1 | 0;
    break label$1;
   }
   $3_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       if (HEAPU8[($0_1 + 53 | 0) >> 0] | 0) {
        break label$6
       }
       if ($3_1 & 1 | 0) {
        break label$5
       }
       break label$3;
      }
      label$7 : {
       $3_1 = $3_1 & 1 | 0;
       if (!$3_1) {
        break label$7
       }
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       if ($1466($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $1139($3_1 | 0) | 0 | 0) | 0) {
        break label$3
       }
       break label$4;
      }
      if (!$3_1) {
       break label$3
      }
     }
     HEAP8[($2_1 + 19 | 0) >> 0] = $1139(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     label$8 : {
      switch (($1284(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 19 | 0 | 0, ($2_1 + 19 | 0) + 1 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
      case 2:
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = ($2_1 + 24 | 0) + 1 | 0;
       HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
       break;
      case 0:
      case 1:
       break label$4;
      default:
       break label$8;
      };
     }
     label$10 : while (1) {
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
       break label$3
      }
      $3_1 = $3_1 + -1 | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      if (($1415(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    $1_1 = $1143() | 0;
    break label$1;
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1466($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($1415($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
 }
 
 function $1467($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = $1417($0_1 | 0) | 0;
   if (($0_1 | 0) == (-1 | 0)) {
    break label$1
   }
   HEAP8[$1_1 >> 0] = $0_1;
  }
  return ($0_1 | 0) != (-1 | 0) | 0;
 }
 
 function $1468($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1469($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1469($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1470($2_1 + 15 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1470($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1471($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 80056 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1472($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1125($0_1 | 0) | 0 | 0, 48 | 0);
 }
 
 function $1473($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $1278($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1279($1_1 | 0) | 0;
 }
 
 function $1474($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $1286(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($1122($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break label$1;
     case 0:
      continue label$2;
     default:
      break label$3;
     };
    }
    break label$2;
   };
   $4_1 = $1117(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1475($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1145(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($1143() | 0 | 0)) {
       break label$4
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $2_1 = $1122($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $1476($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1172($1_1 | 0, $1143() | 0 | 0) | 0) {
      break label$3
     }
     $3_1 = $1139($1_1 | 0) | 0;
     HEAP8[($2_1 + 23 | 0) >> 0] = $3_1;
     label$4 : {
      if ((HEAPU8[($0_1 + 44 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break label$4
      }
      if (!($1477($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
       break label$2
      }
      break label$3;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $4_1 = $2_1 + 32 | 0;
     $5_1 = ($2_1 + 23 | 0) + 1 | 0;
     $6_1 = $2_1 + 23 | 0;
     label$5 : while (1) {
      $3_1 = $1284(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($3_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($1122($6_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($3_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $6_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($1122($2_1 + 24 | 0 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
       break label$2
      }
      $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($3_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $1274($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1143() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1477($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $0_1;
  $0_1 = $1122($2_1 + 15 | 0 | 0, 1 | 0, 1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($0_1 | 0) == (1 | 0) | 0;
 }
 
 function $1478($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1193($0_1 | 0) | 0 | 0, 56 | 0);
 }
 
 function $1479($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1456($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1480($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $1457(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $2735(65681 | 0);
   wasm2js_trap();
  }
 }
 
 function $1480($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1481($0_1) {
  $0_1 = $0_1 | 0;
  return $1482($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1482($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $1208() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if ((HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
     }
     if (!($1487(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $2_1 + 24 | 0 | 0) | 0)) {
      break label$3
     }
     $3_1 = $1210(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0;
     label$5 : {
      label$6 : {
       if ($1_1) {
        break label$6
       }
       if (!($1485($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
        break label$3
       }
       break label$5;
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
     }
     $3_1 = $1210(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = 1;
    $3_1 = 0;
    $5_1 = HEAP32[($1468($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
    $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
    label$7 : {
     label$8 : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      $4_1 = $1417(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break label$3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label$8;
     };
    }
    $6_1 = $2_1 + 24 | 0;
    label$9 : {
     label$10 : {
      label$11 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$12 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($1488(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 2:
         break label$10;
        case 0:
         break label$12;
        case 1:
         break label$3;
        default:
         break label$9;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break label$3
       }
       $3_1 = $1417(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break label$3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label$11;
      };
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
    }
    label$13 : {
     label$14 : {
      if ($1_1) {
       break label$14
      }
      label$15 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break label$13
       }
       $5_1 = $5_1 + -1 | 0;
       if (($1415($1210(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break label$3
       }
       continue label$15;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $1210(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    }
    $3_1 = $1210(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $3_1 = $1208() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1483($0_1) {
  $0_1 = $0_1 | 0;
  return $1482($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1484($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!($1234($1_1 | 0, $1208() | 0 | 0) | 0)) {
     break label$2
    }
    if (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($1234($1_1 | 0, $1208() | 0 | 0) | 0) ^ 1 | 0;
    break label$1;
   }
   $3_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       if (HEAPU8[($0_1 + 53 | 0) >> 0] | 0) {
        break label$6
       }
       if ($3_1 & 1 | 0) {
        break label$5
       }
       break label$3;
      }
      label$7 : {
       $3_1 = $3_1 & 1 | 0;
       if (!$3_1) {
        break label$7
       }
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       if ($1485($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $1205($3_1 | 0) | 0 | 0) | 0) {
        break label$3
       }
       break label$4;
      }
      if (!$3_1) {
       break label$3
      }
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1205(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     label$8 : {
      switch (($1486(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
      case 2:
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 25 | 0;
       HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
       break;
      case 0:
      case 1:
       break label$4;
      default:
       break label$8;
      };
     }
     label$10 : while (1) {
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
       break label$3
      }
      $3_1 = $3_1 + -1 | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      if (($1415(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    $1_1 = $1208() | 0;
    break label$1;
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1485($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($1431($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
 }
 
 function $1486($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1487($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = $1429($0_1 | 0) | 0;
   if (($0_1 | 0) == (-1 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $0_1;
  }
  return ($0_1 | 0) != (-1 | 0) | 0;
 }
 
 function $1488($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1489($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1193($0_1 | 0) | 0 | 0, 48 | 0);
 }
 
 function $1490($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $1456($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1457($1_1 | 0) | 0;
 }
 
 function $1491($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $1492(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($1122($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break label$1;
     case 0:
      continue label$2;
     default:
      break label$3;
     };
    }
    break label$2;
   };
   $4_1 = $1117(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1492($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1493($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1210(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($1208() | 0 | 0)) {
       break label$4
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $2_1 = $1122($1_1 | 0, 4 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $1494($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1234($1_1 | 0, $1208() | 0 | 0) | 0) {
      break label$3
     }
     $3_1 = $1205($1_1 | 0) | 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
     label$4 : {
      if ((HEAPU8[($0_1 + 44 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break label$4
      }
      if (!($1495($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
       break label$2
      }
      break label$3;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $4_1 = $2_1 + 32 | 0;
     $5_1 = $2_1 + 24 | 0;
     $6_1 = $2_1 + 20 | 0;
     label$5 : while (1) {
      $3_1 = $1486(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($3_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($1122($6_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($3_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $6_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($1122($2_1 + 24 | 0 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
       break label$2
      }
      $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($3_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $1496($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1208() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1495($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1435($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
 }
 
 function $1496($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1234($0_1 | 0, $1208() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($1208() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1497() {
  $1436();
 }
 
 function $1498($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0, $13_1 = 0, $22_1 = 0, $22$hi = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $3_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $22_1 = i64toi32_i32$1;
   $22$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $22_1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      $14_1 = 0
     } else {
      $14_1 = 1
     }
     $15_1 = $14_1;
    } else {
     $15_1 = 0
    }
    $12_1 = $15_1;
   }
   if ($12_1) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   $3_1 = $2_1 + $1_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
 }
 
 function $1499($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $4$hi = 0, $2_1 = 0, $5$hi = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $7_1 = 0, $7$hi = 0, $15_1 = 0, $15$hi = 0, $35_1 = 0, $40_1 = 0, $40$hi = 0, $59_1 = 0, $59$hi = 0, $67_1 = 0, $74_1 = 0, $74$hi = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $1_1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2_1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1_1 - $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $15_1 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$3 = $15_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $4_1 = i64toi32_i32$4;
  $4$hi = i64toi32_i32$5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$5;
     $5$hi = i64toi32_i32$2;
     if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     if ($26_1) {
      break label$2
     }
    }
    $2_1 = $1416($0_1 | 0) | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1_1;
   $35_1 = i64toi32_i32$2;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $2_1 - $1_1 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $40_1 = i64toi32_i32$2;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$5 = $40_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$3 = $35_1;
   HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
   return -1 | 0;
  }
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$4
   }
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $3_1 - $1_1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $59_1 = i64toi32_i32$5;
   $59$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $59$hi;
   i64toi32_i32$0 = $59_1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $29_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      $30_1 = 0
     } else {
      $30_1 = 1
     }
     $31_1 = $30_1;
    } else {
     $31_1 = 0
    }
    $29_1 = $31_1;
   }
   if ($29_1) {
    break label$4
   }
   i64toi32_i32$4 = $5$hi;
   $3_1 = $1_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $67_1 = $0_1;
  i64toi32_i32$4 = $4$hi;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  i64toi32_i32$2 = $3_1 - $1_1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
  $74_1 = i64toi32_i32$2;
  $74$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$5 = $74_1;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$0 = $67_1;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
  label$5 : {
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    break label$5
   }
   HEAP8[($1_1 + -1 | 0) >> 0] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $1500($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1501($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $8_1 = 0, $8$hi = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $36_1 = 0, $51_1 = 0, $54_1 = 0, $54$hi = 0, $58$hi = 0, $59$hi = 0, $61_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
  $4_1 = $3_1 & 8388607 | 0;
  label$1 : {
   label$2 : {
    $5_1 = $3_1 >>> 23 | 0;
    $6_1 = $5_1 & 255 | 0;
    if (!$6_1) {
     break label$2
    }
    label$3 : {
     if (($6_1 | 0) == (255 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 25;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $23_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $23_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7_1 = $23_1;
     $7$hi = i64toi32_i32$1;
     $4_1 = ($5_1 & 255 | 0) + 16256 | 0;
     i64toi32_i32$1 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $7_1 = $24_1;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$2;
    $4_1 = 32767;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$2 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$2;
    $4_1 = 0;
    i64toi32_i32$2 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $36_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$0 = 0;
   $1500($2_1 | 0, $36_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 + 81 | 0 | 0);
   $4_1 = 16265 - $4_1 | 0;
   i64toi32_i32$1 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $51_1 = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $25_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $54_1 = $25_1;
  $54$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $3_1 >>> 31 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $26_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $58$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $54$hi;
  i64toi32_i32$0 = $54_1;
  i64toi32_i32$1 = $58$hi;
  i64toi32_i32$3 = $26_1;
  i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
  $59$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $59$hi;
  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $61_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $51_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $61_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 ^ $3_1 | 0) - $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $1500($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1503($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1504($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $14$hi = 0, $5_1 = 0, $11$hi = 0, $11_1 = 0, $14_1 = 0, $10$hi = 0, $12$hi = 0, $6_1 = 0, $18$hi = 0, $12_1 = 0, $10_1 = 0, $8_1 = 0, $15$hi = 0, $18_1 = 0, $7_1 = 0, $16$hi = 0, $17$hi = 0, $20$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0, $15_1 = 0, $21$hi = 0, $9_1 = 0, $19$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $220_1 = 0, $221_1 = 0, $223_1 = 0, $224_1 = 0, $226_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $19_1 = 0, $233_1 = 0, $234_1 = 0, $21_1 = 0, $235_1 = 0, $237_1 = 0, $22_1 = 0, $239_1 = 0, $240_1 = 0, $24_1 = 0, $241_1 = 0, $242_1 = 0, $243_1 = 0, $245_1 = 0, $246_1 = 0, $247_1 = 0, $248_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $255_1 = 0, $256_1 = 0, $257_1 = 0, $258_1 = 0, $53_1 = 0, $57_1 = 0, $64_1 = 0, $68_1 = 0, $77_1 = 0, $77$hi = 0, $89_1 = 0, $89$hi = 0, $111_1 = 0, $112_1 = 0, $112$hi = 0, $113_1 = 0, $113$hi = 0, $120$hi = 0, $123$hi = 0, $140_1 = 0, $141_1 = 0, $141$hi = 0, $142_1 = 0, $142$hi = 0, $149$hi = 0, $152$hi = 0, $170_1 = 0, $170$hi = 0, $175_1 = 0, $175$hi = 0, $182_1 = 0, $182$hi = 0, $189_1 = 0, $189$hi = 0, $194_1 = 0, $194$hi = 0, $203_1 = 0, $203$hi = 0, $205_1 = 0, $205$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $217_1 = 0, $217$hi = 0, $219_1 = 0, $219$hi = 0, $222_1 = 0, $224$hi = 0, $225_1 = 0, $225$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $238_1 = 0, $238$hi = 0, $244_1 = 0, $244$hi = 0, $249_1 = 0, $249$hi = 0, $252$hi = 0, $23_1 = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $273_1 = 0, $273$hi = 0, $277_1 = 0, $277$hi = 0, $281_1 = 0, $282$hi = 0, $283$hi = 0, $286_1 = 0, $286$hi = 0, $287_1 = 0, $287$hi = 0, $288_1 = 0, $288$hi = 0, $291_1 = 0, $292$hi = 0, $295_1 = 0, $296$hi = 0, $297$hi = 0, $301_1 = 0, $302$hi = 0, $303_1 = 0, $303$hi = 0, $310_1 = 0, $310$hi = 0, $314_1 = 0, $316_1 = 0, $316$hi = 0, $318$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $321_1 = 0, $321$hi = 0, $323$hi = 0, $327_1 = 0, $328$hi = 0, $329_1 = 0, $329$hi = 0, $330_1 = 0, $330$hi = 0, $332_1 = 0, $332$hi = 0, $335_1 = 0, $336$hi = 0, $339_1 = 0, $340$hi = 0, $341$hi = 0, $344_1 = 0, $345$hi = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $352_1 = 0, $353$hi = 0, $354_1 = 0, $354$hi = 0, $355_1 = 0, $355$hi = 0, $358_1 = 0, $359$hi = 0, $362_1 = 0, $363$hi = 0, $364$hi = 0, $368_1 = 0, $369$hi = 0, $379_1 = 0, $379$hi = 0, $381$hi = 0, $384_1 = 0, $384$hi = 0, $386$hi = 0, $390_1 = 0, $390$hi = 0, $392$hi = 0, $426_1 = 0, $426$hi = 0, $428_1 = 0, $428$hi = 0, $429_1 = 0, $429$hi = 0, $431_1 = 0, $431$hi = 0, $435_1 = 0, $435$hi = 0, $437_1 = 0, $438$hi = 0, $443_1 = 0, $443$hi = 0, $447_1 = 0, $447$hi = 0, $456$hi = 0, $458_1 = 0, $458$hi = 0, $464_1 = 0, $470_1 = 0, $470$hi = 0, $474_1 = 0, $475$hi = 0, $479_1 = 0, $479$hi = 0, $483_1 = 0, $483$hi = 0, $486_1 = 0, $486$hi = 0, $490_1 = 0, $491$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $12_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $220_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $220_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $13_1 = $220_1;
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $221_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $221_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $221_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $223_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $223_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $223_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$1 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $14_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53_1 : $57_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $64_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
      break label$5
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $77$hi;
     i64toi32_i32$0 = $77_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $89_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $89$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = $89$hi;
     i64toi32_i32$1 = $89_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     label$9 : {
      i64toi32_i32$2 = $2$hi;
      if (!!($2_1 | i64toi32_i32$2 | 0)) {
       break label$9
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$12
     }
     $111_1 = $5_1 + 80 | 0;
     i64toi32_i32$2 = $1$hi;
     $112_1 = $1_1;
     $112$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     $113_1 = $12_1;
     $113$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     $8_1 = !($12_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $12_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $224_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $224_1 = i64toi32_i32$2
     }
     $120$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $123$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $120$hi;
     i64toi32_i32$3 = $224_1;
     i64toi32_i32$0 = $123$hi;
     i64toi32_i32$2 = $8_1 << 6 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$1;
     i64toi32_i32$5 = $112$hi;
     i64toi32_i32$3 = $113$hi;
     $1500($111_1 | 0, $112_1 | 0, i64toi32_i32$5 | 0, $113_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$1 | 0;
     i64toi32_i32$4 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $226_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $226_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $226_1;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    $140_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $141_1 = $3_1;
    $141$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $142_1 = $10_1;
    $142$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? $3_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $228_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $228_1 = i64toi32_i32$5
    }
    $149$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $152$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $149$hi;
    i64toi32_i32$3 = $228_1;
    i64toi32_i32$2 = $152$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$1 = $141$hi;
    i64toi32_i32$3 = $142$hi;
    $1500($140_1 | 0, $141_1 | 0, i64toi32_i32$1 | 0, $142_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$0 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $229_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
    $229_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $14_1 = $229_1;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$0;
   $170_1 = $2_1;
   $170$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $230_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $230_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $4_1 = $230_1;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $170$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($170_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $15_1 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$3;
   $175_1 = i64toi32_i32$1;
   $175$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $231_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $231_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   $14_1 = $231_1;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $182_1 = i64toi32_i32$3;
   $182$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $175$hi;
   i64toi32_i32$1 = $175_1;
   i64toi32_i32$3 = $182$hi;
   i64toi32_i32$5 = $182_1;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $232_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $232_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $17_1 = $232_1;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $189_1 = i64toi32_i32$0;
   $189$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$4 = $17_1;
   i64toi32_i32$0 = $189$hi;
   i64toi32_i32$5 = $189_1;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $18_1 = i64toi32_i32$3;
   $18$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $17$hi;
   i64toi32_i32$5 = $17_1;
   i64toi32_i32$1 = 0;
   $194_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $194$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $203_1 = i64toi32_i32$5;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$5 = $203$hi;
   i64toi32_i32$4 = $203_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$3;
   $205_1 = i64toi32_i32$0;
   $205$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 49;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $233_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    $233_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
   }
   $207_1 = $233_1;
   $207$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    $234_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $234_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
   }
   $20_1 = $234_1;
   $20$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$1 = $207_1;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$4 = $20_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $3_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $215_1 = i64toi32_i32$2;
   $215$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $205$hi;
   i64toi32_i32$3 = $205_1;
   i64toi32_i32$2 = $215$hi;
   i64toi32_i32$4 = $215_1;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$0;
   $217_1 = i64toi32_i32$5;
   $217$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $16_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $235_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $235_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $219_1 = $235_1;
   $219$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$0 = $16_1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$4 = $15_1;
   $222_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $222_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    $237_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $237_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
   }
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$0 = $219_1;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$1 = $237_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $225_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $225$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $217$hi;
   i64toi32_i32$3 = $217_1;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$1 = $225_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$5;
   $227_1 = i64toi32_i32$2;
   $227$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $236_1 = i64toi32_i32$4;
   $236$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$5 = $22_1;
   i64toi32_i32$4 = $236$hi;
   i64toi32_i32$1 = $236_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$2;
   $238_1 = i64toi32_i32$0;
   $238$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $239_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $239_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$2 = $239_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = -2147483648;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $244_1 = i64toi32_i32$2;
   $244$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $238$hi;
   i64toi32_i32$5 = $238_1;
   i64toi32_i32$2 = $244$hi;
   i64toi32_i32$1 = $244_1;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $15_1 = i64toi32_i32$4;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $249_1 = i64toi32_i32$5;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $249$hi;
   i64toi32_i32$1 = $249_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $20_1 = i64toi32_i32$2;
   $20$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
    $240_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
    $240_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $252$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $227$hi;
   i64toi32_i32$4 = $227_1;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$1 = $240_1;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $23_1 = i64toi32_i32$5;
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $194$hi;
   i64toi32_i32$3 = $194_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$5;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $268_1 = i64toi32_i32$3;
     $268$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$2 = $24_1;
     i64toi32_i32$3 = $268$hi;
     i64toi32_i32$1 = $268_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$1 = $24_1;
     $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $273_1 = $272_1;
     $273$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $277_1 = i64toi32_i32$0;
     $277$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = $277$hi;
     i64toi32_i32$2 = $277_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     $281_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $282$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $273$hi;
     i64toi32_i32$2 = $273_1;
     i64toi32_i32$4 = $282$hi;
     i64toi32_i32$1 = $281_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $286_1 = i64toi32_i32$2;
     $286$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = $286$hi;
     i64toi32_i32$1 = $286_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $287_1 = i64toi32_i32$4;
     $287$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     $288_1 = $14_1;
     $288$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     $291_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $292$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$5 = $17_1;
     $295_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $296$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $292$hi;
     i64toi32_i32$5 = $291_1;
     i64toi32_i32$3 = $296$hi;
     i64toi32_i32$0 = $295_1;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $297$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $288$hi;
     i64toi32_i32$1 = $288_1;
     i64toi32_i32$5 = $297$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$0 = $14_1;
     $301_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $302$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $287$hi;
     i64toi32_i32$0 = $287_1;
     i64toi32_i32$2 = $302$hi;
     i64toi32_i32$1 = $301_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $303_1 = i64toi32_i32$5;
     $303$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $310_1 = i64toi32_i32$0;
     $310$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $310$hi;
     i64toi32_i32$1 = $310_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $314_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = $314_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $241_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $241_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $316_1 = $241_1;
     $316$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $242_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $242_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $318$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $316$hi;
     i64toi32_i32$5 = $316_1;
     i64toi32_i32$3 = $318$hi;
     i64toi32_i32$4 = $242_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $319_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $319$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $303$hi;
     i64toi32_i32$1 = $303_1;
     i64toi32_i32$5 = $319$hi;
     i64toi32_i32$4 = $319_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $320_1 = i64toi32_i32$0;
     $320$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     $321_1 = $4_1;
     $321$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $243_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
      $243_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $323$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $321$hi;
     i64toi32_i32$2 = $321_1;
     i64toi32_i32$3 = $323$hi;
     i64toi32_i32$4 = $243_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = $4_1;
     $327_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $328$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $320$hi;
     i64toi32_i32$4 = $320_1;
     i64toi32_i32$0 = $328$hi;
     i64toi32_i32$2 = $327_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $329_1 = i64toi32_i32$3;
     $329$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     $330_1 = $2_1;
     $330$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $245_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $245_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $332_1 = $245_1;
     $332$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$2 = $22_1;
     $335_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $336$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$1 = $13_1;
     $339_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $340$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $336$hi;
     i64toi32_i32$1 = $335_1;
     i64toi32_i32$5 = $340$hi;
     i64toi32_i32$4 = $339_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $341$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$2 = $20_1;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$4 = $15_1;
     $344_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $345$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $341$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = $345$hi;
     i64toi32_i32$1 = $344_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $246_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $246_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     }
     $347$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$0 = $332_1;
     i64toi32_i32$2 = $347$hi;
     i64toi32_i32$1 = $246_1;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $348_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $348$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $330$hi;
     i64toi32_i32$4 = $330_1;
     i64toi32_i32$0 = $348$hi;
     i64toi32_i32$1 = $348_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $352_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $353$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $329$hi;
     i64toi32_i32$1 = $329_1;
     i64toi32_i32$5 = $353$hi;
     i64toi32_i32$4 = $352_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $354_1 = i64toi32_i32$0;
     $354$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $355_1 = $4_1;
     $355$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $21_1;
     $358_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $359$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$4 = $23_1;
     i64toi32_i32$1 = $16_1;
     $362_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $359$hi;
     i64toi32_i32$1 = $358_1;
     i64toi32_i32$2 = $363$hi;
     i64toi32_i32$3 = $362_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $364$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $355$hi;
     i64toi32_i32$4 = $355_1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4_1;
     $368_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $369$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $354$hi;
     i64toi32_i32$3 = $354_1;
     i64toi32_i32$5 = $369$hi;
     i64toi32_i32$4 = $368_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$4 | 0 | i64toi32_i32$3 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $247_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
     $247_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $3_1 = $247_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $248_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $379_1 = $248_1;
    $379$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $250_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $250_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $381$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $379$hi;
    i64toi32_i32$2 = $379_1;
    i64toi32_i32$0 = $381$hi;
    i64toi32_i32$4 = $250_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $251_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $384_1 = $251_1;
    $384$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $252_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $252_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $386$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $384$hi;
    i64toi32_i32$2 = $384_1;
    i64toi32_i32$0 = $386$hi;
    i64toi32_i32$4 = $252_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $18_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $253_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $253_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $18_1 = $253_1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    $390_1 = $3_1;
    $390$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $254_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $254_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $392$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $390$hi;
    i64toi32_i32$2 = $390_1;
    i64toi32_i32$0 = $392$hi;
    i64toi32_i32$4 = $254_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 > 127 >>> 0) {
       break label$18
      }
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $1$hi;
      $6_1 = $6_1 + 127 | 0;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      $1500($5_1 + 48 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      $1500($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      $1503($5_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      $1503($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      $426_1 = i64toi32_i32$2;
      $426$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $428_1 = i64toi32_i32$3;
      $428$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $426$hi;
      i64toi32_i32$0 = $426_1;
      i64toi32_i32$3 = $428$hi;
      i64toi32_i32$4 = $428_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $429_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $429$hi = i64toi32_i32$3;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
      $431_1 = i64toi32_i32$3;
      $431$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 48 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $435_1 = i64toi32_i32$0;
      $435$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $431$hi;
      i64toi32_i32$2 = $431_1;
      i64toi32_i32$0 = $435$hi;
      i64toi32_i32$4 = $435_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 0;
      $437_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = 0;
      $438$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $429$hi;
      i64toi32_i32$4 = $429_1;
      i64toi32_i32$0 = $438$hi;
      i64toi32_i32$2 = $437_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$3 = ($5_1 + 32 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $443_1 = i64toi32_i32$0;
      $443$hi = i64toi32_i32$4;
      i64toi32_i32$3 = ($5_1 + 16 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $447_1 = i64toi32_i32$4;
      $447$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $443$hi;
      i64toi32_i32$3 = $443_1;
      i64toi32_i32$4 = $447$hi;
      i64toi32_i32$2 = $447_1;
      i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $5_1 + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$3;
      $2$hi = i64toi32_i32$4;
      break label$16;
     }
     i64toi32_i32$4 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$4;
     break label$1;
    }
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $255_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
     $255_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $456$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $458_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $456$hi;
    i64toi32_i32$3 = $255_1;
    i64toi32_i32$4 = $458$hi;
    i64toi32_i32$2 = $458_1;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11$hi = i64toi32_i32$3;
   label$19 : {
    i64toi32_i32$3 = $18$hi;
    $464_1 = !($18_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
     $256_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $257_1 = 0
      } else {
       $257_1 = 1
      }
      $258_1 = $257_1;
     } else {
      $258_1 = 0
     }
     $256_1 = $258_1;
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $464_1 : $256_1) {
     break label$19
    }
    i64toi32_i32$2 = $11$hi;
    $470_1 = $11_1;
    $470$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$1;
    $474_1 = !(i64toi32_i32$5 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $475$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $470$hi;
    i64toi32_i32$2 = $470_1;
    i64toi32_i32$0 = $475$hi;
    i64toi32_i32$3 = $474_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
    $479_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $479$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$1 = $479$hi;
    i64toi32_i32$3 = $479_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$2 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $11$hi;
   $483_1 = $11_1;
   $483$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $486_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $486$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$3 = $486$hi;
   i64toi32_i32$5 = $486_1;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   $490_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $491$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $483$hi;
   i64toi32_i32$5 = $483_1;
   i64toi32_i32$4 = $491$hi;
   i64toi32_i32$2 = $490_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $11_1 = i64toi32_i32$3;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $1505() {
  return 0 | 0;
 }
 
 function $1506() {
  return 0 | 0;
 }
 
 function $1507($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $10$hi = 0, $10_1 = 0, $6_1 = 0, $9$hi = 0, $7_1 = 0, $5_1 = 0, $9_1 = 0, $12$hi = 0, $12_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $151_1 = 0, $152_1 = 0, $153_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $159_1 = 0, $20_1 = 0, $25_1 = 0, $30_1 = 0, $34_1 = 0, $40_1 = 0, $48_1 = 0, $50_1 = 0, $58_1 = 0, $58$hi = 0, $64_1 = 0, $64$hi = 0, $68_1 = 0, $68$hi = 0, $78_1 = 0, $78$hi = 0, $106_1 = 0, $109_1 = 0, $136_1 = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $168_1 = 0, $169_1 = 0, $169$hi = 0, $170_1 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $193_1 = 0, $193$hi = 0, $195$hi = 0, $199_1 = 0, $199$hi = 0, $201$hi = 0, $228_1 = 0, $228$hi = 0, $230_1 = 0, $230$hi = 0, $234_1 = 0, $234$hi = 0, $236_1 = 0, $237$hi = 0, $251_1 = 0, $251$hi = 0, $254_1 = 0, $254$hi = 0, $262$hi = 0, $265_1 = 0, $266$hi = 0, $271_1 = 0, $272_1 = 0, $272$hi = 0, $273_1 = 0, $273$hi = 0, $280$hi = 0, $283$hi = 0, $298_1 = 0, $298$hi = 0, $304_1 = 0, $305$hi = 0, $311_1 = 0, $311$hi = 0, $313$hi = 0, $314_1 = 0, $314$hi = 0, $316_1 = 0, $316$hi = 0, $343_1 = 0, $343$hi = 0, $345_1 = 0, $345$hi = 0, $349_1 = 0, $349$hi = 0, $351_1 = 0, $352$hi = 0, $358_1 = 0, $358$hi = 0, $360$hi = 0, $364_1 = 0, $364$hi = 0, $367_1 = 0, $367$hi = 0, $368$hi = 0, $377_1 = 0, $377$hi = 0, $381$hi = 0, $385_1 = 0, $386$hi = 0, $389_1 = 0, $389$hi = 0, $392_1 = 0, $392$hi = 0, $396_1 = 0, $397$hi = 0, $400_1 = 0, $400$hi = 0, $406_1 = 0, $407$hi = 0, $411_1 = 0, $412$hi = 0, $415_1 = 0, $415$hi = 0, $421_1 = 0, $422$hi = 0, $426_1 = 0, $427$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     $6_1 = !($1_1 | i64toi32_i32$1 | 0);
     $20_1 = $6_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$3 = 0;
     $25_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $10$hi;
     if (!($10_1 | i64toi32_i32$2 | 0) ? $20_1 : $25_1) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 0;
     $30_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = -2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$5 = 0;
     $34_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = -2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30_1 : $34_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$4 = 0;
     $40_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $6_1 : $40_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $48_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$5 = 0;
     $50_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $50_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $58_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $58$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $58$hi;
     i64toi32_i32$1 = $58_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
     $64_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $64$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $68_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $68$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $64$hi;
     i64toi32_i32$1 = $64_1;
     i64toi32_i32$5 = $68$hi;
     i64toi32_i32$4 = $68_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$2 ? 0 : $1_1;
     i64toi32_i32$2 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    $78_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $78$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $78$hi;
    i64toi32_i32$3 = $78_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   $106_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$3 = $9_1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $109_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$2 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1;
   $7_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $106_1 : $109_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$2;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $10_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$3;
   $12_1 = i64toi32_i32$1;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $139_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $139_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $8_1 = $139_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $140_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $140_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
    }
    $6_1 = $140_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $136_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $137_1 = $9_1;
    $137$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $138_1 = $10_1;
    $138$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$2 = i64toi32_i32$3 ? $9_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $141_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $141_1 = i64toi32_i32$5
    }
    $145$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $148$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $145$hi;
    i64toi32_i32$2 = $141_1;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$2 = $138$hi;
    $1500($136_1 | 0, $137_1 | 0, i64toi32_i32$0 | 0, $138_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$1 ? $1_1 : $3_1;
   i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $1$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $168_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $169_1 = $3_1;
    $169$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $170_1 = $1_1;
    $170$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    $7_1 = !($1_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$0 ? $3_1 : $1_1;
    i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$1;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$3);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $142_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $142_1 = i64toi32_i32$5
    }
    $177$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $180$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $177$hi;
    i64toi32_i32$2 = $142_1;
    i64toi32_i32$3 = $180$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$1;
    i64toi32_i32$4 = $169$hi;
    i64toi32_i32$2 = $170$hi;
    $1500($168_1 | 0, $169_1 | 0, i64toi32_i32$4 | 0, $170_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$1 | 0;
    i64toi32_i32$0 = $5_1 + 88 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $143_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $143_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $193_1 = $143_1;
   $193$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $144_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $144_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $195$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $193$hi;
   i64toi32_i32$4 = $193_1;
   i64toi32_i32$2 = $195$hi;
   i64toi32_i32$5 = $144_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $145_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $145_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $199_1 = $145_1;
   $199$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $146_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $146_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $201$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $199$hi;
   i64toi32_i32$0 = $199_1;
   i64toi32_i32$4 = $201$hi;
   i64toi32_i32$5 = $146_1;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $12_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $147_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $147_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $10_1 = $147_1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   label$10 : {
    if (($6_1 | 0) == ($8_1 | 0)) {
     break label$10
    }
    label$11 : {
     $7_1 = $6_1 - $8_1 | 0;
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $10_1 = 1;
     $10$hi = i64toi32_i32$2;
     break label$10;
    }
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$4 = $1$hi;
    $1500($5_1 + 64 | 0 | 0, $10_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    $1503($5_1 + 48 | 0 | 0, $10_1 | 0, i64toi32_i32$4 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $228_1 = i64toi32_i32$2;
    $228$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $230_1 = i64toi32_i32$4;
    $230$hi = i64toi32_i32$2;
    i64toi32_i32$0 = (i64toi32_i32$0 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $234_1 = i64toi32_i32$2;
    $234$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $230$hi;
    i64toi32_i32$0 = $230_1;
    i64toi32_i32$2 = $234$hi;
    i64toi32_i32$5 = $234_1;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    $236_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $237$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $228$hi;
    i64toi32_i32$5 = $228_1;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$0 = $236_1;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$2 = 524288;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 3;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    $148_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $148_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
   }
   $9_1 = $148_1;
   $9$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $149_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $150_1 = 0
       } else {
        $150_1 = 1
       }
       $151_1 = $150_1;
      } else {
       $151_1 = 0
      }
      $149_1 = $151_1;
     }
     if ($149_1) {
      break label$13
     }
     i64toi32_i32$2 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $251_1 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $251$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $254_1 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
     $254$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $251$hi;
     i64toi32_i32$4 = $251_1;
     i64toi32_i32$2 = $254$hi;
     i64toi32_i32$5 = $254_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     if (!(i64toi32_i32$4 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
      break label$1
     }
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $262$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$5 = $10_1;
     $265_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $266$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $262$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$3 = $266$hi;
     i64toi32_i32$2 = $265_1;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = 524287;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$12
     }
     $271_1 = $5_1 + 32 | 0;
     i64toi32_i32$1 = $2$hi;
     $272_1 = $2_1;
     $272$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$4;
     $273_1 = i64toi32_i32$0;
     $273$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     $7_1 = !(i64toi32_i32$0 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $2_1 : i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$2);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $152_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $152_1 = i64toi32_i32$1
     }
     $280$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $280$hi;
     i64toi32_i32$5 = $152_1;
     i64toi32_i32$2 = $283$hi;
     i64toi32_i32$1 = $7_1 << 6 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $7_1 = i64toi32_i32$4 + -12 | 0;
     i64toi32_i32$0 = $272$hi;
     i64toi32_i32$5 = $273$hi;
     $1500($271_1 | 0, $272_1 | 0, i64toi32_i32$0 | 0, $273_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$3 = $5_1 + 40 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$5;
     break label$12;
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $298_1 = i64toi32_i32$2;
    $298$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $10_1;
    $304_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $305$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $298$hi;
    i64toi32_i32$1 = $298_1;
    i64toi32_i32$2 = $305$hi;
    i64toi32_i32$5 = $304_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = 1048576;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$1 | 0)) {
     break label$12
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $153_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     $153_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $311_1 = $153_1;
    $311$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $154_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $154_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $313$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $311$hi;
    i64toi32_i32$4 = $311_1;
    i64toi32_i32$1 = $313$hi;
    i64toi32_i32$5 = $154_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $314_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $314$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
    $316_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $316$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $314$hi;
    i64toi32_i32$1 = $314_1;
    i64toi32_i32$0 = $316$hi;
    i64toi32_i32$5 = $316_1;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$0;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $155_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $155_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $155_1;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$0 = $11_1;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$4;
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   $7_1 = 0;
   label$15 : {
    label$16 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$16
     }
     $7_1 = $6_1;
     break label$15;
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    $1500($5_1 + 16 | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    $1503($5_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $343_1 = i64toi32_i32$0;
    $343$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
    $345_1 = i64toi32_i32$1;
    $345$hi = i64toi32_i32$0;
    i64toi32_i32$4 = (i64toi32_i32$4 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $349_1 = i64toi32_i32$0;
    $349$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $345$hi;
    i64toi32_i32$4 = $345_1;
    i64toi32_i32$0 = $349$hi;
    i64toi32_i32$5 = $349_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $351_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = 0;
    $352$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $343$hi;
    i64toi32_i32$5 = $343_1;
    i64toi32_i32$0 = $352$hi;
    i64toi32_i32$4 = $351_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $156_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    $156_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $358_1 = $156_1;
   $358$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 61;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    $157_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $157_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   }
   $360$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $358$hi;
   i64toi32_i32$0 = $358_1;
   i64toi32_i32$5 = $360$hi;
   i64toi32_i32$4 = $157_1;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $3_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 48;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $158_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $364_1 = $158_1;
   $364$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $159_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $159_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   i64toi32_i32$0 = $159_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$4 = -1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $367_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $367$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $364$hi;
   i64toi32_i32$1 = $364_1;
   i64toi32_i32$0 = $367$hi;
   i64toi32_i32$4 = $367_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $368$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$0 = $368$hi;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   $6_1 = $2_1 & 7 | 0;
   label$17 : {
    label$18 : {
     label$19 : {
      switch ($1505() | 0 | 0) {
      case 0:
       label$22 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$22
        }
        i64toi32_i32$1 = $4$hi;
        $377_1 = $4_1;
        $377$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = 0;
        $381$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$5 = $381$hi;
        i64toi32_i32$4 = $6_1 >>> 0 > 4 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
        }
        $10_1 = i64toi32_i32$2;
        $10$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$4 = $3_1;
        $385_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $386$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $377$hi;
        i64toi32_i32$4 = $377_1;
        i64toi32_i32$3 = $386$hi;
        i64toi32_i32$0 = $385_1;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        $3_1 = $10_1;
        $3$hi = i64toi32_i32$2;
        break label$18;
       }
       i64toi32_i32$2 = $4$hi;
       $389_1 = $4_1;
       $389$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $392_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $392$hi = i64toi32_i32$4;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $392$hi;
       i64toi32_i32$0 = $392_1;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$3;
       $10$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3_1;
       $396_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $397$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $389$hi;
       i64toi32_i32$0 = $389_1;
       i64toi32_i32$5 = $397$hi;
       i64toi32_i32$2 = $396_1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $4_1 = i64toi32_i32$1;
       $4$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$3;
       break label$17;
      case 1:
       i64toi32_i32$3 = $4$hi;
       $400_1 = $4_1;
       $400$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 0;
       $406_1 = ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $407$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$3 = $407$hi;
       i64toi32_i32$0 = $406_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $10_1 = i64toi32_i32$5;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3_1;
       $411_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $412$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $400$hi;
       i64toi32_i32$0 = $400_1;
       i64toi32_i32$1 = $412$hi;
       i64toi32_i32$2 = $411_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $4_1 = i64toi32_i32$3;
       $4$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$5;
       break label$18;
      case 2:
       break label$19;
      default:
       break label$18;
      };
     }
     i64toi32_i32$5 = $4$hi;
     $415_1 = $4_1;
     $415$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $10$hi;
     $421_1 = !($10_1 | i64toi32_i32$5 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $422$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $422$hi;
     i64toi32_i32$2 = $421_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $426_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $427$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $415$hi;
     i64toi32_i32$2 = $415_1;
     i64toi32_i32$3 = $427$hi;
     i64toi32_i32$4 = $426_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     $3_1 = $10_1;
     $3$hi = i64toi32_i32$1;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $1506() | 0;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $1508($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $4_1 = 0, $4$hi = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $3_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $36$hi = 0, $40_1 = 0, $61_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $66$hi = 0, $68_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 1048575;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $28_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $28_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $28_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 2047;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $6_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$0;
    if (!($6_1 | i64toi32_i32$0 | 0)) {
     break label$2
    }
    label$3 : {
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 2047;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 4;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $29_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $29_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $29_1;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 60;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $30_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $30_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $5_1 = $30_1;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 15360;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $6_1 = i64toi32_i32$4;
     $6$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $31_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $7_1 = $31_1;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $32_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $32_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $5_1 = $32_1;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $6_1 = 32767;
    $6$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    break label$1;
   }
   $35_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $36_1 = $5_1;
   $36$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $40_1 = Math_clz32($4_1) | 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $33_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $33_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$1 = 0;
   $3_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0 ? $40_1 : Math_clz32($33_1);
   i64toi32_i32$3 = $36$hi;
   i64toi32_i32$5 = 0;
   $1500($35_1 | 0, $36_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = 0;
   $6_1 = 15372 - $3_1 | 0;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
   $7_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   $7$hi = i64toi32_i32$5;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  $61_1 = i64toi32_i32$5;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = 48;
  i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
   $34_1 = 0;
  } else {
   i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
   $34_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
  }
  $63$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
  $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
  $65$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $63$hi;
  i64toi32_i32$5 = $34_1;
  i64toi32_i32$1 = $65$hi;
  i64toi32_i32$0 = $65_1;
  i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
  $66$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $66$hi;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
  i64toi32_i32$5 = $7$hi;
  i64toi32_i32$0 = $7_1;
  i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
  $68_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
  i64toi32_i32$3 = $61_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $68_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1509($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $51_1 = 0, $51$hi = 0, $54_1 = 0, $54$hi = 0, $59_1 = 0, $70_1 = 0, $70$hi = 0, $73_1 = 0, $73$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    label$4 : {
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
      $38_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $39_1 = 0
       } else {
        $39_1 = 1
       }
       $41_1 = $39_1;
      } else {
       $41_1 = 0
      }
      $38_1 = $41_1;
     }
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1)) {
      break label$4
     }
     return -1 | 0;
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $51_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $51$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $54_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $54$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $51$hi;
    i64toi32_i32$0 = $51_1;
    i64toi32_i32$3 = $54$hi;
    i64toi32_i32$1 = $54_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   label$5 : {
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $59_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $42_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $43_1 = 0
      } else {
       $43_1 = 1
      }
      $44_1 = $43_1;
     } else {
      $44_1 = 0
     }
     $42_1 = $44_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $59_1 : $42_1)) {
     break label$5
    }
    return -1 | 0;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $70_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $70$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $73_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $73$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $70$hi;
   i64toi32_i32$0 = $70_1;
   i64toi32_i32$3 = $73$hi;
   i64toi32_i32$1 = $73_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1510($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1511($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 2147418112;
  i64toi32_i32$3 = 0;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $23_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $11_1 | $23_1 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $20_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$1 = $24_1;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $21_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $7_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1512($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $20$hi = 0, $24$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $1500($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - ($1_1 ^ 31 | 0) | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $20_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$1 = $20_1;
   i64toi32_i32$0 = $24$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1513($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $1507($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$3;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1514($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $1504($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if ($3_1 >>> 0 >= 32767 >>> 0) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $1504($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = ($3_1 >>> 0 < 49149 >>> 0 ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 7471104;
   $1504($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if ($3_1 >>> 0 <= -32652 >>> 0) {
     break label$4
    }
    $3_1 = $3_1 + 16269 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 7471104;
   $1504($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = ($3_1 >>> 0 > -48920 >>> 0 ? $3_1 : -48920) + 32538 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $1504($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $1515($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $46_1;
  $2$hi = i64toi32_i32$2;
  $16_1 = $2_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $48_1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $1_1 = i64toi32_i32$4;
  $1$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $1516($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $11$hi = 0, i64toi32_i32$6 = 0, $11_1 = 0, $10$hi = 0, $13$hi = 0, $10_1 = 0, $16$hi = 0, $12$hi = 0, $13_1 = 0, $17$hi = 0, $21$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $21_1 = 0, $14$hi = 0, $15$hi = 0, $8_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $15_1 = 0, $18_1 = 0, $22_1 = 0, $22$hi = 0, $24$hi = 0, $9_1 = 0, $19_1 = 0, $19$hi = 0, $322_1 = 0, $323_1 = 0, $7_1 = 0, $324_1 = 0, $325_1 = 0, $326_1 = 0, $327_1 = 0, $328_1 = 0, $329_1 = 0, $331_1 = 0, $332_1 = 0, $333_1 = 0, $334_1 = 0, $336_1 = 0, $337_1 = 0, $338_1 = 0, $339_1 = 0, $341_1 = 0, $342_1 = 0, $344_1 = 0, $345_1 = 0, $20_1 = 0, $20$hi = 0, $346_1 = 0, $347_1 = 0, $348_1 = 0, $350_1 = 0, $351_1 = 0, $352_1 = 0, $353_1 = 0, $355_1 = 0, $23_1 = 0, $23$hi = 0, $356_1 = 0, $357_1 = 0, $358_1 = 0, $359_1 = 0, $24_1 = 0, $360_1 = 0, $362_1 = 0, $363_1 = 0, $364_1 = 0, $365_1 = 0, $368_1 = 0, $369_1 = 0, $371_1 = 0, $372_1 = 0, $374_1 = 0, $375_1 = 0, $376_1 = 0, $377_1 = 0, $378_1 = 0, $380_1 = 0, $381_1 = 0, $382_1 = 0, $51_1 = 0, $55_1 = 0, $62_1 = 0, $66_1 = 0, $75_1 = 0, $75$hi = 0, $80_1 = 0, $80$hi = 0, $88_1 = 0, $88$hi = 0, $110_1 = 0, $111_1 = 0, $111$hi = 0, $112_1 = 0, $112$hi = 0, $119$hi = 0, $122$hi = 0, $137_1 = 0, $138_1 = 0, $138$hi = 0, $139_1 = 0, $139$hi = 0, $146$hi = 0, $149$hi = 0, $164_1 = 0, $166_1 = 0, $166$hi = 0, $170$hi = 0, $181_1 = 0, $181$hi = 0, $182$hi = 0, $185_1 = 0, $188_1 = 0, $188$hi = 0, $193$hi = 0, $203_1 = 0, $203$hi = 0, $204$hi = 0, $206_1 = 0, $209_1 = 0, $209$hi = 0, $214$hi = 0, $224_1 = 0, $224$hi = 0, $225$hi = 0, $227_1 = 0, $230_1 = 0, $230$hi = 0, $235$hi = 0, $245_1 = 0, $245$hi = 0, $246$hi = 0, $248_1 = 0, $249_1 = 0, $249$hi = 0, $252_1 = 0, $252$hi = 0, $257$hi = 0, $262_1 = 0, $264$hi = 0, $267_1 = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $279_1 = 0, $279$hi = 0, $283_1 = 0, $284$hi = 0, $285$hi = 0, $287_1 = 0, $288$hi = 0, $289$hi = 0, $290$hi = 0, $294$hi = 0, $305_1 = 0, $305$hi = 0, $308_1 = 0, $308$hi = 0, $314$hi = 0, $315_1 = 0, $315$hi = 0, $321_1 = 0, $321$hi = 0, $330_1 = 0, $330$hi = 0, $335_1 = 0, $335$hi = 0, $340_1 = 0, $340$hi = 0, $342$hi = 0, $343_1 = 0, $343$hi = 0, $345$hi = 0, $346$hi = 0, $349_1 = 0, $350$hi = 0, $351$hi = 0, $354_1 = 0, $355$hi = 0, $361_1 = 0, $361$hi = 0, $366_1 = 0, $366$hi = 0, $367_1 = 0, $367$hi = 0, $370_1 = 0, $370$hi = 0, $373_1 = 0, $373$hi = 0, $375$hi = 0, $379_1 = 0, $379$hi = 0, $383_1 = 0, $384$hi = 0, $385$hi = 0, $388_1 = 0, $388$hi = 0, $389_1 = 0, $389$hi = 0, $396_1 = 0, $396$hi = 0, $402_1 = 0, $402$hi = 0, $404$hi = 0, $405_1 = 0, $405$hi = 0, $406_1 = 0, $406$hi = 0, $407_1 = 0, $407$hi = 0, $409$hi = 0, $413_1 = 0, $414$hi = 0, $415_1 = 0, $415$hi = 0, $416_1 = 0, $416$hi = 0, $425_1 = 0, $425$hi = 0, $429_1 = 0, $430_1 = 0, $430$hi = 0, $436_1 = 0, $436$hi = 0, $440_1 = 0, $441$hi = 0, $442$hi = 0, $446_1 = 0, $447$hi = 0, $448_1 = 0, $448$hi = 0, $449_1 = 0, $449$hi = 0, $456_1 = 0, $456$hi = 0, $461_1 = 0, $461$hi = 0, $466_1 = 0, $466$hi = 0, $469_1 = 0, $469$hi = 0, $472_1 = 0, $473$hi = 0, $476_1 = 0, $477$hi = 0, $478$hi = 0, $481_1 = 0, $482$hi = 0, $484$hi = 0, $485_1 = 0, $485$hi = 0, $489_1 = 0, $490$hi = 0, $491_1 = 0, $491$hi = 0, $492_1 = 0, $492$hi = 0, $493_1 = 0, $493$hi = 0, $500_1 = 0, $500$hi = 0, $503_1 = 0, $503$hi = 0, $506_1 = 0, $508$hi = 0, $509_1 = 0, $509$hi = 0, $514_1 = 0, $514$hi = 0, $515_1 = 0, $515$hi = 0, $517$hi = 0, $518$hi = 0, $520_1 = 0, $521$hi = 0, $522$hi = 0, $526_1 = 0, $527$hi = 0, $541$hi = 0, $545_1 = 0, $545$hi = 0, $546$hi = 0, $550_1 = 0, $551$hi = 0, $558_1 = 0, $560_1 = 0, $560$hi = 0, $562$hi = 0, $564_1 = 0, $564$hi = 0, $571$hi = 0, $575_1 = 0, $575$hi = 0, $576$hi = 0, $580_1 = 0, $581$hi = 0, $595_1 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603_1 = 0, $603$hi = 0, $636_1 = 0, $636$hi = 0, $641_1 = 0, $641$hi = 0, $645$hi = 0, $646_1 = 0, $646$hi = 0, $647_1 = 0, $647$hi = 0, $650_1 = 0, $650$hi = 0, $654_1 = 0, $655$hi = 0, $667_1 = 0, $667$hi = 0, $668_1 = 0, $668$hi = 0, $676_1 = 0, $680_1 = 0, $681$hi = 0, $685_1 = 0, $689_1 = 0, $690$hi = 0, $694_1 = 0, $695$hi = 0, $697_1 = 0, $697$hi = 0, $700_1 = 0, $703_1 = 0, $703$hi = 0, $704_1 = 0, $711_1 = 0, $716_1 = 0, $717$hi = 0, $721_1 = 0, $722$hi = 0, $724_1 = 0, $724$hi = 0, $727_1 = 0, $730_1 = 0, $730$hi = 0, $731_1 = 0, $737_1 = 0, $742_1 = 0, $743$hi = 0, $747_1 = 0, $748$hi = 0, $749$hi = 0;
  $5_1 = global$0 - 336 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $322_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $322_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $322_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $323_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $323_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $323_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $51_1 = !($1_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $55_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $12$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $62_1 = !($3_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62_1 : $66_1) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $75_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $75$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = $75$hi;
     i64toi32_i32$2 = $75_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $80_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $80$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $80$hi;
      i64toi32_i32$0 = $80_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $88_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $88$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $88$hi;
     i64toi32_i32$0 = $88_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $8_1 = 0;
    label$11 : {
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $110_1 = $5_1 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $111_1 = $1_1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     $112_1 = $11_1;
     $112$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     $8_1 = !($11_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1_1 : $11_1;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $324_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $324_1 = i64toi32_i32$1
     }
     $119$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $122$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $119$hi;
     i64toi32_i32$2 = $324_1;
     i64toi32_i32$4 = $122$hi;
     i64toi32_i32$1 = $8_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$0;
     i64toi32_i32$5 = $111$hi;
     i64toi32_i32$2 = $112$hi;
     $1500($110_1 | 0, $111_1 | 0, i64toi32_i32$5 | 0, $112_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5_1 + 328 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    $137_1 = $5_1 + 304 | 0;
    i64toi32_i32$3 = $3$hi;
    $138_1 = $3_1;
    $138$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    $139_1 = $10_1;
    $139$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $325_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $325_1 = i64toi32_i32$3
    }
    $146$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $149$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $146$hi;
    i64toi32_i32$5 = $325_1;
    i64toi32_i32$1 = $149$hi;
    i64toi32_i32$3 = $9_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $9_1 = i64toi32_i32$2;
    i64toi32_i32$0 = $138$hi;
    i64toi32_i32$5 = $139$hi;
    $1500($137_1 | 0, $138_1 | 0, i64toi32_i32$0 | 0, $139_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
    i64toi32_i32$4 = $5_1 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$5;
   }
   $164_1 = $5_1 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $326_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $326_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $166_1 = $326_1;
   $166$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $327_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $327_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $170$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $166$hi;
   i64toi32_i32$4 = $166_1;
   i64toi32_i32$0 = $170$hi;
   i64toi32_i32$3 = $327_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 0;
   $1515($164_1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5_1 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $181_1 = i64toi32_i32$3;
   $181$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $181$hi;
   i64toi32_i32$2 = $181_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $182$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $182$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = 0;
   $1515($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $185_1 = $5_1 + 256 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $328_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $328_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $188_1 = $328_1;
   $188$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $329_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $329_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $193$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $188$hi;
   i64toi32_i32$5 = $188_1;
   i64toi32_i32$0 = $193$hi;
   i64toi32_i32$1 = $329_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   $1515($185_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 256 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $203_1 = i64toi32_i32$1;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $203$hi;
   i64toi32_i32$0 = $203_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $204$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $204$hi;
   i64toi32_i32$0 = 0;
   $1515($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $206_1 = $5_1 + 224 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $331_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $331_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $209_1 = $331_1;
   $209$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 240 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $332_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $332_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $214$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $209$hi;
   i64toi32_i32$5 = $209_1;
   i64toi32_i32$2 = $214$hi;
   i64toi32_i32$4 = $332_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = 0;
   $1515($206_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5_1 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $224_1 = i64toi32_i32$4;
   $224$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$2 = $224_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   $225$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$2 = 0;
   $1515($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $227_1 = $5_1 + 192 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $333_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $333_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $230_1 = $333_1;
   $230$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $334_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $334_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $235$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $230$hi;
   i64toi32_i32$5 = $230_1;
   i64toi32_i32$0 = $235$hi;
   i64toi32_i32$3 = $334_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   $1515($227_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $245_1 = i64toi32_i32$3;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $245$hi;
   i64toi32_i32$0 = $245_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $246$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $246$hi;
   i64toi32_i32$0 = 0;
   $1515($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $248_1 = $5_1 + 160 | 0;
   i64toi32_i32$0 = $2$hi;
   $249_1 = $2_1;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $336_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $336_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $252_1 = $336_1;
   $252$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $337_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $337_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $257$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$5 = $252_1;
   i64toi32_i32$2 = $257$hi;
   i64toi32_i32$1 = $337_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $249$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = 0;
   $1515($248_1 | 0, $249_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $262_1 = $5_1 + 144 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $338_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $338_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $264$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $264$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = 0;
   $1515($262_1 | 0, $338_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $267_1 = $5_1 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   $268_1 = $4_1;
   $268$hi = i64toi32_i32$1;
   i64toi32_i32$0 = ($5_1 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $272_1 = i64toi32_i32$4;
   $272$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $279_1 = i64toi32_i32$4;
   $279$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$4 = $279$hi;
   i64toi32_i32$2 = $279_1;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $283_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $284$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $272$hi;
   i64toi32_i32$2 = $272_1;
   i64toi32_i32$3 = $284$hi;
   i64toi32_i32$0 = $283_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $285$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   $287_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $288$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $285$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = $288$hi;
   i64toi32_i32$2 = $287_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $289$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $289$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $290$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $268$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $290$hi;
   i64toi32_i32$2 = 0;
   $1515($267_1 | 0, $268_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $294$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $294$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   $1515($5_1 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $339_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $339_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $16_1 = $339_1;
     $16$hi = i64toi32_i32$3;
     $305_1 = $16_1;
     $305$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $341_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $341_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $308_1 = $341_1;
     $308$hi = i64toi32_i32$3;
     i64toi32_i32$1 = ($5_1 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $342_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $342_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $314$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $308$hi;
     i64toi32_i32$2 = $308_1;
     i64toi32_i32$1 = $314$hi;
     i64toi32_i32$5 = $342_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $315_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $315$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $305$hi;
     i64toi32_i32$3 = $305_1;
     i64toi32_i32$2 = $315$hi;
     i64toi32_i32$5 = $315_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $344_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $344_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2_1 = $344_1;
     $2$hi = i64toi32_i32$1;
     $321_1 = $2_1;
     $321$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $345_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $345_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $20_1 = $345_1;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $346_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $346_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $4_1 = $346_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $321$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($321_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$1;
     $330_1 = i64toi32_i32$0;
     $330$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $347_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $347_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $22_1 = $347_1;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $348_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $348_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $10_1 = $348_1;
     $10$hi = i64toi32_i32$4;
     $335_1 = $10_1;
     $335$hi = i64toi32_i32$4;
     i64toi32_i32$0 = ($5_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $350_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $350_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $340_1 = $350_1;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $351_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $351_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $342$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $340$hi;
     i64toi32_i32$4 = $340_1;
     i64toi32_i32$1 = $342$hi;
     i64toi32_i32$5 = $351_1;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $343_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $343$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $352_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $352_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $345$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $343$hi;
     i64toi32_i32$1 = $343_1;
     i64toi32_i32$0 = $345$hi;
     i64toi32_i32$5 = $352_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $346$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$5 = $16_1;
     $349_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $350$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $346$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $350$hi;
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13_1;
     $354_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $355$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $351$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $355$hi;
     i64toi32_i32$5 = $354_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $353_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $353_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $13_1 = $353_1;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $335$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($335_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $361_1 = i64toi32_i32$0;
     $361$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $330$hi;
     i64toi32_i32$2 = $330_1;
     i64toi32_i32$0 = $361$hi;
     i64toi32_i32$5 = $361_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$5 = $21_1;
     i64toi32_i32$4 = 0;
     $366_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $366$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $367_1 = i64toi32_i32$1;
     $367$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $370_1 = $15_1;
     $370$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $355_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $355_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $23_1 = $355_1;
     $23$hi = i64toi32_i32$5;
     $373_1 = $23_1;
     $373$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $356_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $356_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $375$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $373$hi;
     i64toi32_i32$5 = $373_1;
     i64toi32_i32$3 = $375$hi;
     i64toi32_i32$2 = $356_1;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $370$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = __wasm_i64_mul($370_1 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $379_1 = i64toi32_i32$4;
     $379$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$3 = $367_1;
     i64toi32_i32$4 = $379$hi;
     i64toi32_i32$2 = $379_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $383_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $384$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $366$hi;
     i64toi32_i32$2 = $366_1;
     i64toi32_i32$1 = $384$hi;
     i64toi32_i32$3 = $383_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $385$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $388_1 = i64toi32_i32$2;
     $388$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $385$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $388$hi;
     i64toi32_i32$3 = $388_1;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $389_1 = i64toi32_i32$1;
     $389$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $396_1 = i64toi32_i32$5;
     $396$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$0 = $21_1;
     i64toi32_i32$5 = $396$hi;
     i64toi32_i32$3 = $396_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$3 = $21_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $357_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $357_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $402_1 = $357_1;
     $402$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $358_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $358_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $404$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $402$hi;
     i64toi32_i32$1 = $402_1;
     i64toi32_i32$4 = $404$hi;
     i64toi32_i32$0 = $358_1;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $405_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $405$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $389$hi;
     i64toi32_i32$3 = $389_1;
     i64toi32_i32$1 = $405$hi;
     i64toi32_i32$0 = $405_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $406_1 = i64toi32_i32$5;
     $406$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $407_1 = $17_1;
     $407$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $359_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $359_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $409$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $407$hi;
     i64toi32_i32$2 = $407_1;
     i64toi32_i32$4 = $409$hi;
     i64toi32_i32$0 = $359_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $413_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $414$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $406$hi;
     i64toi32_i32$0 = $406_1;
     i64toi32_i32$5 = $414$hi;
     i64toi32_i32$2 = $413_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $415_1 = i64toi32_i32$4;
     $415$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     $416_1 = $16_1;
     $416$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$3;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $425_1 = i64toi32_i32$3;
     $425$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$3 = $425$hi;
     i64toi32_i32$2 = $425_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$2 = $21_1;
     $429_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $430_1 = $429_1;
     $430$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$2 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = -2;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $21_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $436_1 = i64toi32_i32$2;
     $436$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$2 = $436$hi;
     i64toi32_i32$1 = $436_1;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17_1;
     $440_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $441$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $430$hi;
     i64toi32_i32$1 = $430_1;
     i64toi32_i32$5 = $441$hi;
     i64toi32_i32$0 = $440_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $442$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $416$hi;
     i64toi32_i32$4 = $416_1;
     i64toi32_i32$1 = $442$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$0 = $16_1;
     $446_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $447$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $415$hi;
     i64toi32_i32$0 = $415_1;
     i64toi32_i32$2 = $447$hi;
     i64toi32_i32$4 = $446_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $448_1 = i64toi32_i32$1;
     $448$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     $449_1 = $17_1;
     $449$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $456_1 = i64toi32_i32$0;
     $456$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$0 = $456$hi;
     i64toi32_i32$4 = $456_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $461_1 = i64toi32_i32$3;
     $461$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = $461$hi;
     i64toi32_i32$4 = $461_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $466_1 = i64toi32_i32$5;
     $466$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = $466$hi;
     i64toi32_i32$4 = $466_1;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $360_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      $360_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $469_1 = $360_1;
     $469$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     $472_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $473$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$2 = $4_1;
     $476_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $477$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $473$hi;
     i64toi32_i32$2 = $472_1;
     i64toi32_i32$0 = $477$hi;
     i64toi32_i32$1 = $476_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $478$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $11_1;
     $481_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $482$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $478$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $482$hi;
     i64toi32_i32$2 = $481_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $362_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $362_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $484$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $469$hi;
     i64toi32_i32$5 = $469_1;
     i64toi32_i32$4 = $484$hi;
     i64toi32_i32$2 = $362_1;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $485_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $485$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $449$hi;
     i64toi32_i32$1 = $449_1;
     i64toi32_i32$5 = $485$hi;
     i64toi32_i32$2 = $485_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$2 = $17_1;
     $489_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $490$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $448$hi;
     i64toi32_i32$2 = $448_1;
     i64toi32_i32$0 = $490$hi;
     i64toi32_i32$1 = $489_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $491_1 = i64toi32_i32$5;
     $491$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $492_1 = $4_1;
     $492$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $24$hi;
     $493_1 = $24_1;
     $493$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $500_1 = i64toi32_i32$2;
     $500$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = $500$hi;
     i64toi32_i32$1 = $500_1;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $363_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $363_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $503_1 = $363_1;
     $503$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $506_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = $506_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $364_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $364_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $508$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $503$hi;
     i64toi32_i32$5 = $503_1;
     i64toi32_i32$1 = $508$hi;
     i64toi32_i32$3 = $364_1;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $509_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $509$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $493$hi;
     i64toi32_i32$4 = $493_1;
     i64toi32_i32$5 = $509$hi;
     i64toi32_i32$3 = $509_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$3 = $24_1;
     i64toi32_i32$1 = 0;
     $514_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     $514$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$0;
     $515_1 = i64toi32_i32$2;
     $515$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $365_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $365_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $517$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $515$hi;
     i64toi32_i32$1 = $515_1;
     i64toi32_i32$3 = $517$hi;
     i64toi32_i32$4 = $365_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $518$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $518$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     $520_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $521$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $514$hi;
     i64toi32_i32$4 = $514_1;
     i64toi32_i32$2 = $521$hi;
     i64toi32_i32$1 = $520_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $522$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$0 = $492_1;
     i64toi32_i32$4 = $522$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     $526_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $527$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$1 = $491_1;
     i64toi32_i32$3 = $527$hi;
     i64toi32_i32$0 = $526_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = 131071;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$1 = $23_1;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $19_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $14$hi;
     $1515($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $368_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $368_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $541$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($5_1 + 80 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $545_1 = i64toi32_i32$5;
     $545$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $541$hi;
     i64toi32_i32$1 = $368_1;
     i64toi32_i32$5 = $545$hi;
     i64toi32_i32$2 = $545_1;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     $546$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     $550_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $551$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $546$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = $551$hi;
     i64toi32_i32$4 = $550_1;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$3;
     $6_1 = $6_1 + 16382 | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$5;
     break label$12;
    }
    $558_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $369_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $369_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $560_1 = $369_1;
    $560$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $371_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $371_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $562$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $560$hi;
    i64toi32_i32$0 = $560_1;
    i64toi32_i32$5 = $562$hi;
    i64toi32_i32$4 = $371_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $2_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$5;
    $564_1 = $2_1;
    $564$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $372_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $372_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $372_1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$0 = $564$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    $1515($558_1 | 0, $564_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $374_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $374_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $571$hi = i64toi32_i32$5;
    i64toi32_i32$4 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $575_1 = i64toi32_i32$5;
    $575$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $571$hi;
    i64toi32_i32$4 = $374_1;
    i64toi32_i32$5 = $575$hi;
    i64toi32_i32$0 = $575_1;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $576$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $580_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$3 = 0;
    $581$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $576$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$4 = $581$hi;
    i64toi32_i32$1 = $580_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$2;
    $6_1 = $6_1 + 16383 | 0;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $22_1 = $1_1;
    $22$hi = i64toi32_i32$5;
   }
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $12$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $375_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $375_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $595_1 = $375_1;
     $595$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 63;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $376_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $376_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $597$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $595$hi;
     i64toi32_i32$2 = $595_1;
     i64toi32_i32$3 = $597$hi;
     i64toi32_i32$1 = $376_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 48;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $377_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $377_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $601$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $603_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $603$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $601$hi;
     i64toi32_i32$2 = $377_1;
     i64toi32_i32$3 = $603$hi;
     i64toi32_i32$1 = $603_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $378_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $378_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $4_1 = $378_1;
     $4$hi = i64toi32_i32$2;
     break label$15;
    }
    label$17 : {
     if (($6_1 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    $1503($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    $1500($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$5;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = $10$hi;
    $1515($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $636_1 = i64toi32_i32$1;
    $636$hi = i64toi32_i32$3;
    i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $380_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $380_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $641_1 = $380_1;
    $641$hi = i64toi32_i32$3;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $381_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $381_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $645$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $641$hi;
    i64toi32_i32$5 = $641_1;
    i64toi32_i32$1 = $645$hi;
    i64toi32_i32$2 = $381_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $646_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $646$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $636$hi;
    i64toi32_i32$3 = $636_1;
    i64toi32_i32$5 = $646$hi;
    i64toi32_i32$2 = $646_1;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
    $647_1 = i64toi32_i32$0;
    $647$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$3;
    $650_1 = i64toi32_i32$4;
    $650$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     $382_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $382_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    }
    $11_1 = $382_1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $650$hi;
    i64toi32_i32$3 = $650_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $11_1;
    $654_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $655$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $647$hi;
    i64toi32_i32$2 = $647_1;
    i64toi32_i32$4 = $655$hi;
    i64toi32_i32$1 = $654_1;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $1515($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   $1515($5_1 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$0 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$5 = $10$hi;
   $667_1 = $10_1;
   $667$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $668_1 = $2_1;
   $668$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $11_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $11$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = $3_1;
   $676_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$5 = $11_1;
   $680_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $681$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$3 = $681$hi;
   i64toi32_i32$4 = $680_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$4 = $14_1;
   $685_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$5 = $14_1;
   $689_1 = (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676_1 : $685_1;
   i64toi32_i32$4 = 0;
   $690$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $668$hi;
   i64toi32_i32$5 = $668_1;
   i64toi32_i32$1 = $690$hi;
   i64toi32_i32$2 = $689_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $694_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $695$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $667$hi;
   i64toi32_i32$2 = $667_1;
   i64toi32_i32$0 = $695$hi;
   i64toi32_i32$5 = $694_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$3;
   $697_1 = i64toi32_i32$1;
   $697$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$5 = 0;
   $700_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
   $703_1 = i64toi32_i32$4;
   $703$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $703$hi;
   i64toi32_i32$2 = $703_1;
   $704_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$2 = ($5_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $711_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$5 = $2_1;
   $716_1 = $700_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $704_1 : $711_1) | 0;
   i64toi32_i32$4 = 0;
   $717$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $717$hi;
   i64toi32_i32$3 = $716_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $721_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $722$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $697$hi;
   i64toi32_i32$3 = $697_1;
   i64toi32_i32$1 = $722$hi;
   i64toi32_i32$5 = $721_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$0;
   $724_1 = i64toi32_i32$2;
   $724$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$5 = 0;
   $727_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $730_1 = i64toi32_i32$4;
   $730$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $730$hi;
   i64toi32_i32$3 = $730_1;
   $731_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $5_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   $737_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4_1;
   $742_1 = $727_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) | 0 ? $731_1 : $737_1) | 0;
   i64toi32_i32$4 = 0;
   $743$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = $743$hi;
   i64toi32_i32$0 = $742_1;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $747_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $748$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $724$hi;
   i64toi32_i32$0 = $724_1;
   i64toi32_i32$2 = $748$hi;
   i64toi32_i32$5 = $747_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $749$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = $749$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 336 | 0;
 }
 
 function $1517($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $13_1 & 32767 | 0;
    if (($3_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $4_1 = 4;
    if ($3_1) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $1518($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11$hi = 0, $52_1 = 0, $6_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $11_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $123$hi = 0, $126_1 = 0, $127$hi = 0, $148_1 = 0, $148$hi = 0, $150$hi = 0, $153_1 = 0, $153$hi = 0, $155$hi = 0, $167$hi = 0, $170_1 = 0, $171$hi = 0, $200_1 = 0, $200$hi = 0, $202$hi = 0, $211_1 = 0, $212_1 = 0, $212$hi = 0, $214_1 = 0, $214$hi = 0, $220$hi = 0, $221_1 = 0, $221$hi = 0, $228_1 = 0, $228$hi = 0, $233$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($1509($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     if (!($1517($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6_1 = $52_1;
     $7_1 = $6_1 & 32767 | 0;
     if (($7_1 | 0) != (32767 | 0)) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $1504($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $1516($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $9_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $10$hi;
    if (($1509($1_1 | 0, i64toi32_i32$2 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $10$hi;
     if (!($1509($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$1;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $1504($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$3 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $53_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $53_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $8_1 = $53_1 & 32767 | 0;
   label$6 : {
    label$7 : {
     if (!$7_1) {
      break label$7
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$6;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1081540608;
    $1504($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $54_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $54_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $54_1 + -120 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($8_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1081540608;
    $1504($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $55_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $55_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $55_1 + -120 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $11_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $9_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$1;
   label$9 : {
    if (($7_1 | 0) <= ($8_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$1 = $11$hi;
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       $123$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $126_1 = $4$hi >>> 0 < i64toi32_i32$2 >>> 0 | (($4$hi | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $127$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $123$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $127$hi;
       i64toi32_i32$2 = $126_1;
       i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $56_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $57_1 = 0
         } else {
          $57_1 = 1
         }
         $58_1 = $57_1;
        } else {
         $58_1 = 0
        }
        $56_1 = $58_1;
       }
       if ($56_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 0;
        $1504($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$2 = $5_1 + 40 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$1;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$1;
        break label$1;
       }
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$2 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $59_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $59_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $148_1 = $59_1;
       $148$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $60_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $60_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $150$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $148$hi;
       i64toi32_i32$3 = $148_1;
       i64toi32_i32$1 = $150$hi;
       i64toi32_i32$0 = $60_1;
       i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       $9$hi = i64toi32_i32$1;
       break label$11;
      }
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $61_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $61_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $153_1 = $61_1;
      $153$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 63;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $62_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $62_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $155$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $153$hi;
      i64toi32_i32$3 = $153_1;
      i64toi32_i32$1 = $155$hi;
      i64toi32_i32$0 = $62_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $9$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $63_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $63_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $4_1 = $63_1;
     $4$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     if (($7_1 | 0) > ($8_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $7_1 = $8_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $167$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     $170_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $171$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $167$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $171$hi;
     i64toi32_i32$1 = $170_1;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
      $64_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        $65_1 = 0
       } else {
        $65_1 = 1
       }
       $66_1 = $65_1;
      } else {
       $66_1 = 0
      }
      $64_1 = $66_1;
     }
     if ($64_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    $1504($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $67_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $67_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $67_1;
     $3$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $68_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $68_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $68_1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $200_1 = $3_1;
     $200$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $69_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $69_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $202$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $200$hi;
     i64toi32_i32$2 = $200_1;
     i64toi32_i32$3 = $202$hi;
     i64toi32_i32$0 = $69_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$2 = 65536;
     i64toi32_i32$0 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $8_1 = $6_1 & 32768 | 0;
   label$18 : {
    if (($7_1 | 0) > (0 | 0)) {
     break label$18
    }
    $211_1 = $5_1 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $212_1 = $4_1;
    $212$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $214_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $214$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = $7_1 + 120 | 0 | $8_1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $70_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $70_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $214$hi;
    i64toi32_i32$3 = $214_1;
    i64toi32_i32$1 = $220$hi;
    i64toi32_i32$2 = $70_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $221_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $221$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $212$hi;
    i64toi32_i32$3 = $221$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1065811968;
    $1504($211_1 | 0, $212_1 | 0, i64toi32_i32$1 | 0, $221_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $228_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $228$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $7_1 | $8_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $71_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $71_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $233$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $228$hi;
   i64toi32_i32$0 = $228_1;
   i64toi32_i32$2 = $233$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
   $2_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $1519($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $1520($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $12_1 = 0, $12$hi = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $2_1 = $2_1 << 2 | 0;
    $5_1 = HEAP32[($2_1 + 80908 | 0) >> 2] | 0;
    $6_1 = HEAP32[($2_1 + 80896 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $1499($1_1 | 0) | 0;
     }
     if ($1521($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $7_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $7_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $1499($1_1 | 0) | 0;
    }
    $8_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       if (($2_1 & -33 | 0 | 0) != (73 | 0)) {
        break label$11
       }
       label$12 : while (1) {
        if (($8_1 | 0) == (7 | 0)) {
         break label$10
        }
        label$13 : {
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$14
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $1499($1_1 | 0) | 0;
        }
        $9_1 = $8_1 + 65537 | 0;
        $8_1 = $8_1 + 1 | 0;
        if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
         continue label$12
        }
        break label$12;
       };
      }
      label$15 : {
       if (($8_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($8_1 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3_1) {
        break label$9
       }
       if ($8_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($8_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $20_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $21_1 = 0
         } else {
          $21_1 = 1
         }
         $22_1 = $21_1;
        } else {
         $22_1 = 0
        }
        $20_1 = $22_1;
       }
       if ($20_1) {
        break label$16
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($8_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $23_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $24_1 = 0
        } else {
         $24_1 = 1
        }
        $25_1 = $24_1;
       } else {
        $25_1 = 0
       }
       $23_1 = $25_1;
      }
      $2_1 = $23_1;
      label$17 : while (1) {
       label$18 : {
        if ($2_1) {
         break label$18
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       $8_1 = $8_1 + -1 | 0;
       if ($8_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $1501($4_1 | 0, Math_fround(Math_fround(Math_fround($7_1 | 0) * Math_fround(Infinity))));
     i64toi32_i32$0 = $4_1 + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$3;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         if ($8_1) {
          break label$23
         }
         $8_1 = 0;
         if (($2_1 & -33 | 0 | 0) != (78 | 0)) {
          break label$23
         }
         label$24 : while (1) {
          if (($8_1 | 0) == (2 | 0)) {
           break label$22
          }
          label$25 : {
           label$26 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
             break label$26
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$25;
           }
           $2_1 = $1499($1_1 | 0) | 0;
          }
          $9_1 = $8_1 + 65981 | 0;
          $8_1 = $8_1 + 1 | 0;
          if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
           continue label$24
          }
          break label$24;
         };
        }
        switch ($8_1 | 0) {
        case 0:
         break label$19;
        case 3:
         break label$22;
        default:
         break label$21;
        };
       }
       label$27 : {
        label$28 : {
         $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$28
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break label$27;
        }
        $2_1 = $1499($1_1 | 0) | 0;
       }
       label$29 : {
        label$30 : {
         if (($2_1 | 0) != (40 | 0)) {
          break label$30
         }
         $8_1 = 1;
         break label$29;
        }
        i64toi32_i32$3 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 2147450880;
        $11_1 = 0;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
         $26_1 = 1
        } else {
         if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $27_1 = 0
          } else {
           $27_1 = 1
          }
          $28_1 = $27_1;
         } else {
          $28_1 = 0
         }
         $26_1 = $28_1;
        }
        if ($26_1) {
         break label$1
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$1;
       }
       label$31 : while (1) {
        label$32 : {
         label$33 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$33
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$32;
         }
         $2_1 = $1499($1_1 | 0) | 0;
        }
        $9_1 = $2_1 + -65 | 0;
        label$34 : {
         label$35 : {
          if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
           break label$35
          }
          if ($9_1 >>> 0 < 26 >>> 0) {
           break label$35
          }
          $9_1 = $2_1 + -97 | 0;
          if (($2_1 | 0) == (95 | 0)) {
           break label$35
          }
          if ($9_1 >>> 0 >= 26 >>> 0) {
           break label$34
          }
         }
         $8_1 = $8_1 + 1 | 0;
         continue label$31;
        }
        break label$31;
       };
       i64toi32_i32$0 = 2147450880;
       $11_1 = 0;
       $11$hi = i64toi32_i32$0;
       if (($2_1 | 0) == (41 | 0)) {
        break label$1
       }
       label$36 : {
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
        $12_1 = i64toi32_i32$0;
        $12$hi = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
         $29_1 = 1
        } else {
         if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $30_1 = 0
          } else {
           $30_1 = 1
          }
          $31_1 = $30_1;
         } else {
          $31_1 = 0
         }
         $29_1 = $31_1;
        }
        if ($29_1) {
         break label$36
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       label$37 : {
        label$38 : {
         if (!$3_1) {
          break label$38
         }
         if ($8_1) {
          break label$37
         }
         i64toi32_i32$1 = 0;
         $10_1 = 0;
         $10$hi = i64toi32_i32$1;
         break label$1;
        }
        HEAP32[($1081() | 0) >> 2] = 28;
        i64toi32_i32$1 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$1;
        break label$20;
       }
       label$39 : while (1) {
        label$40 : {
         i64toi32_i32$1 = $12$hi;
         i64toi32_i32$3 = $12_1;
         i64toi32_i32$2 = 0;
         i64toi32_i32$0 = 0;
         if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
          $32_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
            $33_1 = 0
           } else {
            $33_1 = 1
           }
           $34_1 = $33_1;
          } else {
           $34_1 = 0
          }
          $32_1 = $34_1;
         }
         if ($32_1) {
          break label$40
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$3 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$3;
        $8_1 = $8_1 + -1 | 0;
        if ($8_1) {
         continue label$39
        }
        break label$1;
       };
      }
      i64toi32_i32$3 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$3;
      label$41 : {
       i64toi32_i32$0 = $1_1;
       i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
        $35_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $36_1 = 0
         } else {
          $36_1 = 1
         }
         $37_1 = $36_1;
        } else {
         $37_1 = 0
        }
        $35_1 = $37_1;
       }
       if ($35_1) {
        break label$41
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      HEAP32[($1081() | 0) >> 2] = 28;
     }
     i64toi32_i32$0 = $10$hi;
     $1498($1_1 | 0, $10_1 | 0, i64toi32_i32$0 | 0);
     break label$2;
    }
    label$42 : {
     if (($2_1 | 0) != (48 | 0)) {
      break label$42
     }
     label$43 : {
      label$44 : {
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($8_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$44
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
       $8_1 = HEAPU8[$8_1 >> 0] | 0;
       break label$43;
      }
      $8_1 = $1499($1_1 | 0) | 0;
     }
     label$45 : {
      if (($8_1 & -33 | 0 | 0) != (88 | 0)) {
       break label$45
      }
      $1522($4_1 + 16 | 0 | 0, $1_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
      i64toi32_i32$2 = $4_1 + 24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      $10$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
      $38_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $39_1 = 0
       } else {
        $39_1 = 1
       }
       $40_1 = $39_1;
      } else {
       $40_1 = 0
      }
      $38_1 = $40_1;
     }
     if ($38_1) {
      break label$42
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    $1523($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
    i64toi32_i32$3 = $4_1 + 40 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$2;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $1521($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1522($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $12_1 = 0, $20_1 = 0, $11_1 = 0, $13_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $125_1 = 0, $127_1 = 0, $128_1 = 0, $129_1 = 0, $131_1 = 0, $132_1 = 0, $133_1 = 0, $134_1 = 0, $135_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $126_1 = 0, $126$hi = 0, $130_1 = 0, $130$hi = 0, $141_1 = 0, $141$hi = 0, $145_1 = 0, $145$hi = 0, $163_1 = 0, $163$hi = 0, $167_1 = 0, $167$hi = 0, $215_1 = 0, $215$hi = 0, $219_1 = 0, $219$hi = 0, $261_1 = 0, $261$hi = 0, $265_1 = 0, $265$hi = 0, $277$hi = 0, $284$hi = 0, $293_1 = 0, $293$hi = 0, $297_1 = 0, $297$hi = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $315_1 = 0, $315$hi = 0, $331$hi = 0, $139_1 = 0, $336_1 = 0, $336$hi = 0, $340$hi = 0, $140_1 = 0, $343_1 = 0, $343$hi = 0, $362$hi = 0, $369_1 = 0, $370_1 = 0, $373$hi = 0, $397_1 = 0, $397$hi = 0, $401_1 = 0, $401$hi = 0, $437_1 = 0, $437$hi = 0, $441_1 = 0, $441$hi = 0, $445_1 = 0, $445$hi = 0, $449_1 = 0, $449$hi = 0, $458_1 = 0, $458$hi = 0, $461_1 = 0, $461$hi = 0, $465_1 = 0, $465$hi = 0, $469_1 = 0, $469$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $479_1 = 0, $479$hi = 0, $483_1 = 0, $483$hi = 0, $515_1 = 0, $515$hi = 0, $519_1 = 0, $519$hi = 0, $523_1 = 0, $523$hi = 0, $527_1 = 0, $527$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $1499($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $1499($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $1499($1_1 | 0) | 0;
   }
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   label$9 : {
    if (($7_1 | 0) == (48 | 0)) {
     break label$9
    }
    $8_1 = 1;
    break label$3;
   }
   label$10 : while (1) {
    label$11 : {
     label$12 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$12
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$11;
     }
     $7_1 = $1499($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$10
    }
    break label$10;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$13 : {
   label$14 : while (1) {
    $12_1 = $7_1;
    label$15 : {
     label$16 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$16
      }
      $12_1 = $7_1 | 32 | 0;
      label$17 : {
       if (($7_1 | 0) == (46 | 0)) {
        break label$17
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$13
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$16
      }
      if ($8_1) {
       break label$13
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break label$15;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$18 : {
      label$19 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $112_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $113_1 = 0
         } else {
          $113_1 = 1
         }
         $114_1 = $113_1;
        } else {
         $114_1 = 0
        }
        $112_1 = $114_1;
       }
       if ($112_1) {
        break label$19
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$18;
      }
      label$20 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$20
       }
       $1502($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $1504($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $126_1 = i64toi32_i32$5;
       $126$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $130_1 = i64toi32_i32$2;
       $130$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $126$hi;
       i64toi32_i32$2 = $130$hi;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       $1504($6_1 + 16 | 0 | 0, $126_1 | 0, i64toi32_i32$5 | 0, $130_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $141_1 = i64toi32_i32$3;
       $141$hi = i64toi32_i32$0;
       i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $145_1 = i64toi32_i32$0;
       $145$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$3 = $141$hi;
       i64toi32_i32$0 = $145$hi;
       i64toi32_i32$2 = $16$hi;
       i64toi32_i32$5 = $17$hi;
       $1507($6_1 | 0, $141_1 | 0, i64toi32_i32$3 | 0, $145_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break label$18;
      }
      if (!$7_1) {
       break label$18
      }
      if ($11_1) {
       break label$18
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $1504($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
      $163_1 = i64toi32_i32$3;
      $163$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $167_1 = i64toi32_i32$0;
      $167$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $163$hi;
      i64toi32_i32$0 = $167$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $1507($6_1 + 64 | 0 | 0, $163_1 | 0, i64toi32_i32$3 | 0, $167_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$21 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$21
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$14;
    }
    $7_1 = $1499($1_1 | 0) | 0;
    continue label$14;
   };
  }
  label$22 : {
   label$23 : {
    if ($9_1) {
     break label$23
    }
    label$24 : {
     label$25 : {
      label$26 : {
       i64toi32_i32$5 = $1_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
        $115_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $116_1 = 0
         } else {
          $116_1 = 1
         }
         $117_1 = $116_1;
        } else {
         $117_1 = 0
        }
        $115_1 = $117_1;
       }
       if ($115_1) {
        break label$26
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
       if (!$5_1) {
        break label$25
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
       if (!$8_1) {
        break label$24
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
       break label$24;
      }
      if ($5_1) {
       break label$24
      }
     }
     i64toi32_i32$5 = 0;
     $1498($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $215_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $215$hi = i64toi32_i32$0;
    wasm2js_scratch_store_f64(+(+($4_1 | 0)));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $219_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
    $219$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $215$hi;
    i64toi32_i32$0 = $215_1;
    i64toi32_i32$5 = $219$hi;
    i64toi32_i32$4 = $219_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
    $1508($6_1 + 96 | 0 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$3 = $6_1 + 104 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$5;
    break label$22;
   }
   label$27 : {
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 7;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $118_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $119_1 = 0
      } else {
       $119_1 = 1
      }
      $120_1 = $119_1;
     } else {
      $120_1 = 0
     }
     $118_1 = $120_1;
    }
    if ($118_1) {
     break label$27
    }
    i64toi32_i32$3 = $19$hi;
    $15_1 = $19_1;
    $15$hi = i64toi32_i32$3;
    label$28 : while (1) {
     $10_1 = $10_1 << 4 | 0;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $15_1 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      continue label$28
     }
     break label$28;
    };
   }
   label$29 : {
    label$30 : {
     label$31 : {
      label$32 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$32
       }
       i64toi32_i32$3 = $1524($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = -2147483648;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$29
       }
       label$33 : {
        if (!$5_1) {
         break label$33
        }
        i64toi32_i32$4 = $1_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
         $121_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $122_1 = 0
          } else {
           $122_1 = 1
          }
          $123_1 = $122_1;
         } else {
          $123_1 = 0
         }
         $121_1 = $123_1;
        }
        if ($121_1) {
         break label$31
        }
        break label$30;
       }
       i64toi32_i32$4 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       $1498($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$4 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$4;
       break label$22;
      }
      i64toi32_i32$4 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
       $124_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $125_1 = 0
        } else {
         $125_1 = 1
        }
        $127_1 = $125_1;
       } else {
        $127_1 = 0
       }
       $124_1 = $127_1;
      }
      if ($124_1) {
       break label$29
      }
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$3 = 0;
    $15_1 = 0;
    $15$hi = i64toi32_i32$3;
   }
   label$34 : {
    if ($10_1) {
     break label$34
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $261_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $261$hi = i64toi32_i32$1;
    wasm2js_scratch_store_f64(+(+($4_1 | 0)));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -2147483648;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $265_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $265$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $261$hi;
    i64toi32_i32$1 = $261_1;
    i64toi32_i32$3 = $265$hi;
    i64toi32_i32$4 = $265_1;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $1508($6_1 + 112 | 0 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$0 = $6_1 + 120 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$3;
    break label$22;
   }
   label$35 : {
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$5 = $8_1;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = i64toi32_i32$5 ? $14_1 : $19_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 2;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     $128_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
     $128_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $277$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $277$hi;
    i64toi32_i32$0 = $128_1;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$3 = $15_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -32;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $284$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$4 = $284$hi;
    i64toi32_i32$3 = 0 - $3_1 | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $129_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $131_1 = 0
      } else {
       $131_1 = 1
      }
      $132_1 = $131_1;
     } else {
      $132_1 = 0
     }
     $129_1 = $132_1;
    }
    if ($129_1) {
     break label$35
    }
    HEAP32[($1081() | 0) >> 2] = 68;
    $1502($6_1 + 160 | 0 | 0, $4_1 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
    $293_1 = i64toi32_i32$2;
    $293$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 160 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $297_1 = i64toi32_i32$1;
    $297$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $293$hi;
    i64toi32_i32$1 = $297$hi;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = 2147418111;
    $1504($6_1 + 144 | 0 | 0, $293_1 | 0, i64toi32_i32$2 | 0, $297_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
    $301_1 = i64toi32_i32$4;
    $301$hi = i64toi32_i32$3;
    i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $305_1 = i64toi32_i32$3;
    $305$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $301$hi;
    i64toi32_i32$3 = $305$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $1504($6_1 + 128 | 0 | 0, $301_1 | 0, i64toi32_i32$4 | 0, $305_1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = ($6_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$2;
    break label$22;
   }
   label$36 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $3_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $315_1 = i64toi32_i32$1;
    $315$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$1 = $315$hi;
    i64toi32_i32$4 = $315_1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $133_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $134_1 = 0
      } else {
       $134_1 = 1
      }
      $135_1 = $134_1;
     } else {
      $135_1 = 0
     }
     $133_1 = $135_1;
    }
    if ($133_1) {
     break label$36
    }
    label$37 : {
     if (($10_1 | 0) <= (-1 | 0)) {
      break label$37
     }
     label$38 : while (1) {
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1073807360;
      $1507($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1073610752;
      $7_1 = $1510($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
      $331$hi = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$1;
      $7_1 = ($7_1 | 0) > (-1 | 0);
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$2 = $331$hi;
      $139_1 = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$0 ? $139_1 : $16_1;
      i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
      $336_1 = i64toi32_i32$1;
      $336$hi = i64toi32_i32$4;
      i64toi32_i32$0 = ($6_1 + 416 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $340$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = $340$hi;
      $140_1 = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$3 ? $140_1 : $17_1;
      i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
      $343_1 = i64toi32_i32$2;
      $343$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$3 = $336$hi;
      i64toi32_i32$1 = $343$hi;
      $1507($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0, $336_1 | 0, i64toi32_i32$3 | 0, $343_1 | 0, i64toi32_i32$1 | 0);
      $1_1 = $10_1 << 1 | 0;
      $10_1 = $1_1 | $7_1 | 0;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
      if (($1_1 | 0) > (-1 | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     label$40 : {
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = 0;
      $362$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = $19_1;
      i64toi32_i32$2 = $362$hi;
      i64toi32_i32$0 = 32 - $3_1 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $14_1 = i64toi32_i32$3;
      $14$hi = i64toi32_i32$4;
      $7_1 = i64toi32_i32$3;
      $369_1 = (i64toi32_i32$3 | 0) > (0 | 0) ? i64toi32_i32$3 : 0;
      $370_1 = $2_1;
      i64toi32_i32$4 = 0;
      $373$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = $373$hi;
      i64toi32_i32$0 = $2_1;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
       $136_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $137_1 = 0
        } else {
         $137_1 = 1
        }
        $138_1 = $137_1;
       } else {
        $138_1 = 0
       }
       $136_1 = $138_1;
      }
      $7_1 = $136_1 ? $369_1 : $370_1;
      if ($7_1 >>> 0 < 113 >>> 0) {
       break label$40
      }
      $1502($6_1 + 384 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1 + 392 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $14_1 = i64toi32_i32$5;
      $14$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 384 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $20_1 = 0;
      $20$hi = i64toi32_i32$5;
      break label$39;
     }
     $1508($6_1 + 352 | 0 | 0, +(+$1070(+(1.0), 144 - $7_1 | 0 | 0)));
     $1502($6_1 + 336 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
     $397_1 = i64toi32_i32$5;
     $397$hi = i64toi32_i32$4;
     i64toi32_i32$0 = (i64toi32_i32$0 + 352 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $401_1 = i64toi32_i32$4;
     $401$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$5;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = (i64toi32_i32$0 + 336 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $14_1 = i64toi32_i32$4;
     $14$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $397$hi;
     i64toi32_i32$4 = $401$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $14$hi;
     $1511($6_1 + 368 | 0 | 0, $397_1 | 0, i64toi32_i32$5 | 0, $401_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$4 = ($6_1 + 368 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$4 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 368 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 372 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $7_1 = !($10_1 & 1 | 0) & ($7_1 >>> 0 < 32 >>> 0 & ($1509($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    $1512($6_1 + 320 | 0 | 0, $10_1 | $7_1 | 0 | 0);
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
    $437_1 = i64toi32_i32$5;
    $437$hi = i64toi32_i32$4;
    i64toi32_i32$0 = (i64toi32_i32$0 + 320 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $441_1 = i64toi32_i32$4;
    $441$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$0 = $437$hi;
    i64toi32_i32$1 = $441$hi;
    $1504($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $437_1 | 0, i64toi32_i32$0 | 0, $441_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $445_1 = i64toi32_i32$1;
    $445$hi = i64toi32_i32$0;
    i64toi32_i32$4 = (i64toi32_i32$4 + 304 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $449_1 = i64toi32_i32$0;
    $449$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$1 = $445$hi;
    i64toi32_i32$0 = $449$hi;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$5 = $20$hi;
    $1507($6_1 + 272 | 0 | 0, $445_1 | 0, i64toi32_i32$1 | 0, $449_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$1 = i64toi32_i32$2 ? 0 : $16_1;
    i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
    $458_1 = i64toi32_i32$1;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? 0 : $17_1;
    i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
    $461_1 = i64toi32_i32$5;
    $461$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$4 = $458$hi;
    i64toi32_i32$0 = $461$hi;
    $1504($6_1 + 288 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$5 | 0, $458_1 | 0, i64toi32_i32$4 | 0, $461_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
    $465_1 = i64toi32_i32$0;
    $465$hi = i64toi32_i32$4;
    i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $469_1 = i64toi32_i32$4;
    $469$hi = i64toi32_i32$0;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
    $471_1 = i64toi32_i32$0;
    $471$hi = i64toi32_i32$4;
    i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $475_1 = i64toi32_i32$4;
    $475$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $465$hi;
    i64toi32_i32$4 = $469$hi;
    i64toi32_i32$5 = $471$hi;
    i64toi32_i32$2 = $475$hi;
    $1507($6_1 + 256 | 0 | 0, $465_1 | 0, i64toi32_i32$0 | 0, $469_1 | 0, i64toi32_i32$4 | 0, $471_1 | 0, i64toi32_i32$5 | 0, $475_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
    $479_1 = i64toi32_i32$2;
    $479$hi = i64toi32_i32$5;
    i64toi32_i32$4 = (i64toi32_i32$4 + 256 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $483_1 = i64toi32_i32$5;
    $483$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $479$hi;
    i64toi32_i32$5 = $483$hi;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$0 = $20$hi;
    $1513($6_1 + 240 | 0 | 0, $479_1 | 0, i64toi32_i32$2 | 0, $483_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$0 | 0);
    label$41 : {
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$4;
     i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$4;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ($1509($16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0) | 0) {
      break label$41
     }
     HEAP32[($1081() | 0) >> 2] = 68;
    }
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$5 = $17$hi;
    $1514($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0);
    i64toi32_i32$4 = ($6_1 + 224 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$5;
    break label$22;
   }
   HEAP32[($1081() | 0) >> 2] = 68;
   $1502($6_1 + 208 | 0 | 0, $4_1 | 0);
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
   $515_1 = i64toi32_i32$5;
   $515$hi = i64toi32_i32$2;
   i64toi32_i32$4 = (i64toi32_i32$4 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $519_1 = i64toi32_i32$2;
   $519$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $515$hi;
   i64toi32_i32$2 = $519$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 65536;
   $1504($6_1 + 192 | 0 | 0, $515_1 | 0, i64toi32_i32$5 | 0, $519_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $523_1 = i64toi32_i32$0;
   $523$hi = i64toi32_i32$4;
   i64toi32_i32$2 = (i64toi32_i32$2 + 192 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $527_1 = i64toi32_i32$4;
   $527$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $523$hi;
   i64toi32_i32$4 = $527$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 65536;
   $1504($6_1 + 176 | 0 | 0, $523_1 | 0, i64toi32_i32$0 | 0, $527_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$4 = ($6_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $16$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $1523($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $7_1 = 0, i64toi32_i32$2 = 0, $18$hi = 0, $18_1 = 0, $14_1 = 0, $19$hi = 0, $19_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $15_1 = 0, $16_1 = 0, $21$hi = 0, $20$hi = 0, $8_1 = 0, $12_1 = 0, $21_1 = 0, $20_1 = 0, $9_1 = 0, $22$hi = 0, $23$hi = 0, $22_1 = 0, $23_1 = 0, $10_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $178_1 = 0, $179_1 = 0, $180_1 = 0, $181_1 = 0, $182_1 = 0, $183_1 = 0, $184_1 = 0, $185_1 = 0, $186_1 = 0, $187_1 = 0, $188_1 = 0, $189_1 = 0, $190_1 = 0, $191_1 = 0, $192_1 = 0, $193_1 = 0, $194_1 = 0, $195_1 = 0, $17_1 = 0, $24_1 = 0.0, $124_1 = 0, $204_1 = 0, $204$hi = 0, $208_1 = 0, $208$hi = 0, $235_1 = 0, $235$hi = 0, $239_1 = 0, $239$hi = 0, $241_1 = 0, $241$hi = 0, $245_1 = 0, $245$hi = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $276_1 = 0, $276$hi = 0, $286_1 = 0, $286$hi = 0, $295_1 = 0, $295$hi = 0, $299_1 = 0, $299$hi = 0, $303_1 = 0, $303$hi = 0, $307_1 = 0, $307$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $362$hi = 0, $366_1 = 0, $366$hi = 0, $385_1 = 0, $385$hi = 0, $389_1 = 0, $389$hi = 0, $391_1 = 0, $391$hi = 0, $395_1 = 0, $395$hi = 0, $406_1 = 0, $406$hi = 0, $410_1 = 0, $410$hi = 0, $412_1 = 0, $412$hi = 0, $416_1 = 0, $416$hi = 0, $444_1 = 0, $444$hi = 0, $448_1 = 0, $448$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $470_1 = 0, $470$hi = 0, $474_1 = 0, $474$hi = 0, $495_1 = 0, $496_1 = 0, $513_1 = 0, $591$hi = 0, $593$hi = 0, $601_1 = 0, $601$hi = 0, $742_1 = 0, $742$hi = 0, $746_1 = 0, $746$hi = 0, $748_1 = 0, $748$hi = 0, $752_1 = 0, $752$hi = 0, $771_1 = 0, $771$hi = 0, $775_1 = 0, $775$hi = 0, $817_1 = 0, $878_1 = 0, $878$hi = 0, $882_1 = 0, $882$hi = 0, $901_1 = 0, $901$hi = 0, $905_1 = 0, $905$hi = 0, $923_1 = 0, $923$hi = 0, $927_1 = 0, $927$hi = 0, $964_1 = 0, $964$hi = 0, $968_1 = 0, $968$hi = 0, $987_1 = 0, $987$hi = 0, $991_1 = 0, $991$hi = 0, $1014_1 = 0, $1014$hi = 0, $1018_1 = 0, $1018$hi = 0, $1034_1 = 0, $1034$hi = 0, $1038_1 = 0, $1038$hi = 0, $1052_1 = 0, $1052$hi = 0, $1056_1 = 0, $1056$hi = 0, $1077_1 = 0, $1077$hi = 0, $1081_1 = 0, $1081$hi = 0, $1104_1 = 0, $1104$hi = 0, $1108_1 = 0, $1108$hi = 0, $1113$hi = 0, $196_1 = 0, $1120$hi = 0, $197_1 = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = 0 - $4_1 | 0;
  $10_1 = $9_1 - $3_1 | 0;
  i64toi32_i32$0 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $1499($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $1499($1_1 | 0) | 0;
   }
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   label$7 : {
    if (($2_1 | 0) != (48 | 0)) {
     break label$7
    }
    label$8 : while (1) {
     label$9 : {
      label$10 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$10
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$9;
      }
      $2_1 = $1499($1_1 | 0) | 0;
     }
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = $18$hi + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
     if (($2_1 | 0) == (48 | 0)) {
      continue label$8
     }
     break label$8;
    };
    $11_1 = 1;
   }
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  label$11 : {
   label$12 : {
    label$13 : {
     label$14 : {
      label$15 : {
       label$16 : {
        label$17 : {
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          break label$17
         }
         i64toi32_i32$5 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$5;
         if ($13_1 >>> 0 <= 9 >>> 0) {
          break label$17
         }
         $15_1 = 0;
         $16_1 = 0;
         break label$16;
        }
        i64toi32_i32$5 = 0;
        $19_1 = 0;
        $19$hi = i64toi32_i32$5;
        $16_1 = 0;
        $15_1 = 0;
        $12_1 = 0;
        label$18 : while (1) {
         label$19 : {
          label$20 : {
           if (!($14_1 & 1 | 0)) {
            break label$20
           }
           label$21 : {
            if ($8_1) {
             break label$21
            }
            i64toi32_i32$5 = $19$hi;
            $18_1 = $19_1;
            $18$hi = i64toi32_i32$5;
            $8_1 = 1;
            break label$19;
           }
           $14_1 = !$11_1;
           break label$15;
          }
          i64toi32_i32$5 = $19$hi;
          i64toi32_i32$0 = $19_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $19_1 = i64toi32_i32$1;
          $19$hi = i64toi32_i32$4;
          label$22 : {
           if (($15_1 | 0) > (2044 | 0)) {
            break label$22
           }
           $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
           label$23 : {
            if (!$16_1) {
             break label$23
            }
            $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           i64toi32_i32$4 = $19$hi;
           $12_1 = ($2_1 | 0) == (48 | 0) ? $12_1 : $19_1;
           HEAP32[$14_1 >> 2] = $13_1;
           $11_1 = 1;
           $2_1 = $16_1 + 1 | 0;
           $124_1 = $2_1;
           $2_1 = ($2_1 | 0) == (9 | 0);
           $16_1 = $2_1 ? 0 : $124_1;
           $15_1 = $15_1 + $2_1 | 0;
           break label$19;
          }
          if (($2_1 | 0) == (48 | 0)) {
           break label$19
          }
          HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
          $12_1 = 18396;
         }
         label$24 : {
          label$25 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$25
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break label$24;
          }
          $2_1 = $1499($1_1 | 0) | 0;
         }
         $13_1 = $2_1 + -48 | 0;
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          continue label$18
         }
         if ($13_1 >>> 0 < 10 >>> 0) {
          continue label$18
         }
         break label$18;
        };
       }
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $18_1 : $19_1;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $18_1 = i64toi32_i32$3;
       $18$hi = i64toi32_i32$5;
       label$26 : {
        if (!$11_1) {
         break label$26
        }
        if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
         break label$26
        }
        label$27 : {
         i64toi32_i32$5 = $1524($1_1 | 0, $6_1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $20_1 = i64toi32_i32$5;
         $20$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$27
         }
         if (!$6_1) {
          break label$13
         }
         i64toi32_i32$2 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$2;
         i64toi32_i32$4 = $1_1;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
         i64toi32_i32$4 = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         i64toi32_i32$5 = 0;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
          $171_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
            $172_1 = 0
           } else {
            $172_1 = 1
           }
           $173_1 = $172_1;
          } else {
           $173_1 = 0
          }
          $171_1 = $173_1;
         }
         if ($171_1) {
          break label$27
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$5 = $20_1;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$2 = $18_1;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$1;
        break label$12;
       }
       $14_1 = !$11_1;
       if (($2_1 | 0) < (0 | 0)) {
        break label$14
       }
      }
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
       $174_1 = 1
      } else {
       if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
         $175_1 = 0
        } else {
         $175_1 = 1
        }
        $176_1 = $175_1;
       } else {
        $176_1 = 0
       }
       $174_1 = $176_1;
      }
      if ($174_1) {
       break label$14
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if (!$14_1) {
      break label$12
     }
     HEAP32[($1081() | 0) >> 2] = 28;
    }
    i64toi32_i32$4 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $1498($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$4;
    break label$11;
   }
   label$28 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$28
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$4 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$5 = 2147483647;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $204_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $204$hi = i64toi32_i32$5;
    wasm2js_scratch_store_f64(+(+($5_1 | 0)));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$4 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $208_1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
    $208$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $204$hi;
    i64toi32_i32$5 = $204_1;
    i64toi32_i32$4 = $208$hi;
    i64toi32_i32$1 = $208_1;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
    $1508($7_1 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break label$11;
   }
   label$29 : {
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 9;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
     $177_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $178_1 = 0
      } else {
       $178_1 = 1
      }
      $179_1 = $178_1;
     } else {
      $179_1 = 0
     }
     $177_1 = $179_1;
    }
    if ($177_1) {
     break label$29
    }
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$5 = $19_1;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
     break label$29
    }
    label$30 : {
     if ($3_1 >>> 0 > 30 >>> 0) {
      break label$30
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$29
     }
    }
    $1502($7_1 + 48 | 0 | 0, $5_1 | 0);
    $1512($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
    $235_1 = i64toi32_i32$1;
    $235$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$2;
    $239$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    $241_1 = i64toi32_i32$1;
    $241$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $245_1 = i64toi32_i32$2;
    $245$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $235$hi;
    i64toi32_i32$2 = $239$hi;
    i64toi32_i32$5 = $241$hi;
    i64toi32_i32$4 = $245$hi;
    $1504($7_1 + 16 | 0 | 0, $235_1 | 0, i64toi32_i32$1 | 0, $239_1 | 0, i64toi32_i32$2 | 0, $241_1 | 0, i64toi32_i32$5 | 0, $245_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break label$11;
   }
   label$31 : {
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = 0;
    $255$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$5 = $255$hi;
    i64toi32_i32$1 = $9_1 >>> 1 | 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
     $180_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $181_1 = 0
      } else {
       $181_1 = 1
      }
      $182_1 = $181_1;
     } else {
      $182_1 = 0
     }
     $180_1 = $182_1;
    }
    if ($180_1) {
     break label$31
    }
    HEAP32[($1081() | 0) >> 2] = 68;
    $1502($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
    $264_1 = i64toi32_i32$2;
    $264$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 96 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $268_1 = i64toi32_i32$4;
    $268$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$4 = $268$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = 2147418111;
    $1504($7_1 + 80 | 0 | 0, $264_1 | 0, i64toi32_i32$2 | 0, $268_1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
    $272_1 = i64toi32_i32$5;
    $272$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 80 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $276_1 = i64toi32_i32$1;
    $276$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $272$hi;
    i64toi32_i32$1 = $276$hi;
    i64toi32_i32$4 = -1;
    i64toi32_i32$2 = 2147418111;
    $1504($7_1 + 64 | 0 | 0, $272_1 | 0, i64toi32_i32$5 | 0, $276_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$2;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$2;
    break label$11;
   }
   label$32 : {
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$4 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $286_1 = i64toi32_i32$4;
    $286$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $286$hi;
    i64toi32_i32$5 = $286_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
     $183_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       $184_1 = 0
      } else {
       $184_1 = 1
      }
      $185_1 = $184_1;
     } else {
      $185_1 = 0
     }
     $183_1 = $185_1;
    }
    if ($183_1) {
     break label$32
    }
    HEAP32[($1081() | 0) >> 2] = 68;
    $1502($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
    $295_1 = i64toi32_i32$1;
    $295$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $299_1 = i64toi32_i32$2;
    $299$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $295$hi;
    i64toi32_i32$2 = $299$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 65536;
    $1504($7_1 + 128 | 0 | 0, $295_1 | 0, i64toi32_i32$1 | 0, $299_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $303_1 = i64toi32_i32$4;
    $303$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $307_1 = i64toi32_i32$5;
    $307$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $303$hi;
    i64toi32_i32$5 = $307$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 65536;
    $1504($7_1 + 112 | 0 | 0, $303_1 | 0, i64toi32_i32$4 | 0, $307_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    break label$11;
   }
   label$33 : {
    if (!$16_1) {
     break label$33
    }
    label$34 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$34
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$35 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$35
      }
      break label$35;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$1 = $18$hi;
   $16_1 = $18_1;
   label$36 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break label$36
    }
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 17;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $186_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $187_1 = 0
      } else {
       $187_1 = 1
      }
      $188_1 = $187_1;
     } else {
      $188_1 = 0
     }
     $186_1 = $188_1;
    }
    if ($186_1) {
     break label$36
    }
    if (($12_1 | 0) > ($16_1 | 0)) {
     break label$36
    }
    label$37 : {
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 9;
     if ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$37
     }
     $1502($7_1 + 192 | 0 | 0, $5_1 | 0);
     $1512($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $356_1 = i64toi32_i32$4;
     $356$hi = i64toi32_i32$5;
     i64toi32_i32$2 = ($7_1 + 192 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $360_1 = i64toi32_i32$5;
     $360$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $362_1 = i64toi32_i32$4;
     $362$hi = i64toi32_i32$5;
     i64toi32_i32$2 = ($7_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $366_1 = i64toi32_i32$5;
     $366$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $356$hi;
     i64toi32_i32$5 = $360$hi;
     i64toi32_i32$2 = $362$hi;
     i64toi32_i32$1 = $366$hi;
     $1504($7_1 + 160 | 0 | 0, $356_1 | 0, i64toi32_i32$4 | 0, $360_1 | 0, i64toi32_i32$5 | 0, $362_1 | 0, i64toi32_i32$2 | 0, $366_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$5 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$1;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 164 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$1;
     break label$11;
    }
    label$38 : {
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$5 = $18_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 8;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $189_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $190_1 = 0
       } else {
        $190_1 = 1
       }
       $191_1 = $190_1;
      } else {
       $191_1 = 0
      }
      $189_1 = $191_1;
     }
     if ($189_1) {
      break label$38
     }
     $1502($7_1 + 272 | 0 | 0, $5_1 | 0);
     $1512($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 272 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 276 | 0) >> 2] | 0;
     $385_1 = i64toi32_i32$5;
     $385$hi = i64toi32_i32$1;
     i64toi32_i32$4 = (i64toi32_i32$4 + 272 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $389_1 = i64toi32_i32$1;
     $389$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
     $391_1 = i64toi32_i32$5;
     $391$hi = i64toi32_i32$1;
     i64toi32_i32$4 = (i64toi32_i32$4 + 256 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $395_1 = i64toi32_i32$1;
     $395$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $385$hi;
     i64toi32_i32$1 = $389$hi;
     i64toi32_i32$4 = $391$hi;
     i64toi32_i32$2 = $395$hi;
     $1504($7_1 + 240 | 0 | 0, $385_1 | 0, i64toi32_i32$5 | 0, $389_1 | 0, i64toi32_i32$1 | 0, $391_1 | 0, i64toi32_i32$4 | 0, $395_1 | 0, i64toi32_i32$2 | 0);
     $1502($7_1 + 224 | 0 | 0, HEAP32[(((8 - $16_1 | 0) << 2 | 0) + 80864 | 0) >> 2] | 0 | 0);
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] | 0;
     $406_1 = i64toi32_i32$2;
     $406$hi = i64toi32_i32$4;
     i64toi32_i32$1 = (i64toi32_i32$1 + 240 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $410_1 = i64toi32_i32$4;
     $410$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 228 | 0) >> 2] | 0;
     $412_1 = i64toi32_i32$2;
     $412$hi = i64toi32_i32$4;
     i64toi32_i32$1 = (i64toi32_i32$1 + 224 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $416_1 = i64toi32_i32$4;
     $416$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $406$hi;
     i64toi32_i32$4 = $410$hi;
     i64toi32_i32$1 = $412$hi;
     i64toi32_i32$5 = $416$hi;
     $1516($7_1 + 208 | 0 | 0, $406_1 | 0, i64toi32_i32$2 | 0, $410_1 | 0, i64toi32_i32$4 | 0, $412_1 | 0, i64toi32_i32$1 | 0, $416_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$4 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$5;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$5;
     break label$11;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$39 : {
     $2_1 = ($3_1 + Math_imul($16_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$39
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$36
     }
    }
    $1502($7_1 + 352 | 0 | 0, $5_1 | 0);
    $1512($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 352 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 356 | 0) >> 2] | 0;
    $444_1 = i64toi32_i32$5;
    $444$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 352 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $448_1 = i64toi32_i32$1;
    $448$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 336 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 340 | 0) >> 2] | 0;
    $450_1 = i64toi32_i32$5;
    $450$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 336 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $454_1 = i64toi32_i32$1;
    $454$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $444$hi;
    i64toi32_i32$1 = $448$hi;
    i64toi32_i32$4 = $450$hi;
    i64toi32_i32$2 = $454$hi;
    $1504($7_1 + 320 | 0 | 0, $444_1 | 0, i64toi32_i32$5 | 0, $448_1 | 0, i64toi32_i32$1 | 0, $450_1 | 0, i64toi32_i32$4 | 0, $454_1 | 0, i64toi32_i32$2 | 0);
    $1502($7_1 + 304 | 0 | 0, HEAP32[(($16_1 << 2 | 0) + 80824 | 0) >> 2] | 0 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] | 0;
    $464_1 = i64toi32_i32$2;
    $464$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 320 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $468_1 = i64toi32_i32$4;
    $468$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 308 | 0) >> 2] | 0;
    $470_1 = i64toi32_i32$2;
    $470$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 304 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $474_1 = i64toi32_i32$4;
    $474$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $464$hi;
    i64toi32_i32$4 = $468$hi;
    i64toi32_i32$1 = $470$hi;
    i64toi32_i32$5 = $474$hi;
    $1504($7_1 + 288 | 0 | 0, $464_1 | 0, i64toi32_i32$2 | 0, $468_1 | 0, i64toi32_i32$4 | 0, $470_1 | 0, i64toi32_i32$1 | 0, $474_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$5;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 288 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 292 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$5;
    break label$11;
   }
   label$40 : while (1) {
    $14_1 = $15_1;
    $15_1 = $14_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$40
    }
    break label$40;
   };
   $12_1 = 0;
   label$41 : {
    label$42 : {
     $1_1 = ($16_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$42
     }
     $13_1 = 0;
     break label$41;
    }
    $495_1 = $1_1 + 9 | 0;
    $496_1 = $1_1;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $18_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
     $192_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $193_1 = 0
      } else {
       $193_1 = 1
      }
      $194_1 = $193_1;
     } else {
      $194_1 = 0
     }
     $192_1 = $194_1;
    }
    $9_1 = $192_1 ? $495_1 : $496_1;
    label$43 : {
     label$44 : {
      if ($14_1) {
       break label$44
      }
      $13_1 = 0;
      $14_1 = 0;
      break label$43;
     }
     $11_1 = HEAP32[(((8 - $9_1 | 0) << 2 | 0) + 80864 | 0) >> 2] | 0;
     $6_1 = (1e9 | 0) / ($11_1 | 0) | 0;
     $2_1 = 0;
     $1_1 = 0;
     $13_1 = 0;
     label$45 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $513_1 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $8_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
      $2_1 = $8_1 + $2_1 | 0;
      HEAP32[$513_1 >> 2] = $2_1;
      $2_1 = ($1_1 | 0) == ($13_1 | 0) & !$2_1 | 0;
      $13_1 = $2_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
      $16_1 = $2_1 ? $16_1 + -9 | 0 : $16_1;
      $2_1 = Math_imul($6_1, $15_1 - Math_imul($8_1, $11_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($14_1 | 0)) {
       continue label$45
      }
      break label$45;
     };
     if (!$2_1) {
      break label$43
     }
     HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $2_1;
     $14_1 = $14_1 + 1 | 0;
    }
    $16_1 = ($16_1 - $9_1 | 0) + 9 | 0;
   }
   label$46 : while (1) {
    $9_1 = ($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0;
    $6_1 = ($16_1 | 0) < (36 | 0);
    label$47 : {
     label$48 : while (1) {
      label$49 : {
       if ($6_1) {
        break label$49
       }
       if (($16_1 | 0) != (36 | 0)) {
        break label$47
       }
       if ((HEAP32[$9_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$47
       }
      }
      $15_1 = $14_1 + 2047 | 0;
      $11_1 = 0;
      label$50 : while (1) {
       $2_1 = $14_1;
       label$51 : {
        label$52 : {
         $1_1 = $15_1 & 2047 | 0;
         $14_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $14_1;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         i64toi32_i32$1 = 29;
         i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $195_1 = 0;
         } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $195_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $591$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $593$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $591$hi;
         i64toi32_i32$5 = $195_1;
         i64toi32_i32$2 = $593$hi;
         i64toi32_i32$1 = $11_1;
         i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $18_1 = i64toi32_i32$3;
         $18$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$4 = i64toi32_i32$3;
         i64toi32_i32$5 = 0;
         i64toi32_i32$1 = 1000000001;
         if ($18$hi >>> 0 > i64toi32_i32$5 >>> 0 | (($18$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
          break label$52
         }
         $11_1 = 0;
         break label$51;
        }
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($18_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $19_1 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $601_1 = i64toi32_i32$0;
        $601$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$1 = $18_1;
        i64toi32_i32$0 = $601$hi;
        i64toi32_i32$5 = $601_1;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $19$hi;
        $11_1 = $19_1;
       }
       i64toi32_i32$3 = $18$hi;
       HEAP32[$14_1 >> 2] = $18_1;
       $8_1 = ($2_1 + -1 | 0) & 2047 | 0;
       $14_1 = ($1_1 | 0) != ($8_1 | 0) ? $2_1 : ($1_1 | 0) == ($13_1 | 0) ? $2_1 : !($18_1 | i64toi32_i32$3 | 0) ? $1_1 : $2_1;
       $15_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($13_1 | 0)) {
        continue label$50
       }
       break label$50;
      };
      $12_1 = $12_1 + -29 | 0;
      $14_1 = $2_1;
      if (!$11_1) {
       continue label$48
      }
      break label$48;
     };
     label$53 : {
      label$54 : {
       $13_1 = ($13_1 + -1 | 0) & 2047 | 0;
       if (($13_1 | 0) == ($2_1 | 0)) {
        break label$54
       }
       $14_1 = $2_1;
       break label$53;
      }
      $1_1 = ($7_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      $14_1 = $8_1;
     }
     $16_1 = $16_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0) >> 2] = $11_1;
     continue label$46;
    }
    break label$46;
   };
   label$55 : {
    label$56 : while (1) {
     $17_1 = ($14_1 + 1 | 0) & 2047 | 0;
     $9_1 = ($7_1 + 784 | 0) + ((($14_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$57 : while (1) {
      $15_1 = ($16_1 | 0) > (45 | 0) ? 9 : 1;
      label$58 : {
       label$59 : while (1) {
        $11_1 = $13_1;
        $1_1 = 0;
        label$60 : {
         label$61 : {
          label$62 : while (1) {
           $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($2_1 | 0) == ($14_1 | 0)) {
            break label$61
           }
           $2_1 = HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($1_1 << 2 | 0) + 80848 | 0) >> 2] | 0;
           if ($2_1 >>> 0 < $13_1 >>> 0) {
            break label$61
           }
           if ($2_1 >>> 0 > $13_1 >>> 0) {
            break label$60
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$62
           }
           break label$62;
          };
         }
         if (($16_1 | 0) != (36 | 0)) {
          break label$60
         }
         i64toi32_i32$3 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         label$63 : while (1) {
          label$64 : {
           $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($2_1 | 0) != ($14_1 | 0)) {
            break label$64
           }
           $14_1 = ($14_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($14_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          $1512($7_1 + 768 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$4 = 0;
          i64toi32_i32$5 = 1075633366;
          $1504($7_1 + 752 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 1342177280 | 0, i64toi32_i32$5 | 0);
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 756 | 0) >> 2] | 0;
          $742_1 = i64toi32_i32$5;
          $742$hi = i64toi32_i32$4;
          i64toi32_i32$1 = (i64toi32_i32$1 + 752 | 0) + 8 | 0;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $746_1 = i64toi32_i32$4;
          $746$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 772 | 0) >> 2] | 0;
          $748_1 = i64toi32_i32$5;
          $748$hi = i64toi32_i32$4;
          i64toi32_i32$1 = (i64toi32_i32$1 + 768 | 0) + 8 | 0;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $752_1 = i64toi32_i32$4;
          $752$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $742$hi;
          i64toi32_i32$4 = $746$hi;
          i64toi32_i32$1 = $748$hi;
          i64toi32_i32$3 = $752$hi;
          $1507($7_1 + 736 | 0 | 0, $742_1 | 0, i64toi32_i32$5 | 0, $746_1 | 0, i64toi32_i32$4 | 0, $748_1 | 0, i64toi32_i32$1 | 0, $752_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$4 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$3;
          $19$hi = i64toi32_i32$1;
          i64toi32_i32$4 = $7_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 740 | 0) >> 2] | 0;
          $18_1 = i64toi32_i32$1;
          $18$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$63
          }
          break label$63;
         };
         $1502(i64toi32_i32$4 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 720 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 724 | 0) >> 2] | 0;
         $771_1 = i64toi32_i32$3;
         $771$hi = i64toi32_i32$1;
         i64toi32_i32$4 = (i64toi32_i32$4 + 720 | 0) + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
         $775_1 = i64toi32_i32$1;
         $775$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$1 = $19$hi;
         i64toi32_i32$4 = $771$hi;
         i64toi32_i32$5 = $775$hi;
         $1504($7_1 + 704 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $771_1 | 0, i64toi32_i32$4 | 0, $775_1 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$1 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $19_1 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$4;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 708 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$5;
         $13_1 = $12_1 + 113 | 0;
         $1_1 = $13_1 - $4_1 | 0;
         $8_1 = ($3_1 | 0) > ($1_1 | 0);
         $2_1 = $8_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if ($2_1 >>> 0 <= 112 >>> 0) {
          break label$58
         }
         i64toi32_i32$5 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$5;
         break label$55;
        }
        $12_1 = $15_1 + $12_1 | 0;
        $13_1 = $14_1;
        if (($11_1 | 0) == ($14_1 | 0)) {
         continue label$59
        }
        break label$59;
       };
       $8_1 = 1e9 >>> $15_1 | 0;
       $6_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $13_1 = $11_1;
       label$65 : while (1) {
        $2_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $817_1 = $2_1;
        $2_1 = HEAP32[$2_1 >> 2] | 0;
        $1_1 = ($2_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$817_1 >> 2] = $1_1;
        $1_1 = ($11_1 | 0) == ($13_1 | 0) & !$1_1 | 0;
        $13_1 = $1_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
        $16_1 = $1_1 ? $16_1 + -9 | 0 : $16_1;
        $1_1 = Math_imul($2_1 & $6_1 | 0, $8_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($14_1 | 0)) {
         continue label$65
        }
        break label$65;
       };
       if (!$1_1) {
        continue label$57
       }
       label$66 : {
        if (($17_1 | 0) == ($13_1 | 0)) {
         break label$66
        }
        HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $1_1;
        $14_1 = $17_1;
        continue label$56;
       }
       HEAP32[$9_1 >> 2] = HEAP32[$9_1 >> 2] | 0 | 1 | 0;
       continue label$57;
      }
      break label$57;
     };
     break label$56;
    };
    $1508($7_1 + 656 | 0 | 0, +(+$1070(+(1.0), 225 - $2_1 | 0 | 0)));
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 660 | 0) >> 2] | 0;
    $878_1 = i64toi32_i32$5;
    $878$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 656 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $882_1 = i64toi32_i32$4;
    $882$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $878$hi;
    i64toi32_i32$4 = $882$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    $1511($7_1 + 688 | 0 | 0, $878_1 | 0, i64toi32_i32$5 | 0, $882_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($7_1 + 688 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 692 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$3;
    $1508(i64toi32_i32$4 + 640 | 0 | 0, +(+$1070(+(1.0), 113 - $2_1 | 0 | 0)));
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 644 | 0) >> 2] | 0;
    $901_1 = i64toi32_i32$3;
    $901$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 640 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $905_1 = i64toi32_i32$1;
    $905$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = $901$hi;
    i64toi32_i32$5 = $905$hi;
    $1518($7_1 + 672 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $901_1 | 0, i64toi32_i32$4 | 0, $905_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 676 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$5;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 672 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    $1513($7_1 + 624 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 624 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 628 | 0) >> 2] | 0;
    $923_1 = i64toi32_i32$3;
    $923$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 624 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $927_1 = i64toi32_i32$1;
    $927$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$4 = $923$hi;
    i64toi32_i32$5 = $927$hi;
    $1507($7_1 + 608 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $923_1 | 0, i64toi32_i32$4 | 0, $927_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 612 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$5;
   }
   label$67 : {
    $15_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($15_1 | 0) == ($14_1 | 0)) {
     break label$67
    }
    label$68 : {
     label$69 : {
      $15_1 = HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0;
      if ($15_1 >>> 0 > 499999999 >>> 0) {
       break label$69
      }
      label$70 : {
       if ($15_1) {
        break label$70
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($14_1 | 0)) {
        break label$68
       }
      }
      $1508($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 500 | 0) >> 2] | 0;
      $964_1 = i64toi32_i32$5;
      $964$hi = i64toi32_i32$4;
      i64toi32_i32$1 = (i64toi32_i32$1 + 496 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $968_1 = i64toi32_i32$4;
      $968$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $964$hi;
      i64toi32_i32$3 = $968$hi;
      $1507($7_1 + 480 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $964_1 | 0, i64toi32_i32$1 | 0, $968_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 484 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break label$68;
     }
     label$71 : {
      if (($15_1 | 0) == (5e8 | 0)) {
       break label$71
      }
      $1508($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 592 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 596 | 0) >> 2] | 0;
      $987_1 = i64toi32_i32$3;
      $987$hi = i64toi32_i32$1;
      i64toi32_i32$4 = (i64toi32_i32$4 + 592 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $991_1 = i64toi32_i32$1;
      $991$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = $987$hi;
      i64toi32_i32$5 = $991$hi;
      $1507($7_1 + 576 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $987_1 | 0, i64toi32_i32$4 | 0, $991_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 580 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
      break label$68;
     }
     $24_1 = +($5_1 | 0);
     label$72 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($14_1 | 0)) {
       break label$72
      }
      $1508($7_1 + 528 | 0 | 0, +($24_1 * .5));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 532 | 0) >> 2] | 0;
      $1014_1 = i64toi32_i32$5;
      $1014$hi = i64toi32_i32$4;
      i64toi32_i32$1 = (i64toi32_i32$1 + 528 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $1018_1 = i64toi32_i32$4;
      $1018$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $1014$hi;
      i64toi32_i32$3 = $1018$hi;
      $1507($7_1 + 512 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $1014_1 | 0, i64toi32_i32$1 | 0, $1018_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 516 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break label$68;
     }
     $1508($7_1 + 560 | 0 | 0, +($24_1 * .75));
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 560 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 564 | 0) >> 2] | 0;
     $1034_1 = i64toi32_i32$3;
     $1034$hi = i64toi32_i32$1;
     i64toi32_i32$4 = (i64toi32_i32$4 + 560 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $1038_1 = i64toi32_i32$1;
     $1038$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $1034$hi;
     i64toi32_i32$5 = $1038$hi;
     $1507($7_1 + 544 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $1034_1 | 0, i64toi32_i32$4 | 0, $1038_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$1 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 548 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
    }
    if ($2_1 >>> 0 > 111 >>> 0) {
     break label$67
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $1518($7_1 + 464 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 464 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 468 | 0) >> 2] | 0;
    $1052_1 = i64toi32_i32$3;
    $1052$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 464 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1056_1 = i64toi32_i32$1;
    $1056$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1052$hi;
    i64toi32_i32$1 = $1056$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    if ($1509($1052_1 | 0, i64toi32_i32$3 | 0, $1056_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
     break label$67
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $1507($7_1 + 448 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($7_1 + 448 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 452 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $18$hi;
   i64toi32_i32$5 = $21$hi;
   $1507($7_1 + 432 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 436 | 0) >> 2] | 0;
   $1077_1 = i64toi32_i32$5;
   $1077$hi = i64toi32_i32$4;
   i64toi32_i32$1 = (i64toi32_i32$1 + 432 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $1081_1 = i64toi32_i32$4;
   $1081$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$5 = $1077$hi;
   i64toi32_i32$4 = $1081$hi;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $23$hi;
   $1513($7_1 + 416 | 0 | 0, $1077_1 | 0, i64toi32_i32$5 | 0, $1081_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$4 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$3;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$3;
   label$73 : {
    if (($13_1 & 2147483647 | 0 | 0) <= ($10_1 + -2 | 0 | 0)) {
     break label$73
    }
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    $1519(i64toi32_i32$4 + 400 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1073610752;
    $1504($7_1 + 384 | 0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1104_1 = i64toi32_i32$5;
    $1104$hi = i64toi32_i32$4;
    i64toi32_i32$3 = ($7_1 + 400 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $1108_1 = i64toi32_i32$4;
    $1108$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1104$hi;
    i64toi32_i32$4 = $1108$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1081081856;
    $13_1 = $1510($1104_1 | 0, i64toi32_i32$5 | 0, $1108_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1113$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    $14_1 = ($13_1 | 0) > (-1 | 0);
    i64toi32_i32$0 = $14_1;
    i64toi32_i32$3 = $1113$hi;
    $196_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$5 = $14_1 ? $196_1 : $19_1;
    i64toi32_i32$4 = $14_1 ? i64toi32_i32$3 : i64toi32_i32$1;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1120$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $14_1;
    i64toi32_i32$5 = $1120$hi;
    $197_1 = i64toi32_i32$4;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $197_1 : $20_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    $20_1 = i64toi32_i32$3;
    $20$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    $11_1 = $1509($18_1 | 0, $18$hi | 0, $21_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    label$74 : {
     $12_1 = $12_1 + $14_1 | 0;
     if (($12_1 + 110 | 0 | 0) > ($10_1 | 0)) {
      break label$74
     }
     if (!(($8_1 & (($2_1 | 0) != ($1_1 | 0) | ($13_1 | 0) < (0 | 0) | 0) | 0) & ($11_1 | 0) != (0 | 0) | 0)) {
      break label$73
     }
    }
    HEAP32[($1081() | 0) >> 2] = 68;
   }
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$5 = $19$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   $1514($7_1 + 368 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0);
   i64toi32_i32$3 = ($7_1 + 368 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$5;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $18_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  HEAP32[i64toi32_i32$5 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $1524($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $6$hi = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $88$hi = 0, $90_1 = 0, $90$hi = 0, $139$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $3_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $3_1 = $1499($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      switch ($3_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       label$8 : {
        label$9 : {
         $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$9
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break label$8;
        }
        $2_1 = $1499($0_1 | 0) | 0;
       }
       $4_1 = ($3_1 | 0) == (45 | 0);
       $5_1 = $2_1 + -58 | 0;
       if (!$1_1) {
        break label$5
       }
       if ($5_1 >>> 0 > -11 >>> 0) {
        break label$5
       }
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19_1 = 0
         } else {
          $19_1 = 1
         }
         $20_1 = $19_1;
        } else {
         $20_1 = 0
        }
        $18_1 = $20_1;
       }
       if ($18_1) {
        break label$4
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       break label$4;
      default:
       break label$6;
      };
     }
     $5_1 = $3_1 + -58 | 0;
     $4_1 = 0;
     $2_1 = $3_1;
    }
    if ($5_1 >>> 0 < -10 >>> 0) {
     break label$4
    }
    i64toi32_i32$2 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$2;
    label$10 : {
     if (($2_1 + -48 | 0) >>> 0 >= 10 >>> 0) {
      break label$10
     }
     $3_1 = 0;
     label$11 : while (1) {
      $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
      label$12 : {
       label$13 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$13
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$12;
       }
       $2_1 = $1499($0_1 | 0) | 0;
      }
      $3_1 = $3_1 + -48 | 0;
      label$14 : {
       $5_1 = $2_1 + -48 | 0;
       if ($5_1 >>> 0 > 9 >>> 0) {
        break label$14
       }
       if (($3_1 | 0) < (214748364 | 0)) {
        continue label$11
       }
      }
      break label$11;
     };
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $6_1 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$2;
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$10
     }
     label$15 : while (1) {
      i64toi32_i32$2 = 0;
      $88$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $90_1 = i64toi32_i32$1;
      $90$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $88$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = $90$hi;
      i64toi32_i32$0 = $90_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$16 : {
       label$17 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$17
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$16;
       }
       $2_1 = $1499($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -48;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      label$18 : {
       $3_1 = $2_1 + -48 | 0;
       if ($3_1 >>> 0 > 9 >>> 0) {
        break label$18
       }
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$2 = 21474836;
       i64toi32_i32$0 = 2061584302;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
        $21_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $22_1 = 0
         } else {
          $22_1 = 1
         }
         $23_1 = $22_1;
        } else {
         $23_1 = 0
        }
        $21_1 = $23_1;
       }
       if ($21_1) {
        continue label$15
       }
      }
      break label$15;
     };
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break label$10
     }
     label$19 : while (1) {
      label$20 : {
       label$21 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$21
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$20;
       }
       $2_1 = $1499($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$19
      }
      break label$19;
     };
    }
    label$22 : {
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$5 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
      $24_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $25_1 = 0
       } else {
        $25_1 = 1
       }
       $26_1 = $25_1;
      } else {
       $26_1 = 0
      }
      $24_1 = $26_1;
     }
     if ($24_1) {
      break label$22
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$1 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $139$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $139$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
    $6_1 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
    $27_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $28_1 = 0
     } else {
      $28_1 = 1
     }
     $29_1 = $28_1;
    } else {
     $29_1 = 0
    }
    $27_1 = $29_1;
   }
   if ($27_1) {
    break label$3
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$4 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function $1525($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $10$hi = 0, $10_1 = 0, $11$hi = 0, $7_1 = 0, $12$hi = 0, $11_1 = 0, $12_1 = 0, $13$hi = 0, $6_1 = 0, $13_1 = 0, $4_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $8_1 = 0, $9_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $195_1 = 0, $195$hi = 0, $249_1 = 0, $249$hi = 0, $348$hi = 0, $415$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 36 >>> 0) {
      break label$3
     }
     if (($1_1 | 0) != (1 | 0)) {
      break label$2
     }
    }
    HEAP32[($1081() | 0) >> 2] = 28;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$6
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
      $5_1 = HEAPU8[$5_1 >> 0] | 0;
      break label$5;
     }
     $5_1 = $1499($0_1 | 0) | 0;
    }
    if ($1526($5_1 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
   $6_1 = 0;
   label$7 : {
    label$8 : {
     switch ($5_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$8;
     default:
      break label$7;
     };
    }
    $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
    label$9 : {
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$9
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $5_1 = HEAPU8[$5_1 >> 0] | 0;
     break label$7;
    }
    $5_1 = $1499($0_1 | 0) | 0;
   }
   label$10 : {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        if (($1_1 | 0) != (0 | 0) & ($1_1 | 0) != (16 | 0) | 0) {
         break label$14
        }
        if (($5_1 | 0) != (48 | 0)) {
         break label$14
        }
        label$15 : {
         label$16 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$16
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$15;
         }
         $5_1 = $1499($0_1 | 0) | 0;
        }
        label$17 : {
         if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
          break label$17
         }
         label$18 : {
          label$19 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$19
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$18;
          }
          $5_1 = $1499($0_1 | 0) | 0;
         }
         $1_1 = 16;
         if ((HEAPU8[($5_1 + 80929 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
          break label$12
         }
         i64toi32_i32$0 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$0;
         label$20 : {
          label$21 : {
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $31_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $32_1 = 0
             } else {
              $32_1 = 1
             }
             $33_1 = $32_1;
            } else {
             $33_1 = 0
            }
            $31_1 = $33_1;
           }
           if ($31_1) {
            break label$21
           }
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
           if (!$2_1) {
            break label$20
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
           break label$1;
          }
          if ($2_1) {
           break label$1
          }
         }
         i64toi32_i32$2 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $1498($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
         break label$1;
        }
        if ($1_1) {
         break label$13
        }
        $1_1 = 8;
        break label$12;
       }
       $1_1 = $1_1 ? $1_1 : 10;
       if ($1_1 >>> 0 > (HEAPU8[($5_1 + 80929 | 0) >> 0] | 0) >>> 0) {
        break label$13
       }
       i64toi32_i32$2 = 0;
       $3_1 = 0;
       $3$hi = i64toi32_i32$2;
       label$22 : {
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $34_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
           $35_1 = 0
          } else {
           $35_1 = 1
          }
          $36_1 = $35_1;
         } else {
          $36_1 = 0
         }
         $34_1 = $36_1;
        }
        if ($34_1) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       i64toi32_i32$3 = 0;
       $1498($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
       HEAP32[($1081() | 0) >> 2] = 28;
       break label$1;
      }
      if (($1_1 | 0) != (10 | 0)) {
       break label$12
      }
      i64toi32_i32$3 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$3;
      label$23 : {
       $2_1 = $5_1 + -48 | 0;
       if ($2_1 >>> 0 > 9 >>> 0) {
        break label$23
       }
       $5_1 = 0;
       label$24 : while (1) {
        label$25 : {
         label$26 : {
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$26
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
          $1_1 = HEAPU8[$1_1 >> 0] | 0;
          break label$25;
         }
         $1_1 = $1499($0_1 | 0) | 0;
        }
        $5_1 = Math_imul($5_1, 10) + $2_1 | 0;
        label$27 : {
         $2_1 = $1_1 + -48 | 0;
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$27
         }
         if ($5_1 >>> 0 < 429496729 >>> 0) {
          continue label$24
         }
        }
        break label$24;
       };
       i64toi32_i32$3 = 0;
       $10_1 = $5_1;
       $10$hi = i64toi32_i32$3;
      }
      if ($2_1 >>> 0 > 9 >>> 0) {
       break label$10
      }
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $11_1 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $12_1 = $2_1;
      $12$hi = i64toi32_i32$3;
      label$28 : while (1) {
       label$29 : {
        label$30 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$30
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$29;
        }
        $5_1 = $1499($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$0 = $11_1;
       i64toi32_i32$1 = $12$hi;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$4;
       $10$hi = i64toi32_i32$5;
       label$31 : {
        label$32 : {
         label$33 : {
          $1_1 = $5_1 + -48 | 0;
          if ($1_1 >>> 0 > 9 >>> 0) {
           break label$33
          }
          i64toi32_i32$3 = i64toi32_i32$4;
          i64toi32_i32$0 = 429496729;
          i64toi32_i32$2 = -1717986918;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
           break label$32
          }
         }
         if ($1_1 >>> 0 <= 9 >>> 0) {
          break label$31
         }
         break label$10;
        }
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $12_1 = $1_1;
        $12$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        $195_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $195$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $195$hi;
        i64toi32_i32$0 = $195_1;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
         continue label$28
        }
       }
       break label$28;
      };
      $1_1 = 10;
      break label$11;
     }
     label$34 : {
      if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
       break label$34
      }
      i64toi32_i32$3 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$3;
      label$35 : {
       $7_1 = HEAPU8[($5_1 + 80929 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$35
       }
       $2_1 = 0;
       label$36 : while (1) {
        label$37 : {
         label$38 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$38
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$37;
         }
         $5_1 = $1499($0_1 | 0) | 0;
        }
        $2_1 = $7_1 + Math_imul($2_1, $1_1) | 0;
        label$39 : {
         $7_1 = HEAPU8[($5_1 + 80929 | 0) >> 0] | 0;
         if ($1_1 >>> 0 <= $7_1 >>> 0) {
          break label$39
         }
         if ($2_1 >>> 0 < 119304647 >>> 0) {
          continue label$36
         }
        }
        break label$36;
       };
       i64toi32_i32$3 = 0;
       $10_1 = $2_1;
       $10$hi = i64toi32_i32$3;
      }
      if ($1_1 >>> 0 <= $7_1 >>> 0) {
       break label$11
      }
      i64toi32_i32$3 = 0;
      $11_1 = $1_1;
      $11$hi = i64toi32_i32$3;
      label$40 : while (1) {
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$5 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $12_1 = i64toi32_i32$5;
       $12$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = $7_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 255;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $13_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       $13$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $249_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
       $249$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$5 = $12_1;
       i64toi32_i32$3 = $249$hi;
       i64toi32_i32$2 = $249_1;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$11
       }
       label$41 : {
        label$42 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$42
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$41;
        }
        $5_1 = $1499($0_1 | 0) | 0;
       }
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$5 = $13$hi;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $10_1 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$4;
       $7_1 = HEAPU8[($5_1 + 80929 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$11
       }
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$3 = 0;
       $1515($4_1 | 0, $11_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$11
       }
       continue label$40;
      };
     }
     $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 81185 | 0) >> 0] | 0;
     i64toi32_i32$2 = 0;
     $10_1 = 0;
     $10$hi = i64toi32_i32$2;
     label$43 : {
      $2_1 = HEAPU8[($5_1 + 80929 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$43
      }
      $7_1 = 0;
      label$44 : while (1) {
       label$45 : {
        label$46 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$46
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$45;
        }
        $5_1 = $1499($0_1 | 0) | 0;
       }
       $9_1 = $7_1 << $8_1 | 0;
       $7_1 = $2_1 | $9_1 | 0;
       label$47 : {
        $2_1 = HEAPU8[($5_1 + 80929 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$47
        }
        if ($9_1 >>> 0 < 134217728 >>> 0) {
         continue label$44
        }
       }
       break label$44;
      };
      i64toi32_i32$2 = 0;
      $10_1 = $7_1;
      $10$hi = i64toi32_i32$2;
     }
     if ($1_1 >>> 0 <= $2_1 >>> 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $12_1 = $8_1;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $37_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $37_1;
     $13$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$2 = $13_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$3 = $10_1;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$11
     }
     label$48 : while (1) {
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 255;
      i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $11_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $11$hi = i64toi32_i32$5;
      label$49 : {
       label$50 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$50
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$49;
       }
       $5_1 = $1499($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$2 = $10_1;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$4 = $12_1;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $38_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
       $38_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $348$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $348$hi;
      i64toi32_i32$5 = $38_1;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $10_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $10$hi = i64toi32_i32$2;
      $2_1 = HEAPU8[($5_1 + 80929 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$11
      }
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$4 = $13_1;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
       continue label$48
      }
      break label$48;
     };
    }
    if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 80929 | 0) >> 0] | 0) >>> 0) {
     break label$10
    }
    label$51 : while (1) {
     label$52 : {
      label$53 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$53
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
       $5_1 = HEAPU8[$5_1 >> 0] | 0;
       break label$52;
      }
      $5_1 = $1499($0_1 | 0) | 0;
     }
     if ($1_1 >>> 0 > (HEAPU8[($5_1 + 80929 | 0) >> 0] | 0) >>> 0) {
      continue label$51
     }
     break label$51;
    };
    HEAP32[($1081() | 0) >> 2] = 68;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0) ? $6_1 : 0;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$2 = i64toi32_i32$3;
    $10_1 = i64toi32_i32$4;
    $10$hi = i64toi32_i32$3;
   }
   label$54 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
     $39_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $40_1 = 0
      } else {
       $40_1 = 1
      }
      $41_1 = $40_1;
     } else {
      $41_1 = 0
     }
     $39_1 = $41_1;
    }
    if ($39_1) {
     break label$54
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   label$55 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$55
    }
    label$56 : {
     i64toi32_i32$5 = i64toi32_i32$4;
     if (i64toi32_i32$2 & 1 | 0) {
      break label$56
     }
     if ($6_1) {
      break label$56
     }
     HEAP32[($1081() | 0) >> 2] = 68;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
     break label$55
    }
    HEAP32[($1081() | 0) >> 2] = 68;
    break label$1;
   }
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $415$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $415$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $1526($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1527($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0, $8_1 = 0, $37_1 = 0, $8$hi = 0, $39_1 = 0, $40_1 = 0, $6_1 = 0, $41_1 = 0, $42_1 = 0, $26_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $80_1 = 0, $80$hi = 0, $97_1 = 0, $97$hi = 0, $102_1 = 0, $102$hi = 0, $106_1 = 0, $106$hi = 0, $109_1 = 0, $110$hi = 0, $113_1 = 0, $117_1 = 0, $125_1 = 0, $125$hi = 0, $142_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $37_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $37_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32767;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $8_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    $3_1 = $8_1;
    if (($3_1 + -16257 | 0) >>> 0 > 253 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $39_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $4_1 = $39_1;
    label$3 : {
     label$4 : {
      i64toi32_i32$1 = $0$hi;
      $26_1 = !($0_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 33554431;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $7_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 16777216;
      $30_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 16777216;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $26_1 : $30_1) {
       break label$4
      }
      $4_1 = $4_1 + 1 | 0;
      break label$3;
     }
     i64toi32_i32$3 = $0$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 16777216;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $38_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $38$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$0 = $38$hi;
     i64toi32_i32$2 = $38_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$3
     }
     $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
    }
    $5_1 = $4_1 >>> 0 > 8388607 >>> 0;
    $4_1 = $5_1 ? 0 : $4_1;
    $3_1 = ($5_1 ? -16255 : -16256) + $3_1 | 0;
    break label$1;
   }
   label$5 : {
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
     break label$5
    }
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32767;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 25;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $40_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $40_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $4_1 = $40_1 | 4194304 | 0;
    $3_1 = 255;
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 <= 16510 >>> 0) {
     break label$6
    }
    $3_1 = 255;
    $4_1 = 0;
    break label$1;
   }
   label$7 : {
    i64toi32_i32$0 = $8$hi;
    $5_1 = !($8_1 | i64toi32_i32$0 | 0);
    $6_1 = $5_1 ? 16256 : 16257;
    $4_1 = $6_1 - $3_1 | 0;
    if (($4_1 | 0) <= (112 | 0)) {
     break label$7
    }
    $4_1 = 0;
    $3_1 = 0;
    break label$1;
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $80_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $80$hi = i64toi32_i32$3;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$1 = $80$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $7_1 : $80_1;
   i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
   $7_1 = i64toi32_i32$2;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $7$hi;
   $1500($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, i64toi32_i32$2 | 0, 128 - $4_1 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   $1503($2_1 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $0_1 = i64toi32_i32$0;
   $0$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 25;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $41_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $41_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $4_1 = $41_1;
   label$8 : {
    label$9 : {
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $97_1 = i64toi32_i32$0;
     $97$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $102_1 = i64toi32_i32$4;
     $102$hi = i64toi32_i32$0;
     i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $106_1 = i64toi32_i32$0;
     $106$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $102$hi;
     i64toi32_i32$2 = $102_1;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$3 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     $109_1 = ($6_1 | 0) != ($3_1 | 0) & ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) | 0;
     i64toi32_i32$4 = 0;
     $110$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $97$hi;
     i64toi32_i32$3 = $97_1;
     i64toi32_i32$0 = $110$hi;
     i64toi32_i32$2 = $109_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $7_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$0;
     $113_1 = !($7_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$4 = $0_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $0_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $0$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 16777216;
     $117_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 16777216;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) | 0 ? $113_1 : $117_1) {
      break label$9
     }
     $4_1 = $4_1 + 1 | 0;
     break label$8;
    }
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$4 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $125_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
    $125$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = $125$hi;
    i64toi32_i32$3 = $125_1;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$8
    }
    $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
   }
   $3_1 = $4_1 >>> 0 > 8388607 >>> 0;
   $4_1 = $3_1 ? $4_1 ^ 8388608 | 0 : $4_1;
  }
  global$0 = $2_1 + 32 | 0;
  $142_1 = $3_1 << 23 | 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$2 = 32;
  i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $42_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
   $42_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $142_1 | ($42_1 & -2147483648 | 0) | 0 | $4_1 | 0), wasm2js_scratch_load_f32()));
 }
 
 function $1528($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $2_1 = 0, $8_1 = 0, $8$hi = 0, $6_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $4_1 = 0, $5_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $48$hi = 0, $58_1 = 0, $58$hi = 0, $60$hi = 0, $79_1 = 0, $79$hi = 0, $92_1 = 0, $92$hi = 0, $96$hi = 0, $99_1 = 0, $99$hi = 0, $104_1 = 0, $104$hi = 0, $108_1 = 0, $108$hi = 0, $111_1 = 0, $112$hi = 0, $121$hi = 0, $125_1 = 0, $125$hi = 0, $136$hi = 0, $138_1 = 0, $138$hi = 0, $139$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $47_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $47_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $47_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32767;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $8_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    $3_1 = $8_1;
    if (($3_1 + -15361 | 0) >>> 0 > 2045 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 60;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $48_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $48_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $23_1 = $48_1;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $25$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $23$hi;
    i64toi32_i32$1 = $23_1;
    i64toi32_i32$0 = $25$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $7_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $8_1 = $3_1 + -15360 | 0;
    $8$hi = i64toi32_i32$0;
    label$3 : {
     label$4 : {
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 268435455;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $0_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $0$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$2 = 134217728;
      i64toi32_i32$3 = 1;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$4
      }
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $7_1 = i64toi32_i32$4;
      $7$hi = i64toi32_i32$5;
      break label$3;
     }
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $39$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $39$hi;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $7_1 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$0 = 1048575;
    i64toi32_i32$3 = -1;
    $3_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 ? 0 : $7_1;
    i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
    $0_1 = i64toi32_i32$0;
    $0$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $48$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$3 = $48$hi;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$5 = $8_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$1;
    break label$1;
   }
   label$5 : {
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$3 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
     break label$5
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 32767;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 60;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $50_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $50_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $58_1 = $50_1;
    $58$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $51_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
     $51_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $60$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $58$hi;
    i64toi32_i32$2 = $58_1;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$3 = $51_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 524288;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $7_1 = 2047;
    $7$hi = i64toi32_i32$2;
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 <= 17406 >>> 0) {
     break label$6
    }
    i64toi32_i32$2 = 0;
    $7_1 = 2047;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $0_1 = 0;
    $0$hi = i64toi32_i32$2;
    break label$1;
   }
   label$7 : {
    i64toi32_i32$2 = $8$hi;
    $4_1 = !($8_1 | i64toi32_i32$2 | 0);
    $5_1 = $4_1 ? 15360 : 15361;
    $6_1 = $5_1 - $3_1 | 0;
    if (($6_1 | 0) <= (112 | 0)) {
     break label$7
    }
    i64toi32_i32$2 = 0;
    $0_1 = 0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $79_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $79$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$1 = $79$hi;
   i64toi32_i32$3 = i64toi32_i32$0 ? $7_1 : $79_1;
   i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$1;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$3 = $7$hi;
   $1500($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$3 | 0, 128 - $6_1 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   $1503($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$2;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $52_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $52_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   $92_1 = $52_1;
   $92$hi = i64toi32_i32$2;
   i64toi32_i32$3 = $2_1 + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $53_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $53_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $96$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $92$hi;
   i64toi32_i32$0 = $92_1;
   i64toi32_i32$3 = $96$hi;
   i64toi32_i32$5 = $53_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $0_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $0$hi = i64toi32_i32$3;
   label$8 : {
    label$9 : {
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = 268435455;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $99_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $99$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
     $104_1 = i64toi32_i32$0;
     $104$hi = i64toi32_i32$2;
     i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $108_1 = i64toi32_i32$2;
     $108$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $104$hi;
     i64toi32_i32$3 = $104_1;
     i64toi32_i32$2 = $108$hi;
     i64toi32_i32$5 = $108_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     $111_1 = ($5_1 | 0) != ($3_1 | 0) & ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) | 0;
     i64toi32_i32$0 = 0;
     $112$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $99$hi;
     i64toi32_i32$5 = $99_1;
     i64toi32_i32$2 = $112$hi;
     i64toi32_i32$3 = $111_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $7_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = 134217728;
     i64toi32_i32$3 = 1;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $0_1 = i64toi32_i32$1;
     $0$hi = i64toi32_i32$4;
     break label$8;
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$3 = 134217728;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$8
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $121$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$4 = $121$hi;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $0_1 = i64toi32_i32$2;
    $0$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = 1048576;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   $125_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
   $125$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = 1048575;
   i64toi32_i32$3 = -1;
   $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $125$hi;
   i64toi32_i32$4 = i64toi32_i32$5 ? $125_1 : $0_1;
   i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $0_1 = i64toi32_i32$4;
   $0$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$5 = $7_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = 52;
  i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
  }
  $136$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$5 = -2147483648;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
  $138_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $138$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $136$hi;
  i64toi32_i32$4 = $54_1;
  i64toi32_i32$3 = $138$hi;
  i64toi32_i32$1 = $138_1;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $139$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $0$hi;
  i64toi32_i32$3 = $139$hi;
  i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  i64toi32_i32$4 = $0$hi;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $1529($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $1530($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, i64toi32_i32$5 = 0, $14_1 = 0, $3_1 = 0, $11_1 = 0, $8_1 = 0, $13_1 = 0, $19$hi = 0, $12_1 = 0, $15_1 = 0, $20$hi = 0, $17_1 = 0, $6_1 = 0, $19_1 = 0, $10_1 = 0, $20_1 = 0, $21$hi = 0, $16_1 = 0, $18_1 = 0, $21_1 = 0, i64toi32_i32$6 = 0, $4_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $7_1 = 0, $80$hi = 0, $82$hi = 0, $87_1 = 0, $87$hi = 0, $146$hi = 0, $148$hi = 0, $154_1 = 0, $154$hi = 0, $282$hi = 0, $284$hi = 0, $289_1 = 0, $289$hi = 0, $329_1 = 0, $329$hi = 0, $335_1 = 0, $335$hi = 0, $336$hi = 0, $435_1 = 0, $435$hi = 0, $441_1 = 0, $441$hi = 0, $442$hi = 0, $653_1 = 0, $653$hi = 0, $658_1 = 0, $658$hi = 0, $686$hi = 0, $688$hi = 0, $694_1 = 0, $694$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4_1 = 1;
    break label$1;
   }
   $4_1 = !($1115($0_1 | 0) | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
      break label$5
     }
     $1118($0_1 | 0) | 0;
     if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
      break label$4
     }
    }
    label$6 : {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if ($5_1) {
      break label$6
     }
     $6_1 = 0;
     break label$3;
    }
    $7_1 = $3_1 + 16 | 0;
    i64toi32_i32$0 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$0;
    $6_1 = 0;
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : while (1) {
           label$14 : {
            label$15 : {
             $5_1 = $5_1 & 255 | 0;
             if (!($1531($5_1 | 0) | 0)) {
              break label$15
             }
             label$16 : while (1) {
              $5_1 = $1_1;
              $1_1 = $1_1 + 1 | 0;
              if ($1531(HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
               continue label$16
              }
              break label$16;
             };
             i64toi32_i32$0 = 0;
             $1498($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
             label$17 : while (1) {
              label$18 : {
               label$19 : {
                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$19
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $1_1 = HEAPU8[$1_1 >> 0] | 0;
                break label$18;
               }
               $1_1 = $1499($0_1 | 0) | 0;
              }
              if ($1531($1_1 | 0) | 0) {
               continue label$17
              }
              break label$17;
             };
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$20 : {
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
               $62_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                 $63_1 = 0
                } else {
                 $63_1 = 1
                }
                $64_1 = $63_1;
               } else {
                $64_1 = 0
               }
               $62_1 = $64_1;
              }
              if ($62_1) {
               break label$20
              }
              $1_1 = $1_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
             }
             i64toi32_i32$3 = $0_1;
             i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $80$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $19$hi;
             i64toi32_i32$1 = $80$hi;
             i64toi32_i32$3 = i64toi32_i32$2;
             i64toi32_i32$2 = $19$hi;
             i64toi32_i32$0 = $19_1;
             i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $82$hi = i64toi32_i32$5;
             i64toi32_i32$3 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
             $87_1 = i64toi32_i32$3;
             $87$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $82$hi;
             i64toi32_i32$1 = i64toi32_i32$4;
             i64toi32_i32$3 = $87$hi;
             i64toi32_i32$0 = $87_1;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
             i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
             }
             $19_1 = i64toi32_i32$2;
             $19$hi = i64toi32_i32$4;
             break label$14;
            }
            label$21 : {
             label$22 : {
              label$23 : {
               label$24 : {
                if (($5_1 | 0) != (37 | 0)) {
                 break label$24
                }
                $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                if (($5_1 | 0) == (42 | 0)) {
                 break label$23
                }
                if (($5_1 | 0) != (37 | 0)) {
                 break label$22
                }
               }
               i64toi32_i32$4 = 0;
               $1498($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
               label$25 : {
                label$26 : {
                 if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
                  break label$26
                 }
                 label$27 : while (1) {
                  label$28 : {
                   label$29 : {
                    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$29
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                    $5_1 = HEAPU8[$5_1 >> 0] | 0;
                    break label$28;
                   }
                   $5_1 = $1499($0_1 | 0) | 0;
                  }
                  if ($1531($5_1 | 0) | 0) {
                   continue label$27
                  }
                  break label$27;
                 };
                 $1_1 = $1_1 + 1 | 0;
                 break label$25;
                }
                label$30 : {
                 $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$30
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                 $5_1 = HEAPU8[$5_1 >> 0] | 0;
                 break label$25;
                }
                $5_1 = $1499($0_1 | 0) | 0;
               }
               label$31 : {
                if (($5_1 | 0) == (HEAPU8[$1_1 >> 0] | 0 | 0)) {
                 break label$31
                }
                label$32 : {
                 i64toi32_i32$5 = $0_1;
                 i64toi32_i32$4 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                 i64toi32_i32$5 = i64toi32_i32$4;
                 i64toi32_i32$4 = 0;
                 i64toi32_i32$0 = 0;
                 if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                  $65_1 = 1
                 } else {
                  if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                   if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                    $66_1 = 0
                   } else {
                    $66_1 = 1
                   }
                   $67_1 = $66_1;
                  } else {
                   $67_1 = 0
                  }
                  $65_1 = $67_1;
                 }
                 if ($65_1) {
                  break label$32
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                }
                if (($5_1 | 0) > (-1 | 0)) {
                 break label$3
                }
                if ($6_1) {
                 break label$3
                }
                break label$4;
               }
               i64toi32_i32$0 = $0_1;
               i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $146$hi = i64toi32_i32$1;
               i64toi32_i32$1 = $19$hi;
               i64toi32_i32$1 = $146$hi;
               i64toi32_i32$0 = i64toi32_i32$5;
               i64toi32_i32$5 = $19$hi;
               i64toi32_i32$4 = $19_1;
               i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
               i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
               if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
               }
               $148$hi = i64toi32_i32$2;
               i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
               $154_1 = i64toi32_i32$0;
               $154$hi = i64toi32_i32$2;
               i64toi32_i32$2 = $148$hi;
               i64toi32_i32$1 = i64toi32_i32$3;
               i64toi32_i32$0 = $154$hi;
               i64toi32_i32$4 = $154_1;
               i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
               i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
               if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
               }
               $19_1 = i64toi32_i32$5;
               $19$hi = i64toi32_i32$3;
               $5_1 = $1_1;
               break label$14;
              }
              $5_1 = $1_1 + 2 | 0;
              $8_1 = 0;
              break label$21;
             }
             label$33 : {
              $9_1 = $5_1 + -48 | 0;
              if ($9_1 >>> 0 > 9 >>> 0) {
               break label$33
              }
              if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$33
              }
              $5_1 = $1_1 + 3 | 0;
              $8_1 = $1532($2_1 | 0, $9_1 | 0) | 0;
              break label$21;
             }
             $5_1 = $1_1 + 1 | 0;
             $8_1 = HEAP32[$2_1 >> 2] | 0;
             $2_1 = $2_1 + 4 | 0;
            }
            $10_1 = 0;
            $9_1 = 0;
            label$34 : {
             $1_1 = HEAPU8[$5_1 >> 0] | 0;
             if (($1_1 + -48 | 0) >>> 0 > 9 >>> 0) {
              break label$34
             }
             label$35 : while (1) {
              $9_1 = (Math_imul($9_1, 10) + $1_1 | 0) + -48 | 0;
              $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
              $5_1 = $5_1 + 1 | 0;
              if (($1_1 + -48 | 0) >>> 0 < 10 >>> 0) {
               continue label$35
              }
              break label$35;
             };
            }
            label$36 : {
             label$37 : {
              if (($1_1 | 0) == (109 | 0)) {
               break label$37
              }
              $11_1 = $5_1;
              break label$36;
             }
             $11_1 = $5_1 + 1 | 0;
             $12_1 = 0;
             $10_1 = ($8_1 | 0) != (0 | 0);
             $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
             $13_1 = 0;
            }
            $5_1 = $11_1 + 1 | 0;
            $14_1 = 3;
            $15_1 = $10_1;
            label$38 : {
             label$39 : {
              switch (($1_1 & 255 | 0) + -65 | 0 | 0) {
              case 39:
               $1_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
               $5_1 = $1_1 ? $11_1 + 2 | 0 : $5_1;
               $14_1 = $1_1 ? -2 : -1;
               break label$38;
              case 43:
               $1_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
               $5_1 = $1_1 ? $11_1 + 2 | 0 : $5_1;
               $14_1 = $1_1 ? 3 : 1;
               break label$38;
              case 51:
              case 57:
               $14_1 = 1;
               break label$38;
              case 11:
               $14_1 = 2;
               break label$38;
              case 41:
               break label$38;
              case 0:
              case 2:
              case 4:
              case 5:
              case 6:
              case 18:
              case 23:
              case 26:
              case 32:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 40:
              case 45:
              case 46:
              case 47:
              case 50:
              case 52:
              case 55:
               break label$39;
              default:
               break label$8;
              };
             }
             $14_1 = 0;
             $5_1 = $11_1;
            }
            $1_1 = HEAPU8[$5_1 >> 0] | 0;
            $11_1 = ($1_1 & 47 | 0 | 0) == (3 | 0);
            $16_1 = $11_1 ? 1 : $14_1;
            label$44 : {
             $17_1 = $11_1 ? $1_1 | 32 | 0 : $1_1;
             if (($17_1 | 0) == (91 | 0)) {
              break label$44
             }
             label$45 : {
              label$46 : {
               if (($17_1 | 0) == (110 | 0)) {
                break label$46
               }
               if (($17_1 | 0) != (99 | 0)) {
                break label$45
               }
               $9_1 = ($9_1 | 0) > (1 | 0) ? $9_1 : 1;
               break label$44;
              }
              i64toi32_i32$3 = $19$hi;
              $1533($8_1 | 0, $16_1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
              break label$14;
             }
             i64toi32_i32$3 = 0;
             $1498($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
             label$47 : while (1) {
              label$48 : {
               label$49 : {
                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$49
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $1_1 = HEAPU8[$1_1 >> 0] | 0;
                break label$48;
               }
               $1_1 = $1499($0_1 | 0) | 0;
              }
              if ($1531($1_1 | 0) | 0) {
               continue label$47
              }
              break label$47;
             };
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$50 : {
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
               $68_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
                 $69_1 = 0
                } else {
                 $69_1 = 1
                }
                $70_1 = $69_1;
               } else {
                $70_1 = 0
               }
               $68_1 = $70_1;
              }
              if ($68_1) {
               break label$50
              }
              $1_1 = $1_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
             }
             i64toi32_i32$4 = $0_1;
             i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $282$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $19$hi;
             i64toi32_i32$1 = $282$hi;
             i64toi32_i32$4 = i64toi32_i32$2;
             i64toi32_i32$2 = $19$hi;
             i64toi32_i32$3 = $19_1;
             i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $284$hi = i64toi32_i32$5;
             i64toi32_i32$4 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
             $289_1 = i64toi32_i32$4;
             $289$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $284$hi;
             i64toi32_i32$1 = i64toi32_i32$0;
             i64toi32_i32$4 = $289$hi;
             i64toi32_i32$3 = $289_1;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
             i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
             }
             $19_1 = i64toi32_i32$2;
             $19$hi = i64toi32_i32$0;
            }
            i64toi32_i32$1 = $9_1;
            i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
            $20_1 = i64toi32_i32$1;
            $20$hi = i64toi32_i32$0;
            $1498($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
            label$51 : {
             label$52 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
               break label$52
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              break label$51;
             }
             if (($1499($0_1 | 0) | 0 | 0) < (0 | 0)) {
              break label$9
             }
            }
            label$53 : {
             i64toi32_i32$5 = $0_1;
             i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
             i64toi32_i32$5 = i64toi32_i32$0;
             i64toi32_i32$0 = 0;
             i64toi32_i32$3 = 0;
             if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
              $71_1 = 1
             } else {
              if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
               if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                $72_1 = 0
               } else {
                $72_1 = 1
               }
               $73_1 = $72_1;
              } else {
               $73_1 = 0
              }
              $71_1 = $73_1;
             }
             if ($71_1) {
              break label$53
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
            }
            $1_1 = 16;
            label$54 : {
             label$55 : {
              label$56 : {
               label$57 : {
                label$58 : {
                 switch ($17_1 + -88 | 0 | 0) {
                 default:
                  $1_1 = $17_1 + -65 | 0;
                  if ($1_1 >>> 0 > 6 >>> 0) {
                   break label$54
                  }
                  if (!((1 << $1_1 | 0) & 113 | 0)) {
                   break label$54
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  $1520($3_1 + 8 | 0 | 0, $0_1 | 0, $16_1 | 0, 0 | 0);
                  i64toi32_i32$3 = $0_1;
                  i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                  $329_1 = i64toi32_i32$5;
                  $329$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                  $335_1 = i64toi32_i32$5;
                  $335$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = $335$hi;
                  i64toi32_i32$0 = $335_1;
                  i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                  i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                  i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                  i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                  $336$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $329$hi;
                  i64toi32_i32$1 = $329_1;
                  i64toi32_i32$3 = $336$hi;
                  i64toi32_i32$0 = i64toi32_i32$4;
                  if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                   break label$56
                  }
                  break label$10;
                 case 3:
                 case 11:
                 case 27:
                  label$64 : {
                   if (($17_1 | 16 | 0 | 0) != (115 | 0)) {
                    break label$64
                   }
                   $1064($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                   HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                   if (($17_1 | 0) != (115 | 0)) {
                    break label$55
                   }
                   HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                   HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                   $74_1 = 0;
                   HEAP16[($3_1 + 42 | 0) >> 1] = $74_1;
                   HEAP16[($3_1 + 44 | 0) >> 1] = $74_1 >>> 16 | 0;
                   break label$55;
                  }
                  $14_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                  $1_1 = ($14_1 | 0) == (94 | 0);
                  $1064($3_1 + 32 | 0 | 0, $1_1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  $15_1 = $1_1 ? $5_1 + 2 | 0 : $5_1 + 1 | 0;
                  label$65 : {
                   label$66 : {
                    label$67 : {
                     label$68 : {
                      $1_1 = HEAPU8[($5_1 + ($1_1 ? 2 : 1) | 0) >> 0] | 0;
                      if (($1_1 | 0) == (45 | 0)) {
                       break label$68
                      }
                      if (($1_1 | 0) == (93 | 0)) {
                       break label$67
                      }
                      $11_1 = ($14_1 | 0) != (94 | 0);
                      $5_1 = $15_1;
                      break label$65;
                     }
                     $11_1 = ($14_1 | 0) != (94 | 0);
                     HEAP8[($3_1 + 78 | 0) >> 0] = $11_1;
                     break label$66;
                    }
                    $11_1 = ($14_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 126 | 0) >> 0] = $11_1;
                   }
                   $5_1 = $15_1 + 1 | 0;
                  }
                  label$69 : while (1) {
                   label$70 : {
                    label$71 : {
                     $14_1 = HEAPU8[$5_1 >> 0] | 0;
                     if (($14_1 | 0) == (45 | 0)) {
                      break label$71
                     }
                     if (!$14_1) {
                      break label$9
                     }
                     if (($14_1 | 0) == (93 | 0)) {
                      break label$55
                     }
                     break label$70;
                    }
                    $14_1 = 45;
                    $18_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                    if (!$18_1) {
                     break label$70
                    }
                    if (($18_1 | 0) == (93 | 0)) {
                     break label$70
                    }
                    $15_1 = $5_1 + 1 | 0;
                    label$72 : {
                     label$73 : {
                      $1_1 = HEAPU8[($5_1 + -1 | 0) >> 0] | 0;
                      if ($1_1 >>> 0 < $18_1 >>> 0) {
                       break label$73
                      }
                      $14_1 = $18_1;
                      break label$72;
                     }
                     label$74 : while (1) {
                      $1_1 = $1_1 + 1 | 0;
                      HEAP8[(($3_1 + 32 | 0) + $1_1 | 0) >> 0] = $11_1;
                      $14_1 = HEAPU8[$15_1 >> 0] | 0;
                      if ($1_1 >>> 0 < $14_1 >>> 0) {
                       continue label$74
                      }
                      break label$74;
                     };
                    }
                    $5_1 = $15_1;
                   }
                   HEAP8[(($14_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $11_1;
                   $5_1 = $5_1 + 1 | 0;
                   continue label$69;
                  };
                 case 23:
                  $1_1 = 8;
                  break label$57;
                 case 12:
                 case 29:
                  $1_1 = 10;
                  break label$57;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$54;
                 case 0:
                 case 24:
                 case 32:
                  break label$57;
                 case 17:
                  break label$58;
                 };
                }
                $1_1 = 0;
               }
               i64toi32_i32$1 = -1;
               i64toi32_i32$1 = $1525($0_1 | 0, $1_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
               $20_1 = i64toi32_i32$1;
               $20$hi = i64toi32_i32$2;
               i64toi32_i32$0 = $0_1;
               i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $435_1 = i64toi32_i32$2;
               $435$hi = i64toi32_i32$1;
               i64toi32_i32$2 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
               $441_1 = i64toi32_i32$2;
               $441$hi = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               i64toi32_i32$2 = $441$hi;
               i64toi32_i32$3 = $441_1;
               i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
               i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
               i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
               i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
               $442$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $435$hi;
               i64toi32_i32$1 = $435_1;
               i64toi32_i32$0 = $442$hi;
               i64toi32_i32$3 = i64toi32_i32$5;
               if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
                break label$10
               }
               label$75 : {
                if (($17_1 | 0) != (112 | 0)) {
                 break label$75
                }
                if (!$8_1) {
                 break label$75
                }
                i64toi32_i32$1 = $20$hi;
                HEAP32[$8_1 >> 2] = $20_1;
                break label$54;
               }
               i64toi32_i32$1 = $20$hi;
               $1533($8_1 | 0, $16_1 | 0, $20_1 | 0, i64toi32_i32$1 | 0);
               break label$54;
              }
              if (!$8_1) {
               break label$54
              }
              i64toi32_i32$3 = $7_1;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $20_1 = i64toi32_i32$1;
              $20$hi = i64toi32_i32$4;
              i64toi32_i32$3 = $3_1;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
              $21_1 = i64toi32_i32$4;
              $21$hi = i64toi32_i32$1;
              label$76 : {
               switch ($16_1 | 0) {
               case 0:
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$1 = $20$hi;
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$4 = $20$hi;
                HEAPF32[$8_1 >> 2] = Math_fround($1527($21_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$4 | 0));
                break label$54;
               case 1:
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$4 = $20$hi;
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$1 = $20$hi;
                HEAPF64[$8_1 >> 3] = +$1528($21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0);
                break label$54;
               case 2:
                break label$76;
               default:
                break label$54;
               };
              }
              i64toi32_i32$1 = $21$hi;
              i64toi32_i32$4 = $8_1;
              HEAP32[i64toi32_i32$4 >> 2] = $21_1;
              HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = $20$hi;
              HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $20_1;
              HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
              break label$54;
             }
             $11_1 = ($17_1 | 0) != (99 | 0);
             $14_1 = $11_1 ? 31 : $9_1 + 1 | 0;
             label$79 : {
              label$80 : {
               if (($16_1 | 0) != (1 | 0)) {
                break label$80
               }
               $9_1 = $8_1;
               label$81 : {
                if (!$10_1) {
                 break label$81
                }
                $9_1 = $1082($14_1 << 2 | 0 | 0) | 0;
                if (!$9_1) {
                 break label$11
                }
               }
               i64toi32_i32$4 = $3_1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
               $1_1 = 0;
               label$82 : while (1) {
                $13_1 = $9_1;
                label$83 : {
                 label$84 : while (1) {
                  label$85 : {
                   label$86 : {
                    $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$86
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                    $9_1 = HEAPU8[$9_1 >> 0] | 0;
                    break label$85;
                   }
                   $9_1 = $1499($0_1 | 0) | 0;
                  }
                  if (!(HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                   break label$83
                  }
                  HEAP8[($3_1 + 27 | 0) >> 0] = $9_1;
                  $9_1 = $1425($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                  if (($9_1 | 0) == (-2 | 0)) {
                   continue label$84
                  }
                  label$87 : {
                   if (($9_1 | 0) != (-1 | 0)) {
                    break label$87
                   }
                   $12_1 = 0;
                   break label$9;
                  }
                  label$88 : {
                   if (!$13_1) {
                    break label$88
                   }
                   HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                   $1_1 = $1_1 + 1 | 0;
                  }
                  if (!$10_1) {
                   continue label$84
                  }
                  if (($1_1 | 0) != ($14_1 | 0)) {
                   continue label$84
                  }
                  break label$84;
                 };
                 $15_1 = 1;
                 $12_1 = 0;
                 $14_1 = $14_1 << 1 | 0 | 1 | 0;
                 $9_1 = $1085($13_1 | 0, $14_1 << 2 | 0 | 0) | 0;
                 if ($9_1) {
                  continue label$82
                 }
                 break label$8;
                }
                break label$82;
               };
               $12_1 = 0;
               $14_1 = $13_1;
               if (!($1529($3_1 + 296 | 0 | 0) | 0)) {
                break label$9
               }
               break label$79;
              }
              label$89 : {
               if (!$10_1) {
                break label$89
               }
               $1_1 = 0;
               $9_1 = $1082($14_1 | 0) | 0;
               if (!$9_1) {
                break label$11
               }
               label$90 : while (1) {
                $13_1 = $9_1;
                label$91 : while (1) {
                 label$92 : {
                  label$93 : {
                   $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                   if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$93
                   }
                   HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                   $9_1 = HEAPU8[$9_1 >> 0] | 0;
                   break label$92;
                  }
                  $9_1 = $1499($0_1 | 0) | 0;
                 }
                 label$94 : {
                  if (HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                   break label$94
                  }
                  $14_1 = 0;
                  $12_1 = $13_1;
                  break label$79;
                 }
                 HEAP8[($13_1 + $1_1 | 0) >> 0] = $9_1;
                 $1_1 = $1_1 + 1 | 0;
                 if (($1_1 | 0) != ($14_1 | 0)) {
                  continue label$91
                 }
                 break label$91;
                };
                $15_1 = 1;
                $14_1 = $14_1 << 1 | 0 | 1 | 0;
                $9_1 = $1085($13_1 | 0, $14_1 | 0) | 0;
                if ($9_1) {
                 continue label$90
                }
                break label$90;
               };
               $12_1 = $13_1;
               $13_1 = 0;
               break label$8;
              }
              $1_1 = 0;
              label$95 : {
               if (!$8_1) {
                break label$95
               }
               label$96 : while (1) {
                label$97 : {
                 label$98 : {
                  $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                   break label$98
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                  $9_1 = HEAPU8[$9_1 >> 0] | 0;
                  break label$97;
                 }
                 $9_1 = $1499($0_1 | 0) | 0;
                }
                label$99 : {
                 if (HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                  break label$99
                 }
                 $14_1 = 0;
                 $13_1 = $8_1;
                 $12_1 = $8_1;
                 break label$79;
                }
                HEAP8[($8_1 + $1_1 | 0) >> 0] = $9_1;
                $1_1 = $1_1 + 1 | 0;
                continue label$96;
               };
              }
              label$100 : while (1) {
               label$101 : {
                label$102 : {
                 $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$102
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                 $1_1 = HEAPU8[$1_1 >> 0] | 0;
                 break label$101;
                }
                $1_1 = $1499($0_1 | 0) | 0;
               }
               if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                continue label$100
               }
               break label$100;
              };
              $13_1 = 0;
              $12_1 = 0;
              $14_1 = 0;
              $1_1 = 0;
             }
             $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$103 : {
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
               $75_1 = 1
              } else {
               if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                 $76_1 = 0
                } else {
                 $76_1 = 1
                }
                $77_1 = $76_1;
               } else {
                $77_1 = 0
               }
               $75_1 = $77_1;
              }
              if ($75_1) {
               break label$103
              }
              $9_1 = $9_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
             }
             i64toi32_i32$0 = $0_1;
             i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $653_1 = i64toi32_i32$3;
             $653$hi = i64toi32_i32$4;
             i64toi32_i32$3 = $9_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
             $658_1 = i64toi32_i32$3;
             $658$hi = i64toi32_i32$4;
             i64toi32_i32$4 = $653$hi;
             i64toi32_i32$0 = $653_1;
             i64toi32_i32$3 = $658$hi;
             i64toi32_i32$1 = $658_1;
             i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
             i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $21_1 = i64toi32_i32$2;
             $21$hi = i64toi32_i32$5;
             if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
              break label$12
             }
             i64toi32_i32$5 = $20$hi;
             i64toi32_i32$5 = $21$hi;
             i64toi32_i32$4 = i64toi32_i32$2;
             i64toi32_i32$0 = $20$hi;
             i64toi32_i32$1 = $20_1;
             if (!($11_1 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) | 0)) {
              break label$12
             }
             label$104 : {
              if (!$10_1) {
               break label$104
              }
              HEAP32[$8_1 >> 2] = $13_1;
             }
             label$105 : {
              if (($17_1 | 0) == (99 | 0)) {
               break label$105
              }
              label$106 : {
               if (!$14_1) {
                break label$106
               }
               HEAP32[($14_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
              }
              label$107 : {
               if ($12_1) {
                break label$107
               }
               $12_1 = 0;
               break label$105;
              }
              HEAP8[($12_1 + $1_1 | 0) >> 0] = 0;
             }
             $13_1 = $14_1;
            }
            i64toi32_i32$1 = $0_1;
            i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
            i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
            $686$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $19$hi;
            i64toi32_i32$5 = $686$hi;
            i64toi32_i32$1 = i64toi32_i32$4;
            i64toi32_i32$4 = $19$hi;
            i64toi32_i32$0 = $19_1;
            i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            $688$hi = i64toi32_i32$2;
            i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
            $694_1 = i64toi32_i32$1;
            $694$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $688$hi;
            i64toi32_i32$5 = i64toi32_i32$3;
            i64toi32_i32$1 = $694$hi;
            i64toi32_i32$0 = $694_1;
            i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
            i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
            }
            $19_1 = i64toi32_i32$4;
            $19$hi = i64toi32_i32$3;
            $6_1 = $6_1 + (($8_1 | 0) != (0 | 0)) | 0;
           }
           $1_1 = $5_1 + 1 | 0;
           $5_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
           if ($5_1) {
            continue label$13
           }
           break label$3;
          };
         }
         $13_1 = $14_1;
         break label$10;
        }
        $15_1 = 1;
        $12_1 = 0;
        $13_1 = 0;
        break label$8;
       }
       $15_1 = $10_1;
       break label$7;
      }
      $15_1 = $10_1;
     }
     $6_1 = $6_1 ? $6_1 : -1;
    }
    if (!$15_1) {
     break label$3
    }
    $1084($12_1 | 0);
    $1084($13_1 | 0);
    break label$3;
   }
   $6_1 = -1;
  }
  label$108 : {
   if ($4_1) {
    break label$108
   }
   $1116($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $6_1 | 0;
 }
 
 function $1531($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1_1 >>> 0 > 1 >>> 0 ? ($0_1 + ($1_1 << 2 | 0) | 0) + -4 | 0 : $0_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1533($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $1534($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break label$3
      }
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
    label$5 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
      break label$5
     }
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$5
     }
     $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
     label$6 : while (1) {
      $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
      if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
       break label$2
      }
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $1535($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $1064($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 105;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $1530($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $1536($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $1534($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $1031($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $1537() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   if (fimport$23($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $1082(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 104020 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $1082(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    HEAP32[((HEAP32[(0 + 104020 | 0) >> 2] | 0) + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    if (!(fimport$24(HEAP32[(0 + 104020 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 104020 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $1538($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if ($3_1) {
     break label$3
    }
    $0_1 = 0;
    break label$2;
   }
   label$4 : {
    label$5 : while (1) {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($3_1 & 255 | 0 | 0) != ($4_1 | 0)) {
      break label$4
     }
     if (!$4_1) {
      break label$4
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$4
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
    $3_1 = 0;
   }
   $0_1 = $3_1 & 255 | 0;
  }
  return $0_1 - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $1539($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $1097($0_1 | 0, 61 | 0) | 0;
   if (($1_1 | 0) != ($0_1 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  $2_1 = 0;
  label$2 : {
   $3_1 = $1_1 - $0_1 | 0;
   if (HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0) {
    break label$2
   }
   $1_1 = HEAP32[(0 + 104020 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($1538($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0) {
       break label$5
      }
      $4_1 = (HEAP32[$1_1 >> 2] | 0) + $3_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break label$3
      }
     }
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $2_1 = $4_1 + 1 | 0;
  }
  return $2_1 | 0;
 }
 
 function $1540($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $1541($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   if (HEAPU8[$1_1 >> 0] | 0) {
    break label$1
   }
   label$2 : {
    $1_1 = $1539(66462 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = $1539(Math_imul($0_1, 12) + 81200 | 0 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$4 : {
    $1_1 = $1539(66475 | 0) | 0;
    if (!$1_1) {
     break label$4
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   $1_1 = 67172;
  }
  $2_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     $3_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
     if (!$3_1) {
      break label$6
     }
     if (($3_1 | 0) == (47 | 0)) {
      break label$6
     }
     $3_1 = 23;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != (23 | 0)) {
      continue label$7
     }
     break label$5;
    };
   }
   $3_1 = $2_1;
  }
  $4_1 = 67172;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $2_1 = HEAPU8[$1_1 >> 0] | 0;
       if (($2_1 | 0) == (46 | 0)) {
        break label$12
       }
       if (HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0) {
        break label$12
       }
       $4_1 = $1_1;
       if (($2_1 | 0) != (67 | 0)) {
        break label$11
       }
      }
      if (!(HEAPU8[($4_1 + 1 | 0) >> 0] | 0)) {
       break label$10
      }
     }
     if (!($1540($4_1 | 0, 67172 | 0) | 0)) {
      break label$10
     }
     if ($1540($4_1 | 0, 66431 | 0) | 0) {
      break label$9
     }
    }
    label$13 : {
     if ($0_1) {
      break label$13
     }
     $2_1 = 80132;
     if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
      break label$8
     }
    }
    return 0 | 0;
   }
   label$14 : {
    $2_1 = HEAP32[(0 + 104028 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$14
    }
    label$15 : while (1) {
     if (!($1540($4_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
      break label$8
     }
     $2_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$15
     }
     break label$15;
    };
   }
   label$16 : {
    $2_1 = $1082(36 | 0) | 0;
    if (!$2_1) {
     break label$16
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 80136 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[(i64toi32_i32$2 + 80132 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $2_1 + 8 | 0;
    $1031($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[(0 + 104028 | 0) >> 2] | 0;
    HEAP32[(0 + 104028 | 0) >> 2] = $2_1;
   }
   $2_1 = $0_1 | $2_1 | 0 ? $2_1 : 80132;
  }
  return $2_1 | 0;
 }
 
 function $1542($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) != (104056 | 0) & (($0_1 | 0) != (104032 | 0) & (($0_1 | 0) != (80192 | 0) & (($0_1 | 0) != (0 | 0) & ($0_1 | 0) != (80168 | 0) | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1543($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1111(104024 | 0);
  $2_1 = $1544($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1112(104024 | 0);
  return $2_1 | 0;
 }
 
 function $1544($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $72_1 = 0, $78_1 = 0, $84_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     $5_1 = (1 << $4_1 | 0) & $0_1 | 0;
     label$4 : {
      label$5 : {
       if (!$2_1) {
        break label$5
       }
       if ($5_1) {
        break label$5
       }
       $5_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
       break label$4;
      }
      $5_1 = $1541($4_1 | 0, ($5_1 ? $1_1 : 67364) | 0) | 0;
     }
     HEAP32[(($3_1 + 8 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $5_1;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$2
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (6 | 0)) {
      continue label$3
     }
     break label$3;
    };
    label$6 : {
     if ($1542($2_1 | 0) | 0) {
      break label$6
     }
     $2_1 = 80168;
     if (!($1092($3_1 + 8 | 0 | 0, 80168 | 0, 24 | 0) | 0)) {
      break label$1
     }
     $2_1 = 80192;
     if (!($1092($3_1 + 8 | 0 | 0, 80192 | 0, 24 | 0) | 0)) {
      break label$1
     }
     $4_1 = 0;
     label$7 : {
      if (HEAPU8[(0 + 104080 | 0) >> 0] | 0) {
       break label$7
      }
      label$8 : while (1) {
       HEAP32[(($4_1 << 2 | 0) + 104032 | 0) >> 2] = $1541($4_1 | 0, 67364 | 0) | 0;
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != (6 | 0)) {
        continue label$8
       }
       break label$8;
      };
      HEAP8[(0 + 104080 | 0) >> 0] = 1;
      HEAP32[(0 + 104056 | 0) >> 2] = HEAP32[(0 + 104032 | 0) >> 2] | 0;
     }
     $2_1 = 104032;
     if (!($1092($3_1 + 8 | 0 | 0, 104032 | 0, 24 | 0) | 0)) {
      break label$1
     }
     $2_1 = 104056;
     if (!($1092($3_1 + 8 | 0 | 0, 104056 | 0, 24 | 0) | 0)) {
      break label$1
     }
     $2_1 = $1082(24 | 0) | 0;
     if (!$2_1) {
      break label$2
     }
    }
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $72_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[$2_1 >> 2] = $72_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = ($3_1 + 8 | 0) + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $78_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $78_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = ($3_1 + 8 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $84_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $84_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $2_1 = 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1545($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 + -97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0;
 }
 
 function $1546($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 + -65 | 0) >>> 0 < 26 >>> 0 ? $0_1 | 32 | 0 : $0_1) | 0;
 }
 
 function $1547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1534($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
  return ($2_1 ? $2_1 - $0_1 | 0 : $1_1) | 0;
 }
 
 function $1548($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     $0_1 = +$1548(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $1549($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $1064($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1550(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4_1 = -1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$4
     }
     $6_1 = 1;
     break label$3;
    }
    $6_1 = !($1115($0_1 | 0) | 0);
   }
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $7_1 & -33 | 0;
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (HEAP32[($0_1 + 48 | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[($0_1 + 48 | 0) >> 2] = 80;
       HEAP32[($0_1 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
       break label$7;
      }
      $8_1 = 0;
      if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
       break label$6
      }
     }
     $2_1 = -1;
     if ($1120($0_1 | 0) | 0) {
      break label$5
     }
    }
    $2_1 = $1550($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   }
   $4_1 = $7_1 & 32 | 0;
   label$9 : {
    if (!$8_1) {
     break label$9
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = $3_1 ? $2_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $4_1 | 0;
   $4_1 = $3_1 & 32 | 0 ? -1 : $2_1;
   if ($6_1) {
    break label$1
   }
   $1116($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $4_1 | 0;
 }
 
 function $1550($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $15_1 = 0, $20_1 = 0, $17_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $11_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, i64toi32_i32$5 = 0, $25_1 = 0, $25$hi = 0, $9_1 = 0, $18_1 = 0, $24_1 = 0, $10_1 = 0, i64toi32_i32$3 = 0, $21_1 = 0, $23_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $8_1 = 0, $266_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 39 | 0;
  $9_1 = $7_1 + 40 | 0;
  $10_1 = 0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $12_1 = 0;
       label$6 : while (1) {
        $13_1 = $1_1;
        if (($12_1 | 0) > ($11_1 ^ 2147483647 | 0 | 0)) {
         break label$4
        }
        $11_1 = $12_1 + $11_1 | 0;
        $12_1 = $1_1;
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              $14_1 = HEAPU8[$12_1 >> 0] | 0;
              if (!$14_1) {
               break label$12
              }
              label$13 : while (1) {
               label$14 : {
                label$15 : {
                 label$16 : {
                  $14_1 = $14_1 & 255 | 0;
                  if ($14_1) {
                   break label$16
                  }
                  $1_1 = $12_1;
                  break label$15;
                 }
                 if (($14_1 | 0) != (37 | 0)) {
                  break label$14
                 }
                 $14_1 = $12_1;
                 label$17 : while (1) {
                  label$18 : {
                   if ((HEAPU8[($14_1 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                    break label$18
                   }
                   $1_1 = $14_1;
                   break label$15;
                  }
                  $12_1 = $12_1 + 1 | 0;
                  $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
                  $1_1 = $14_1 + 2 | 0;
                  $14_1 = $1_1;
                  if (($15_1 | 0) == (37 | 0)) {
                   continue label$17
                  }
                  break label$17;
                 };
                }
                $12_1 = $12_1 - $13_1 | 0;
                $14_1 = $11_1 ^ 2147483647 | 0;
                if (($12_1 | 0) > ($14_1 | 0)) {
                 break label$4
                }
                label$19 : {
                 if (!$0_1) {
                  break label$19
                 }
                 $1551($0_1 | 0, $13_1 | 0, $12_1 | 0);
                }
                if ($12_1) {
                 continue label$6
                }
                HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                $12_1 = $1_1 + 1 | 0;
                $16_1 = -1;
                label$20 : {
                 $15_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                 if ($15_1 >>> 0 > 9 >>> 0) {
                  break label$20
                 }
                 if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                  break label$20
                 }
                 $12_1 = $1_1 + 3 | 0;
                 $10_1 = 1;
                 $16_1 = $15_1;
                }
                HEAP32[($7_1 + 60 | 0) >> 2] = $12_1;
                $17_1 = 0;
                label$21 : {
                 label$22 : {
                  $18_1 = HEAP8[$12_1 >> 0] | 0;
                  $1_1 = $18_1 + -32 | 0;
                  if ($1_1 >>> 0 <= 31 >>> 0) {
                   break label$22
                  }
                  $15_1 = $12_1;
                  break label$21;
                 }
                 $17_1 = 0;
                 $15_1 = $12_1;
                 $1_1 = 1 << $1_1 | 0;
                 if (!($1_1 & 75913 | 0)) {
                  break label$21
                 }
                 label$23 : while (1) {
                  $15_1 = $12_1 + 1 | 0;
                  HEAP32[($7_1 + 60 | 0) >> 2] = $15_1;
                  $17_1 = $1_1 | $17_1 | 0;
                  $18_1 = HEAP8[($12_1 + 1 | 0) >> 0] | 0;
                  $1_1 = $18_1 + -32 | 0;
                  if ($1_1 >>> 0 >= 32 >>> 0) {
                   break label$21
                  }
                  $12_1 = $15_1;
                  $1_1 = 1 << $1_1 | 0;
                  if ($1_1 & 75913 | 0) {
                   continue label$23
                  }
                  break label$23;
                 };
                }
                label$24 : {
                 label$25 : {
                  if (($18_1 | 0) != (42 | 0)) {
                   break label$25
                  }
                  label$26 : {
                   label$27 : {
                    $12_1 = (HEAP8[($15_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                    if ($12_1 >>> 0 > 9 >>> 0) {
                     break label$27
                    }
                    if ((HEAPU8[($15_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                     break label$27
                    }
                    label$28 : {
                     label$29 : {
                      if ($0_1) {
                       break label$29
                      }
                      HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] = 10;
                      $19_1 = 0;
                      break label$28;
                     }
                     $19_1 = HEAP32[($3_1 + ($12_1 << 3 | 0) | 0) >> 2] | 0;
                    }
                    $1_1 = $15_1 + 3 | 0;
                    $10_1 = 1;
                    break label$26;
                   }
                   if ($10_1) {
                    break label$11
                   }
                   $1_1 = $15_1 + 1 | 0;
                   label$30 : {
                    if ($0_1) {
                     break label$30
                    }
                    HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                    $10_1 = 0;
                    $19_1 = 0;
                    break label$24;
                   }
                   $12_1 = HEAP32[$2_1 >> 2] | 0;
                   HEAP32[$2_1 >> 2] = $12_1 + 4 | 0;
                   $19_1 = HEAP32[$12_1 >> 2] | 0;
                   $10_1 = 0;
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                  if (($19_1 | 0) > (-1 | 0)) {
                   break label$24
                  }
                  $19_1 = 0 - $19_1 | 0;
                  $17_1 = $17_1 | 8192 | 0;
                  break label$24;
                 }
                 $19_1 = $1552($7_1 + 60 | 0 | 0) | 0;
                 if (($19_1 | 0) < (0 | 0)) {
                  break label$4
                 }
                 $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
                }
                $12_1 = 0;
                $20_1 = -1;
                label$31 : {
                 label$32 : {
                  if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (46 | 0)) {
                   break label$32
                  }
                  $21_1 = 0;
                  break label$31;
                 }
                 label$33 : {
                  if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                   break label$33
                  }
                  label$34 : {
                   label$35 : {
                    $15_1 = (HEAP8[($1_1 + 2 | 0) >> 0] | 0) + -48 | 0;
                    if ($15_1 >>> 0 > 9 >>> 0) {
                     break label$35
                    }
                    if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                     break label$35
                    }
                    label$36 : {
                     label$37 : {
                      if ($0_1) {
                       break label$37
                      }
                      HEAP32[($4_1 + ($15_1 << 2 | 0) | 0) >> 2] = 10;
                      $20_1 = 0;
                      break label$36;
                     }
                     $20_1 = HEAP32[($3_1 + ($15_1 << 3 | 0) | 0) >> 2] | 0;
                    }
                    $1_1 = $1_1 + 4 | 0;
                    break label$34;
                   }
                   if ($10_1) {
                    break label$11
                   }
                   $1_1 = $1_1 + 2 | 0;
                   label$38 : {
                    if ($0_1) {
                     break label$38
                    }
                    $20_1 = 0;
                    break label$34;
                   }
                   $15_1 = HEAP32[$2_1 >> 2] | 0;
                   HEAP32[$2_1 >> 2] = $15_1 + 4 | 0;
                   $20_1 = HEAP32[$15_1 >> 2] | 0;
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                  $21_1 = ($20_1 | 0) > (-1 | 0);
                  break label$31;
                 }
                 HEAP32[($7_1 + 60 | 0) >> 2] = $1_1 + 1 | 0;
                 $21_1 = 1;
                 $20_1 = $1552($7_1 + 60 | 0 | 0) | 0;
                 $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
                }
                label$39 : while (1) {
                 $15_1 = $12_1;
                 $22_1 = 28;
                 $18_1 = $1_1;
                 $12_1 = HEAP8[$1_1 >> 0] | 0;
                 if (($12_1 + -123 | 0) >>> 0 < -58 >>> 0) {
                  break label$3
                 }
                 $1_1 = $1_1 + 1 | 0;
                 $12_1 = HEAPU8[(($12_1 + Math_imul($15_1, 58) | 0) + 81215 | 0) >> 0] | 0;
                 if (($12_1 + -1 | 0) >>> 0 < 8 >>> 0) {
                  continue label$39
                 }
                 break label$39;
                };
                HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                label$40 : {
                 label$41 : {
                  if (($12_1 | 0) == (27 | 0)) {
                   break label$41
                  }
                  if (!$12_1) {
                   break label$3
                  }
                  label$42 : {
                   if (($16_1 | 0) < (0 | 0)) {
                    break label$42
                   }
                   label$43 : {
                    if ($0_1) {
                     break label$43
                    }
                    HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $12_1;
                    continue label$5;
                   }
                   i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                   $266_1 = i64toi32_i32$0;
                   i64toi32_i32$0 = $7_1;
                   HEAP32[($7_1 + 48 | 0) >> 2] = $266_1;
                   HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$1;
                   break label$40;
                  }
                  if (!$0_1) {
                   break label$7
                  }
                  $1553($7_1 + 48 | 0 | 0, $12_1 | 0, $2_1 | 0, $6_1 | 0);
                  break label$40;
                 }
                 if (($16_1 | 0) > (-1 | 0)) {
                  break label$3
                 }
                 $12_1 = 0;
                 if (!$0_1) {
                  continue label$6
                 }
                }
                if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                 break label$2
                }
                $23_1 = $17_1 & -65537 | 0;
                $17_1 = $17_1 & 8192 | 0 ? $23_1 : $17_1;
                $16_1 = 0;
                $24_1 = 65637;
                $22_1 = $9_1;
                label$44 : {
                 label$45 : {
                  label$46 : {
                   label$47 : {
                    label$48 : {
                     label$49 : {
                      label$50 : {
                       label$51 : {
                        label$52 : {
                         label$53 : {
                          label$54 : {
                           label$55 : {
                            label$56 : {
                             label$57 : {
                              label$58 : {
                               label$59 : {
                                label$60 : {
                                 $12_1 = HEAP8[$18_1 >> 0] | 0;
                                 $12_1 = $15_1 ? (($12_1 & 15 | 0 | 0) == (3 | 0) ? $12_1 & -45 | 0 : $12_1) : $12_1;
                                 switch ($12_1 + -88 | 0 | 0) {
                                 case 9:
                                 case 13:
                                 case 14:
                                 case 15:
                                  break label$44;
                                 case 27:
                                  break label$50;
                                 case 11:
                                  break label$51;
                                 case 12:
                                 case 17:
                                  break label$54;
                                 case 23:
                                  break label$55;
                                 case 0:
                                 case 32:
                                  break label$56;
                                 case 24:
                                  break label$57;
                                 case 22:
                                  break label$58;
                                 case 29:
                                  break label$59;
                                 case 1:
                                 case 2:
                                 case 3:
                                 case 4:
                                 case 5:
                                 case 6:
                                 case 7:
                                 case 8:
                                 case 10:
                                 case 16:
                                 case 18:
                                 case 19:
                                 case 20:
                                 case 21:
                                 case 25:
                                 case 26:
                                 case 28:
                                 case 30:
                                 case 31:
                                  break label$8;
                                 default:
                                  break label$60;
                                 };
                                }
                                $22_1 = $9_1;
                                label$61 : {
                                 switch ($12_1 + -65 | 0 | 0) {
                                 case 0:
                                 case 4:
                                 case 5:
                                 case 6:
                                  break label$44;
                                 case 2:
                                  break label$49;
                                 case 1:
                                 case 3:
                                  break label$8;
                                 default:
                                  break label$61;
                                 };
                                }
                                if (($12_1 | 0) == (83 | 0)) {
                                 break label$48
                                }
                                break label$9;
                               }
                               $16_1 = 0;
                               $24_1 = 65637;
                               i64toi32_i32$2 = $7_1;
                               i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                               i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                               $25_1 = i64toi32_i32$1;
                               $25$hi = i64toi32_i32$0;
                               break label$53;
                              }
                              $12_1 = 0;
                              label$62 : {
                               switch ($15_1 & 255 | 0 | 0) {
                               case 0:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label$6;
                               case 1:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label$6;
                               case 2:
                                i64toi32_i32$1 = $11_1;
                                i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                                i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                                HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                continue label$6;
                               case 3:
                                HEAP16[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 1] = $11_1;
                                continue label$6;
                               case 4:
                                HEAP8[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 0] = $11_1;
                                continue label$6;
                               case 6:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label$6;
                               case 7:
                                break label$62;
                               default:
                                continue label$6;
                               };
                              }
                              i64toi32_i32$1 = $11_1;
                              i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                              i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                              HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                              continue label$6;
                             }
                             $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                             $17_1 = $17_1 | 8 | 0;
                             $12_1 = 120;
                            }
                            $16_1 = 0;
                            $24_1 = 65637;
                            i64toi32_i32$2 = $7_1;
                            i64toi32_i32$0 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                            $25_1 = i64toi32_i32$0;
                            $25$hi = i64toi32_i32$1;
                            $13_1 = $1554(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $12_1 & 32 | 0 | 0) | 0;
                            if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
                             break label$52
                            }
                            if (!($17_1 & 8 | 0)) {
                             break label$52
                            }
                            $24_1 = ($12_1 >>> 4 | 0) + 65637 | 0;
                            $16_1 = 2;
                            break label$52;
                           }
                           $16_1 = 0;
                           $24_1 = 65637;
                           i64toi32_i32$2 = $7_1;
                           i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                           i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                           $25_1 = i64toi32_i32$1;
                           $25$hi = i64toi32_i32$0;
                           $13_1 = $1555(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $9_1 | 0) | 0;
                           if (!($17_1 & 8 | 0)) {
                            break label$52
                           }
                           $12_1 = $9_1 - $13_1 | 0;
                           $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1 + 1 | 0;
                           break label$52;
                          }
                          label$69 : {
                           i64toi32_i32$2 = $7_1;
                           i64toi32_i32$0 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                           i64toi32_i32$1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                           $25_1 = i64toi32_i32$0;
                           $25$hi = i64toi32_i32$1;
                           i64toi32_i32$2 = i64toi32_i32$0;
                           i64toi32_i32$0 = -1;
                           i64toi32_i32$3 = -1;
                           if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
                            $33_1 = 1
                           } else {
                            if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
                             if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                              $34_1 = 0
                             } else {
                              $34_1 = 1
                             }
                             $35_1 = $34_1;
                            } else {
                             $35_1 = 0
                            }
                            $33_1 = $35_1;
                           }
                           if ($33_1) {
                            break label$69
                           }
                           i64toi32_i32$2 = $25$hi;
                           i64toi32_i32$2 = 0;
                           i64toi32_i32$3 = 0;
                           i64toi32_i32$1 = $25$hi;
                           i64toi32_i32$0 = $25_1;
                           i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
                           i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                           $25_1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                           $25$hi = i64toi32_i32$5;
                           i64toi32_i32$3 = $7_1;
                           HEAP32[($7_1 + 48 | 0) >> 2] = $25_1;
                           HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$5;
                           $16_1 = 1;
                           $24_1 = 65637;
                           break label$53;
                          }
                          label$70 : {
                           if (!($17_1 & 2048 | 0)) {
                            break label$70
                           }
                           $16_1 = 1;
                           $24_1 = 65638;
                           break label$53;
                          }
                          $16_1 = $17_1 & 1 | 0;
                          $24_1 = $16_1 ? 65639 : 65637;
                         }
                         i64toi32_i32$5 = $25$hi;
                         $13_1 = $1556($25_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                        }
                        if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                         break label$4
                        }
                        $17_1 = $21_1 ? $17_1 & -65537 | 0 : $17_1;
                        label$71 : {
                         i64toi32_i32$5 = $25$hi;
                         i64toi32_i32$2 = $25_1;
                         i64toi32_i32$3 = 0;
                         i64toi32_i32$0 = 0;
                         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
                          break label$71
                         }
                         if ($20_1) {
                          break label$71
                         }
                         $13_1 = $9_1;
                         $22_1 = $13_1;
                         $20_1 = 0;
                         break label$8;
                        }
                        i64toi32_i32$2 = $25$hi;
                        $12_1 = ($9_1 - $13_1 | 0) + !($25_1 | i64toi32_i32$2 | 0) | 0;
                        $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1;
                        break label$9;
                       }
                       $12_1 = HEAPU8[($7_1 + 48 | 0) >> 0] | 0;
                       break label$10;
                      }
                      $12_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                      $13_1 = $12_1 ? $12_1 : 67228;
                      $12_1 = $1547($13_1 | 0, ($20_1 >>> 0 < 2147483647 >>> 0 ? $20_1 : 2147483647) | 0) | 0;
                      $22_1 = $13_1 + $12_1 | 0;
                      label$72 : {
                       if (($20_1 | 0) <= (-1 | 0)) {
                        break label$72
                       }
                       $17_1 = $23_1;
                       $20_1 = $12_1;
                       break label$8;
                      }
                      $17_1 = $23_1;
                      $20_1 = $12_1;
                      if (HEAPU8[$22_1 >> 0] | 0) {
                       break label$4
                      }
                      break label$8;
                     }
                     i64toi32_i32$0 = $7_1;
                     i64toi32_i32$2 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                     i64toi32_i32$5 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                     $25_1 = i64toi32_i32$2;
                     $25$hi = i64toi32_i32$5;
                     if (!!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
                      break label$47
                     }
                     $12_1 = 0;
                     break label$10;
                    }
                    label$73 : {
                     if (!$20_1) {
                      break label$73
                     }
                     $14_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                     break label$46;
                    }
                    $12_1 = 0;
                    $1557($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $17_1 | 0);
                    break label$45;
                   }
                   HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                   i64toi32_i32$5 = $25$hi;
                   HEAP32[($7_1 + 8 | 0) >> 2] = $25_1;
                   HEAP32[($7_1 + 48 | 0) >> 2] = $7_1 + 8 | 0;
                   $14_1 = $7_1 + 8 | 0;
                   $20_1 = -1;
                  }
                  $12_1 = 0;
                  label$74 : {
                   label$75 : while (1) {
                    $15_1 = HEAP32[$14_1 >> 2] | 0;
                    if (!$15_1) {
                     break label$74
                    }
                    $15_1 = $1433($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                    if (($15_1 | 0) < (0 | 0)) {
                     break label$2
                    }
                    if ($15_1 >>> 0 > ($20_1 - $12_1 | 0) >>> 0) {
                     break label$74
                    }
                    $14_1 = $14_1 + 4 | 0;
                    $12_1 = $15_1 + $12_1 | 0;
                    if ($12_1 >>> 0 < $20_1 >>> 0) {
                     continue label$75
                    }
                    break label$75;
                   };
                  }
                  $22_1 = 61;
                  if (($12_1 | 0) < (0 | 0)) {
                   break label$3
                  }
                  $1557($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 | 0);
                  label$76 : {
                   if ($12_1) {
                    break label$76
                   }
                   $12_1 = 0;
                   break label$45;
                  }
                  $15_1 = 0;
                  $14_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                  label$77 : while (1) {
                   $13_1 = HEAP32[$14_1 >> 2] | 0;
                   if (!$13_1) {
                    break label$45
                   }
                   $13_1 = $1433($7_1 + 4 | 0 | 0, $13_1 | 0) | 0;
                   $15_1 = $13_1 + $15_1 | 0;
                   if ($15_1 >>> 0 > $12_1 >>> 0) {
                    break label$45
                   }
                   $1551($0_1 | 0, $7_1 + 4 | 0 | 0, $13_1 | 0);
                   $14_1 = $14_1 + 4 | 0;
                   if ($15_1 >>> 0 < $12_1 >>> 0) {
                    continue label$77
                   }
                   break label$77;
                  };
                 }
                 $1557($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 ^ 8192 | 0 | 0);
                 $12_1 = ($19_1 | 0) > ($12_1 | 0) ? $19_1 : $12_1;
                 continue label$6;
                }
                if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                 break label$4
                }
                $22_1 = 61;
                $12_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 48 | 0) >> 3], $19_1, $20_1, $17_1, $12_1) | 0;
                if (($12_1 | 0) >= (0 | 0)) {
                 continue label$6
                }
                break label$3;
               }
               $14_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
               $12_1 = $12_1 + 1 | 0;
               continue label$13;
              };
             }
             if ($0_1) {
              break label$1
             }
             if (!$10_1) {
              break label$7
             }
             $12_1 = 1;
             label$78 : {
              label$79 : while (1) {
               $14_1 = HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
               if (!$14_1) {
                break label$78
               }
               $1553($3_1 + ($12_1 << 3 | 0) | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
               $11_1 = 1;
               $12_1 = $12_1 + 1 | 0;
               if (($12_1 | 0) != (10 | 0)) {
                continue label$79
               }
               break label$1;
              };
             }
             label$80 : {
              if ($12_1 >>> 0 < 10 >>> 0) {
               break label$80
              }
              $11_1 = 1;
              break label$1;
             }
             label$81 : while (1) {
              if (HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0) {
               break label$11
              }
              $11_1 = 1;
              $12_1 = $12_1 + 1 | 0;
              if (($12_1 | 0) == (10 | 0)) {
               break label$1
              }
              continue label$81;
             };
            }
            $22_1 = 28;
            break label$3;
           }
           HEAP8[($7_1 + 39 | 0) >> 0] = $12_1;
           $20_1 = 1;
           $13_1 = $8_1;
           $22_1 = $9_1;
           $17_1 = $23_1;
           break label$8;
          }
          $22_1 = $9_1;
         }
         $1_1 = $22_1 - $13_1 | 0;
         $18_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1;
         if (($18_1 | 0) > ($16_1 ^ 2147483647 | 0 | 0)) {
          break label$4
         }
         $22_1 = 61;
         $15_1 = $16_1 + $18_1 | 0;
         $12_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1;
         if (($12_1 | 0) > ($14_1 | 0)) {
          break label$3
         }
         $1557($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 | 0);
         $1551($0_1 | 0, $24_1 | 0, $16_1 | 0);
         $1557($0_1 | 0, 48 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 65536 | 0 | 0);
         $1557($0_1 | 0, 48 | 0, $18_1 | 0, $1_1 | 0, 0 | 0);
         $1551($0_1 | 0, $13_1 | 0, $1_1 | 0);
         $1557($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 8192 | 0 | 0);
         $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
         continue label$6;
        }
        break label$6;
       };
       break label$5;
      };
      $11_1 = 0;
      break label$1;
     }
     $22_1 = 61;
    }
    HEAP32[($1081() | 0) >> 2] = $22_1;
   }
   $11_1 = -1;
  }
  global$0 = $7_1 + 64 | 0;
  return $11_1 | 0;
 }
 
 function $1551($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $1121($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $1552($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = (HEAP8[$2_1 >> 0] | 0) + -48 | 0;
   if ($3_1 >>> 0 <= 9 >>> 0) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : while (1) {
   $4_1 = -1;
   label$3 : {
    if ($1_1 >>> 0 > 214748364 >>> 0) {
     break label$3
    }
    $1_1 = Math_imul($1_1, 10);
    $4_1 = $3_1 >>> 0 > ($1_1 ^ 2147483647 | 0) >>> 0 ? -1 : $3_1 + $1_1 | 0;
   }
   $3_1 = $2_1 + 1 | 0;
   HEAP32[$0_1 >> 2] = $3_1;
   $5_1 = HEAP8[($2_1 + 1 | 0) >> 0] | 0;
   $1_1 = $4_1;
   $2_1 = $3_1;
   $3_1 = $5_1 + -48 | 0;
   if ($3_1 >>> 0 < 10 >>> 0) {
    continue label$2
   }
   break label$2;
  };
  return $1_1 | 0;
 }
 
 function $1553($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0, $29_1 = 0, $37_1 = 0, $45_1 = 0, $55_1 = 0, $63_1 = 0, $71_1 = 0, $79_1 = 0, $87_1 = 0, $97_1 = 0, $105_1 = 0, $115_1 = 0, $125_1 = 0, $133_1 = 0, $141_1 = 0;
  label$1 : {
   switch ($1_1 + -9 | 0 | 0) {
   case 0:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   case 1:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $21_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $29_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $37_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $45_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $55_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $55_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $87_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $97_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $97_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $115_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $115_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $125_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $125_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $133_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $141_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function $1554($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 81744 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $1555($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $1556($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = i64toi32_i32$0;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   if (!($2_1 | i64toi32_i32$2 | 0)) {
    break label$4
   }
   $3_1 = $2_1;
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $1557($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $3_1 = $2_1 - $3_1 | 0;
   $2_1 = $3_1 >>> 0 < 256 >>> 0;
   $1064($5_1 | 0, $1_1 | 0, ($2_1 ? $3_1 : 256) | 0) | 0;
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : while (1) {
     $1551($0_1 | 0, $5_1 | 0, 256 | 0);
     $3_1 = $3_1 + -256 | 0;
     if ($3_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $1551($0_1 | 0, $5_1 | 0, $3_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $1558($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1549($0_1 | 0, $1_1 | 0, $2_1 | 0, 106 | 0, 107 | 0) | 0 | 0;
 }
 
 function $1559($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $11_1 = 0, $18_1 = 0, $19_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $6_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $22_1 = 0, i64toi32_i32$2 = 0, $23_1 = 0, $20_1 = 0, $17_1 = 0, $8_1 = 0, $27_1 = 0.0, $13_1 = 0, $24_1 = 0, $14_1 = 0, $16_1 = 0, $24$hi = 0, $9_1 = 0, $21_1 = 0, $7_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $25$hi = 0, $47_1 = 0, $25_1 = 0, $168_1 = 0, $170$hi = 0, $172$hi = 0, $174_1 = 0, $174$hi = 0, $26$hi = 0, $180_1 = 0, $180$hi = 0, $388_1 = 0.0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1561(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $46_1 = $45_1;
     } else {
      $46_1 = 0
     }
     $44_1 = $46_1;
    }
    if ($44_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 65647;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $1561(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $8_1 = 1;
    $9_1 = 65650;
    break label$1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 65653 : 65648;
   $7_1 = !$8_1;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $1557($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $1551($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $1551($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 65980 : 66446) : $11_1 ? 66224 : 66480) | 0, 3 | 0);
    $1557($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($2_1 | 0) > ($10_1 | 0) ? $2_1 : $10_1;
    break label$4;
   }
   $13_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$1548(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $14_1 = $5_1 | 32 | 0;
       if (($14_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $14_1 = $5_1 | 32 | 0;
      if (($14_1 | 0) == (97 | 0)) {
       break label$6
      }
      $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $16_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $16_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $16_1;
     $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $17_1 = ($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 0 : 288) | 0;
    $11_1 = $17_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $10_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $10_1 = 0;
     }
     HEAP32[$11_1 >> 2] = $10_1;
     $11_1 = $11_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($16_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $18_1 = $16_1;
      $10_1 = $11_1;
      $19_1 = $17_1;
      break label$13;
     }
     $19_1 = $17_1;
     $18_1 = $16_1;
     label$15 : while (1) {
      $18_1 = $18_1 >>> 0 < 29 >>> 0 ? $18_1 : 29;
      label$16 : {
       $10_1 = $11_1 + -4 | 0;
       if ($10_1 >>> 0 < $19_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $18_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $168_1 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $170$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $170$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $47_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $47_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $172$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $174_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $174$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $172$hi;
        i64toi32_i32$1 = $47_1;
        i64toi32_i32$2 = $174$hi;
        i64toi32_i32$3 = $174_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $26$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $180_1 = i64toi32_i32$1;
        $180$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $26$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $180$hi;
        i64toi32_i32$3 = $180_1;
        i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$168_1 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $19_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 1e9;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$16
       }
       $19_1 = $19_1 + -4 | 0;
       i64toi32_i32$5 = $24$hi;
       HEAP32[$19_1 >> 2] = $24_1;
      }
      label$18 : {
       label$19 : while (1) {
        $10_1 = $11_1;
        if ($10_1 >>> 0 <= $19_1 >>> 0) {
         break label$18
        }
        $11_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$11_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $18_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
      $11_1 = $10_1;
      if (($18_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($18_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $20_1 = ((($15_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $21_1 = ($14_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $11_1 = 0 - $18_1 | 0;
      $12_1 = $11_1 >>> 0 < 9 >>> 0 ? $11_1 : 9;
      label$22 : {
       label$23 : {
        if ($19_1 >>> 0 < $10_1 >>> 0) {
         break label$23
        }
        $11_1 = !(HEAP32[$19_1 >> 2] | 0) << 2 | 0;
        break label$22;
       }
       $22_1 = 1e9 >>> $12_1 | 0;
       $23_1 = (-1 << $12_1 | 0) ^ -1 | 0;
       $18_1 = 0;
       $11_1 = $19_1;
       label$24 : while (1) {
        $3_1 = HEAP32[$11_1 >> 2] | 0;
        HEAP32[$11_1 >> 2] = ($3_1 >>> $12_1 | 0) + $18_1 | 0;
        $18_1 = Math_imul($3_1 & $23_1 | 0, $22_1);
        $11_1 = $11_1 + 4 | 0;
        if ($11_1 >>> 0 < $10_1 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $11_1 = !(HEAP32[$19_1 >> 2] | 0) << 2 | 0;
       if (!$18_1) {
        break label$22
       }
       HEAP32[$10_1 >> 2] = $18_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $12_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
      $19_1 = $19_1 + $11_1 | 0;
      $11_1 = $21_1 ? $17_1 : $19_1;
      $10_1 = (($10_1 - $11_1 | 0) >> 2 | 0 | 0) > ($20_1 | 0) ? $11_1 + ($20_1 << 2 | 0) | 0 : $10_1;
      if (($18_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $18_1 = 0;
    label$25 : {
     if ($19_1 >>> 0 >= $10_1 >>> 0) {
      break label$25
     }
     $18_1 = Math_imul(($17_1 - $19_1 | 0) >> 2 | 0, 9);
     $11_1 = 10;
     $3_1 = HEAP32[$19_1 >> 2] | 0;
     if ($3_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $18_1 = $18_1 + 1 | 0;
      $11_1 = Math_imul($11_1, 10);
      if ($3_1 >>> 0 >= $11_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $11_1 = ($15_1 - (($14_1 | 0) == (102 | 0) ? 0 : $18_1) | 0) - (($15_1 | 0) != (0 | 0) & ($14_1 | 0) == (103 | 0) | 0) | 0;
     if (($11_1 | 0) >= (Math_imul(($10_1 - $17_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $3_1 = $11_1 + 9216 | 0;
     $22_1 = ($3_1 | 0) / (9 | 0) | 0;
     $12_1 = (($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? -4092 : -3804) | 0) + ($22_1 << 2 | 0) | 0;
     $11_1 = 10;
     label$28 : {
      $3_1 = $3_1 - Math_imul($22_1, 9) | 0;
      if (($3_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $11_1 = Math_imul($11_1, 10);
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $23_1 = $12_1 + 4 | 0;
     label$30 : {
      label$31 : {
       $3_1 = HEAP32[$12_1 >> 2] | 0;
       $20_1 = ($3_1 >>> 0) / ($11_1 >>> 0) | 0;
       $22_1 = $3_1 - Math_imul($20_1, $11_1) | 0;
       if ($22_1) {
        break label$31
       }
       if (($23_1 | 0) == ($10_1 | 0)) {
        break label$30
       }
      }
      label$32 : {
       label$33 : {
        if ($20_1 & 1 | 0) {
         break label$33
        }
        $1_1 = 9007199254740992.0;
        if (($11_1 | 0) != (1e9 | 0)) {
         break label$32
        }
        if ($12_1 >>> 0 <= $19_1 >>> 0) {
         break label$32
        }
        if (!((HEAPU8[($12_1 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break label$32
        }
       }
       $1_1 = 9007199254740994.0;
      }
      $388_1 = ($23_1 | 0) == ($10_1 | 0) ? 1.0 : 1.5;
      $23_1 = $11_1 >>> 1 | 0;
      $27_1 = $22_1 >>> 0 < $23_1 >>> 0 ? .5 : ($22_1 | 0) == ($23_1 | 0) ? $388_1 : 1.5;
      label$34 : {
       if ($7_1) {
        break label$34
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $27_1 = -$27_1;
       $1_1 = -$1_1;
      }
      $3_1 = $3_1 - $22_1 | 0;
      HEAP32[$12_1 >> 2] = $3_1;
      if ($1_1 + $27_1 == $1_1) {
       break label$30
      }
      $11_1 = $3_1 + $11_1 | 0;
      HEAP32[$12_1 >> 2] = $11_1;
      label$35 : {
       if ($11_1 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$12_1 >> 2] = 0;
        label$37 : {
         $12_1 = $12_1 + -4 | 0;
         if ($12_1 >>> 0 >= $19_1 >>> 0) {
          break label$37
         }
         $19_1 = $19_1 + -4 | 0;
         HEAP32[$19_1 >> 2] = 0;
        }
        $11_1 = (HEAP32[$12_1 >> 2] | 0) + 1 | 0;
        HEAP32[$12_1 >> 2] = $11_1;
        if ($11_1 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $18_1 = Math_imul(($17_1 - $19_1 | 0) >> 2 | 0, 9);
      $11_1 = 10;
      $3_1 = HEAP32[$19_1 >> 2] | 0;
      if ($3_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$38 : while (1) {
       $18_1 = $18_1 + 1 | 0;
       $11_1 = Math_imul($11_1, 10);
       if ($3_1 >>> 0 >= $11_1 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $11_1 = $12_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $11_1 >>> 0 ? $11_1 : $10_1;
    }
    label$39 : {
     label$40 : while (1) {
      $11_1 = $10_1;
      $3_1 = $10_1 >>> 0 <= $19_1 >>> 0;
      if ($3_1) {
       break label$39
      }
      $10_1 = $10_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      if (($14_1 | 0) == (103 | 0)) {
       break label$42
      }
      $22_1 = $4_1 & 8 | 0;
      break label$41;
     }
     $10_1 = $15_1 ? $15_1 : 1;
     $12_1 = ($10_1 | 0) > ($18_1 | 0) & ($18_1 | 0) > (-5 | 0) | 0;
     $15_1 = ($12_1 ? $18_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($12_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$41
     }
     $10_1 = -9;
     label$43 : {
      if ($3_1) {
       break label$43
      }
      $12_1 = HEAP32[($11_1 + -4 | 0) >> 2] | 0;
      if (!$12_1) {
       break label$43
      }
      $3_1 = 10;
      $10_1 = 0;
      if (($12_1 >>> 0) % (10 >>> 0) | 0) {
       break label$43
      }
      label$44 : while (1) {
       $22_1 = $10_1;
       $10_1 = $10_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if (!(($12_1 >>> 0) % ($3_1 >>> 0) | 0)) {
        continue label$44
       }
       break label$44;
      };
      $10_1 = $22_1 ^ -1 | 0;
     }
     $3_1 = Math_imul(($11_1 - $17_1 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $22_1 = 0;
      $10_1 = ($3_1 + $10_1 | 0) + -9 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
      break label$41;
     }
     $22_1 = 0;
     $10_1 = (($18_1 + $3_1 | 0) + $10_1 | 0) + -9 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
    }
    $12_1 = -1;
    $23_1 = $15_1 | $22_1 | 0;
    if (($15_1 | 0) > (($23_1 ? 2147483645 : 2147483646) | 0)) {
     break label$4
    }
    $3_1 = ($15_1 + (($23_1 | 0) != (0 | 0)) | 0) + 1 | 0;
    label$46 : {
     label$47 : {
      $21_1 = $5_1 & -33 | 0;
      if (($21_1 | 0) != (70 | 0)) {
       break label$47
      }
      if (($18_1 | 0) > ($3_1 ^ 2147483647 | 0 | 0)) {
       break label$4
      }
      $10_1 = ($18_1 | 0) > (0 | 0) ? $18_1 : 0;
      break label$46;
     }
     label$48 : {
      $10_1 = $18_1 >> 31 | 0;
      i64toi32_i32$5 = 0;
      $10_1 = $1556(($18_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$5 | 0, $13_1 | 0) | 0;
      if (($13_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($13_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $20_1 = $10_1 + -2 | 0;
     HEAP8[$20_1 >> 0] = $5_1;
     $12_1 = -1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $13_1 - $20_1 | 0;
     if (($10_1 | 0) > ($3_1 ^ 2147483647 | 0 | 0)) {
      break label$4
     }
    }
    $12_1 = -1;
    $10_1 = $10_1 + $3_1 | 0;
    if (($10_1 | 0) > ($8_1 ^ 2147483647 | 0 | 0)) {
     break label$4
    }
    $5_1 = $10_1 + $8_1 | 0;
    $1557($0_1 | 0, 32 | 0, $2_1 | 0, $5_1 | 0, $4_1 | 0);
    $1551($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $1557($0_1 | 0, 48 | 0, $2_1 | 0, $5_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($21_1 | 0) != (70 | 0)) {
         break label$53
        }
        $18_1 = $6_1 + 16 | 0 | 9 | 0;
        $3_1 = $19_1 >>> 0 > $17_1 >>> 0 ? $17_1 : $19_1;
        $19_1 = $3_1;
        label$54 : while (1) {
         i64toi32_i32$3 = $19_1;
         i64toi32_i32$5 = HEAP32[$19_1 >> 2] | 0;
         i64toi32_i32$4 = 0;
         $10_1 = $1556(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $18_1 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($19_1 | 0) == ($3_1 | 0)) {
            break label$56
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($10_1 | 0) != ($18_1 | 0)) {
           break label$55
          }
          $10_1 = $10_1 + -1 | 0;
          HEAP8[$10_1 >> 0] = 48;
         }
         $1551($0_1 | 0, $10_1 | 0, $18_1 - $10_1 | 0 | 0);
         $19_1 = $19_1 + 4 | 0;
         if ($19_1 >>> 0 <= $17_1 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        label$58 : {
         if (!$23_1) {
          break label$58
         }
         $1551($0_1 | 0, 67224 | 0, 1 | 0);
        }
        if ($19_1 >>> 0 >= $11_1 >>> 0) {
         break label$52
        }
        if (($15_1 | 0) < (1 | 0)) {
         break label$52
        }
        label$59 : while (1) {
         label$60 : {
          i64toi32_i32$3 = $19_1;
          i64toi32_i32$4 = HEAP32[$19_1 >> 2] | 0;
          i64toi32_i32$5 = 0;
          $10_1 = $1556(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $18_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$60
          }
          label$61 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$61
           }
           break label$61;
          };
         }
         $1551($0_1 | 0, $10_1 | 0, (($15_1 | 0) < (9 | 0) ? $15_1 : 9) | 0);
         $10_1 = $15_1 + -9 | 0;
         $19_1 = $19_1 + 4 | 0;
         if ($19_1 >>> 0 >= $11_1 >>> 0) {
          break label$51
         }
         $3_1 = ($15_1 | 0) > (9 | 0);
         $15_1 = $10_1;
         if ($3_1) {
          continue label$59
         }
         break label$51;
        };
       }
       label$62 : {
        if (($15_1 | 0) < (0 | 0)) {
         break label$62
        }
        $12_1 = $11_1 >>> 0 > $19_1 >>> 0 ? $11_1 : $19_1 + 4 | 0;
        $18_1 = $6_1 + 16 | 0 | 9 | 0;
        $11_1 = $19_1;
        label$63 : while (1) {
         label$64 : {
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$5 = HEAP32[$11_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $1556(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $18_1 | 0) | 0;
          if (($10_1 | 0) != ($18_1 | 0)) {
           break label$64
          }
          $10_1 = $10_1 + -1 | 0;
          HEAP8[$10_1 >> 0] = 48;
         }
         label$65 : {
          label$66 : {
           if (($11_1 | 0) == ($19_1 | 0)) {
            break label$66
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$65
           }
           label$67 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$67
            }
            break label$65;
           };
          }
          $1551($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          if (!($15_1 | $22_1 | 0)) {
           break label$65
          }
          $1551($0_1 | 0, 67224 | 0, 1 | 0);
         }
         $3_1 = $18_1 - $10_1 | 0;
         $1551($0_1 | 0, $10_1 | 0, (($15_1 | 0) > ($3_1 | 0) ? $3_1 : $15_1) | 0);
         $15_1 = $15_1 - $3_1 | 0;
         $11_1 = $11_1 + 4 | 0;
         if ($11_1 >>> 0 >= $12_1 >>> 0) {
          break label$62
         }
         if (($15_1 | 0) > (-1 | 0)) {
          continue label$63
         }
         break label$63;
        };
       }
       $1557($0_1 | 0, 48 | 0, $15_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $1551($0_1 | 0, $20_1 | 0, $13_1 - $20_1 | 0 | 0);
       break label$50;
      }
      $10_1 = $15_1;
     }
     $1557($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $1557($0_1 | 0, 32 | 0, $2_1 | 0, $5_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($2_1 | 0) > ($5_1 | 0) ? $2_1 : $5_1;
    break label$4;
   }
   $20_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$68 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $10_1 = 12 - $3_1 | 0;
    $27_1 = 16.0;
    label$69 : while (1) {
     $27_1 = $27_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$20_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1_1 = -($27_1 + (-$1_1 - $27_1));
     break label$68;
    }
    $1_1 = $1_1 + $27_1 - $27_1;
   }
   label$71 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $10_1 = $11_1 >> 31 | 0;
    i64toi32_i32$4 = 0;
    $10_1 = $1556(($11_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$4 | 0, $13_1 | 0) | 0;
    if (($10_1 | 0) != ($13_1 | 0)) {
     break label$71
    }
    $10_1 = $10_1 + -1 | 0;
    HEAP8[$10_1 >> 0] = 48;
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $19_1 = $5_1 & 32 | 0;
   $23_1 = $10_1 + -2 | 0;
   HEAP8[$23_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($11_1 | 0) < (0 | 0) ? 45 : 43;
   $18_1 = ($3_1 | 0) < (1 | 0) & !($4_1 & 8 | 0) | 0;
   $11_1 = $6_1 + 16 | 0;
   label$72 : while (1) {
    $10_1 = $11_1;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$74
      }
      $11_1 = ~~$1_1;
      break label$73;
     }
     $11_1 = -2147483648;
    }
    HEAP8[$10_1 >> 0] = HEAPU8[($11_1 + 81744 | 0) >> 0] | 0 | $19_1 | 0;
    $1_1 = ($1_1 - +($11_1 | 0)) * 16.0;
    label$75 : {
     $11_1 = $10_1 + 1 | 0;
     if (($11_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     if ($1_1 == 0.0 & $18_1 | 0) {
      break label$75
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $11_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   $12_1 = -1;
   $19_1 = $13_1 - $23_1 | 0;
   $18_1 = $22_1 + $19_1 | 0;
   if (($3_1 | 0) > (2147483645 - $18_1 | 0 | 0)) {
    break label$4
   }
   $10_1 = $11_1 - ($6_1 + 16 | 0) | 0;
   $3_1 = $3_1 ? (($10_1 + -2 | 0 | 0) < ($3_1 | 0) ? $3_1 + 2 | 0 : $10_1) : $10_1;
   $11_1 = $18_1 + $3_1 | 0;
   $1557($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 | 0);
   $1551($0_1 | 0, $20_1 | 0, $22_1 | 0);
   $1557($0_1 | 0, 48 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $1551($0_1 | 0, $6_1 + 16 | 0 | 0, $10_1 | 0);
   $1557($0_1 | 0, 48 | 0, $3_1 - $10_1 | 0 | 0, 0 | 0, 0 | 0);
   $1551($0_1 | 0, $23_1 | 0, $19_1 | 0);
   $1557($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 8192 | 0 | 0);
   $12_1 = ($2_1 | 0) > ($11_1 | 0) ? $2_1 : $11_1;
  }
  global$0 = $6_1 + 560 | 0;
  return $12_1 | 0;
 }
 
 function $1560($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $15_1 = 0, $15$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  HEAPF64[$0_1 >> 3] = +$1528($12_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $1561($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1562($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $0_1 = $1_1 ? $0_1 : $4_1 + 158 | 0;
  HEAP32[($4_1 + 148 | 0) >> 2] = $0_1;
  $5_1 = $1_1 + -1 | 0;
  HEAP32[($4_1 + 152 | 0) >> 2] = $5_1 >>> 0 > $1_1 >>> 0 ? 0 : $5_1;
  $4_1 = $1064($4_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 36 | 0) >> 2] = 108;
  HEAP32[($4_1 + 80 | 0) >> 2] = -1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $4_1 + 159 | 0;
  HEAP32[($4_1 + 84 | 0) >> 2] = $4_1 + 148 | 0;
  HEAP8[$0_1 >> 0] = 0;
  $1_1 = $1558($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 160 | 0;
  return $1_1 | 0;
 }
 
 function $1563($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = HEAP32[$3_1 >> 2] | 0;
  label$1 : {
   $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $7_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $6_1 | 0;
   $7_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $5_1 : $7_1;
   if (!$7_1) {
    break label$1
   }
   $1031($4_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
   $4_1 = (HEAP32[$3_1 >> 2] | 0) + $7_1 | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   $5_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $7_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
  }
  label$2 : {
   $5_1 = $5_1 >>> 0 < $2_1 >>> 0 ? $5_1 : $2_1;
   if (!$5_1) {
    break label$2
   }
   $1031($4_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
   $4_1 = (HEAP32[$3_1 >> 2] | 0) + $5_1 | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $5_1 | 0;
  }
  HEAP8[$4_1 >> 0] = 0;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
  return $2_1 | 0;
 }
 
 function $1564($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0 | 0 | 0;
 }
 
 function $1565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1564($0_1 | 0) | 0 | 0;
 }
 
 function $1566($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $1567($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1566($0_1 | 0) | 0 | 0;
 }
 
 function $1568($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $5_1 = 0, $6$hi = 0, $39_1 = 0, $39$hi = 0, $7_1 = 0, $7$hi = 0, $50_1 = 0, $51_1 = 0, $83_1 = 0, $83$hi = 0, $29_1 = 0, $94_1 = 0, $94$hi = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -2;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 136;
   if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   $2_1 = $0_1;
   $3_1 = ($2_1 + -68 | 0) >> 2 | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      if ($2_1 & 3 | 0) {
       break label$4
      }
      $3_1 = $3_1 + -1 | 0;
      if (!$1_1) {
       break label$2
      }
      $4_1 = 1;
      break label$3;
     }
     if (!$1_1) {
      break label$2
     }
     $4_1 = 0;
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   i64toi32_i32$5 = (Math_imul($2_1, 31536e3) + Math_imul($3_1, 86400) | 0) + 2087447296 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$3 = $0_1;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = -100;
  i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $0_1 = i64toi32_i32$1;
  $0$hi = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$3 = __wasm_i64_sdiv(i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, 400 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $6_1 = i64toi32_i32$3;
  $6$hi = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$3 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$4 | 0, 400 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $39_1 = i64toi32_i32$3;
  $39$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $0$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$3 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
  i64toi32_i32$1 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$2 = 63;
  i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
   $25_1 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
   $25_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
  }
  i64toi32_i32$5 = $6$hi;
  $3_1 = $25_1 + $6_1 | 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       i64toi32_i32$5 = $7$hi;
       $2_1 = $7_1;
       $50_1 = $2_1 + 400 | 0;
       $51_1 = $2_1;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$5 | 0) < (i64toi32_i32$4 | 0)) {
        $26_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $27_1 = 0
         } else {
          $27_1 = 1
         }
         $28_1 = $27_1;
        } else {
         $28_1 = 0
        }
        $26_1 = $28_1;
       }
       $2_1 = $26_1 ? $50_1 : $51_1;
       if ($2_1) {
        break label$9
       }
       $2_1 = 1;
       $4_1 = 0;
       break label$8;
      }
      label$10 : {
       label$11 : {
        if (($2_1 | 0) < (200 | 0)) {
         break label$11
        }
        label$12 : {
         if ($2_1 >>> 0 < 300 >>> 0) {
          break label$12
         }
         $2_1 = $2_1 + -300 | 0;
         $4_1 = 3;
         break label$10;
        }
        $2_1 = $2_1 + -200 | 0;
        $4_1 = 2;
        break label$10;
       }
       $4_1 = ($2_1 | 0) > (99 | 0);
       $2_1 = $4_1 ? $2_1 + -100 | 0 : $2_1;
      }
      if ($2_1) {
       break label$7
      }
      $2_1 = 0;
     }
     $5_1 = 0;
     if ($1_1) {
      break label$6
     }
     break label$5;
    }
    $5_1 = $2_1 >>> 2 | 0;
    $2_1 = !($2_1 & 3 | 0);
    if (!$1_1) {
     break label$5
    }
   }
   HEAP32[$1_1 >> 2] = $2_1;
  }
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$1 | 0, 31536e3 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $83_1 = i64toi32_i32$5;
  $83$hi = i64toi32_i32$1;
  i64toi32_i32$5 = ($5_1 + (Math_imul($4_1, 24) + Math_imul($3_1, 97) | 0) | 0) - $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
  $29_1 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$1 | 0, 86400 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $94_1 = i64toi32_i32$5;
  $94$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $83$hi;
  i64toi32_i32$2 = $83_1;
  i64toi32_i32$5 = $94$hi;
  i64toi32_i32$4 = $94_1;
  i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = 946771200;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function $1569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[(($0_1 << 2 | 0) + 81760 | 0) >> 2] | 0;
  return (($0_1 | 0) > (1 | 0) ? ($1_1 ? $2_1 + 86400 | 0 : $2_1) : $2_1) | 0;
 }
 
 function $1570($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $5$hi = 0, $4_1 = 0, $5_1 = 0, $1_1 = 0, $3_1 = 0, $34$hi = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $55_1 = 0, $55$hi = 0, $58$hi = 0, $59$hi = 0, $31_1 = 0, $63_1 = 0, $63$hi = 0, $64$hi = 0, $66_1 = 0, $66$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $70$hi = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  label$1 : {
   $2_1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   if ($2_1 >>> 0 < 12 >>> 0) {
    break label$1
   }
   $3_1 = ($2_1 | 0) / (12 | 0) | 0;
   $4_1 = $2_1 - Math_imul($3_1, 12) | 0;
   $2_1 = ($4_1 | 0) < (0 | 0) ? $4_1 + 12 | 0 : $4_1;
   i64toi32_i32$0 = $3_1 + ($4_1 >> 31 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $34$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$1 = $34$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $5_1 = i64toi32_i32$4;
   $5$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$5 = $1568($5_1 | 0, i64toi32_i32$5 | 0, $1_1 + 12 | 0 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$5;
  $5$hi = i64toi32_i32$2;
  $2_1 = $1569($2_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  $6_1 = i64toi32_i32$2;
  $6$hi = i64toi32_i32$5;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
  $7_1 = i64toi32_i32$5;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  global$0 = $1_1 + 16 | 0;
  $55_1 = i64toi32_i32$2;
  $55$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  $58$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$2 = $58$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $59$hi = i64toi32_i32$4;
  i64toi32_i32$1 = $4_1 + -1 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
  $31_1 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_i64_mul($31_1 | 0, i64toi32_i32$4 | 0, 86400 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $63_1 = i64toi32_i32$1;
  $63$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $59$hi;
  i64toi32_i32$5 = i64toi32_i32$0;
  i64toi32_i32$1 = $63$hi;
  i64toi32_i32$3 = $63_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $64$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 3600 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $66_1 = i64toi32_i32$5;
  $66$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $64$hi;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$5 = $66$hi;
  i64toi32_i32$3 = $66_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $67$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$2 | 0, 60 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $69_1 = i64toi32_i32$4;
  $69$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $67$hi;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$4 = $69$hi;
  i64toi32_i32$3 = $69_1;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $70$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $55$hi;
  i64toi32_i32$2 = $55_1;
  i64toi32_i32$0 = $70$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$2 | 0;
 }
 
 function $1571($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1562($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1572() {
  label$1 : {
   if ((HEAPU8[(0 + 104128 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $1106(104104 | 0) | 0;
   label$2 : {
    if ((HEAPU8[(0 + 104128 | 0) >> 0] | 0) & 1 | 0) {
     break label$2
    }
    fimport$25(104084 | 0, 104088 | 0, 104144 | 0, 104176 | 0);
    HEAP32[(0 + 104096 | 0) >> 2] = 104176;
    HEAP32[(0 + 104092 | 0) >> 2] = 104144;
    HEAP8[(0 + 104128 | 0) >> 0] = 1;
   }
   $1107(104104 | 0) | 0;
  }
 }
 
 function $1573($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $1111(104100 | 0);
  $1572();
  $1112(104100 | 0);
  return $0_1 | 0;
 }
 
 function $1574($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   if (($0_1 | 0) != (14 | 0)) {
    break label$1
   }
   return (HEAP32[$1_1 >> 2] | 0 ? 67174 : 66469) | 0;
  }
  $2_1 = $0_1 >> 16 | 0;
  label$2 : {
   $3_1 = $0_1 & 65535 | 0;
   if (($3_1 | 0) != (65535 | 0)) {
    break label$2
   }
   if (($2_1 | 0) > (5 | 0)) {
    break label$2
   }
   $0_1 = HEAP32[($1_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
   return ($0_1 ? $0_1 + 8 | 0 : 66484) | 0;
  }
  $4_1 = 67364;
  label$3 : {
   label$4 : {
    label$5 : {
     switch ($2_1 + -1 | 0 | 0) {
     case 0:
      if ($3_1 >>> 0 > 1 >>> 0) {
       break label$3
      }
      $0_1 = 81808;
      break label$4;
     case 1:
      if ($3_1 >>> 0 > 49 >>> 0) {
       break label$3
      }
      $0_1 = 81824;
      break label$4;
     case 4:
      break label$5;
     default:
      break label$3;
     };
    }
    if ($3_1 >>> 0 > 3 >>> 0) {
     break label$3
    }
    $0_1 = 82144;
   }
   label$8 : {
    if ($3_1) {
     break label$8
    }
    return $0_1 | 0;
   }
   label$9 : while (1) {
    $1_1 = HEAPU8[$0_1 >> 0] | 0;
    $4_1 = $0_1 + 1 | 0;
    $0_1 = $4_1;
    if ($1_1) {
     continue label$9
    }
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$9
    }
    break label$9;
   };
  }
  return $4_1 | 0;
 }
 
 function $1575($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$0 = $1576($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1576($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $6_1 = 0, $12$hi = 0, $11$hi = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, $5_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $14$hi = 0, $13$hi = 0, $105_1 = 0, $105$hi = 0, $150$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) > (36 | 0)) {
       break label$4
      }
      $5_1 = 0;
      $6_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($6_1) {
       break label$3
      }
      $7_1 = $0_1;
      break label$2;
     }
     HEAP32[($1081() | 0) >> 2] = 28;
     i64toi32_i32$0 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$0;
     break label$1;
    }
    $7_1 = $0_1;
    label$5 : {
     label$6 : while (1) {
      if (!($1577($6_1 << 24 >> 24 | 0) | 0)) {
       break label$5
      }
      $6_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
      $8_1 = $7_1 + 1 | 0;
      $7_1 = $8_1;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
     break label$2;
    }
    label$7 : {
     $6_1 = $6_1 & 255 | 0;
     switch ($6_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$7;
     default:
      break label$2;
     };
    }
    $5_1 = ($6_1 | 0) == (45 | 0) ? -1 : 0;
    $7_1 = $7_1 + 1 | 0;
   }
   label$8 : {
    label$9 : {
     if (($2_1 | 16 | 0 | 0) != (16 | 0)) {
      break label$9
     }
     if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (48 | 0)) {
      break label$9
     }
     $9_1 = 1;
     label$10 : {
      if (((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) & 223 | 0 | 0) != (88 | 0)) {
       break label$10
      }
      $7_1 = $7_1 + 2 | 0;
      $10_1 = 16;
      break label$8;
     }
     $7_1 = $7_1 + 1 | 0;
     $10_1 = $2_1 ? $2_1 : 8;
     break label$8;
    }
    $10_1 = $2_1 ? $2_1 : 10;
    $9_1 = 0;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $10_1;
   $11$hi = i64toi32_i32$0;
   $2_1 = 0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   label$11 : {
    label$12 : while (1) {
     label$13 : {
      $8_1 = HEAPU8[$7_1 >> 0] | 0;
      $6_1 = $8_1 + -48 | 0;
      if (($6_1 & 255 | 0) >>> 0 < 10 >>> 0) {
       break label$13
      }
      label$14 : {
       if ((($8_1 + -97 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
        break label$14
       }
       $6_1 = $8_1 + -87 | 0;
       break label$13;
      }
      if ((($8_1 + -65 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
       break label$11
      }
      $6_1 = $8_1 + -55 | 0;
     }
     if (($10_1 | 0) <= ($6_1 & 255 | 0 | 0)) {
      break label$11
     }
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = 0;
     $1515($4_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
     $8_1 = 1;
     label$15 : {
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$15
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $13_1 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 255;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $105_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
      $105$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$2 = $13_1;
      i64toi32_i32$1 = $105$hi;
      i64toi32_i32$3 = $105_1;
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$15
      }
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
      $9_1 = 1;
      $8_1 = $2_1;
     }
     $7_1 = $7_1 + 1 | 0;
     $2_1 = $8_1;
     continue label$12;
    };
   }
   label$16 : {
    if (!$1_1) {
     break label$16
    }
    HEAP32[$1_1 >> 2] = $9_1 ? $7_1 : $0_1;
   }
   label$17 : {
    label$18 : {
     label$19 : {
      if (!$2_1) {
       break label$19
      }
      HEAP32[($1081() | 0) >> 2] = 68;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $11_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $11$hi = i64toi32_i32$3;
      $5_1 = !($11_1 | i64toi32_i32$3 | 0) ? $5_1 : 0;
      i64toi32_i32$3 = i64toi32_i32$5;
      $12_1 = i64toi32_i32$2;
      $12$hi = i64toi32_i32$3;
      break label$18;
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$17
     }
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $11_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$3;
    }
    label$20 : {
     i64toi32_i32$3 = $11$hi;
     if ($11_1) {
      break label$20
     }
     if ($5_1) {
      break label$20
     }
     HEAP32[($1081() | 0) >> 2] = 68;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$4;
     break label$1;
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = $12_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$17
    }
    HEAP32[($1081() | 0) >> 2] = 68;
    break label$1;
   }
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$4 >> 31 | 0;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $150$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $150$hi;
   i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$0 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$3 | 0;
 }
 
 function $1577($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1578($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$0 = $1576($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1579($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1576($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $1580($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $10_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $11$hi = 0, $11_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $12$hi = 0, i64toi32_i32$6 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $54_1 = 0, $54$hi = 0, $56$hi = 0, $64$hi = 0, $80$hi = 0, $101_1 = 0, $101$hi = 0, $103_1 = 0, $103$hi = 0, $141_1 = 0, $141$hi = 0, $145$hi = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  $7_1 = 65628;
  $8_1 = 48;
  $9_1 = 131112;
  $10_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    label$19 : {
                     label$20 : {
                      label$21 : {
                       label$22 : {
                        switch ($2_1 + -37 | 0 | 0) {
                        case 60:
                         $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 <= 6 >>> 0) {
                          break label$12
                         }
                         break label$3;
                        case 28:
                         $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 > 6 >>> 0) {
                          break label$3
                         }
                         $10_1 = $10_1 + 131079 | 0;
                         break label$11;
                        case 61:
                        case 67:
                         $10_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 > 11 >>> 0) {
                          break label$3
                         }
                         $10_1 = $10_1 + 131086 | 0;
                         break label$11;
                        case 29:
                         $10_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 > 11 >>> 0) {
                          break label$3
                         }
                         $10_1 = $10_1 + 131098 | 0;
                         break label$11;
                        case 30:
                         i64toi32_i32$2 = $3_1;
                         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
                         i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
                         i64toi32_i32$2 = i64toi32_i32$0;
                         i64toi32_i32$0 = 0;
                         i64toi32_i32$3 = 1900;
                         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                         }
                         i64toi32_i32$2 = 0;
                         i64toi32_i32$2 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 100 | 0, i64toi32_i32$2 | 0) | 0;
                         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$5;
                         break label$7;
                        case 64:
                         $8_1 = 95;
                        case 63:
                         i64toi32_i32$1 = $3_1;
                         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
                         i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
                         $11_1 = i64toi32_i32$5;
                         $11$hi = i64toi32_i32$2;
                         break label$6;
                        case 33:
                         $7_1 = 66378;
                         break label$8;
                        case 34:
                        case 66:
                         i64toi32_i32$1 = $3_1;
                         i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
                         i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
                         $12_1 = i64toi32_i32$2;
                         $12$hi = i64toi32_i32$5;
                         i64toi32_i32$1 = i64toi32_i32$2;
                         i64toi32_i32$2 = 0;
                         i64toi32_i32$3 = 1900;
                         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
                         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                         }
                         $11_1 = i64toi32_i32$0;
                         $11$hi = i64toi32_i32$4;
                         label$48 : {
                          label$49 : {
                           $10_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                           if (($10_1 | 0) > (2 | 0)) {
                            break label$49
                           }
                           $54_1 = i64toi32_i32$0;
                           $54$hi = i64toi32_i32$4;
                           i64toi32_i32$4 = $12$hi;
                           i64toi32_i32$5 = $12_1;
                           i64toi32_i32$1 = 0;
                           i64toi32_i32$3 = 1899;
                           i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                           i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                           }
                           $56$hi = i64toi32_i32$0;
                           i64toi32_i32$1 = ($1581($3_1 | 0) | 0 | 0) == (1 | 0);
                           i64toi32_i32$0 = $54$hi;
                           i64toi32_i32$5 = $56$hi;
                           i64toi32_i32$3 = i64toi32_i32$1 ? $54_1 : i64toi32_i32$2;
                           i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$5;
                           $11_1 = i64toi32_i32$3;
                           $11$hi = i64toi32_i32$4;
                           break label$48;
                          }
                          if ($10_1 >>> 0 < 361 >>> 0) {
                           break label$48
                          }
                          i64toi32_i32$4 = $12$hi;
                          i64toi32_i32$1 = $12_1;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$0 = 1901;
                          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                          i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                          }
                          $64$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $11$hi;
                          i64toi32_i32$3 = ($1581($3_1 | 0) | 0 | 0) == (1 | 0);
                          i64toi32_i32$2 = $64$hi;
                          i64toi32_i32$1 = $11$hi;
                          i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : $11_1;
                          i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
                          $11_1 = i64toi32_i32$0;
                          $11$hi = i64toi32_i32$4;
                         }
                         $8_1 = 48;
                         if (($2_1 | 0) == (103 | 0)) {
                          break label$13
                         }
                         break label$5;
                        case 35:
                         i64toi32_i32$3 = $3_1;
                         i64toi32_i32$4 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                         i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
                         $11_1 = i64toi32_i32$4;
                         $11$hi = i64toi32_i32$0;
                         break label$7;
                        case 36:
                         $8_1 = 48;
                         $10_1 = 2;
                         label$50 : {
                          $3_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                          if ($3_1) {
                           break label$50
                          }
                          i64toi32_i32$0 = 0;
                          $11_1 = 12;
                          $11$hi = i64toi32_i32$0;
                          break label$4;
                         }
                         i64toi32_i32$4 = $3_1;
                         i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
                         $11_1 = i64toi32_i32$4;
                         $11$hi = i64toi32_i32$0;
                         i64toi32_i32$3 = i64toi32_i32$4;
                         i64toi32_i32$4 = -1;
                         i64toi32_i32$2 = -12;
                         i64toi32_i32$1 = $3_1 + i64toi32_i32$2 | 0;
                         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
                         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
                          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                         }
                         $80$hi = i64toi32_i32$5;
                         i64toi32_i32$5 = $11$hi;
                         i64toi32_i32$4 = ($3_1 | 0) > (12 | 0);
                         i64toi32_i32$5 = $80$hi;
                         i64toi32_i32$3 = $11$hi;
                         i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : $11_1;
                         i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$3;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$0;
                         break label$4;
                        case 69:
                         i64toi32_i32$2 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
                         i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$0;
                         $8_1 = 48;
                         $10_1 = 3;
                         break label$4;
                        case 72:
                         i64toi32_i32$2 = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
                         i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$0;
                         break label$7;
                        case 40:
                         i64toi32_i32$4 = $3_1;
                         i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                         i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                         $11_1 = i64toi32_i32$0;
                         $11$hi = i64toi32_i32$2;
                         break label$7;
                        case 73:
                         HEAP32[$1_1 >> 2] = 1;
                         $10_1 = 67361;
                         break label$1;
                        case 75:
                         $10_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) > (11 | 0) ? 131111 : 131110;
                         break label$11;
                        case 45:
                         $7_1 = 66456;
                         break label$8;
                        case 78:
                         i64toi32_i32$2 = $1570($3_1 | 0) | 0;
                         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                         $101_1 = i64toi32_i32$2;
                         $101$hi = i64toi32_i32$0;
                         i64toi32_i32$4 = $3_1;
                         i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
                         i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                         $103_1 = i64toi32_i32$0;
                         $103$hi = i64toi32_i32$2;
                         i64toi32_i32$2 = $101$hi;
                         i64toi32_i32$4 = $101_1;
                         i64toi32_i32$0 = $103$hi;
                         i64toi32_i32$5 = $103_1;
                         i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
                         i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
                         i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                         i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
                         $11_1 = i64toi32_i32$3;
                         $11$hi = i64toi32_i32$1;
                         break label$21;
                        case 46:
                         i64toi32_i32$2 = $3_1;
                         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                         i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                         $11_1 = i64toi32_i32$1;
                         $11$hi = i64toi32_i32$4;
                         break label$7;
                        case 79:
                         HEAP32[$1_1 >> 2] = 1;
                         $10_1 = 67363;
                         break label$1;
                        case 47:
                         $7_1 = 66437;
                         break label$8;
                        case 80:
                         $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                         i64toi32_i32$1 = $10_1 ? $10_1 : 7;
                         i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                         $11_1 = i64toi32_i32$1;
                         $11$hi = i64toi32_i32$4;
                         break label$21;
                        case 48:
                         i64toi32_i32$4 = 0;
                         $11_1 = ((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) - (HEAP32[($3_1 + 24 | 0) >> 2] | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
                         $11$hi = i64toi32_i32$4;
                         break label$7;
                        case 50:
                         i64toi32_i32$4 = 0;
                         $11_1 = ((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) - ((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 6 | 0) >>> 0) % (7 >>> 0) | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
                         $11$hi = i64toi32_i32$4;
                         break label$7;
                        case 49:
                         i64toi32_i32$4 = 0;
                         $11_1 = $1581($3_1 | 0) | 0;
                         $11$hi = i64toi32_i32$4;
                         break label$7;
                        case 77:
                         break label$10;
                        case 0:
                         break label$14;
                        case 53:
                         break label$15;
                        case 85:
                         break label$16;
                        case 52:
                         break label$17;
                        case 84:
                         break label$18;
                        case 51:
                         break label$19;
                        case 83:
                         break label$20;
                        case 82:
                         break label$22;
                        case 31:
                         break label$8;
                        case 62:
                         break label$9;
                        default:
                         break label$1;
                        };
                       }
                       i64toi32_i32$2 = $3_1;
                       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
                       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
                       $11_1 = i64toi32_i32$4;
                       $11$hi = i64toi32_i32$1;
                      }
                      $8_1 = 48;
                      $10_1 = 1;
                      break label$4;
                     }
                     $9_1 = 131113;
                     break label$9;
                    }
                    $9_1 = 131114;
                    break label$9;
                   }
                   i64toi32_i32$2 = $3_1;
                   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
                   i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                   i64toi32_i32$2 = i64toi32_i32$1;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$5 = 1900;
                   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
                   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
                   }
                   i64toi32_i32$2 = 0;
                   i64toi32_i32$2 = __wasm_i64_srem(i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, 100 | 0, i64toi32_i32$2 | 0) | 0;
                   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                   $11_1 = i64toi32_i32$2;
                   $11$hi = i64toi32_i32$3;
                   $141_1 = i64toi32_i32$2;
                   $141$hi = i64toi32_i32$3;
                   i64toi32_i32$4 = i64toi32_i32$2;
                   i64toi32_i32$2 = 0;
                   i64toi32_i32$5 = 63;
                   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
                   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                    i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
                    $34_1 = i64toi32_i32$3 >> i64toi32_i32$1 | 0;
                   } else {
                    i64toi32_i32$2 = i64toi32_i32$3 >> i64toi32_i32$1 | 0;
                    $34_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
                   }
                   $11_1 = $34_1;
                   $11$hi = i64toi32_i32$2;
                   i64toi32_i32$2 = $141$hi;
                   i64toi32_i32$3 = $141_1;
                   i64toi32_i32$4 = $11$hi;
                   i64toi32_i32$5 = $11_1;
                   i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
                   $145$hi = i64toi32_i32$4;
                   i64toi32_i32$4 = $11$hi;
                   i64toi32_i32$4 = $145$hi;
                   i64toi32_i32$2 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
                   i64toi32_i32$3 = $11$hi;
                   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                   i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
                   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
                   i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
                   $11_1 = i64toi32_i32$1;
                   $11$hi = i64toi32_i32$0;
                   break label$7;
                  }
                  i64toi32_i32$4 = $3_1;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
                  i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                  $12_1 = i64toi32_i32$0;
                  $12$hi = i64toi32_i32$2;
                  i64toi32_i32$4 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$5 = 1900;
                  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
                  }
                  $11_1 = i64toi32_i32$3;
                  $11$hi = i64toi32_i32$1;
                  label$51 : {
                   i64toi32_i32$1 = $12$hi;
                   i64toi32_i32$2 = $12_1;
                   i64toi32_i32$4 = 0;
                   i64toi32_i32$5 = 8100;
                   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
                    $35_1 = 1
                   } else {
                    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
                     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                      $36_1 = 0
                     } else {
                      $36_1 = 1
                     }
                     $37_1 = $36_1;
                    } else {
                     $37_1 = 0
                    }
                    $35_1 = $37_1;
                   }
                   if ($35_1) {
                    break label$51
                   }
                   $8_1 = 48;
                   break label$5;
                  }
                  i64toi32_i32$2 = $11$hi;
                  i64toi32_i32$1 = $6_1;
                  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $11_1;
                  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$2;
                  HEAP32[$1_1 >> 2] = $1571($0_1 | 0, 100 | 0, 66294 | 0, i64toi32_i32$1 + 48 | 0 | 0) | 0;
                  $10_1 = $0_1;
                  break label$1;
                 }
                 label$52 : {
                  if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                   break label$52
                  }
                  HEAP32[$1_1 >> 2] = 0;
                  $10_1 = 67364;
                  break label$1;
                 }
                 $10_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
                 $3_1 = ($10_1 | 0) / (3600 | 0) | 0;
                 HEAP32[($6_1 + 64 | 0) >> 2] = Math_imul($3_1, 100) + (((($10_1 - Math_imul($3_1, 3600) | 0) << 16 >> 16 | 0) / (60 | 0) | 0) << 16 >> 16) | 0;
                 HEAP32[$1_1 >> 2] = $1571($0_1 | 0, 100 | 0, 66300 | 0, $6_1 + 64 | 0 | 0) | 0;
                 $10_1 = $0_1;
                 break label$1;
                }
                label$53 : {
                 if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                  break label$53
                 }
                 HEAP32[$1_1 >> 2] = 0;
                 $10_1 = 67364;
                 break label$1;
                }
                $10_1 = $1573($3_1 | 0) | 0;
                break label$2;
               }
               HEAP32[$1_1 >> 2] = 1;
               $10_1 = 67235;
               break label$1;
              }
              i64toi32_i32$2 = $11$hi;
              i64toi32_i32$1 = 0;
              i64toi32_i32$1 = __wasm_i64_srem($11_1 | 0, i64toi32_i32$2 | 0, 100 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              $11_1 = i64toi32_i32$1;
              $11$hi = i64toi32_i32$2;
              break label$6;
             }
             $10_1 = $10_1 | 131072 | 0;
            }
            $10_1 = $1574($10_1 | 0, $4_1 | 0) | 0;
            break label$2;
           }
           $9_1 = 131115;
          }
          $7_1 = $1574($9_1 | 0, $4_1 | 0) | 0;
         }
         $10_1 = $1582($0_1 | 0, 100 | 0, $7_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
         HEAP32[$1_1 >> 2] = $10_1;
         $10_1 = $10_1 ? $0_1 : 0;
         break label$1;
        }
        $8_1 = 48;
       }
       $10_1 = 2;
       break label$4;
      }
      $10_1 = 4;
     }
     label$54 : {
      label$55 : {
       $3_1 = $5_1 ? $5_1 : $8_1;
       if (($3_1 | 0) == (95 | 0)) {
        break label$55
       }
       if (($3_1 | 0) != (45 | 0)) {
        break label$54
       }
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$1 = $6_1;
       HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $11_1;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$2;
       HEAP32[$1_1 >> 2] = $1571($0_1 | 0, 100 | 0, 66295 | 0, i64toi32_i32$1 + 16 | 0 | 0) | 0;
       $10_1 = $0_1;
       break label$1;
      }
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$1 = $6_1;
      HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $11_1;
      HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $10_1;
      HEAP32[$1_1 >> 2] = $1571($0_1 | 0, 100 | 0, 66288 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
      $10_1 = $0_1;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
     HEAP32[i64toi32_i32$1 >> 2] = $10_1;
     HEAP32[$1_1 >> 2] = $1571($0_1 | 0, 100 | 0, 66281 | 0, i64toi32_i32$1 | 0) | 0;
     $10_1 = $0_1;
     break label$1;
    }
    $10_1 = 67226;
   }
   HEAP32[$1_1 >> 2] = $1078($10_1 | 0) | 0;
  }
  global$0 = $6_1 + 80 | 0;
  return $10_1 | 0;
 }
 
 function $1581($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $14_1 = 0;
  $1_1 = 53;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    $14_1 = ((($2_1 - ((($3_1 + 6 | 0) >>> 0) % (7 >>> 0) | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
    $3_1 = $3_1 - $2_1 | 0;
    $2_1 = $14_1 + (((($3_1 + 369 | 0) >>> 0) % (7 >>> 0) | 0) >>> 0 < 3 >>> 0) | 0;
    if (($2_1 | 0) == (53 | 0)) {
     break label$2
    }
    $1_1 = $2_1;
    if ($2_1) {
     break label$1
    }
    $1_1 = 52;
    label$3 : {
     switch (((($3_1 + 6 | 0) >>> 0) % (7 >>> 0) | 0) + -4 | 0 | 0) {
     case 1:
      if (!($1583(((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) % (400 | 0) | 0) + -1 | 0 | 0) | 0)) {
       break label$1
      }
      break;
     case 0:
      break label$3;
     default:
      break label$1;
     };
    }
    return 53 | 0;
   }
   label$5 : {
    switch (((($3_1 + 371 | 0) >>> 0) % (7 >>> 0) | 0) + -3 | 0 | 0) {
    case 0:
     if ($1583(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0) {
      break label$1
     }
     break;
    case 1:
     break label$1;
    default:
     break label$5;
    };
   }
   $1_1 = 1;
  }
  return $1_1 | 0;
 }
 
 function $1582($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $5_1 = 0, $12_1 = 0, $10_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $6_1 = 0;
    break label$1;
   }
   $7_1 = 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        $6_1 = HEAPU8[$2_1 >> 0] | 0;
        if (($6_1 | 0) == (37 | 0)) {
         break label$7
        }
        label$8 : {
         if ($6_1) {
          break label$8
         }
         $6_1 = $7_1;
         break label$3;
        }
        HEAP8[($0_1 + $7_1 | 0) >> 0] = $6_1;
        $7_1 = $7_1 + 1 | 0;
        break label$6;
       }
       $8_1 = 0;
       $9_1 = 1;
       label$9 : {
        label$10 : {
         label$11 : {
          $6_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
          switch ($6_1 + -45 | 0 | 0) {
          case 0:
          case 3:
           break label$10;
          case 1:
          case 2:
           break label$9;
          default:
           break label$11;
          };
         }
         if (($6_1 | 0) != (95 | 0)) {
          break label$9
         }
        }
        $8_1 = $6_1;
        $6_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
        $9_1 = 2;
       }
       label$12 : {
        label$13 : {
         $10_1 = $6_1 & 255 | 0;
         $11_1 = ($2_1 + $9_1 | 0) + (($10_1 | 0) == (43 | 0)) | 0;
         if (((HEAP8[$11_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
          break label$13
         }
         $2_1 = $1579($11_1 | 0, $5_1 + 12 | 0 | 0, 10 | 0) | 0;
         $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
         break label$12;
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $11_1;
        $2_1 = 0;
        $9_1 = $11_1;
       }
       $12_1 = 0;
       label$14 : {
        $6_1 = HEAPU8[$9_1 >> 0] | 0;
        $13_1 = $6_1 + -67 | 0;
        if ($13_1 >>> 0 > 22 >>> 0) {
         break label$14
        }
        if (!((1 << $13_1 | 0) & 4194329 | 0)) {
         break label$14
        }
        $12_1 = $2_1;
        if ($2_1) {
         break label$14
        }
        $12_1 = ($9_1 | 0) != ($11_1 | 0);
       }
       label$15 : {
        label$16 : {
         if (($6_1 | 0) == (79 | 0)) {
          break label$16
         }
         if (($6_1 | 0) == (69 | 0)) {
          break label$16
         }
         $2_1 = $9_1;
         break label$15;
        }
        $2_1 = $9_1 + 1 | 0;
        $6_1 = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
       }
       $11_1 = $1580($5_1 + 16 | 0 | 0, $5_1 + 124 | 0 | 0, $6_1 << 24 >> 24 | 0, $3_1 | 0, $4_1 | 0, $8_1 | 0) | 0;
       if (!$11_1) {
        break label$4
       }
       label$17 : {
        label$18 : {
         if ($12_1) {
          break label$18
         }
         $8_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
         break label$17;
        }
        label$19 : {
         label$20 : {
          label$21 : {
           $6_1 = HEAPU8[$11_1 >> 0] | 0;
           switch ($6_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$20;
           default:
            break label$21;
           };
          }
          $8_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
          break label$19;
         }
         $8_1 = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + -1 | 0;
         $6_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         $11_1 = $11_1 + 1 | 0;
        }
        label$22 : {
         if (($6_1 & 255 | 0 | 0) != (48 | 0)) {
          break label$22
         }
         label$23 : while (1) {
          $6_1 = HEAP8[($11_1 + 1 | 0) >> 0] | 0;
          if (($6_1 + -48 | 0) >>> 0 > 9 >>> 0) {
           break label$22
          }
          $11_1 = $11_1 + 1 | 0;
          $8_1 = $8_1 + -1 | 0;
          if (($6_1 | 0) == (48 | 0)) {
           continue label$23
          }
          break label$23;
         };
        }
        HEAP32[($5_1 + 124 | 0) >> 2] = $8_1;
        $6_1 = 0;
        label$24 : while (1) {
         $9_1 = $6_1;
         $6_1 = $6_1 + 1 | 0;
         if (((HEAP8[($11_1 + $9_1 | 0) >> 0] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
          continue label$24
         }
         break label$24;
        };
        $6_1 = $12_1 >>> 0 > $8_1 >>> 0 ? $12_1 : $8_1;
        label$25 : {
         label$26 : {
          label$27 : {
           if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) >= (-1900 | 0)) {
            break label$27
           }
           $9_1 = 45;
           break label$26;
          }
          if (($10_1 | 0) != (43 | 0)) {
           break label$25
          }
          if ((($6_1 - $8_1 | 0) + $9_1 | 0) >>> 0 < ((HEAPU8[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 0] | 0 | 0) == (67 | 0) ? 3 : 5) >>> 0) {
           break label$25
          }
          $9_1 = 43;
         }
         HEAP8[($0_1 + $7_1 | 0) >> 0] = $9_1;
         $6_1 = $6_1 + -1 | 0;
         $7_1 = $7_1 + 1 | 0;
        }
        if ($6_1 >>> 0 <= $8_1 >>> 0) {
         break label$17
        }
        if ($7_1 >>> 0 >= $1_1 >>> 0) {
         break label$17
        }
        label$28 : while (1) {
         HEAP8[($0_1 + $7_1 | 0) >> 0] = 48;
         $7_1 = $7_1 + 1 | 0;
         $6_1 = $6_1 + -1 | 0;
         if ($6_1 >>> 0 <= $8_1 >>> 0) {
          break label$17
         }
         if ($7_1 >>> 0 < $1_1 >>> 0) {
          continue label$28
         }
         break label$28;
        };
       }
       $6_1 = $1_1 - $7_1 | 0;
       $6_1 = $8_1 >>> 0 < $6_1 >>> 0 ? $8_1 : $6_1;
       HEAP32[($5_1 + 124 | 0) >> 2] = $6_1;
       $1031($0_1 + $7_1 | 0 | 0, $11_1 | 0, $6_1 | 0) | 0;
       $7_1 = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + $7_1 | 0;
      }
      $2_1 = $2_1 + 1 | 0;
      if ($7_1 >>> 0 < $1_1 >>> 0) {
       continue label$5
      }
      break label$5;
     };
    }
    $7_1 = ($7_1 | 0) == ($1_1 | 0) ? $1_1 + -1 | 0 : $7_1;
    $6_1 = 0;
   }
   HEAP8[($0_1 + $7_1 | 0) >> 0] = 0;
  }
  global$0 = $5_1 + 128 | 0;
  return $6_1 | 0;
 }
 
 function $1583($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = ($0_1 | 0) > (2147481747 | 0) ? $0_1 + -2e3 | 0 : $0_1;
   if (!($0_1 & 3 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   $0_1 = $0_1 + 1900 | 0;
   if (!(($0_1 | 0) % (100 | 0) | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !(($0_1 | 0) % (400 | 0) | 0) | 0;
 }
 
 function $1584($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $1535($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1585($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  label$1 : {
   $2_1 = $1562(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $1082($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break label$1
   }
   $4_1 = $1562($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1586($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1587(104196 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    $1588(104220 | 0, 104196 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break label$3
   }
   $1589($0_1 | 0);
   $1590(104196 | 0) | 0;
   FUNCTION_TABLE[$2_1 | 0]($1_1);
   $1587(104196 | 0) | 0;
   $1591($0_1 | 0);
   $1590(104196 | 0) | 0;
   $1592(104220 | 0) | 0;
   return;
  }
  $1590(104196 | 0) | 0;
 }
 
 function $1587($0_1) {
  $0_1 = $0_1 | 0;
  return $1106($0_1 | 0) | 0 | 0;
 }
 
 function $1588($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1108($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1589($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1;
 }
 
 function $1590($0_1) {
  $0_1 = $0_1 | 0;
  return $1107($0_1 | 0) | 0 | 0;
 }
 
 function $1591($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = -1;
 }
 
 function $1592($0_1) {
  $0_1 = $0_1 | 0;
  return $1109($0_1 | 0) | 0 | 0;
 }
 
 function $1593($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1542($0_1 | 0) | 0)) {
    break label$1
   }
   $1084($0_1 | 0);
  }
 }
 
 function $1594($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 4 | 0;
   if (HEAP32[$2_1 >> 2] | 0) {
    continue label$1
   }
   break label$1;
  };
  return ($2_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1595() {
  return 82164 | 0;
 }
 
 function $1596() {
  return 83712 | 0;
 }
 
 function $1597($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  label$1 : {
   $7_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$7_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $8_1 = $0_1 ? $3_1 : 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $3_1 = $1430(($8_1 >>> 0 < 4 >>> 0 ? $5_1 + 12 | 0 : $0_1) | 0, HEAP32[$7_1 >> 2] | 0 | 0, 0 | 0) | 0;
     if (($3_1 | 0) != (-1 | 0)) {
      break label$3
     }
     $6_1 = -1;
     break label$1;
    }
    label$4 : {
     label$5 : {
      if ($0_1) {
       break label$5
      }
      $0_1 = 0;
      break label$4;
     }
     label$6 : {
      if ($8_1 >>> 0 > 3 >>> 0) {
       break label$6
      }
      if ($8_1 >>> 0 < $3_1 >>> 0) {
       break label$1
      }
      $1031($0_1 | 0, $5_1 + 12 | 0 | 0, $3_1 | 0) | 0;
     }
     $8_1 = $8_1 - $3_1 | 0;
     $0_1 = $0_1 + $3_1 | 0;
    }
    label$7 : {
     if (HEAP32[$7_1 >> 2] | 0) {
      break label$7
     }
     $7_1 = 0;
     break label$1;
    }
    $6_1 = $3_1 + $6_1 | 0;
    $7_1 = $7_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$8 : {
   if (!$0_1) {
    break label$8
   }
   HEAP32[$1_1 >> 2] = $7_1;
  }
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1598($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if (!$3_1) {
              break label$11
             }
             $5_1 = HEAP32[$3_1 >> 2] | 0;
             if (!$5_1) {
              break label$11
             }
             label$12 : {
              if ($0_1) {
               break label$12
              }
              $3_1 = $2_1;
              break label$8;
             }
             HEAP32[$3_1 >> 2] = 0;
             $3_1 = $2_1;
             $6_1 = 0;
             break label$10;
            }
            label$13 : {
             label$14 : {
              if (HEAP32[(HEAP32[(($1067() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
               break label$14
              }
              if (!$0_1) {
               break label$13
              }
              if (!$2_1) {
               break label$1
              }
              $5_1 = $2_1;
              label$15 : {
               label$16 : while (1) {
                $3_1 = HEAP8[$4_1 >> 0] | 0;
                if (!$3_1) {
                 break label$15
                }
                HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                $0_1 = $0_1 + 4 | 0;
                $4_1 = $4_1 + 1 | 0;
                $5_1 = $5_1 + -1 | 0;
                if ($5_1) {
                 continue label$16
                }
                break label$1;
               };
              }
              HEAP32[$0_1 >> 2] = 0;
              HEAP32[$1_1 >> 2] = 0;
              return $2_1 - $5_1 | 0 | 0;
             }
             $3_1 = $2_1;
             if (!$0_1) {
              break label$9
             }
             $6_1 = 1;
             break label$10;
            }
            return $1078($4_1 | 0) | 0 | 0;
           }
           label$17 : while (1) {
            label$18 : {
             label$19 : {
              label$20 : {
               label$21 : {
                label$22 : {
                 label$23 : {
                  switch ($6_1 | 0) {
                  case 0:
                   $7_1 = HEAPU8[$4_1 >> 0] | 0;
                   $6_1 = $7_1 >>> 3 | 0;
                   if (($6_1 + -16 | 0 | ($6_1 + ($5_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
                    break label$6
                   }
                   $8_1 = $4_1 + 1 | 0;
                   $6_1 = $7_1 + -128 | 0 | ($5_1 << 6 | 0) | 0;
                   if (($6_1 | 0) <= (-1 | 0)) {
                    break label$22
                   }
                   $4_1 = $8_1;
                   break label$21;
                  default:
                   break label$23;
                  };
                 }
                 if (!$3_1) {
                  break label$1
                 }
                 label$25 : while (1) {
                  label$26 : {
                   $6_1 = HEAPU8[$4_1 >> 0] | 0;
                   if (($6_1 + -1 | 0) >>> 0 <= 126 >>> 0) {
                    break label$26
                   }
                   $5_1 = $6_1;
                   break label$18;
                  }
                  label$27 : {
                   if ($3_1 >>> 0 < 5 >>> 0) {
                    break label$27
                   }
                   if ($4_1 & 3 | 0) {
                    break label$27
                   }
                   label$28 : {
                    label$29 : while (1) {
                     $5_1 = HEAP32[$4_1 >> 2] | 0;
                     if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
                      break label$28
                     }
                     HEAP32[$0_1 >> 2] = $5_1 & 255 | 0;
                     HEAP32[($0_1 + 4 | 0) >> 2] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                     HEAP32[($0_1 + 8 | 0) >> 2] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
                     HEAP32[($0_1 + 12 | 0) >> 2] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
                     $0_1 = $0_1 + 16 | 0;
                     $4_1 = $4_1 + 4 | 0;
                     $3_1 = $3_1 + -4 | 0;
                     if ($3_1 >>> 0 > 4 >>> 0) {
                      continue label$29
                     }
                     break label$29;
                    };
                    $5_1 = HEAPU8[$4_1 >> 0] | 0;
                   }
                   $6_1 = $5_1 & 255 | 0;
                   if (($6_1 + -1 | 0) >>> 0 > 126 >>> 0) {
                    break label$18
                   }
                  }
                  HEAP32[$0_1 >> 2] = $6_1;
                  $0_1 = $0_1 + 4 | 0;
                  $4_1 = $4_1 + 1 | 0;
                  $3_1 = $3_1 + -1 | 0;
                  if (!$3_1) {
                   break label$1
                  }
                  continue label$25;
                 };
                }
                $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
                if ($7_1 >>> 0 > 63 >>> 0) {
                 break label$20
                }
                $8_1 = $4_1 + 2 | 0;
                $9_1 = $6_1 << 6 | 0;
                $6_1 = $7_1 | $9_1 | 0;
                label$30 : {
                 if (($9_1 | 0) <= (-1 | 0)) {
                  break label$30
                 }
                 $4_1 = $8_1;
                 break label$21;
                }
                $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
                if ($7_1 >>> 0 > 63 >>> 0) {
                 break label$20
                }
                $4_1 = $4_1 + 3 | 0;
                $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
               }
               HEAP32[$0_1 >> 2] = $6_1;
               $3_1 = $3_1 + -1 | 0;
               $0_1 = $0_1 + 4 | 0;
               break label$19;
              }
              HEAP32[($1081() | 0) >> 2] = 25;
              $4_1 = $4_1 + -1 | 0;
              break label$3;
             }
             $6_1 = 1;
             continue label$17;
            }
            $6_1 = $6_1 + -194 | 0;
            if ($6_1 >>> 0 > 50 >>> 0) {
             break label$5
            }
            $4_1 = $4_1 + 1 | 0;
            $5_1 = HEAP32[(($6_1 << 2 | 0) + 80224 | 0) >> 2] | 0;
            $6_1 = 0;
            continue label$17;
           };
          }
          $6_1 = 1;
          break label$7;
         }
         $6_1 = 0;
        }
        label$31 : while (1) {
         label$32 : {
          switch ($6_1 | 0) {
          case 0:
           $6_1 = (HEAPU8[$4_1 >> 0] | 0) >>> 3 | 0;
           if (($6_1 + -16 | 0 | (($5_1 >> 26 | 0) + $6_1 | 0) | 0) >>> 0 > 7 >>> 0) {
            break label$6
           }
           $6_1 = $4_1 + 1 | 0;
           label$34 : {
            label$35 : {
             if ($5_1 & 33554432 | 0) {
              break label$35
             }
             $4_1 = $6_1;
             break label$34;
            }
            label$36 : {
             if ((HEAP8[$6_1 >> 0] | 0 | 0) < (-64 | 0)) {
              break label$36
             }
             $4_1 = $4_1 + -1 | 0;
             break label$4;
            }
            $6_1 = $4_1 + 2 | 0;
            label$37 : {
             if ($5_1 & 524288 | 0) {
              break label$37
             }
             $4_1 = $6_1;
             break label$34;
            }
            label$38 : {
             if ((HEAP8[$6_1 >> 0] | 0 | 0) < (-64 | 0)) {
              break label$38
             }
             $4_1 = $4_1 + -1 | 0;
             break label$4;
            }
            $4_1 = $4_1 + 3 | 0;
           }
           $3_1 = $3_1 + -1 | 0;
           $6_1 = 1;
           continue label$31;
          default:
           break label$32;
          };
         }
         label$39 : while (1) {
          $5_1 = HEAPU8[$4_1 >> 0] | 0;
          label$40 : {
           if ($4_1 & 3 | 0) {
            break label$40
           }
           if (($5_1 + -1 | 0) >>> 0 > 126 >>> 0) {
            break label$40
           }
           $5_1 = HEAP32[$4_1 >> 2] | 0;
           if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
            break label$40
           }
           label$41 : while (1) {
            $3_1 = $3_1 + -4 | 0;
            $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
            $6_1 = $4_1 + 4 | 0;
            $4_1 = $6_1;
            if (!(($5_1 | ($5_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
             continue label$41
            }
            break label$41;
           };
          }
          label$42 : {
           $6_1 = $5_1 & 255 | 0;
           if (($6_1 + -1 | 0) >>> 0 > 126 >>> 0) {
            break label$42
           }
           $3_1 = $3_1 + -1 | 0;
           $4_1 = $4_1 + 1 | 0;
           continue label$39;
          }
          break label$39;
         };
         $6_1 = $6_1 + -194 | 0;
         if ($6_1 >>> 0 > 50 >>> 0) {
          break label$5
         }
         $4_1 = $4_1 + 1 | 0;
         $5_1 = HEAP32[(($6_1 << 2 | 0) + 80224 | 0) >> 2] | 0;
         $6_1 = 0;
         continue label$31;
        };
       }
       $4_1 = $4_1 + -1 | 0;
       if ($5_1) {
        break label$4
       }
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
      }
      if ($5_1 & 255 | 0) {
       break label$4
      }
      label$43 : {
       if (!$0_1) {
        break label$43
       }
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3_1 | 0 | 0;
     }
     HEAP32[($1081() | 0) >> 2] = 25;
     if (!$0_1) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $4_1;
  return $2_1 | 0;
 }
 
 function $1599($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $8_1 = 0, $5_1 = 0, $10_1 = 0, $7_1 = 0, $6_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $3_1 = $0_1 ? $3_1 : 256;
  $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      if (!$3_1) {
       break label$4
      }
      label$5 : while (1) {
       $9_1 = $2_1 >>> 2 | 0;
       label$6 : {
        if ($2_1 >>> 0 > 131 >>> 0) {
         break label$6
        }
        if ($9_1 >>> 0 >= $3_1 >>> 0) {
         break label$6
        }
        $9_1 = $6_1;
        break label$2;
       }
       $10_1 = $1598($7_1 | 0, $5_1 + 12 | 0 | 0, ($9_1 >>> 0 < $3_1 >>> 0 ? $9_1 : $3_1) | 0, $4_1 | 0) | 0;
       $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       label$7 : {
        if (($10_1 | 0) != (-1 | 0)) {
         break label$7
        }
        $3_1 = 0;
        $8_1 = -1;
        break label$3;
       }
       $11_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0) ? 0 : $10_1;
       $3_1 = $3_1 - $11_1 | 0;
       $7_1 = $7_1 + ($11_1 << 2 | 0) | 0;
       $2_1 = $9_1 ? ($2_1 + $6_1 | 0) - $9_1 | 0 : 0;
       $8_1 = $10_1 + $8_1 | 0;
       if (!$9_1) {
        break label$3
       }
       $6_1 = $9_1;
       if ($3_1) {
        continue label$5
       }
       break label$3;
      };
     }
     $9_1 = $6_1;
    }
    if (!$9_1) {
     break label$1
    }
   }
   if (!$3_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $10_1 = $8_1;
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      label$11 : {
       $8_1 = $1425($7_1 | 0, $9_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
       if (($8_1 + 2 | 0) >>> 0 > 2 >>> 0) {
        break label$11
       }
       label$12 : {
        switch ($8_1 + 1 | 0 | 0) {
        case 1:
         HEAP32[($5_1 + 12 | 0) >> 2] = 0;
         break label$10;
        case 0:
         break label$1;
        default:
         break label$12;
        };
       }
       HEAP32[$4_1 >> 2] = 0;
       break label$10;
      }
      $9_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + $8_1 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $9_1;
      $10_1 = $10_1 + 1 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       break label$9
      }
     }
     $8_1 = $10_1;
     break label$1;
    }
    $7_1 = $7_1 + 4 | 0;
    $2_1 = $2_1 - $8_1 | 0;
    $8_1 = $10_1;
    if ($2_1) {
     continue label$8
    }
    break label$8;
   };
  }
  label$14 : {
   if (!$0_1) {
    break label$14
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 1040 | 0;
  return $8_1 | 0;
 }
 
 function $1600() {
  return (HEAP32[(HEAP32[(($1067() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
 }
 
 function $1601($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1425(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 104268) | 0) | 0 | 0;
 }
 
 function $1602($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $1067() | 0;
  $2_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[($1_1 + 96 | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? 96120 : $0_1;
  }
  return (($2_1 | 0) == (96120 | 0) ? -1 : $2_1) | 0;
 }
 
 function $1603($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $1604($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $11$hi = 0, $14_1 = 0, $14$hi = 0, $3_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1605($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $14$hi;
  $3_1 = Math_fround($1527($11_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0));
  global$0 = $2_1 + 16 | 0;
  return Math_fround($3_1);
 }
 
 function $1605($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  i64toi32_i32$0 = 0;
  $1498($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $1520($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = ($1_1 + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 60 | 0) >> 2] | 0) | 0) | 0) + (HEAP32[($4_1 + 136 | 0) >> 2] | 0) | 0;
  }
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $1606($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $11$hi = 0, $14_1 = 0, $14$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1605($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $14$hi;
  $3_1 = +$1528($11_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $1607($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $4$hi = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1605($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1608($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return Math_fround(Math_fround($1604($0_1 | 0, $1_1 | 0)));
 }
 
 function $1609($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return +(+$1606($0_1 | 0, $1_1 | 0));
 }
 
 function $1610($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1607($4_1 | 0, $1_1 | 0, $2_1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1611($0_1) {
  $0_1 = $0_1 | 0;
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $1612($0_1) {
  $0_1 = $0_1 | 0;
  return $2710($0_1 | 0) | 0 | 0;
 }
 
 function $1613($0_1) {
  $0_1 = $0_1 | 0;
  $1611($0_1 | 0) | 0;
  $2717($0_1 | 0, 8 | 0);
 }
 
 function $1614($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0;
  $5_1 = $1_1 + ($4_1 - $3_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $6_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $7_1 = HEAP8[$1_1 >> 0] | 0;
     $8_1 = HEAP8[$3_1 >> 0] | 0;
     if (($7_1 | 0) < ($8_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($8_1 | 0) >= ($7_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$3;
    };
   }
   $6_1 = ($5_1 | 0) != ($2_1 | 0);
  }
  return $6_1 | 0;
 }
 
 function $1615($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1616($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $1616($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1398($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $1617($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1617($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2420($0_1 | 0, $1_1 | 0, $2_1 | 0, $2419($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $1618($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = ($3_1 << 4 | 0) + (HEAP8[$1_1 >> 0] | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1619($0_1) {
  $0_1 = $0_1 | 0;
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $1620($0_1) {
  $0_1 = $0_1 | 0;
  $1619($0_1 | 0) | 0;
  $2717($0_1 | 0, 8 | 0);
 }
 
 function $1621($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $7_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $1622($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1623($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $1623($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1624($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $1625($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1624($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2423($2422($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1625($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2425($0_1 | 0, $1_1 | 0, $2_1 | 0, $2424($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $1626($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1627($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($1157($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $1401($6_1 | 0, $3_1 | 0);
   $1_1 = $1158($6_1 | 0) | 0;
   $1628($6_1 | 0) | 0;
   $1401($6_1 | 0, $3_1 | 0);
   $3_1 = $1629($6_1 | 0) | 0;
   $1628($6_1 | 0) | 0;
   $1630($6_1 | 0, $3_1 | 0);
   $1631($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($1632($6_1 + 28 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $2740($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1628($0_1) {
  $0_1 = $0_1 | 0;
  $2242(HEAP32[$0_1 >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $1629($0_1) {
  $0_1 = $0_1 | 0;
  return $1633($0_1 | 0, 104680 | 0) | 0 | 0;
 }
 
 function $1630($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1631($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1632($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $17_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 124 | 0) >> 2] = $1_1;
  $8_1 = $1634($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 109;
  $9_1 = 0;
  $10_1 = $1635($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($8_1 >>> 0 < 101 >>> 0) {
       break label$4
      }
      $11_1 = $1082($8_1 | 0) | 0;
      if (!$11_1) {
       break label$3
      }
      $1636($10_1 | 0, $11_1 | 0);
     }
     $12_1 = $11_1;
     $1_1 = $2_1;
     label$5 : while (1) {
      label$6 : {
       if (($1_1 | 0) != ($3_1 | 0)) {
        break label$6
       }
       $13_1 = 0;
       label$7 : while (1) {
        label$8 : {
         label$9 : {
          if ($1159($0_1 | 0, $7_1 + 124 | 0 | 0) | 0) {
           break label$9
          }
          if ($8_1) {
           break label$8
          }
         }
         label$10 : {
          if (!($1159($0_1 | 0, $7_1 + 124 | 0 | 0) | 0)) {
           break label$10
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
         }
         label$11 : while (1) {
          if (($2_1 | 0) == ($3_1 | 0)) {
           break label$2
          }
          if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
           break label$1
          }
          $11_1 = $11_1 + 1 | 0;
          $2_1 = $2_1 + 12 | 0;
          continue label$11;
         };
        }
        $14_1 = $1160($0_1 | 0) | 0;
        label$12 : {
         if ($6_1) {
          break label$12
         }
         $14_1 = $1637($4_1 | 0, $14_1 | 0) | 0;
        }
        $15_1 = $13_1 + 1 | 0;
        $16_1 = 0;
        $12_1 = $11_1;
        $1_1 = $2_1;
        label$13 : while (1) {
         label$14 : {
          if (($1_1 | 0) != ($3_1 | 0)) {
           break label$14
          }
          $13_1 = $15_1;
          if (!($16_1 & 1 | 0)) {
           continue label$7
          }
          $1162($0_1 | 0) | 0;
          $13_1 = $15_1;
          $12_1 = $11_1;
          $1_1 = $2_1;
          if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
           continue label$7
          }
          label$15 : while (1) {
           label$16 : {
            if (($1_1 | 0) != ($3_1 | 0)) {
             break label$16
            }
            $13_1 = $15_1;
            continue label$7;
           }
           label$17 : {
            if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
             break label$17
            }
            if (($1271($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
             break label$17
            }
            HEAP8[$12_1 >> 0] = 0;
            $9_1 = $9_1 + -1 | 0;
           }
           $12_1 = $12_1 + 1 | 0;
           $1_1 = $1_1 + 12 | 0;
           continue label$15;
          };
         }
         label$18 : {
          if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
           break label$18
          }
          $17_1 = HEAP8[($1638($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
          label$19 : {
           if ($6_1) {
            break label$19
           }
           $17_1 = $1637($4_1 | 0, $17_1 | 0) | 0;
          }
          label$20 : {
           label$21 : {
            if (($14_1 | 0) != ($17_1 | 0)) {
             break label$21
            }
            $16_1 = 1;
            if (($1271($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
             break label$18
            }
            HEAP8[$12_1 >> 0] = 2;
            $16_1 = 1;
            $9_1 = $9_1 + 1 | 0;
            break label$20;
           }
           HEAP8[$12_1 >> 0] = 0;
          }
          $8_1 = $8_1 + -1 | 0;
         }
         $12_1 = $12_1 + 1 | 0;
         $1_1 = $1_1 + 12 | 0;
         continue label$13;
        };
       };
      }
      $17_1 = $1639($1_1 | 0) | 0;
      HEAP8[$12_1 >> 0] = $17_1 ? 2 : 1;
      $12_1 = $12_1 + 1 | 0;
      $1_1 = $1_1 + 12 | 0;
      $9_1 = $9_1 + $17_1 | 0;
      $8_1 = $8_1 - $17_1 | 0;
      continue label$5;
     };
    }
    $2725();
    wasm2js_trap();
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
  }
  $1640($10_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $2_1 | 0;
 }
 
 function $1633($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2211(HEAP32[$0_1 >> 2] | 0 | 0, $2171($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1634($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2681($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1635($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $2675($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1636($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($2676($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2676($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($2677($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1637($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1638($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1270($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $1639($0_1) {
  $0_1 = $0_1 | 0;
  return !($1271($0_1 | 0) | 0) | 0;
 }
 
 function $1640($0_1) {
  $0_1 = $0_1 | 0;
  $1636($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1641($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1642($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1642($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1644($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1645($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1647($1160($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1162($6_1 + 252 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1648($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1643($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    $0_1 = ($1157($0_1 | 0) | 0) & 74 | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if (($0_1 | 0) != (64 | 0)) {
      break label$3
     }
     return 8 | 0;
    }
    if (($0_1 | 0) != (8 | 0)) {
     break label$1
    }
    return 16 | 0;
   }
   return 0 | 0;
  }
  return 10 | 0;
 }
 
 function $1644($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1724($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1645($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1401($3_1 + 12 | 0 | 0, $1_1 | 0);
  $1_1 = $1629($3_1 + 12 | 0 | 0) | 0;
  HEAP8[$2_1 >> 0] = $1720($1_1 | 0) | 0;
  $1721($0_1 | 0, $1_1 | 0);
  $1628($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1253($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $1647($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[($10_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $11_1 = HEAP32[$3_1 >> 2] | 0;
     if (($11_1 | 0) != ($2_1 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $12_1 = $0_1 & 255 | 0;
       if (($12_1 | 0) != (HEAPU8[($9_1 + 24 | 0) >> 0] | 0 | 0)) {
        break label$5
       }
       $0_1 = 43;
       break label$4;
      }
      if (($12_1 | 0) != (HEAPU8[($9_1 + 25 | 0) >> 0] | 0 | 0)) {
       break label$3
      }
      $0_1 = 45;
     }
     HEAP32[$3_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = $0_1;
     break label$2;
    }
    label$6 : {
     if (!($1271($6_1 | 0) | 0)) {
      break label$6
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$6
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($1680($9_1 | 0, $9_1 + 26 | 0 | 0, $10_1 + 15 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break label$1
    }
    label$7 : {
     label$8 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break label$7
       }
       break label$1;
      case 1:
       break label$7;
      default:
       break label$8;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$7
     }
     if (($9_1 | 0) < (22 | 0)) {
      break label$7
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 85264 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 85264 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1648($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $6_1 = 0, $44_1 = 0, $44$hi = 0, $48_1 = 0, $48$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = $1081() | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = 0;
       i64toi32_i32$0 = $2682($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1678() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[$5_1 >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[$5_1 >> 2] = $6_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     $1_1 = 0;
     break label$1;
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$0 = $2683() | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $44_1 = i64toi32_i32$0;
    $44$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$3 = $44_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $17_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $18_1 = 0
      } else {
       $18_1 = 1
      }
      $19_1 = $18_1;
     } else {
      $19_1 = 0
     }
     $17_1 = $19_1;
    }
    if ($17_1) {
     break label$2
    }
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $1175() | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $48_1 = i64toi32_i32$1;
    $48$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$1 = $48$hi;
    i64toi32_i32$0 = $48_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $20_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $21_1 = 0
      } else {
       $21_1 = 1
      }
      $22_1 = $21_1;
     } else {
      $22_1 = 0
     }
     $20_1 = $22_1;
    }
    if ($20_1) {
     break label$2
    }
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $7$hi;
    $1_1 = $7_1;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    if (($7$hi | 0) < (i64toi32_i32$2 | 0)) {
     $23_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $24_1 = 0
      } else {
       $24_1 = 1
      }
      $25_1 = $24_1;
     } else {
      $25_1 = 0
     }
     $23_1 = $25_1;
    }
    if ($23_1) {
     break label$8
    }
    $1_1 = $1175() | 0;
    break label$1;
   }
   $1_1 = $2683() | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1649($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = $1271($0_1 | 0) | 0;
  label$1 : {
   if (($2_1 - $1_1 | 0 | 0) < (5 | 0)) {
    break label$1
   }
   if (!$4_1) {
    break label$1
   }
   $1985($1_1 | 0, $2_1 | 0);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $1270($0_1 | 0) | 0;
   $5_1 = $2_1 + ($1271($0_1 | 0) | 0) | 0;
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      $0_1 = HEAP8[$2_1 >> 0] | 0;
      if ($1_1 >>> 0 >= $4_1 >>> 0) {
       break label$3
      }
      label$5 : {
       if (($0_1 | 0) < (1 | 0)) {
        break label$5
       }
       if (($0_1 | 0) >= ($1871() | 0 | 0)) {
        break label$5
       }
       if ((HEAP32[$1_1 >> 2] | 0 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
        break label$2
       }
      }
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + (($5_1 - $2_1 | 0 | 0) > (1 | 0)) | 0;
      continue label$4;
     };
    }
    if (($0_1 | 0) < (1 | 0)) {
     break label$1
    }
    if (($0_1 | 0) >= ($1871() | 0 | 0)) {
     break label$1
    }
    if (((HEAP32[$4_1 >> 2] | 0) + -1 | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = 4;
  }
 }
 
 function $1650($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1651($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1651($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1644($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1645($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1647($1160($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1162($6_1 + 252 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1652($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1652($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $7$hi = 0, $7_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $6_1 = 0, $43_1 = 0, $43$hi = 0, $45$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = $1081() | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = 0;
       i64toi32_i32$0 = $2682($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1678() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[$5_1 >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[$5_1 >> 2] = $6_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     i64toi32_i32$1 = 0;
     $7_1 = 0;
     $7$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $2685() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $43_1 = i64toi32_i32$1;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = $43$hi;
    i64toi32_i32$3 = $43_1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break label$2
    }
    i64toi32_i32$2 = $2686() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $45$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = $45$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    if ((i64toi32_i32$0 | 0) > ($7$hi | 0)) {
     $19_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       $20_1 = 0
      } else {
       $20_1 = 1
      }
      $21_1 = $20_1;
     } else {
      $21_1 = 0
     }
     $19_1 = $21_1;
    }
    if ($19_1) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$8
    }
    i64toi32_i32$1 = $2686() | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $2685() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$3 | 0;
 }
 
 function $1653($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1654($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1654($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1644($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1645($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1647($1160($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1162($6_1 + 252 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $1655($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1655($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = $1081() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $2689($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1678() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($2690() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $2690() | 0;
    break label$1;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $1656($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1657($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1657($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1644($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1645($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1647($1160($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1162($6_1 + 252 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1658($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1658($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = $1081() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $2689($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1678() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($2062() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $2062() | 0;
    break label$1;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1659($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1660($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1660($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1644($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1645($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1647($1160($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1162($6_1 + 252 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1661($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1661($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = $1081() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $2689($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1678() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($1379() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1379() | 0;
    break label$1;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1662($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1663($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1663($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1644($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1645($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1647($1160($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1162($6_1 + 252 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1664($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1664($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $7_1 = 0, $53$hi = 0, $59$hi = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = $1081() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $2689($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1678() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      i64toi32_i32$1 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $2692() | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $53$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = $53$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$3 = $8_1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $8_1 >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    i64toi32_i32$2 = $2692() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $8_1 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $8$hi | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $59$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
   i64toi32_i32$5 = $59$hi;
   $17_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$1 = i64toi32_i32$2 ? $17_1 : i64toi32_i32$1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $8$hi;
   $8_1 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1665($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1666($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1666($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1667($6_1 + 192 | 0 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0, $6_1 + 207 | 0 | 0, $6_1 + 206 | 0 | 0);
  $2_1 = $1247($6_1 + 180 | 0 | 0) | 0;
  $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
  $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 176 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) != ($1_1 + ($1271($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $1271($2_1 | 0) | 0;
     $1273($2_1 | 0, ($1271($2_1 | 0) | 0) << 1 | 0 | 0);
     $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
     $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 176 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1668($1160($6_1 + 252 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 206 | 0) >> 0] | 0 | 0, $6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
     break label$1
    }
    $1162($6_1 + 252 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 192 | 0 | 0) | 0)) {
    break label$4
   }
   if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($1669($1_1 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $1649($6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2740($2_1 | 0) | 0;
  $2740($6_1 + 192 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $1_1 | 0;
 }
 
 function $1667($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $1401($5_1 + 12 | 0 | 0, $1_1 | 0);
  $1677($1158($5_1 + 12 | 0 | 0) | 0 | 0, 85264 | 0, 85296 | 0, $2_1 | 0) | 0;
  $1_1 = $1629($5_1 + 12 | 0 | 0) | 0;
  HEAP8[$3_1 >> 0] = $1719($1_1 | 0) | 0;
  HEAP8[$4_1 >> 0] = $1720($1_1 | 0) | 0;
  $1721($0_1 | 0, $1_1 | 0);
  $1628($5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1668($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[($12_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($1271($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     label$5 : {
      if (($0_1 | 0) != ($6_1 | 0)) {
       break label$5
      }
      if (!($1271($7_1 | 0) | 0)) {
       break label$5
      }
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break label$2
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break label$4
      }
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $11_1;
      $0_1 = 0;
      HEAP32[$10_1 >> 2] = 0;
      break label$1;
     }
     $11_1 = ($1722($11_1 | 0, $11_1 + 32 | 0 | 0, $12_1 + 15 | 0 | 0) | 0) - $11_1 | 0;
     if (($11_1 | 0) > (31 | 0)) {
      break label$2
     }
     $5_1 = HEAP8[($11_1 + 85264 | 0) >> 0] | 0;
     label$6 : {
      label$7 : {
       switch (($11_1 & -2 | 0) + -22 | 0 | 0) {
       case 2:
        label$10 : {
         $11_1 = HEAP32[$4_1 >> 2] | 0;
         if (($11_1 | 0) == ($3_1 | 0)) {
          break label$10
         }
         $0_1 = -1;
         if (($1545(HEAP8[($11_1 + -1 | 0) >> 0] | 0 | 0) | 0 | 0) != ($1545(HEAP8[$2_1 >> 0] | 0 | 0) | 0 | 0)) {
          break label$1
         }
        }
        HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
        HEAP8[$11_1 >> 0] = $5_1;
        break label$4;
       case 0:
        HEAP8[$2_1 >> 0] = 80;
        break label$6;
       default:
        break label$7;
       };
      }
      $0_1 = $1545($5_1 | 0) | 0;
      if (($0_1 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
       break label$6
      }
      HEAP8[$2_1 >> 0] = $1546($0_1 | 0) | 0;
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break label$6
      }
      HEAP8[$1_1 >> 0] = 0;
      if (!($1271($7_1 | 0) | 0)) {
       break label$6
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break label$6
      }
      $1_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $1_1;
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
     HEAP8[$0_1 >> 0] = $5_1;
     $0_1 = 0;
     if (($11_1 | 0) > (21 | 0)) {
      break label$1
     }
     HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
     break label$1;
    }
    $0_1 = 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1669($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = Math_fround(0), $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $4_1 = $1081() | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = 0;
      $6_1 = Math_fround($2694($0_1 | 0, $3_1 + 12 | 0 | 0));
      label$5 : {
       label$6 : {
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        if (!$0_1) {
         break label$6
        }
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$5
        }
        break label$3;
       }
       HEAP32[$4_1 >> 2] = $5_1;
       if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$3
       }
       break label$1;
      }
      if (($0_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$2_1 >> 2] = 4;
     $6_1 = Math_fround(0.0);
     break label$1;
    }
    $6_1 = Math_fround(0.0);
   }
   HEAP32[$2_1 >> 2] = 4;
  }
  global$0 = $3_1 + 16 | 0;
  return Math_fround($6_1);
 }
 
 function $1670($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1671($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1671($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1667($6_1 + 192 | 0 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0, $6_1 + 207 | 0 | 0, $6_1 + 206 | 0 | 0);
  $2_1 = $1247($6_1 + 180 | 0 | 0) | 0;
  $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
  $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 176 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) != ($1_1 + ($1271($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $1271($2_1 | 0) | 0;
     $1273($2_1 | 0, ($1271($2_1 | 0) | 0) << 1 | 0 | 0);
     $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
     $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 176 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1668($1160($6_1 + 252 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 206 | 0) >> 0] | 0 | 0, $6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
     break label$1
    }
    $1162($6_1 + 252 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 192 | 0 | 0) | 0)) {
    break label$4
   }
   if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$1672($1_1 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $1649($6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2740($2_1 | 0) | 0;
  $2740($6_1 + 192 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $1_1 | 0;
 }
 
 function $1672($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0.0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $4_1 = $1081() | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = 0;
      $6_1 = +$2695($0_1 | 0, $3_1 + 12 | 0 | 0);
      label$5 : {
       label$6 : {
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        if (!$0_1) {
         break label$6
        }
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$5
        }
        break label$3;
       }
       HEAP32[$4_1 >> 2] = $5_1;
       if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$3
       }
       break label$1;
      }
      if (($0_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$2_1 >> 2] = 4;
     $6_1 = 0.0;
     break label$1;
    }
    $6_1 = 0.0;
   }
   HEAP32[$2_1 >> 2] = 4;
  }
  global$0 = $3_1 + 16 | 0;
  return +$6_1;
 }
 
 function $1673($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1674($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1674($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $125_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 268 | 0) >> 2] = $1_1;
  $1667($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $2_1 = $1247($6_1 + 196 | 0 | 0) | 0;
  $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
  $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 192 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($1159($6_1 + 268 | 0 | 0, $6_1 + 264 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 192 | 0) >> 2] | 0 | 0) != ($1_1 + ($1271($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $1271($2_1 | 0) | 0;
     $1273($2_1 | 0, ($1271($2_1 | 0) | 0) << 1 | 0 | 0);
     $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
     $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 192 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1668($1160($6_1 + 268 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 192 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $1162($6_1 + 268 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if ((HEAPU8[($6_1 + 23 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $1675($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 192 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $6_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $125_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $125_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1649($6_1 + 208 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1159($6_1 + 268 | 0 | 0, $6_1 + 264 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 268 | 0) >> 2] | 0;
  $2740($2_1 | 0) | 0;
  $2740($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $1675($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $8$hi = 0, i64toi32_i32$2 = 0, $8_1 = 0, $9_1 = 0, $9$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break label$4
      }
      $5_1 = $1081() | 0;
      $6_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = 0;
      $2696($4_1 + 8 | 0 | 0, $1_1 | 0, $4_1 + 28 | 0 | 0);
      i64toi32_i32$2 = $4_1 + 16 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $7_1 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$0;
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      if (!$1_1) {
       break label$3
      }
      i64toi32_i32$0 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$0;
      if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$2
      }
      i64toi32_i32$0 = $8$hi;
      $9_1 = i64toi32_i32$1;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $7$hi;
      $10_1 = $7_1;
      $10$hi = i64toi32_i32$0;
      if (($1_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$3_1 >> 2] = 4;
     i64toi32_i32$0 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $7_1 = 0;
     $7$hi = i64toi32_i32$0;
     break label$1;
    }
    HEAP32[$5_1 >> 2] = $6_1;
    i64toi32_i32$0 = 0;
    $9_1 = 0;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = 4;
   i64toi32_i32$0 = $9$hi;
   $8_1 = $9_1;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   $7_1 = $10_1;
   $7$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1676($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $7_1 = $1247($6_1 + 196 | 0 | 0) | 0;
  $1401($6_1 + 16 | 0 | 0, $3_1 | 0);
  $1677($1158($6_1 + 16 | 0 | 0) | 0 | 0, 85264 | 0, 85290 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1628($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
  $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($1271($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $1271($2_1 | 0) | 0;
     $1273($2_1 | 0, ($1271($2_1 | 0) | 0) << 1 | 0 | 0);
     $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
     $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1647($1160($6_1 + 252 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $7_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
     break label$1
    }
    $1162($6_1 + 252 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $1273($2_1 | 0, (HEAP32[($6_1 + 180 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $1277($2_1 | 0) | 0;
  $3_1 = $1678() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($1679($1_1 | 0, $3_1 | 0, 65950 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($1159($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2740($2_1 | 0) | 0;
  $2740($7_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $1_1 | 0;
 }
 
 function $1677($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $1678() {
  var $0_1 = 0;
  label$1 : {
   if (!(HEAPU8[(0 + 104436 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 104432 | 0) >> 2] | 0 | 0;
  }
  $0_1 = $1543(2147483647 | 0, 66484 | 0, 0 | 0) | 0;
  HEAP8[(0 + 104436 | 0) >> 0] = 1;
  HEAP32[(0 + 104432 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $1679($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $3_1 = $1681($4_1 + 4 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $1_1 = $1535($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1682($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1680($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1311($0_1 | 0, $1725($1304($0_1 | 0) | 0 | 0, $1304($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1681($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1602(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1682($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $1602($1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1683($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($1157($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $1401($6_1 | 0, $3_1 | 0);
   $1_1 = $1222($6_1 | 0) | 0;
   $1628($6_1 | 0) | 0;
   $1401($6_1 | 0, $3_1 | 0);
   $3_1 = $1684($6_1 | 0) | 0;
   $1628($6_1 | 0) | 0;
   $1685($6_1 | 0, $3_1 | 0);
   $1686($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($1687($6_1 + 28 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $2754($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1684($0_1) {
  $0_1 = $0_1 | 0;
  return $1633($0_1 | 0, 104688 | 0) | 0 | 0;
 }
 
 function $1685($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1686($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1687($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $17_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 124 | 0) >> 2] = $1_1;
  $8_1 = $1688($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 109;
  $9_1 = 0;
  $10_1 = $1635($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($8_1 >>> 0 < 101 >>> 0) {
       break label$4
      }
      $11_1 = $1082($8_1 | 0) | 0;
      if (!$11_1) {
       break label$3
      }
      $1636($10_1 | 0, $11_1 | 0);
     }
     $12_1 = $11_1;
     $1_1 = $2_1;
     label$5 : while (1) {
      label$6 : {
       if (($1_1 | 0) != ($3_1 | 0)) {
        break label$6
       }
       $13_1 = 0;
       label$7 : while (1) {
        label$8 : {
         label$9 : {
          if ($1223($0_1 | 0, $7_1 + 124 | 0 | 0) | 0) {
           break label$9
          }
          if ($8_1) {
           break label$8
          }
         }
         label$10 : {
          if (!($1223($0_1 | 0, $7_1 + 124 | 0 | 0) | 0)) {
           break label$10
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
         }
         label$11 : while (1) {
          if (($2_1 | 0) == ($3_1 | 0)) {
           break label$2
          }
          if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
           break label$1
          }
          $11_1 = $11_1 + 1 | 0;
          $2_1 = $2_1 + 12 | 0;
          continue label$11;
         };
        }
        $14_1 = $1224($0_1 | 0) | 0;
        label$12 : {
         if ($6_1) {
          break label$12
         }
         $14_1 = $1689($4_1 | 0, $14_1 | 0) | 0;
        }
        $15_1 = $13_1 + 1 | 0;
        $16_1 = 0;
        $12_1 = $11_1;
        $1_1 = $2_1;
        label$13 : while (1) {
         label$14 : {
          if (($1_1 | 0) != ($3_1 | 0)) {
           break label$14
          }
          $13_1 = $15_1;
          if (!($16_1 & 1 | 0)) {
           continue label$7
          }
          $1226($0_1 | 0) | 0;
          $13_1 = $15_1;
          $12_1 = $11_1;
          $1_1 = $2_1;
          if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
           continue label$7
          }
          label$15 : while (1) {
           label$16 : {
            if (($1_1 | 0) != ($3_1 | 0)) {
             break label$16
            }
            $13_1 = $15_1;
            continue label$7;
           }
           label$17 : {
            if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
             break label$17
            }
            if (($1690($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
             break label$17
            }
            HEAP8[$12_1 >> 0] = 0;
            $9_1 = $9_1 + -1 | 0;
           }
           $12_1 = $12_1 + 1 | 0;
           $1_1 = $1_1 + 12 | 0;
           continue label$15;
          };
         }
         label$18 : {
          if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
           break label$18
          }
          $17_1 = HEAP32[($1691($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
          label$19 : {
           if ($6_1) {
            break label$19
           }
           $17_1 = $1689($4_1 | 0, $17_1 | 0) | 0;
          }
          label$20 : {
           label$21 : {
            if (($14_1 | 0) != ($17_1 | 0)) {
             break label$21
            }
            $16_1 = 1;
            if (($1690($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
             break label$18
            }
            HEAP8[$12_1 >> 0] = 2;
            $16_1 = 1;
            $9_1 = $9_1 + 1 | 0;
            break label$20;
           }
           HEAP8[$12_1 >> 0] = 0;
          }
          $8_1 = $8_1 + -1 | 0;
         }
         $12_1 = $12_1 + 1 | 0;
         $1_1 = $1_1 + 12 | 0;
         continue label$13;
        };
       };
      }
      $17_1 = $1692($1_1 | 0) | 0;
      HEAP8[$12_1 >> 0] = $17_1 ? 2 : 1;
      $12_1 = $12_1 + 1 | 0;
      $1_1 = $1_1 + 12 | 0;
      $9_1 = $9_1 + $17_1 | 0;
      $8_1 = $8_1 - $17_1 | 0;
      continue label$5;
     };
    }
    $2725();
    wasm2js_trap();
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
  }
  $1640($10_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $2_1 | 0;
 }
 
 function $1688($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2697($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1689($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1690($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1835($0_1 | 0) | 0)) {
    break label$1
   }
   return $1836($0_1 | 0) | 0 | 0;
  }
  return $1837($0_1 | 0) | 0 | 0;
 }
 
 function $1691($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1833($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1692($0_1) {
  $0_1 = $0_1 | 0;
  return !($1690($0_1 | 0) | 0) | 0;
 }
 
 function $1693($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1694($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1694($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1695($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1696($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1697($1224($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1226($6_1 + 332 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1648($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1695($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1731($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1696($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1401($3_1 + 12 | 0 | 0, $1_1 | 0);
  $1_1 = $1684($3_1 + 12 | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $1727($1_1 | 0) | 0;
  $1728($0_1 | 0, $1_1 | 0);
  $1628($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1697($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $11_1 = HEAP32[$3_1 >> 2] | 0;
     if (($11_1 | 0) != ($2_1 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($0_1 | 0) != (HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       $0_1 = 43;
       break label$4;
      }
      if (($0_1 | 0) != (HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0)) {
       break label$3
      }
      $0_1 = 45;
     }
     HEAP32[$3_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = $0_1;
     break label$2;
    }
    label$6 : {
     if (!($1271($6_1 | 0) | 0)) {
      break label$6
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$6
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = (($1718($9_1 | 0, $9_1 + 104 | 0 | 0, $10_1 + 12 | 0 | 0) | 0) - $9_1 | 0) >> 2 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break label$1
    }
    label$7 : {
     label$8 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break label$7
       }
       break label$1;
      case 1:
       break label$7;
      default:
       break label$8;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$7
     }
     if (($9_1 | 0) < (22 | 0)) {
      break label$7
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 85264 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 85264 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1698($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1699($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1699($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1695($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1696($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1697($1224($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1226($6_1 + 332 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1652($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1700($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1701($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1701($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1695($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1696($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1697($1224($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1226($6_1 + 332 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $1655($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1702($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1703($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1703($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1695($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1696($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1697($1224($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1226($6_1 + 332 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1658($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1704($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1705($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1705($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1695($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1696($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1697($1224($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1226($6_1 + 332 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1661($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1706($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1707($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1707($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1643($3_1 | 0) | 0;
  $0_1 = $1695($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1696($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
  $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1271($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $1271($3_1 | 0) | 0;
     $1273($3_1 | 0, ($1271($3_1 | 0) | 0) << 1 | 0 | 0);
     $1273($3_1 | 0, $1272($3_1 | 0) | 0 | 0);
     $2_1 = $1646($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1697($1224($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $1226($6_1 + 332 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 196 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1664($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1649($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1223($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2740($3_1 | 0) | 0;
  $2740($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1708($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1709($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1709($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 364 | 0) >> 2] = $1_1;
  $1710($6_1 + 204 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $2_1 = $1247($6_1 + 192 | 0 | 0) | 0;
  $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
  $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($1223($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($1271($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $1271($2_1 | 0) | 0;
     $1273($2_1 | 0, ($1271($2_1 | 0) | 0) << 1 | 0 | 0);
     $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
     $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1711($1224($6_1 + 364 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $1226($6_1 + 364 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 204 | 0 | 0) | 0)) {
    break label$4
   }
   if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($1669($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $1649($6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1223($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 364 | 0) >> 2] | 0;
  $2740($2_1 | 0) | 0;
  $2740($6_1 + 204 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $1710($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $1401($5_1 + 12 | 0 | 0, $1_1 | 0);
  $1717($1222($5_1 + 12 | 0 | 0) | 0 | 0, 85264 | 0, 85296 | 0, $2_1 | 0) | 0;
  $1_1 = $1684($5_1 + 12 | 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = $1726($1_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $1727($1_1 | 0) | 0;
  $1728($0_1 | 0, $1_1 | 0);
  $1628($5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1711($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($1271($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     label$5 : {
      if (($0_1 | 0) != ($6_1 | 0)) {
       break label$5
      }
      if (!($1271($7_1 | 0) | 0)) {
       break label$5
      }
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break label$2
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break label$4
      }
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $11_1;
      $0_1 = 0;
      HEAP32[$10_1 >> 2] = 0;
      break label$1;
     }
     $0_1 = ($1729($11_1 | 0, $11_1 + 128 | 0 | 0, $12_1 + 12 | 0 | 0) | 0) - $11_1 | 0;
     $11_1 = $0_1 >> 2 | 0;
     if (($11_1 | 0) > (31 | 0)) {
      break label$2
     }
     $5_1 = HEAP8[($11_1 + 85264 | 0) >> 0] | 0;
     label$6 : {
      label$7 : {
       label$8 : {
        $0_1 = $0_1 & -5 | 0;
        if (($0_1 | 0) == (88 | 0)) {
         break label$8
        }
        if (($0_1 | 0) != (96 | 0)) {
         break label$7
        }
        label$9 : {
         $11_1 = HEAP32[$4_1 >> 2] | 0;
         if (($11_1 | 0) == ($3_1 | 0)) {
          break label$9
         }
         $0_1 = -1;
         if (($1545(HEAP8[($11_1 + -1 | 0) >> 0] | 0 | 0) | 0 | 0) != ($1545(HEAP8[$2_1 >> 0] | 0 | 0) | 0 | 0)) {
          break label$1
         }
        }
        HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
        HEAP8[$11_1 >> 0] = $5_1;
        break label$4;
       }
       HEAP8[$2_1 >> 0] = 80;
       break label$6;
      }
      $0_1 = $1545($5_1 | 0) | 0;
      if (($0_1 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
       break label$6
      }
      HEAP8[$2_1 >> 0] = $1546($0_1 | 0) | 0;
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break label$6
      }
      HEAP8[$1_1 >> 0] = 0;
      if (!($1271($7_1 | 0) | 0)) {
       break label$6
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break label$6
      }
      $1_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $1_1;
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
     HEAP8[$0_1 >> 0] = $5_1;
     $0_1 = 0;
     if (($11_1 | 0) > (21 | 0)) {
      break label$1
     }
     HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
     break label$1;
    }
    $0_1 = 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1712($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1713($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1713($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 364 | 0) >> 2] = $1_1;
  $1710($6_1 + 204 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $2_1 = $1247($6_1 + 192 | 0 | 0) | 0;
  $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
  $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($1223($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($1271($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $1271($2_1 | 0) | 0;
     $1273($2_1 | 0, ($1271($2_1 | 0) | 0) << 1 | 0 | 0);
     $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
     $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1711($1224($6_1 + 364 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $1226($6_1 + 364 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 204 | 0 | 0) | 0)) {
    break label$4
   }
   if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$1672($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $1649($6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1223($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 364 | 0) >> 2] | 0;
  $2740($2_1 | 0) | 0;
  $2740($6_1 + 204 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $1714($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1715($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1715($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $125_1 = 0;
  $6_1 = global$0 - 384 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 376 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 380 | 0) >> 2] = $1_1;
  $1710($6_1 + 220 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 236 | 0 | 0, $6_1 + 232 | 0 | 0);
  $2_1 = $1247($6_1 + 208 | 0 | 0) | 0;
  $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
  $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($1223($6_1 + 380 | 0 | 0, $6_1 + 376 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($1_1 + ($1271($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $1271($2_1 | 0) | 0;
     $1273($2_1 | 0, ($1271($2_1 | 0) | 0) << 1 | 0 | 0);
     $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
     $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 204 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1711($1224($6_1 + 380 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 204 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $1226($6_1 + 380 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($1271($6_1 + 220 | 0 | 0) | 0)) {
    break label$4
   }
   if ((HEAPU8[($6_1 + 23 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $1675($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $6_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $125_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $125_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1649($6_1 + 220 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($1223($6_1 + 380 | 0 | 0, $6_1 + 376 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
  $2740($2_1 | 0) | 0;
  $2740($6_1 + 220 | 0 | 0) | 0;
  global$0 = $6_1 + 384 | 0;
  return $1_1 | 0;
 }
 
 function $1716($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 320 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 312 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 316 | 0) >> 2] = $1_1;
  $7_1 = $1247($6_1 + 196 | 0 | 0) | 0;
  $1401($6_1 + 16 | 0 | 0, $3_1 | 0);
  $1717($1222($6_1 + 16 | 0 | 0) | 0 | 0, 85264 | 0, 85290 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1628($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $1247($6_1 + 184 | 0 | 0) | 0;
  $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
  $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($1223($6_1 + 316 | 0 | 0, $6_1 + 312 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($1271($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $1271($2_1 | 0) | 0;
     $1273($2_1 | 0, ($1271($2_1 | 0) | 0) << 1 | 0 | 0);
     $1273($2_1 | 0, $1272($2_1 | 0) | 0 | 0);
     $1_1 = $1646($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1697($1224($6_1 + 316 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $7_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
     break label$1
    }
    $1226($6_1 + 316 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $1273($2_1 | 0, (HEAP32[($6_1 + 180 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $1277($2_1 | 0) | 0;
  $3_1 = $1678() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($1679($1_1 | 0, $3_1 | 0, 65950 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($1223($6_1 + 316 | 0 | 0, $6_1 + 312 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
  $2740($2_1 | 0) | 0;
  $2740($7_1 | 0) | 0;
  global$0 = $6_1 + 320 | 0;
  return $1_1 | 0;
 }
 
 function $1717($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $1718($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1337($0_1 | 0, $1732($1329($0_1 | 0) | 0 | 0, $1329($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1719($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1720($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1721($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1722($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1296($0_1 | 0, $1723($1293($0_1 | 0) | 0 | 0, $1293($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1723($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $2454($0_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, $1_1 - $0_1 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $1724($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 85264 | 0;
 }
 
 function $1725($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $2455($0_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, $1_1 - $0_1 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $1726($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1727($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1728($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1729($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1321($0_1 | 0, $1730($1318($0_1 | 0) | 0 | 0, $1318($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1730($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $2456($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $1731($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1401($3_1 + 12 | 0 | 0, $1_1 | 0);
  $1717($1222($3_1 + 12 | 0 | 0) | 0 | 0, 85264 | 0, 85290 | 0, $2_1 | 0) | 0;
  $1628($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1732($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $2457($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $1733($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($1157($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $1401($5_1 + 16 | 0 | 0, $2_1 | 0);
   $2_1 = $1629($5_1 + 16 | 0 | 0) | 0;
   $1628($5_1 + 16 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $1630($5_1 + 16 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $1631($5_1 + 16 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $1734($5_1 + 16 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $1735($5_1 + 16 | 0 | 0) | 0;
    label$6 : {
     if ($1736($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     $2740($5_1 + 16 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP8[($1737($5_1 + 12 | 0 | 0) | 0) >> 0] | 0;
    $1187($1186($5_1 + 28 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $1738($5_1 + 12 | 0 | 0) | 0;
    $1188($5_1 + 28 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1734($0_1) {
  $0_1 = $0_1 | 0;
  return $1739($0_1 | 0, $1253($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1735($0_1) {
  $0_1 = $0_1 | 0;
  return $1739($0_1 | 0, ($1253($0_1 | 0) | 0) + ($1271($0_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1736($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1740($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1737($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1738($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1739($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($2458($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1740($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1974($0_1 | 0) | 0 | 0) == ($1974($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1741($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1742($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66017 | 0) | 0 | 0;
 }
 
 function $1742($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = 37;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  $1743($6_1 + 56 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $1157($2_1 | 0) | 0 | 0);
  $5_1 = $1678() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 43 | 0) + ($1744($6_1 + 43 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 56 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1745($6_1 + 43 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1401($6_1 + 4 | 0 | 0, $2_1 | 0);
  $1746($6_1 + 43 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $1628($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $1747($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 64 | 0;
  return $2_1 | 0;
 }
 
 function $1743($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if (!($3_1 & 2048 | 0)) {
    break label$1
   }
   $4_1 = $3_1 & 74 | 0;
   if (($4_1 | 0) == (8 | 0)) {
    break label$1
   }
   if (($4_1 | 0) == (64 | 0)) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($3_1 & 512 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   label$4 : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP8[$0_1 >> 0] = $4_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    $1_1 = $3_1 & 74 | 0;
    if (($1_1 | 0) != (64 | 0)) {
     break label$6
    }
    $1_1 = 111;
    break label$5;
   }
   label$7 : {
    if (($1_1 | 0) != (8 | 0)) {
     break label$7
    }
    $1_1 = $3_1 & 16384 | 0 ? 88 : 120;
    break label$5;
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0_1 >> 0] = $1_1;
 }
 
 function $1744($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  $4_1 = $1681($5_1 + 4 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $2_1 = $1562($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1682($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1745($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $2_1 = ($1157($2_1 | 0) | 0) & 176 | 0;
   if (($2_1 | 0) != (32 | 0)) {
    break label$1
   }
   return $1_1 | 0;
  }
  label$2 : {
   if (($2_1 | 0) != (16 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     switch ($2_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    return $0_1 + 1 | 0 | 0;
   }
   if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
    break label$2
   }
   if (($2_1 | 0) != (48 | 0)) {
    break label$2
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
    break label$2
   }
   $0_1 = $0_1 + 2 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1746($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $1158($6_1 | 0) | 0;
  $6_1 = $1629($6_1 | 0) | 0;
  $1721($7_1 + 4 | 0 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($1639($7_1 + 4 | 0 | 0) | 0)) {
     break label$2
    }
    $1677($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + ($2_1 - $0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $1394($8_1 | 0, $10_1 << 24 >> 24 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $1394($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $10_1 = $1394($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1799($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $1720($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $1799($3_1 + ($9_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($1646($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($1646($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
     HEAP8[$10_1 >> 0] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($1271($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $1394($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 1 | 0;
    HEAP8[$14_1 >> 0] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
  $2740($7_1 + 4 | 0 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1747($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $7_1 = $1766($4_1 | 0) | 0;
    label$3 : {
     $8_1 = $2_1 - $1_1 | 0;
     if (($8_1 | 0) < (1 | 0)) {
      break label$3
     }
     if (($1190($0_1 | 0, $1_1 | 0, $8_1 | 0) | 0 | 0) != ($8_1 | 0)) {
      break label$2
     }
    }
    label$4 : {
     $1_1 = $3_1 - $1_1 | 0;
     $1_1 = ($7_1 | 0) > ($1_1 | 0) ? $7_1 - $1_1 | 0 : 0;
     if (($1_1 | 0) < (1 | 0)) {
      break label$4
     }
     $7_1 = $1767($6_1 + 4 | 0 | 0, $1_1 | 0, $5_1 | 0) | 0;
     $8_1 = $1190($0_1 | 0, $1250($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
     $2740($7_1 | 0) | 0;
     if (($8_1 | 0) != ($1_1 | 0)) {
      break label$2
     }
    }
    label$5 : {
     $1_1 = $3_1 - $2_1 | 0;
     if (($1_1 | 0) < (1 | 0)) {
      break label$5
     }
     if (($1190($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
      break label$2
     }
    }
    $1768($4_1 | 0, 0 | 0) | 0;
    break label$1;
   }
   $0_1 = 0;
  }
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1748($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1749($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66010 | 0) | 0 | 0;
 }
 
 function $1749($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = 37;
  HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$0;
  $1743($6_1 + 104 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $1157($2_1 | 0) | 0 | 0);
  $5_1 = $1678() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 80 | 0) + ($1744($6_1 + 80 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 104 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1745($6_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1401($6_1 + 20 | 0 | 0, $2_1 | 0);
  $1746($6_1 + 80 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $1628($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $1747($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 112 | 0;
  return $2_1 | 0;
 }
 
 function $1750($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1751($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66017 | 0) | 0 | 0;
 }
 
 function $1751($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = 37;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  $1743($6_1 + 56 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $1157($2_1 | 0) | 0 | 0);
  $5_1 = $1678() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 43 | 0) + ($1744($6_1 + 43 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 56 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1745($6_1 + 43 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1401($6_1 + 4 | 0 | 0, $2_1 | 0);
  $1746($6_1 + 43 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $1628($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $1747($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 64 | 0;
  return $2_1 | 0;
 }
 
 function $1752($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1753($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66010 | 0) | 0 | 0;
 }
 
 function $1753($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = 37;
  HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$0;
  $1743($6_1 + 104 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $1157($2_1 | 0) | 0 | 0);
  $5_1 = $1678() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 80 | 0) + ($1744($6_1 + 80 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 104 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1745($6_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1401($6_1 + 20 | 0 | 0, $2_1 | 0);
  $1746($6_1 + 80 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $1628($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $1747($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 112 | 0;
  return $2_1 | 0;
 }
 
 function $1754($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  return $1755($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, +$4_1, 67364 | 0) | 0 | 0;
 }
 
 function $1755($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 208 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 200 | 0) >> 2] = 37;
  HEAP32[($6_1 + 204 | 0) >> 2] = 0;
  $7_1 = $1756($6_1 + 200 | 0 | 1 | 0 | 0, $5_1 | 0, $1157($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 156 | 0) >> 2] = $6_1 + 160 | 0;
  $5_1 = $1678() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $8_1 = $1757($2_1 | 0) | 0;
    HEAPF64[($6_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($6_1 + 32 | 0) >> 2] = $8_1;
    $5_1 = $1744($6_1 + 160 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($6_1 + 48 | 0) >> 3] = $4_1;
   $5_1 = $1744($6_1 + 160 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 80 | 0) >> 2] = 109;
  $9_1 = $1758($6_1 + 148 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  $8_1 = $6_1 + 160 | 0;
  label$3 : {
   label$4 : {
    if (($5_1 | 0) < (30 | 0)) {
     break label$4
    }
    $5_1 = $1678() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $8_1 = $1757($2_1 | 0) | 0;
      HEAPF64[($6_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$6_1 >> 2] = $8_1;
      $5_1 = $1759($6_1 + 156 | 0 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($6_1 + 16 | 0) >> 3] = $4_1;
     $5_1 = $1759($6_1 + 156 | 0 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    }
    if (($5_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $1760($9_1 | 0, HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
   }
   $10_1 = $8_1 + $5_1 | 0;
   $11_1 = $1745($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 80 | 0) >> 2] = 109;
   $8_1 = $1758($6_1 + 72 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     $7_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
     if (($7_1 | 0) != ($6_1 + 160 | 0 | 0)) {
      break label$8
     }
     $5_1 = $6_1 + 80 | 0;
     break label$7;
    }
    $5_1 = $1082($5_1 << 1 | 0 | 0) | 0;
    if (!$5_1) {
     break label$3
    }
    $1760($8_1 | 0, $5_1 | 0);
    $7_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
   }
   $1401($6_1 + 60 | 0 | 0, $2_1 | 0);
   $1761($7_1 | 0, $11_1 | 0, $10_1 | 0, $5_1 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 60 | 0 | 0);
   $1628($6_1 + 60 | 0 | 0) | 0;
   $2_1 = $1747($1_1 | 0, $5_1 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1762($8_1 | 0) | 0;
   $1762($9_1 | 0) | 0;
   global$0 = $6_1 + 208 | 0;
   return $2_1 | 0;
  }
  $2725();
  wasm2js_trap();
 }
 
 function $1756($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($2_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($2_1 & 1024 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   $3_1 = $2_1 & 260 | 0;
   if (($3_1 | 0) == (260 | 0)) {
    break label$3
   }
   $5_1 = 10798;
   HEAP8[$0_1 >> 0] = $5_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $5_1 >>> 8 | 0;
   $0_1 = $0_1 + 2 | 0;
  }
  $4_1 = $2_1 & 16384 | 0;
  label$4 : {
   label$5 : while (1) {
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$2_1) {
     break label$4
    }
    HEAP8[$0_1 >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$5;
   };
  }
  label$6 : {
   label$7 : {
    label$8 : {
     if (($3_1 | 0) == (256 | 0)) {
      break label$8
     }
     if (($3_1 | 0) != (4 | 0)) {
      break label$7
     }
     $1_1 = $4_1 ? 70 : 102;
     break label$6;
    }
    $1_1 = $4_1 ? 69 : 101;
    break label$6;
   }
   label$9 : {
    if (($3_1 | 0) != (260 | 0)) {
     break label$9
    }
    $1_1 = $4_1 ? 65 : 97;
    break label$6;
   }
   $1_1 = $4_1 ? 71 : 103;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return ($3_1 | 0) != (260 | 0) | 0;
 }
 
 function $1757($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1758($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1928($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1759($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $3_1 = $1681($4_1 + 4 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $1_1 = $1585($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1682($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1760($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1945($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1945($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1946($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1761($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $12_1 = 0, $10_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $1158($6_1 | 0) | 0;
  $9_1 = $1629($6_1 | 0) | 0;
  $1721($7_1 + 4 | 0 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $1394($8_1 | 0, $6_1 << 24 >> 24 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
   HEAP8[$11_1 >> 0] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $1394($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $6_1 = $1394($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($1565(HEAP8[$6_1 >> 0] | 0 | 0, $1678() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($1567(HEAP8[$6_1 >> 0] | 0 | 0, $1678() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($1639($7_1 + 4 | 0 | 0) | 0)) {
     break label$8
    }
    $1677($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ($6_1 - $10_1 | 0) | 0;
    break label$7;
   }
   $1799($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $1720($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $1799($3_1 + ($10_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($1646($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($1646($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($1271($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $1394($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 1 | 0;
    HEAP8[$16_1 >> 0] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : while (1) {
   label$13 : {
    label$14 : {
     label$15 : {
      if ($6_1 >>> 0 < $2_1 >>> 0) {
       break label$15
      }
      $11_1 = $6_1;
      break label$14;
     }
     $11_1 = $6_1 + 1 | 0;
     $6_1 = HEAP8[$6_1 >> 0] | 0;
     if (($6_1 | 0) != (46 | 0)) {
      break label$13
     }
     $6_1 = $1719($9_1 | 0) | 0;
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $6_1;
    }
    $1677($8_1 | 0, $11_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    $6_1 = (HEAP32[$5_1 >> 2] | 0) + ($2_1 - $11_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
    $2740($7_1 + 4 | 0 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
    return;
   }
   $6_1 = $1394($8_1 | 0, $6_1 | 0) | 0;
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
   HEAP8[$12_1 >> 0] = $6_1;
   $6_1 = $11_1;
   continue label$12;
  };
 }
 
 function $1762($0_1) {
  $0_1 = $0_1 | 0;
  $1760($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1763($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $4$hi;
  return $1764($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, $5$hi | 0, 66467 | 0) | 0 | 0;
 }
 
 function $1764($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $7_1 = global$0 - 256 | 0;
  global$0 = $7_1;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[($7_1 + 248 | 0) >> 2] = 37;
  HEAP32[($7_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = $1756($7_1 + 248 | 0 | 1 | 0 | 0, $6_1 | 0, $1157($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($7_1 + 204 | 0) >> 2] = $7_1 + 208 | 0;
  $6_1 = $1678() | 0;
  label$1 : {
   label$2 : {
    if (!$8_1) {
     break label$2
    }
    $9_1 = $1757($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $7_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 48 | 0) >> 2] = $9_1;
    $6_1 = $1744($7_1 + 208 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($7_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $1744($7_1 + 208 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($7_1 + 128 | 0) >> 2] = 109;
  $10_1 = $1758($7_1 + 196 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
  $9_1 = $7_1 + 208 | 0;
  label$3 : {
   label$4 : {
    if (($6_1 | 0) < (30 | 0)) {
     break label$4
    }
    $6_1 = $1678() | 0;
    label$5 : {
     label$6 : {
      if (!$8_1) {
       break label$6
      }
      $9_1 = $1757($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$7_1 >> 2] = $9_1;
      $6_1 = $1759($7_1 + 204 | 0 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $1759($7_1 + 204 | 0 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
    }
    if (($6_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $1760($10_1 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
   }
   $11_1 = $9_1 + $6_1 | 0;
   $12_1 = $1745($9_1 | 0, $11_1 | 0, $2_1 | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = 109;
   $9_1 = $1758($7_1 + 120 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     $8_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
     if (($8_1 | 0) != ($7_1 + 208 | 0 | 0)) {
      break label$8
     }
     $6_1 = $7_1 + 128 | 0;
     break label$7;
    }
    $6_1 = $1082($6_1 << 1 | 0 | 0) | 0;
    if (!$6_1) {
     break label$3
    }
    $1760($9_1 | 0, $6_1 | 0);
    $8_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
   }
   $1401($7_1 + 108 | 0 | 0, $2_1 | 0);
   $1761($8_1 | 0, $12_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 + 116 | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 108 | 0 | 0);
   $1628($7_1 + 108 | 0 | 0) | 0;
   $2_1 = $1747($1_1 | 0, $6_1 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1762($9_1 | 0) | 0;
   $1762($10_1 | 0) | 0;
   global$0 = $7_1 + 256 | 0;
   return $2_1 | 0;
  }
  $2725();
  wasm2js_trap();
 }
 
 function $1765($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $6_1 = $1678() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $1744($5_1 + 64 | 0 | 0, 20 | 0, $6_1 | 0, 65950 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 64 | 0) + $7_1 | 0;
  $6_1 = $1745($5_1 + 64 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $1401($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $1158($5_1 + 16 | 0 | 0) | 0;
  $1628($5_1 + 16 | 0 | 0) | 0;
  $1677($8_1 | 0, $5_1 + 64 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = $7_1 + ($5_1 + 16 | 0) | 0;
  $2_1 = $1747($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + ($6_1 - ($5_1 + 64 | 0) | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 96 | 0;
  return $2_1 | 0;
 }
 
 function $1766($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1767($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1398($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $2748($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1768($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1769($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($1157($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $1401($5_1 + 16 | 0 | 0, $2_1 | 0);
   $2_1 = $1684($5_1 + 16 | 0 | 0) | 0;
   $1628($5_1 + 16 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $1685($5_1 + 16 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $1686($5_1 + 16 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $1770($5_1 + 16 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $1771($5_1 + 16 | 0 | 0) | 0;
    label$6 : {
     if ($1772($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     $2754($5_1 + 16 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP32[($1773($5_1 + 12 | 0 | 0) | 0) >> 2] | 0;
    $1244($1243($5_1 + 28 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $1774($5_1 + 12 | 0 | 0) | 0;
    $1245($5_1 + 28 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1770($0_1) {
  $0_1 = $0_1 | 0;
  return $1776($0_1 | 0, $1775($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1771($0_1) {
  $0_1 = $0_1 | 0;
  return $1776($0_1 | 0, ($1775($0_1 | 0) | 0) + (($1690($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1772($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1777($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1773($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1774($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1775($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1835($0_1 | 0) | 0)) {
    break label$1
   }
   return $2008($0_1 | 0) | 0 | 0;
  }
  return $2011($0_1 | 0) | 0 | 0;
 }
 
 function $1776($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($2459($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1777($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($2042($0_1 | 0) | 0 | 0) == ($2042($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1778($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1779($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66017 | 0) | 0 | 0;
 }
 
 function $1779($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 136 | 0) >> 2] = 37;
  HEAP32[($6_1 + 140 | 0) >> 2] = 0;
  $1743($6_1 + 136 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $1157($2_1 | 0) | 0 | 0);
  $5_1 = $1678() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 123 | 0) + ($1744($6_1 + 123 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 136 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1745($6_1 + 123 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1401($6_1 + 4 | 0 | 0, $2_1 | 0);
  $1780($6_1 + 123 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $1628($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $1781($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
  return $2_1 | 0;
 }
 
 function $1780($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $1222($6_1 | 0) | 0;
  $6_1 = $1684($6_1 | 0) | 0;
  $1728($7_1 + 4 | 0 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($1639($7_1 + 4 | 0 | 0) | 0)) {
     break label$2
    }
    $1717($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + (($2_1 - $0_1 | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $1396($8_1 | 0, $10_1 << 24 >> 24 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $1396($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $10_1 = $1396($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1799($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $1727($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $1801($3_1 + (($9_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($1646($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($1646($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
     HEAP32[$10_1 >> 2] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($1271($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $1396($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 4 | 0;
    HEAP32[$14_1 >> 2] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $2740($7_1 + 4 | 0 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1781($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $7_1 = $1766($4_1 | 0) | 0;
    label$3 : {
     $8_1 = ($2_1 - $1_1 | 0) >> 2 | 0;
     if (($8_1 | 0) < (1 | 0)) {
      break label$3
     }
     if (($1246($0_1 | 0, $1_1 | 0, $8_1 | 0) | 0 | 0) != ($8_1 | 0)) {
      break label$2
     }
    }
    label$4 : {
     $1_1 = ($3_1 - $1_1 | 0) >> 2 | 0;
     $1_1 = ($7_1 | 0) > ($1_1 | 0) ? $7_1 - $1_1 | 0 : 0;
     if (($1_1 | 0) < (1 | 0)) {
      break label$4
     }
     $7_1 = $1797($6_1 + 4 | 0 | 0, $1_1 | 0, $5_1 | 0) | 0;
     $8_1 = $1246($0_1 | 0, $1798($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
     $2754($7_1 | 0) | 0;
     if (($8_1 | 0) != ($1_1 | 0)) {
      break label$2
     }
    }
    label$5 : {
     $1_1 = ($3_1 - $2_1 | 0) >> 2 | 0;
     if (($1_1 | 0) < (1 | 0)) {
      break label$5
     }
     if (($1246($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
      break label$2
     }
    }
    $1768($4_1 | 0, 0 | 0) | 0;
    break label$1;
   }
   $0_1 = 0;
  }
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1782($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1783($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66010 | 0) | 0 | 0;
 }
 
 function $1783($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $1743($6_1 + 248 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $1157($2_1 | 0) | 0 | 0);
  $5_1 = $1678() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 224 | 0) + ($1744($6_1 + 224 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1745($6_1 + 224 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1401($6_1 + 20 | 0 | 0, $2_1 | 0);
  $1780($6_1 + 224 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $1628($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $1781($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1784($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1785($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66017 | 0) | 0 | 0;
 }
 
 function $1785($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 136 | 0) >> 2] = 37;
  HEAP32[($6_1 + 140 | 0) >> 2] = 0;
  $1743($6_1 + 136 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $1157($2_1 | 0) | 0 | 0);
  $5_1 = $1678() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 123 | 0) + ($1744($6_1 + 123 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 136 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1745($6_1 + 123 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1401($6_1 + 4 | 0 | 0, $2_1 | 0);
  $1780($6_1 + 123 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $1628($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $1781($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
  return $2_1 | 0;
 }
 
 function $1786($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1787($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66010 | 0) | 0 | 0;
 }
 
 function $1787($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $1743($6_1 + 248 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $1157($2_1 | 0) | 0 | 0);
  $5_1 = $1678() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 224 | 0) + ($1744($6_1 + 224 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1745($6_1 + 224 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1401($6_1 + 20 | 0 | 0, $2_1 | 0);
  $1780($6_1 + 224 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $1628($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $1781($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1788($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  return $1789($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, +$4_1, 67364 | 0) | 0 | 0;
 }
 
 function $1789($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = 37;
  HEAP32[($6_1 + 364 | 0) >> 2] = 0;
  $7_1 = $1756($6_1 + 360 | 0 | 1 | 0 | 0, $5_1 | 0, $1157($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 316 | 0) >> 2] = $6_1 + 320 | 0;
  $5_1 = $1678() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $8_1 = $1757($2_1 | 0) | 0;
    HEAPF64[($6_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($6_1 + 32 | 0) >> 2] = $8_1;
    $5_1 = $1744($6_1 + 320 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($6_1 + 48 | 0) >> 3] = $4_1;
   $5_1 = $1744($6_1 + 320 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 80 | 0) >> 2] = 109;
  $9_1 = $1758($6_1 + 308 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  $8_1 = $6_1 + 320 | 0;
  label$3 : {
   label$4 : {
    if (($5_1 | 0) < (30 | 0)) {
     break label$4
    }
    $5_1 = $1678() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $8_1 = $1757($2_1 | 0) | 0;
      HEAPF64[($6_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$6_1 >> 2] = $8_1;
      $5_1 = $1759($6_1 + 316 | 0 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($6_1 + 16 | 0) >> 3] = $4_1;
     $5_1 = $1759($6_1 + 316 | 0 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    }
    if (($5_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $1760($9_1 | 0, HEAP32[($6_1 + 316 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
   }
   $10_1 = $8_1 + $5_1 | 0;
   $11_1 = $1745($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 80 | 0) >> 2] = 109;
   $8_1 = $1790($6_1 + 72 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     $7_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
     if (($7_1 | 0) != ($6_1 + 320 | 0 | 0)) {
      break label$8
     }
     $5_1 = $6_1 + 80 | 0;
     break label$7;
    }
    $5_1 = $1082($5_1 << 3 | 0 | 0) | 0;
    if (!$5_1) {
     break label$3
    }
    $1791($8_1 | 0, $5_1 | 0);
    $7_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
   }
   $1401($6_1 + 60 | 0 | 0, $2_1 | 0);
   $1792($7_1 | 0, $11_1 | 0, $10_1 | 0, $5_1 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 60 | 0 | 0);
   $1628($6_1 + 60 | 0 | 0) | 0;
   $2_1 = $1781($1_1 | 0, $5_1 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1793($8_1 | 0) | 0;
   $1762($9_1 | 0) | 0;
   global$0 = $6_1 + 368 | 0;
   return $2_1 | 0;
  }
  $2725();
  wasm2js_trap();
 }
 
 function $1790($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1991($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1791($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($2068($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2068($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($2069($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1792($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $12_1 = 0, $10_1 = 0, $7_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $1222($6_1 | 0) | 0;
  $9_1 = $1684($6_1 | 0) | 0;
  $1728($7_1 + 4 | 0 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $1396($8_1 | 0, $6_1 << 24 >> 24 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
   HEAP32[$11_1 >> 2] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $1396($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $6_1 = $1396($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($1565(HEAP8[$6_1 >> 0] | 0 | 0, $1678() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($1567(HEAP8[$6_1 >> 0] | 0 | 0, $1678() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($1639($7_1 + 4 | 0 | 0) | 0)) {
     break label$8
    }
    $1717($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1 | 0) << 2 | 0) | 0;
    break label$7;
   }
   $1799($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $1727($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $1801($3_1 + (($10_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($1646($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($1646($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
     HEAP32[$12_1 >> 2] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($1271($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $1396($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 4 | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$13
     }
     $11_1 = $6_1 + 1 | 0;
     label$15 : {
      $6_1 = HEAP8[$6_1 >> 0] | 0;
      if (($6_1 | 0) == (46 | 0)) {
       break label$15
      }
      $6_1 = $1396($8_1 | 0, $6_1 | 0) | 0;
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
      HEAP32[$12_1 >> 2] = $6_1;
      $6_1 = $11_1;
      continue label$14;
     }
     break label$14;
    };
    $6_1 = $1726($9_1 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    $12_1 = $14_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $12_1;
    HEAP32[$14_1 >> 2] = $6_1;
    break label$12;
   }
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   $11_1 = $6_1;
  }
  $1717($8_1 | 0, $11_1 | 0, $2_1 | 0, $12_1 | 0) | 0;
  $6_1 = (HEAP32[$5_1 >> 2] | 0) + (($2_1 - $11_1 | 0) << 2 | 0) | 0;
  HEAP32[$5_1 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $2740($7_1 + 4 | 0 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1793($0_1) {
  $0_1 = $0_1 | 0;
  $1791($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1794($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $4$hi;
  return $1795($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, $5$hi | 0, 66467 | 0) | 0 | 0;
 }
 
 function $1795($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[($7_1 + 408 | 0) >> 2] = 37;
  HEAP32[($7_1 + 412 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = $1756($7_1 + 408 | 0 | 1 | 0 | 0, $6_1 | 0, $1157($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($7_1 + 364 | 0) >> 2] = $7_1 + 368 | 0;
  $6_1 = $1678() | 0;
  label$1 : {
   label$2 : {
    if (!$8_1) {
     break label$2
    }
    $9_1 = $1757($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $7_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 48 | 0) >> 2] = $9_1;
    $6_1 = $1744($7_1 + 368 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($7_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $1744($7_1 + 368 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($7_1 + 128 | 0) >> 2] = 109;
  $10_1 = $1758($7_1 + 356 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
  $9_1 = $7_1 + 368 | 0;
  label$3 : {
   label$4 : {
    if (($6_1 | 0) < (30 | 0)) {
     break label$4
    }
    $6_1 = $1678() | 0;
    label$5 : {
     label$6 : {
      if (!$8_1) {
       break label$6
      }
      $9_1 = $1757($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$7_1 >> 2] = $9_1;
      $6_1 = $1759($7_1 + 364 | 0 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $1759($7_1 + 364 | 0 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
    }
    if (($6_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $1760($10_1 | 0, HEAP32[($7_1 + 364 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
   }
   $11_1 = $9_1 + $6_1 | 0;
   $12_1 = $1745($9_1 | 0, $11_1 | 0, $2_1 | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = 109;
   $9_1 = $1790($7_1 + 120 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     $8_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
     if (($8_1 | 0) != ($7_1 + 368 | 0 | 0)) {
      break label$8
     }
     $6_1 = $7_1 + 128 | 0;
     break label$7;
    }
    $6_1 = $1082($6_1 << 3 | 0 | 0) | 0;
    if (!$6_1) {
     break label$3
    }
    $1791($9_1 | 0, $6_1 | 0);
    $8_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
   }
   $1401($7_1 + 108 | 0 | 0, $2_1 | 0);
   $1792($8_1 | 0, $12_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 + 116 | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 108 | 0 | 0);
   $1628($7_1 + 108 | 0 | 0) | 0;
   $2_1 = $1781($1_1 | 0, $6_1 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1793($9_1 | 0) | 0;
   $1762($10_1 | 0) | 0;
   global$0 = $7_1 + 416 | 0;
   return $2_1 | 0;
  }
  $2725();
  wasm2js_trap();
 }
 
 function $1796($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  $6_1 = $1678() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $1744($5_1 + 176 | 0 | 0, 20 | 0, $6_1 | 0, 65950 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 176 | 0) + $7_1 | 0;
  $6_1 = $1745($5_1 + 176 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $1401($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $1222($5_1 + 16 | 0 | 0) | 0;
  $1628($5_1 + 16 | 0 | 0) | 0;
  $1717($8_1 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = ($5_1 + 16 | 0) + ($7_1 << 2 | 0) | 0;
  $2_1 = $1781($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + (($6_1 - ($5_1 + 176 | 0) | 0) << 2 | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 208 | 0;
  return $2_1 | 0;
 }
 
 function $1797($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1624($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $2762($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1798($0_1) {
  $0_1 = $0_1 | 0;
  return $1336($1775($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1799($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1800($0_1 | 0, $1_1 | 0);
 }
 
 function $1800($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2460($0_1 | 0, $1_1 | 0);
 }
 
 function $1801($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1802($0_1 | 0, $1_1 | 0);
 }
 
 function $1802($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2463($0_1 | 0, $1_1 | 0);
 }
 
 function $1803($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
  $1401($8_1 + 4 | 0 | 0, $3_1 | 0);
  $2_1 = $1158($8_1 + 4 | 0 | 0) | 0;
  $1628($8_1 + 4 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($1_1) {
     break label$1
    }
    label$3 : {
     if ($1159($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($1804($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $1_1 = $6_1 + 1 | 0;
       if (($1_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $1_1 = $1804($2_1 | 0, HEAP8[$1_1 >> 0] | 0 | 0, 0 | 0) | 0;
         if (($1_1 | 0) == (69 | 0)) {
          break label$7
         }
         $10_1 = 1;
         if (($1_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $1_1;
         break label$6;
        }
        $9_1 = $6_1 + 2 | 0;
        if (($9_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $10_1 = 2;
        $11_1 = $1804($2_1 | 0, HEAP8[$9_1 >> 0] | 0 | 0, 0 | 0) | 0;
        $9_1 = $1_1;
       }
       HEAP32[($8_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = ($6_1 + $10_1 | 0) + 1 | 0;
       break label$4;
      }
      label$8 : {
       if (!($1161($2_1 | 0, 1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         $6_1 = $6_1 + 1 | 0;
         if (($6_1 | 0) == ($7_1 | 0)) {
          break label$9
         }
         if ($1161($2_1 | 0, 1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$11 : while (1) {
        if ($1159($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
         break label$4
        }
        if (!($1161($2_1 | 0, 1 | 0, $1160($8_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $1162($8_1 + 12 | 0 | 0) | 0;
        continue label$11;
       };
      }
      label$12 : {
       if (($1637($2_1 | 0, $1160($8_1 + 12 | 0 | 0) | 0 | 0) | 0 | 0) != ($1637($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)) {
        break label$12
       }
       $6_1 = $6_1 + 1 | 0;
       $1162($8_1 + 12 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$13 : {
   if (!($1159($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0)) {
    break label$13
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1804($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1805($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $1806($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 624576549;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1394948685;
  $5_1 = $1803($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1807($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $1803($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1270($6_1 | 0) | 0 | 0, ($1270($6_1 | 0) | 0) + ($1271($6_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1808($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1401($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1158($6_1 + 8 | 0 | 0) | 0;
  $1628($6_1 + 8 | 0 | 0) | 0;
  $1809($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1809($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1632($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1810($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1401($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1158($6_1 + 8 | 0 | 0) | 0;
  $1628($6_1 + 8 | 0 | 0) | 0;
  $1811($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1811($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1632($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1812($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1401($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1158($6_1 + 8 | 0 | 0) | 0;
  $1628($6_1 + 8 | 0 | 0) | 0;
  $1813($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1813($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1814($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($5_1 | 0) < (69 | 0) ? $5_1 + 2e3 | 0 : $5_1 >>> 0 < 100 >>> 0 ? $5_1 + 1900 | 0 : $5_1) + -1900 | 0;
  }
 }
 
 function $1814($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($1159($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break label$3
     }
     $0_1 = 6;
     break label$2;
    }
    label$4 : {
     $6_1 = $1160($0_1 | 0) | 0;
     if ($1161($3_1 | 0, 64 | 0, $6_1 | 0) | 0) {
      break label$4
     }
     $0_1 = 4;
     break label$2;
    }
    $1_1 = $1804($3_1 | 0, $6_1 | 0, 0 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      $1162($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if ($1159($0_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
       break label$5
      }
      if (($4_1 | 0) < (2 | 0)) {
       break label$5
      }
      $6_1 = $1160($0_1 | 0) | 0;
      if (!($1161($3_1 | 0, 64 | 0, $6_1 | 0) | 0)) {
       break label$1
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($1804($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label$6;
     };
    }
    if (!($1159($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break label$1
    }
    $0_1 = 2;
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $0_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1815($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $151_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $1401($8_1 | 0, $3_1 | 0);
  $9_1 = $1158($8_1 | 0) | 0;
  $1628($8_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1809($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $1811($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1803($0_1 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1270($1_1 | 0) | 0 | 0, ($1270($1_1 | 0) | 0) + ($1271($1_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $1816($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 2032480100;
       HEAP32[$8_1 >> 2] = 623865125;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1803($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 1680158061;
       HEAP32[$8_1 >> 2] = 623728933;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1803($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
       break label$2;
      case 7:
       $1817($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $1818($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $1819($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $1820($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $1821($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $1822($0_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $1823($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $14_1 = 0;
       $15_1 = HEAPU8[($14_1 + 85304 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 85305 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 85306 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 85307 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP8[($8_1 + 7 | 0) >> 0] = $15_1;
       HEAP8[($8_1 + 8 | 0) >> 0] = $15_1 >>> 8 | 0;
       HEAP8[($8_1 + 9 | 0) >> 0] = $15_1 >>> 16 | 0;
       HEAP8[($8_1 + 10 | 0) >> 0] = $15_1 >>> 24 | 0;
       $13_1 = 0;
       i64toi32_i32$0 = HEAPU8[($13_1 + 85297 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 85298 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 85299 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 85300 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[($13_1 + 85301 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 85302 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 85303 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 85304 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $151_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[$8_1 >> 2] = $151_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1803($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 11 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP8[($8_1 + 4 | 0) >> 0] = HEAPU8[(0 + 85312 | 0) >> 0] | 0;
       $16_1 = 0;
       HEAP32[$8_1 >> 2] = HEAPU8[($16_1 + 85308 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 85309 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 85310 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 85311 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1803($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 5 | 0 | 0) | 0;
       break label$2;
      case 18:
       $1824($0_1 | 0, $5_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$0 = $8_1;
       i64toi32_i32$1 = 1394948685;
       HEAP32[$8_1 >> 2] = 624576549;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1803($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
       break label$2;
      case 54:
       $1825($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1803($0_1 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1270($1_1 | 0) | 0 | 0, ($1270($1_1 | 0) | 0) + ($1271($1_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $1813($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $1826($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $1827($0_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1816($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1814($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1817($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1814($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (23 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1818($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1814($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1819($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1814($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (365 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1820($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $3_1 = $1814($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   $3_1 = $3_1 + -1 | 0;
   if ($3_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($5_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $3_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $5_1 | 4 | 0;
 }
 
 function $1821($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1814($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (59 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1822($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if ($1159($1_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
     break label$1
    }
    if (!($1161($4_1 | 0, 1 | 0, $1160($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $1162($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($1159($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1823($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($1271($0_1 | 0) | 0 | 0) != (0 - ($1271($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $4_1 = $1632($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  label$2 : {
   if (($4_1 | 0) != ($0_1 | 0)) {
    break label$2
   }
   if (($5_1 | 0) != (12 | 0)) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($4_1 - $0_1 | 0 | 0) != (12 | 0)) {
    break label$3
   }
   if (($5_1 | 0) > (11 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $5_1 + 12 | 0;
  }
 }
 
 function $1824($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1814($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (60 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1825($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1814($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (6 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1826($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1814($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1 + -1900 | 0;
  }
 }
 
 function $1827($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($1159($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break label$3
     }
     $1_1 = 6;
     break label$2;
    }
    label$4 : {
     if (($1804($4_1 | 0, $1160($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) == (37 | 0)) {
      break label$4
     }
     $1_1 = 4;
     break label$2;
    }
    if (!($1159($1162($1_1 | 0) | 0 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break label$1
    }
    $1_1 = 2;
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $1_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1828($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
  $1401($8_1 + 4 | 0 | 0, $3_1 | 0);
  $2_1 = $1222($8_1 + 4 | 0 | 0) | 0;
  $1628($8_1 + 4 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($1_1) {
     break label$1
    }
    label$3 : {
     if ($1223($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($1829($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $1_1 = $6_1 + 4 | 0;
       if (($1_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $1_1 = $1829($2_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, 0 | 0) | 0;
         if (($1_1 | 0) == (69 | 0)) {
          break label$7
         }
         $10_1 = 4;
         if (($1_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $1_1;
         break label$6;
        }
        $9_1 = $6_1 + 8 | 0;
        if (($9_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $10_1 = 8;
        $11_1 = $1829($2_1 | 0, HEAP32[$9_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $9_1 = $1_1;
       }
       HEAP32[($8_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = ($6_1 + $10_1 | 0) + 4 | 0;
       break label$4;
      }
      label$8 : {
       if (!($1225($2_1 | 0, 1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         $6_1 = $6_1 + 4 | 0;
         if (($6_1 | 0) == ($7_1 | 0)) {
          break label$9
         }
         if ($1225($2_1 | 0, 1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$11 : while (1) {
        if ($1223($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
         break label$4
        }
        if (!($1225($2_1 | 0, 1 | 0, $1224($8_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $1226($8_1 + 12 | 0 | 0) | 0;
        continue label$11;
       };
      }
      label$12 : {
       if (($1689($2_1 | 0, $1224($8_1 + 12 | 0 | 0) | 0 | 0) | 0 | 0) != ($1689($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)) {
        break label$12
       }
       $6_1 = $6_1 + 4 | 0;
       $1226($8_1 + 12 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$13 : {
   if (!($1223($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0)) {
    break label$13
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1829($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1830($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $1831($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85496 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85500 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85488 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85492 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85480 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85484 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85472 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85476 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $1828($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $1832($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $1828($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1833($6_1 | 0) | 0 | 0, ($1833($6_1 | 0) | 0) + (($1690($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1833($0_1) {
  $0_1 = $0_1 | 0;
  return $1332($1834($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1834($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1835($0_1 | 0) | 0)) {
    break label$1
   }
   return $1922($0_1 | 0) | 0 | 0;
  }
  return $2467($0_1 | 0) | 0 | 0;
 }
 
 function $1835($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1920($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $1836($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1920($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1837($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1920($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0 | 0;
 }
 
 function $1838($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1401($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1222($6_1 + 8 | 0 | 0) | 0;
  $1628($6_1 + 8 | 0 | 0) | 0;
  $1839($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1839($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1687($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1840($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1401($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1222($6_1 + 8 | 0 | 0) | 0;
  $1628($6_1 + 8 | 0 | 0) | 0;
  $1841($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1841($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1687($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1842($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1401($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1222($6_1 + 8 | 0 | 0) | 0;
  $1628($6_1 + 8 | 0 | 0) | 0;
  $1843($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1843($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1844($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($5_1 | 0) < (69 | 0) ? $5_1 + 2e3 | 0 : $5_1 >>> 0 < 100 >>> 0 ? $5_1 + 1900 | 0 : $5_1) + -1900 | 0;
  }
 }
 
 function $1844($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($1223($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break label$3
     }
     $0_1 = 6;
     break label$2;
    }
    label$4 : {
     $6_1 = $1224($0_1 | 0) | 0;
     if ($1225($3_1 | 0, 64 | 0, $6_1 | 0) | 0) {
      break label$4
     }
     $0_1 = 4;
     break label$2;
    }
    $1_1 = $1829($3_1 | 0, $6_1 | 0, 0 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      $1226($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if ($1223($0_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
       break label$5
      }
      if (($4_1 | 0) < (2 | 0)) {
       break label$5
      }
      $6_1 = $1224($0_1 | 0) | 0;
      if (!($1225($3_1 | 0, 64 | 0, $6_1 | 0) | 0)) {
       break label$1
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($1829($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label$6;
     };
    }
    if (!($1223($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break label$1
    }
    $0_1 = 2;
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $0_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1845($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $73_1 = 0, $76_1 = 0, $78_1 = 0, $80_1 = 0, $94_1 = 0, $97_1 = 0, $99_1 = 0, $101_1 = 0, $184_1 = 0, $186_1 = 0, $207_1 = 0, $210_1 = 0, $212_1 = 0, $214_1 = 0;
  $8_1 = global$0 - 48 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $1401($8_1 | 0, $3_1 | 0);
  $9_1 = $1222($8_1 | 0) | 0;
  $1628($8_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1839($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $1841($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1828($0_1 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1833($1_1 | 0) | 0 | 0, ($1833($1_1 | 0) | 0) + (($1690($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $1846($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85352 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85356 | 0) >> 2] | 0;
       $73_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $73_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85344 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85348 | 0) >> 2] | 0;
       $76_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $76_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85336 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85340 | 0) >> 2] | 0;
       $78_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $78_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85328 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85332 | 0) >> 2] | 0;
       $80_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $80_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1828($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85384 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85388 | 0) >> 2] | 0;
       $94_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $94_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85376 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85380 | 0) >> 2] | 0;
       $97_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $97_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85368 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85372 | 0) >> 2] | 0;
       $99_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $99_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85360 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85364 | 0) >> 2] | 0;
       $101_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $101_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1828($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 7:
       $1847($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $1848($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $1849($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $1850($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $1851($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $1852($0_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $1853($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $6_1 = $1031($8_1 | 0, 85392 | 0, 44 | 0) | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $1828($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0, $6_1 + 44 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(0 + 85456 | 0) >> 2] | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85448 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85452 | 0) >> 2] | 0;
       $184_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $184_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85440 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85444 | 0) >> 2] | 0;
       $186_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $186_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1828($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 20 | 0 | 0) | 0;
       break label$2;
      case 18:
       $1854($0_1 | 0, $5_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85496 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85500 | 0) >> 2] | 0;
       $207_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $207_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85488 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85492 | 0) >> 2] | 0;
       $210_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $210_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85480 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85484 | 0) >> 2] | 0;
       $212_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $212_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85472 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85476 | 0) >> 2] | 0;
       $214_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $214_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1828($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 54:
       $1855($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1828($0_1 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1833($1_1 | 0) | 0 | 0, ($1833($1_1 | 0) | 0) + (($1690($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $1843($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $1856($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $1857($0_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 48 | 0;
  return $4_1 | 0;
 }
 
 function $1846($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1844($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1847($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1844($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (23 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1848($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1844($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1849($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1844($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (365 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1850($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $3_1 = $1844($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   $3_1 = $3_1 + -1 | 0;
   if ($3_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($5_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $3_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $5_1 | 4 | 0;
 }
 
 function $1851($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1844($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (59 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1852($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if ($1223($1_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
     break label$1
    }
    if (!($1225($4_1 | 0, 1 | 0, $1224($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $1226($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($1223($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1853($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($1690($0_1 | 0) | 0 | 0) != (0 - ($1690($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $4_1 = $1687($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  label$2 : {
   if (($4_1 | 0) != ($0_1 | 0)) {
    break label$2
   }
   if (($5_1 | 0) != (12 | 0)) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($4_1 - $0_1 | 0 | 0) != (12 | 0)) {
    break label$3
   }
   if (($5_1 | 0) > (11 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $5_1 + 12 | 0;
  }
 }
 
 function $1854($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1844($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (60 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1855($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1844($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (6 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1856($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1844($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1 + -1900 | 0;
  }
 }
 
 function $1857($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($1223($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break label$3
     }
     $1_1 = 6;
     break label$2;
    }
    label$4 : {
     if (($1829($4_1 | 0, $1224($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) == (37 | 0)) {
      break label$4
     }
     $1_1 = 4;
     break label$2;
    }
    if (!($1223($1226($1_1 | 0) | 0 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break label$1
    }
    $1_1 = 2;
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $1_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1858($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 116 | 0;
  $1859($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $0_1 = $1860($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $0_1 | 0;
 }
 
 function $1859($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 15 | 0) >> 0] = 0;
  HEAP8[($6_1 + 14 | 0) >> 0] = $5_1;
  HEAP8[($6_1 + 13 | 0) >> 0] = $4_1;
  HEAP8[($6_1 + 12 | 0) >> 0] = 37;
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   $1861($6_1 + 13 | 0 | 0, $6_1 + 14 | 0 | 0);
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($1582($1_1 | 0, $1862($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 12 | 0 | 0, $3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $1860($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1863($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1861($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAPU8[$0_1 >> 0] | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
  HEAP8[$1_1 >> 0] = $2_1;
 }
 
 function $1862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1863($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2469($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1864($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 416 | 0;
  $1865($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $0_1 = $1866($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 416 | 0;
  return $0_1 | 0;
 }
 
 function $1865($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 132 | 0;
  $1859($0_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 32 | 0;
  label$1 : {
   $0_1 = $1868($1_1 | 0, $6_1 + 12 | 0 | 0, $1867($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($0_1 | 0) != (-1 | 0)) {
    break label$1
   }
   $2735(66312 | 0);
   wasm2js_trap();
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($0_1 << 2 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
 }
 
 function $1866($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1869($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1867($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1868($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $1681($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $3_1 = $1598($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1682($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1869($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2483($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1870($0_1) {
  $0_1 = $0_1 | 0;
  return $1871() | 0 | 0;
 }
 
 function $1871() {
  return $1872() | 0 | 0;
 }
 
 function $1872() {
  return 127 | 0;
 }
 
 function $1873($0_1) {
  $0_1 = $0_1 | 0;
  return $1871() | 0 | 0;
 }
 
 function $1874($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1247($0_1 | 0) | 0;
 }
 
 function $1875($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1247($0_1 | 0) | 0;
 }
 
 function $1876($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1247($0_1 | 0) | 0;
 }
 
 function $1877($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1767($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1878($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1879($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1880($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1881($0_1) {
  $0_1 = $0_1 | 0;
  return $1871() | 0 | 0;
 }
 
 function $1882($0_1) {
  $0_1 = $0_1 | 0;
  return $1871() | 0 | 0;
 }
 
 function $1883($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1247($0_1 | 0) | 0;
 }
 
 function $1884($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1247($0_1 | 0) | 0;
 }
 
 function $1885($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1247($0_1 | 0) | 0;
 }
 
 function $1886($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1767($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1887($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1888($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1889($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1890($0_1) {
  $0_1 = $0_1 | 0;
  return $1891() | 0 | 0;
 }
 
 function $1891() {
  return $1892() | 0 | 0;
 }
 
 function $1892() {
  return 2147483647 | 0;
 }
 
 function $1893($0_1) {
  $0_1 = $0_1 | 0;
  return $1891() | 0 | 0;
 }
 
 function $1894($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1247($0_1 | 0) | 0;
 }
 
 function $1895($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1896($0_1 | 0) | 0;
 }
 
 function $1896($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $1897($0_1 | 0, $1_1 + 15 | 0 | 0, $1_1 + 14 | 0 | 0) | 0;
  $1898($0_1 | 0, 0 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1897($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2423($2497($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1898($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1899($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1896($0_1 | 0) | 0;
 }
 
 function $1900($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1797($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1901($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1902($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1903($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1904($0_1) {
  $0_1 = $0_1 | 0;
  return $1891() | 0 | 0;
 }
 
 function $1905($0_1) {
  $0_1 = $0_1 | 0;
  return $1891() | 0 | 0;
 }
 
 function $1906($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1247($0_1 | 0) | 0;
 }
 
 function $1907($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1896($0_1 | 0) | 0;
 }
 
 function $1908($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1896($0_1 | 0) | 0;
 }
 
 function $1909($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1797($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1910($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1911($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1912($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1913($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $28_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1914($1264($1_1 | 0) | 0 | 0);
  $0_1 = $1915($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($1257($1_1 | 0) | 0) {
     break label$2
    }
    $1_1 = $1268($1_1 | 0) | 0;
    $3_1 = $1259($0_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $28_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[i64toi32_i32$0 >> 2] = $28_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1249($0_1 | 0, $1261($0_1 | 0) | 0 | 0);
    break label$1;
   }
   $2744($0_1 | 0, $1307($1389($1_1 | 0) | 0 | 0) | 0 | 0, $1276($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1914($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1915($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2498($1364($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1916($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $28_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1918($1917($1_1 | 0) | 0 | 0);
  $0_1 = $1919($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($1835($1_1 | 0) | 0) {
     break label$2
    }
    $1_1 = $1920($1_1 | 0) | 0;
    $3_1 = $1921($0_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $28_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[i64toi32_i32$0 >> 2] = $28_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1898($0_1 | 0, $1837($0_1 | 0) | 0 | 0);
    break label$1;
   }
   $2758($0_1 | 0, $1332($1922($1_1 | 0) | 0 | 0) | 0 | 0, $1836($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1917($0_1) {
  $0_1 = $0_1 | 0;
  return $2442($0_1 | 0) | 0 | 0;
 }
 
 function $1918($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1919($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2499($2422($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1920($0_1) {
  $0_1 = $0_1 | 0;
  return $2453($0_1 | 0) | 0 | 0;
 }
 
 function $1921($0_1) {
  $0_1 = $0_1 | 0;
  return $2444($0_1 | 0) | 0 | 0;
 }
 
 function $1922($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1920($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1923($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 272 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 264 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 268 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 110;
  $1_1 = $1758($7_1 + 152 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $1401($7_1 + 144 | 0 | 0, $4_1 | 0);
  $8_1 = $1158($7_1 + 144 | 0 | 0) | 0;
  HEAP8[($7_1 + 143 | 0) >> 0] = 0;
  label$1 : {
   if (!($1925($7_1 + 268 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 144 | 0 | 0, $1157($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 143 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 148 | 0 | 0, $7_1 + 260 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 67168 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 67169 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 67170 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 67171 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 135 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 136 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 137 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 138 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 67165 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67166 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67167 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67168 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = HEAPU8[($10_1 + 67161 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67162 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67163 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67164 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 132 | 0) >> 2] = i64toi32_i32$1;
   $1677($8_1 | 0, $7_1 + 128 | 0 | 0, $7_1 + 138 | 0 | 0, $7_1 + 118 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 109;
   $8_1 = $1758($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $4_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1926($1_1 | 0) | 0) | 0 | 0) < (99 | 0)) {
      break label$3
     }
     $1760($8_1 | 0, $1082(((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1926($1_1 | 0) | 0) | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1926($8_1 | 0) | 0)) {
      break label$2
     }
     $4_1 = $1926($8_1 | 0) | 0;
    }
    label$4 : {
     if ((HEAPU8[($7_1 + 143 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
     }
     HEAP8[$4_1 >> 0] = 45;
     $4_1 = $4_1 + 1 | 0;
    }
    $2_1 = $1926($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($2_1 >>> 0 < (HEAP32[($7_1 + 148 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$4_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($1584($7_1 + 16 | 0 | 0, 66234 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $1762($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$4_1 >> 0] = HEAPU8[(($7_1 + 128 | 0) + (($1722($7_1 + 118 | 0 | 0, $1927($7_1 + 118 | 0 | 0) | 0 | 0, $2_1 | 0) | 0) - ($7_1 + 118 | 0) | 0) | 0) >> 0] | 0;
      $4_1 = $4_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue label$6;
     };
    }
    $2735(65796 | 0);
    wasm2js_trap();
   }
   $2725();
   wasm2js_trap();
  }
  label$8 : {
   if (!($1159($7_1 + 268 | 0 | 0, $7_1 + 264 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 268 | 0) >> 2] | 0;
  $1628($7_1 + 144 | 0 | 0) | 0;
  $1762($1_1 | 0) | 0;
  global$0 = $7_1 + 272 | 0;
  return $2_1 | 0;
 }
 
 function $1924($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1925($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $373_1 = 0;
  $11_1 = global$0 - 528 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 520 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 524 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!($1159($0_1 | 0, $11_1 + 524 | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
    $0_1 = 0;
    break label$1;
   }
   HEAP32[($11_1 + 76 | 0) >> 2] = 110;
   $12_1 = $1929($11_1 + 104 | 0 | 0, $11_1 + 112 | 0 | 0, $11_1 + 76 | 0 | 0) | 0;
   $10_1 = $1930($12_1 | 0) | 0;
   HEAP32[($11_1 + 100 | 0) >> 2] = $10_1;
   HEAP32[($11_1 + 96 | 0) >> 2] = $10_1 + 400 | 0;
   $13_1 = $1247($11_1 + 76 | 0 | 0) | 0;
   $14_1 = $1247($11_1 + 64 | 0 | 0) | 0;
   $15_1 = $1247($11_1 + 52 | 0 | 0) | 0;
   $16_1 = $1247($11_1 + 40 | 0 | 0) | 0;
   $17_1 = $1247($11_1 + 28 | 0 | 0) | 0;
   $1931($2_1 | 0, $3_1 | 0, $11_1 + 92 | 0 | 0, $11_1 + 91 | 0 | 0, $11_1 + 90 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 24 | 0 | 0);
   HEAP32[$9_1 >> 2] = $1926($8_1 | 0) | 0;
   $18_1 = $4_1 & 512 | 0;
   $3_1 = 0;
   $1_1 = 0;
   label$3 : while (1) {
    $2_1 = $1_1;
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        if (($3_1 | 0) == (4 | 0)) {
         break label$7
        }
        if ($1159($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
         break label$7
        }
        $10_1 = 0;
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             switch (HEAPU8[(($11_1 + 92 | 0) + $3_1 | 0) >> 0] | 0 | 0) {
             case 1:
              if (($3_1 | 0) == (3 | 0)) {
               break label$5
              }
              label$14 : {
               if (!($1161($7_1 | 0, 1 | 0, $1160($0_1 | 0) | 0 | 0) | 0)) {
                break label$14
               }
               $1932($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
               $2749($17_1 | 0, $1933($11_1 + 16 | 0 | 0) | 0 | 0);
               break label$11;
              }
              HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
              $0_1 = 0;
              break label$6;
             case 3:
              break label$10;
             case 0:
              break label$12;
             case 4:
              break label$8;
             case 2:
              break label$9;
             default:
              break label$4;
             };
            }
            if (($3_1 | 0) == (3 | 0)) {
             break label$5
            }
           }
           label$15 : while (1) {
            if ($1159($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break label$5
            }
            if (!($1161($7_1 | 0, 1 | 0, $1160($0_1 | 0) | 0 | 0) | 0)) {
             break label$5
            }
            $1932($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
            $2749($17_1 | 0, $1933($11_1 + 16 | 0 | 0) | 0 | 0);
            continue label$15;
           };
          }
          label$16 : {
           if (!($1271($15_1 | 0) | 0)) {
            break label$16
           }
           if ((($1160($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1646($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
            break label$16
           }
           $1162($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 0;
           $1_1 = ($1271($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $2_1;
           break label$4;
          }
          label$17 : {
           if (!($1271($16_1 | 0) | 0)) {
            break label$17
           }
           if ((($1160($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1646($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
            break label$17
           }
           $1162($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 1;
           $1_1 = ($1271($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $2_1;
           break label$4;
          }
          label$18 : {
           if (!($1271($15_1 | 0) | 0)) {
            break label$18
           }
           if (!($1271($16_1 | 0) | 0)) {
            break label$18
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break label$6;
          }
          label$19 : {
           if ($1271($15_1 | 0) | 0) {
            break label$19
           }
           if (!($1271($16_1 | 0) | 0)) {
            break label$5
           }
          }
          HEAP8[$6_1 >> 0] = !($1271($16_1 | 0) | 0);
          break label$5;
         }
         label$20 : {
          if ($2_1) {
           break label$20
          }
          if ($3_1 >>> 0 < 2 >>> 0) {
           break label$20
          }
          if ($18_1) {
           break label$20
          }
          $1_1 = 0;
          if (!(($3_1 | 0) == (2 | 0) & ((HEAPU8[($11_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0) | 0)) {
           break label$4
          }
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = $1734($14_1 | 0) | 0;
         $10_1 = $1934($11_1 + 16 | 0 | 0, $11_1 + 12 | 0 | 0) | 0;
         label$21 : {
          if (!$3_1) {
           break label$21
          }
          if ((HEAPU8[(($3_1 + ($11_1 + 92 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
           break label$21
          }
          label$22 : {
           label$23 : while (1) {
            HEAP32[($11_1 + 12 | 0) >> 2] = $1735($14_1 | 0) | 0;
            if (!($1935($10_1 | 0, $11_1 + 12 | 0 | 0) | 0)) {
             break label$22
            }
            if (!($1161($7_1 | 0, 1 | 0, HEAP8[($1936($10_1 | 0) | 0) >> 0] | 0 | 0) | 0)) {
             break label$22
            }
            $1937($10_1 | 0) | 0;
            continue label$23;
           };
          }
          HEAP32[($11_1 + 12 | 0) >> 2] = $1734($14_1 | 0) | 0;
          label$24 : {
           $1_1 = $1938($10_1 | 0, $11_1 + 12 | 0 | 0) | 0;
           if ($1_1 >>> 0 > ($1271($17_1 | 0) | 0) >>> 0) {
            break label$24
           }
           HEAP32[($11_1 + 12 | 0) >> 2] = $1735($17_1 | 0) | 0;
           if ($1940($1939($11_1 + 12 | 0 | 0, $1_1 | 0) | 0 | 0, $1735($17_1 | 0) | 0 | 0, $1734($14_1 | 0) | 0 | 0) | 0) {
            break label$21
           }
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $1734($14_1 | 0) | 0;
          HEAP32[$10_1 >> 2] = HEAP32[($1934($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
         label$25 : {
          label$26 : while (1) {
           HEAP32[($11_1 + 8 | 0) >> 2] = $1735($14_1 | 0) | 0;
           if (!($1935($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
            break label$25
           }
           if ($1159($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break label$25
           }
           if ((($1160($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1936($11_1 + 12 | 0 | 0) | 0) >> 0] | 0 | 0)) {
            break label$25
           }
           $1162($0_1 | 0) | 0;
           $1937($11_1 + 12 | 0 | 0) | 0;
           continue label$26;
          };
         }
         if (!$18_1) {
          break label$5
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $1735($14_1 | 0) | 0;
         if (!($1935($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
          break label$5
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$6;
        }
        label$27 : {
         label$28 : while (1) {
          if ($1159($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
           break label$27
          }
          label$29 : {
           label$30 : {
            $1_1 = $1160($0_1 | 0) | 0;
            if (!($1161($7_1 | 0, 64 | 0, $1_1 | 0) | 0)) {
             break label$30
            }
            label$31 : {
             $4_1 = HEAP32[$9_1 >> 2] | 0;
             if (($4_1 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
              break label$31
             }
             $1941($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
             $4_1 = HEAP32[$9_1 >> 2] | 0;
            }
            HEAP32[$9_1 >> 2] = $4_1 + 1 | 0;
            HEAP8[$4_1 >> 0] = $1_1;
            $10_1 = $10_1 + 1 | 0;
            break label$29;
           }
           if (!($1271($13_1 | 0) | 0)) {
            break label$27
           }
           if (!$10_1) {
            break label$27
           }
           if (($1_1 & 255 | 0 | 0) != ((HEAPU8[($11_1 + 90 | 0) >> 0] | 0) & 255 | 0 | 0)) {
            break label$27
           }
           label$32 : {
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
            if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
             break label$32
            }
            $1942($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
           HEAP32[$1_1 >> 2] = $10_1;
           $10_1 = 0;
          }
          $1162($0_1 | 0) | 0;
          continue label$28;
         };
        }
        label$33 : {
         $373_1 = $1930($12_1 | 0) | 0;
         $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         if (($373_1 | 0) == ($1_1 | 0)) {
          break label$33
         }
         if (!$10_1) {
          break label$33
         }
         label$34 : {
          if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
           break label$34
          }
          $1942($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
          $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
         HEAP32[$1_1 >> 2] = $10_1;
        }
        label$35 : {
         if ((HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$36 : {
          label$37 : {
           if ($1159($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break label$37
           }
           if ((($1160($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($11_1 + 91 | 0) >> 0] | 0 | 0)) {
            break label$36
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
         }
         label$38 : while (1) {
          $1162($0_1 | 0) | 0;
          if ((HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
           break label$35
          }
          label$39 : {
           label$40 : {
            if ($1159($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break label$40
            }
            if ($1161($7_1 | 0, 64 | 0, $1160($0_1 | 0) | 0 | 0) | 0) {
             break label$39
            }
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break label$6;
          }
          label$41 : {
           if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
            break label$41
           }
           $1941($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
          }
          $10_1 = $1160($0_1 | 0) | 0;
          $1_1 = HEAP32[$9_1 >> 2] | 0;
          HEAP32[$9_1 >> 2] = $1_1 + 1 | 0;
          HEAP8[$1_1 >> 0] = $10_1;
          HEAP32[($11_1 + 24 | 0) >> 2] = (HEAP32[($11_1 + 24 | 0) >> 2] | 0) + -1 | 0;
          continue label$38;
         };
        }
        $1_1 = $2_1;
        if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1926($8_1 | 0) | 0 | 0)) {
         break label$4
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$6;
       }
       label$42 : {
        if (!$2_1) {
         break label$42
        }
        $10_1 = 1;
        label$43 : while (1) {
         if ($10_1 >>> 0 >= ($1271($2_1 | 0) | 0) >>> 0) {
          break label$42
         }
         label$44 : {
          label$45 : {
           if ($1159($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break label$45
           }
           if ((($1160($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($1638($2_1 | 0, $10_1 | 0) | 0) >> 0] | 0 | 0)) {
            break label$44
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
         }
         $1162($0_1 | 0) | 0;
         $10_1 = $10_1 + 1 | 0;
         continue label$43;
        };
       }
       $0_1 = 1;
       if (($1930($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $0_1 = 0;
       HEAP32[($11_1 + 16 | 0) >> 2] = 0;
       $1649($13_1 | 0, $1930($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, $11_1 + 16 | 0 | 0);
       label$46 : {
        if (!(HEAP32[($11_1 + 16 | 0) >> 2] | 0)) {
         break label$46
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        break label$6;
       }
       $0_1 = 1;
      }
      $2740($17_1 | 0) | 0;
      $2740($16_1 | 0) | 0;
      $2740($15_1 | 0) | 0;
      $2740($14_1 | 0) | 0;
      $2740($13_1 | 0) | 0;
      $1943($12_1 | 0) | 0;
      break label$1;
     }
     $1_1 = $2_1;
    }
    $3_1 = $3_1 + 1 | 0;
    continue label$3;
   };
  }
  global$0 = $11_1 + 528 | 0;
  return $0_1 | 0;
 }
 
 function $1926($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1944($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1927($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 10 | 0 | 0;
 }
 
 function $1928($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2698($0_1 | 0, $1_1 | 0) | 0;
  $1410($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1929($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1953($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1930($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1954($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1931($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $1_1 = $1955($1_1 | 0) | 0;
    $1956($10_1 + 4 | 0 | 0, $1_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1957($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1251($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2740($10_1 + 4 | 0 | 0) | 0;
    $1958($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1251($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2740($10_1 + 4 | 0 | 0) | 0;
    HEAP8[$3_1 >> 0] = $1959($1_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $1960($1_1 | 0) | 0;
    $1961($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1251($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2740($10_1 + 4 | 0 | 0) | 0;
    $1962($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1251($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2740($10_1 + 4 | 0 | 0) | 0;
    $1_1 = $1963($1_1 | 0) | 0;
    break label$1;
   }
   $1_1 = $1964($1_1 | 0) | 0;
   $1965($10_1 + 4 | 0 | 0, $1_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1966($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1251($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2740($10_1 + 4 | 0 | 0) | 0;
   $1967($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1251($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2740($10_1 + 4 | 0 | 0) | 0;
   HEAP8[$3_1 >> 0] = $1968($1_1 | 0) | 0;
   HEAP8[$4_1 >> 0] = $1969($1_1 | 0) | 0;
   $1970($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1251($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2740($10_1 + 4 | 0 | 0) | 0;
   $1971($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1251($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2740($10_1 + 4 | 0 | 0) | 0;
   $1_1 = $1972($1_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $1_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1932($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1973($0_1 | 0, ($1170(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24 >> 24 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1933($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1934($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1974($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1935($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1975($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1936($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1937($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1938($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1976($0_1 | 0) | 0) - ($1974($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $1939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1978($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1940($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1977($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1941($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1979($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1926($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($1379() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $1379() | 0;
  }
  $5_1 = $5_1 >>> 0 > 1 >>> 0 ? $5_1 : 1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1926($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (110 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1926($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1085($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (110 | 0)) {
     break label$6
    }
    $1980($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 109;
   $4_1 = $1758($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1981($0_1 | 0, $4_1 | 0) | 0;
   $1762($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1926($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1926($0_1 | 0) | 0) + $5_1 | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2725();
  wasm2js_trap();
 }
 
 function $1942($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1982($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1930($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($1379() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $1379() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1930($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (110 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1930($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1085($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (110 | 0)) {
     break label$6
    }
    $1983($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 109;
   $4_1 = $1929($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1984($0_1 | 0, $4_1 | 0) | 0;
   $1943($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1930($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1930($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2725();
  wasm2js_trap();
 }
 
 function $1943($0_1) {
  $0_1 = $0_1 | 0;
  $1986($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1944($0_1) {
  $0_1 = $0_1 | 0;
  return $2699($0_1 | 0) | 0 | 0;
 }
 
 function $1945($0_1) {
  $0_1 = $0_1 | 0;
  return $2700($0_1 | 0) | 0 | 0;
 }
 
 function $1946($0_1) {
  $0_1 = $0_1 | 0;
  return $1411($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1947($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 136 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 140 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 110;
  $8_1 = $1758($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $1401($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $1158($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($1925($7_1 + 140 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $1157($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 132 | 0 | 0) | 0)) {
    break label$1
   }
   $1948($6_1 | 0);
   label$2 : {
    if ((HEAPU8[($7_1 + 15 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $2749($6_1 | 0, $1394($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $1394($1_1 | 0, 48 | 0) | 0;
   $2_1 = $1926($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $4_1 = $3_1 + -1 | 0;
   $1_1 = $1_1 & 255 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break label$3
     }
     if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + 1 | 0;
     continue label$4;
    };
   }
   $1949($6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($1159($7_1 + 140 | 0 | 0, $7_1 + 136 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
  $1628($7_1 + 16 | 0 | 0) | 0;
  $1762($8_1 | 0) | 0;
  global$0 = $7_1 + 144 | 0;
  return $2_1 | 0;
 }
 
 function $1948($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1271($0_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($1257($0_1 | 0) | 0)) {
     break label$2
    }
    $3_1 = $1343($0_1 | 0) | 0;
    HEAP8[($1_1 + 15 | 0) >> 0] = 0;
    $1351($3_1 | 0, $1_1 + 15 | 0 | 0);
    $1376($0_1 | 0, 0 | 0);
    break label$1;
   }
   $3_1 = $1344($0_1 | 0) | 0;
   HEAP8[($1_1 + 14 | 0) >> 0] = 0;
   $1351($3_1 | 0, $1_1 + 14 | 0 | 0);
   $1350($0_1 | 0, 0 | 0);
  }
  $1269($0_1 | 0, $2_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1949($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1271($0_1 | 0) | 0;
  $5_1 = $1272($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $1366($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if ($1950($0_1 | 0, $1_1 | 0) | 0) {
     break label$2
    }
    label$3 : {
     if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
      break label$3
     }
     $1951($0_1 | 0, $5_1 | 0, ($4_1 - $5_1 | 0) + $6_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
    }
    $1267($0_1 | 0, $6_1 | 0);
    $5_1 = ($1253($0_1 | 0) | 0) + $4_1 | 0;
    label$4 : {
     label$5 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break label$4
      }
      $1351($5_1 | 0, $1_1 | 0);
      $1_1 = $1_1 + 1 | 0;
      $5_1 = $5_1 + 1 | 0;
      continue label$5;
     };
    }
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $1351($5_1 | 0, $3_1 + 15 | 0 | 0);
    $1952($0_1 | 0, $6_1 + $4_1 | 0 | 0);
    break label$1;
   }
   $1_1 = $1263($3_1 | 0, $1_1 | 0, $2_1 | 0, $1260($0_1 | 0) | 0 | 0) | 0;
   $2747($0_1 | 0, $1270($1_1 | 0) | 0 | 0, $1271($1_1 | 0) | 0 | 0) | 0;
   $2740($1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1950($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2500($1270($0_1 | 0) | 0 | 0, (($1270($0_1 | 0) | 0) + ($1271($0_1 | 0) | 0) | 0) + 1 | 0 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1951($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $2448($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $6_1 = ($3_1 - $5_1 | 0) + $6_1 | 0;
  $1376($0_1 | 0, $6_1 | 0);
  $1249($0_1 | 0, $6_1 | 0);
 }
 
 function $1952($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($1257($0_1 | 0) | 0)) {
    break label$1
   }
   $1376($0_1 | 0, $1_1 | 0);
   return;
  }
  $1350($0_1 | 0, $1_1 | 0);
 }
 
 function $1953($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2701($0_1 | 0, $1_1 | 0) | 0;
  $1410($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1954($0_1) {
  $0_1 = $0_1 | 0;
  return $2705($0_1 | 0) | 0 | 0;
 }
 
 function $1955($0_1) {
  $0_1 = $0_1 | 0;
  return $1633($0_1 | 0, 104360 | 0) | 0 | 0;
 }
 
 function $1956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1957($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1958($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1959($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1960($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1961($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1962($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1963($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1964($0_1) {
  $0_1 = $0_1 | 0;
  return $1633($0_1 | 0, 104352 | 0) | 0 | 0;
 }
 
 function $1965($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1966($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1967($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1968($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1969($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1970($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1971($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1972($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1973($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP8[$0_1 >> 0] = $1_1;
  return $0_1 | 0;
 }
 
 function $1974($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1975($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1976($0_1 | 0) | 0 | 0) == ($1974($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1976($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1977($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $2503($2502($0_1 | 0) | 0 | 0, $2502($1_1 | 0) | 0 | 0, $2502($2_1 | 0) | 0 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1978($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $2509($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1979($0_1) {
  $0_1 = $0_1 | 0;
  return $1946($0_1 | 0) | 0 | 0;
 }
 
 function $1980($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1945($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1945($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1981($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1760($0_1 | 0, $1980($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1979($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1946($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1982($0_1) {
  $0_1 = $0_1 | 0;
  return $2703($0_1 | 0) | 0 | 0;
 }
 
 function $1983($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($2702($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2702($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1984($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1986($0_1 | 0, $1983($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1982($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2703($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1985($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2357($0_1 | 0, $1_1 | 0);
 }
 
 function $1986($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($2702($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2702($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($2703($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1987($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 624 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 616 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 620 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 110;
  $1_1 = $1790($7_1 + 200 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $1401($7_1 + 192 | 0 | 0, $4_1 | 0);
  $8_1 = $1222($7_1 + 192 | 0 | 0) | 0;
  HEAP8[($7_1 + 191 | 0) >> 0] = 0;
  label$1 : {
   if (!($1988($7_1 + 620 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 192 | 0 | 0, $1157($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 191 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 196 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 67168 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 67169 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 67170 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 67171 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 183 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 184 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 185 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 186 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 67165 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67166 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67167 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67168 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 176 | 0) >> 2] = HEAPU8[($10_1 + 67161 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67162 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67163 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67164 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 180 | 0) >> 2] = i64toi32_i32$1;
   $1717($8_1 | 0, $7_1 + 176 | 0 | 0, $7_1 + 186 | 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 109;
   $8_1 = $1758($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $4_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1989($1_1 | 0) | 0) | 0 | 0) < (393 | 0)) {
      break label$3
     }
     $1760($8_1 | 0, $1082((((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1989($1_1 | 0) | 0) | 0) >> 2 | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1926($8_1 | 0) | 0)) {
      break label$2
     }
     $4_1 = $1926($8_1 | 0) | 0;
    }
    label$4 : {
     if ((HEAPU8[($7_1 + 191 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
     }
     HEAP8[$4_1 >> 0] = 45;
     $4_1 = $4_1 + 1 | 0;
    }
    $2_1 = $1989($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($2_1 >>> 0 < (HEAP32[($7_1 + 196 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$4_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($1584($7_1 + 16 | 0 | 0, 66234 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $1762($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$4_1 >> 0] = HEAPU8[(($7_1 + 176 | 0) + ((($1729($7_1 + 128 | 0 | 0, $1990($7_1 + 128 | 0 | 0) | 0 | 0, $2_1 | 0) | 0) - ($7_1 + 128 | 0) | 0) >> 2 | 0) | 0) >> 0] | 0;
      $4_1 = $4_1 + 1 | 0;
      $2_1 = $2_1 + 4 | 0;
      continue label$6;
     };
    }
    $2735(65796 | 0);
    wasm2js_trap();
   }
   $2725();
   wasm2js_trap();
  }
  label$8 : {
   if (!($1223($7_1 + 620 | 0 | 0, $7_1 + 616 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 620 | 0) >> 2] | 0;
  $1628($7_1 + 192 | 0 | 0) | 0;
  $1793($1_1 | 0) | 0;
  global$0 = $7_1 + 624 | 0;
  return $2_1 | 0;
 }
 
 function $1988($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $368_1 = 0;
  $11_1 = global$0 - 528 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 520 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 524 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!($1223($0_1 | 0, $11_1 + 524 | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
    $0_1 = 0;
    break label$1;
   }
   HEAP32[($11_1 + 72 | 0) >> 2] = 110;
   $12_1 = $1929($11_1 + 104 | 0 | 0, $11_1 + 112 | 0 | 0, $11_1 + 72 | 0 | 0) | 0;
   $10_1 = $1930($12_1 | 0) | 0;
   HEAP32[($11_1 + 100 | 0) >> 2] = $10_1;
   HEAP32[($11_1 + 96 | 0) >> 2] = $10_1 + 400 | 0;
   $13_1 = $1247($11_1 + 72 | 0 | 0) | 0;
   $14_1 = $1896($11_1 + 60 | 0 | 0) | 0;
   $15_1 = $1896($11_1 + 48 | 0 | 0) | 0;
   $16_1 = $1896($11_1 + 36 | 0 | 0) | 0;
   $17_1 = $1896($11_1 + 24 | 0 | 0) | 0;
   $1992($2_1 | 0, $3_1 | 0, $11_1 + 92 | 0 | 0, $11_1 + 88 | 0 | 0, $11_1 + 84 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 20 | 0 | 0);
   HEAP32[$9_1 >> 2] = $1989($8_1 | 0) | 0;
   $18_1 = $4_1 & 512 | 0;
   $3_1 = 0;
   $1_1 = 0;
   label$3 : while (1) {
    $2_1 = $1_1;
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        if (($3_1 | 0) == (4 | 0)) {
         break label$7
        }
        if ($1223($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
         break label$7
        }
        $10_1 = 0;
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             switch (HEAPU8[(($11_1 + 92 | 0) + $3_1 | 0) >> 0] | 0 | 0) {
             case 1:
              if (($3_1 | 0) == (3 | 0)) {
               break label$5
              }
              label$14 : {
               if (!($1225($7_1 | 0, 1 | 0, $1224($0_1 | 0) | 0 | 0) | 0)) {
                break label$14
               }
               $1993($11_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0);
               $2763($17_1 | 0, $1994($11_1 + 12 | 0 | 0) | 0 | 0);
               break label$11;
              }
              HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
              $0_1 = 0;
              break label$6;
             case 3:
              break label$10;
             case 0:
              break label$12;
             case 4:
              break label$8;
             case 2:
              break label$9;
             default:
              break label$4;
             };
            }
            if (($3_1 | 0) == (3 | 0)) {
             break label$5
            }
           }
           label$15 : while (1) {
            if ($1223($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break label$5
            }
            if (!($1225($7_1 | 0, 1 | 0, $1224($0_1 | 0) | 0 | 0) | 0)) {
             break label$5
            }
            $1993($11_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0);
            $2763($17_1 | 0, $1994($11_1 + 12 | 0 | 0) | 0 | 0);
            continue label$15;
           };
          }
          label$16 : {
           if (!($1690($15_1 | 0) | 0)) {
            break label$16
           }
           if (($1224($0_1 | 0) | 0 | 0) != (HEAP32[($1995($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
            break label$16
           }
           $1226($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 0;
           $1_1 = ($1690($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $2_1;
           break label$4;
          }
          label$17 : {
           if (!($1690($16_1 | 0) | 0)) {
            break label$17
           }
           if (($1224($0_1 | 0) | 0 | 0) != (HEAP32[($1995($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
            break label$17
           }
           $1226($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 1;
           $1_1 = ($1690($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $2_1;
           break label$4;
          }
          label$18 : {
           if (!($1690($15_1 | 0) | 0)) {
            break label$18
           }
           if (!($1690($16_1 | 0) | 0)) {
            break label$18
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break label$6;
          }
          label$19 : {
           if ($1690($15_1 | 0) | 0) {
            break label$19
           }
           if (!($1690($16_1 | 0) | 0)) {
            break label$5
           }
          }
          HEAP8[$6_1 >> 0] = !($1690($16_1 | 0) | 0);
          break label$5;
         }
         label$20 : {
          if ($2_1) {
           break label$20
          }
          if ($3_1 >>> 0 < 2 >>> 0) {
           break label$20
          }
          if ($18_1) {
           break label$20
          }
          $1_1 = 0;
          if (!(($3_1 | 0) == (2 | 0) & ((HEAPU8[($11_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0) | 0)) {
           break label$4
          }
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $1770($14_1 | 0) | 0;
         $10_1 = $1996($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0;
         label$21 : {
          if (!$3_1) {
           break label$21
          }
          if ((HEAPU8[(($3_1 + ($11_1 + 92 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
           break label$21
          }
          label$22 : {
           label$23 : while (1) {
            HEAP32[($11_1 + 8 | 0) >> 2] = $1771($14_1 | 0) | 0;
            if (!($1997($10_1 | 0, $11_1 + 8 | 0 | 0) | 0)) {
             break label$22
            }
            if (!($1225($7_1 | 0, 1 | 0, HEAP32[($1998($10_1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
             break label$22
            }
            $1999($10_1 | 0) | 0;
            continue label$23;
           };
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $1770($14_1 | 0) | 0;
          label$24 : {
           $1_1 = $2000($10_1 | 0, $11_1 + 8 | 0 | 0) | 0;
           if ($1_1 >>> 0 > ($1690($17_1 | 0) | 0) >>> 0) {
            break label$24
           }
           HEAP32[($11_1 + 8 | 0) >> 2] = $1771($17_1 | 0) | 0;
           if ($2002($2001($11_1 + 8 | 0 | 0, $1_1 | 0) | 0 | 0, $1771($17_1 | 0) | 0 | 0, $1770($14_1 | 0) | 0 | 0) | 0) {
            break label$21
           }
          }
          HEAP32[($11_1 + 4 | 0) >> 2] = $1770($14_1 | 0) | 0;
          HEAP32[$10_1 >> 2] = HEAP32[($1996($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
         label$25 : {
          label$26 : while (1) {
           HEAP32[($11_1 + 4 | 0) >> 2] = $1771($14_1 | 0) | 0;
           if (!($1997($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0)) {
            break label$25
           }
           if ($1223($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break label$25
           }
           if (($1224($0_1 | 0) | 0 | 0) != (HEAP32[($1998($11_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0)) {
            break label$25
           }
           $1226($0_1 | 0) | 0;
           $1999($11_1 + 8 | 0 | 0) | 0;
           continue label$26;
          };
         }
         if (!$18_1) {
          break label$5
         }
         HEAP32[($11_1 + 4 | 0) >> 2] = $1771($14_1 | 0) | 0;
         if (!($1997($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0)) {
          break label$5
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$6;
        }
        label$27 : {
         label$28 : while (1) {
          if ($1223($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
           break label$27
          }
          label$29 : {
           label$30 : {
            $1_1 = $1224($0_1 | 0) | 0;
            if (!($1225($7_1 | 0, 64 | 0, $1_1 | 0) | 0)) {
             break label$30
            }
            label$31 : {
             $4_1 = HEAP32[$9_1 >> 2] | 0;
             if (($4_1 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
              break label$31
             }
             $2003($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
             $4_1 = HEAP32[$9_1 >> 2] | 0;
            }
            HEAP32[$9_1 >> 2] = $4_1 + 4 | 0;
            HEAP32[$4_1 >> 2] = $1_1;
            $10_1 = $10_1 + 1 | 0;
            break label$29;
           }
           if (!($1271($13_1 | 0) | 0)) {
            break label$27
           }
           if (!$10_1) {
            break label$27
           }
           if (($1_1 | 0) != (HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0)) {
            break label$27
           }
           label$32 : {
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
            if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
             break label$32
            }
            $1942($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
           HEAP32[$1_1 >> 2] = $10_1;
           $10_1 = 0;
          }
          $1226($0_1 | 0) | 0;
          continue label$28;
         };
        }
        label$33 : {
         $368_1 = $1930($12_1 | 0) | 0;
         $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         if (($368_1 | 0) == ($1_1 | 0)) {
          break label$33
         }
         if (!$10_1) {
          break label$33
         }
         label$34 : {
          if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
           break label$34
          }
          $1942($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
          $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
         HEAP32[$1_1 >> 2] = $10_1;
        }
        label$35 : {
         if ((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$36 : {
          label$37 : {
           if ($1223($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break label$37
           }
           if (($1224($0_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 88 | 0) >> 2] | 0 | 0)) {
            break label$36
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
         }
         label$38 : while (1) {
          $1226($0_1 | 0) | 0;
          if ((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
           break label$35
          }
          label$39 : {
           label$40 : {
            if ($1223($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break label$40
            }
            if ($1225($7_1 | 0, 64 | 0, $1224($0_1 | 0) | 0 | 0) | 0) {
             break label$39
            }
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break label$6;
          }
          label$41 : {
           if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
            break label$41
           }
           $2003($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
          }
          $10_1 = $1224($0_1 | 0) | 0;
          $1_1 = HEAP32[$9_1 >> 2] | 0;
          HEAP32[$9_1 >> 2] = $1_1 + 4 | 0;
          HEAP32[$1_1 >> 2] = $10_1;
          HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          continue label$38;
         };
        }
        $1_1 = $2_1;
        if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1989($8_1 | 0) | 0 | 0)) {
         break label$4
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$6;
       }
       label$42 : {
        if (!$2_1) {
         break label$42
        }
        $10_1 = 1;
        label$43 : while (1) {
         if ($10_1 >>> 0 >= ($1690($2_1 | 0) | 0) >>> 0) {
          break label$42
         }
         label$44 : {
          label$45 : {
           if ($1223($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break label$45
           }
           if (($1224($0_1 | 0) | 0 | 0) == (HEAP32[($1691($2_1 | 0, $10_1 | 0) | 0) >> 2] | 0 | 0)) {
            break label$44
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
         }
         $1226($0_1 | 0) | 0;
         $10_1 = $10_1 + 1 | 0;
         continue label$43;
        };
       }
       $0_1 = 1;
       if (($1930($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $0_1 = 0;
       HEAP32[($11_1 + 12 | 0) >> 2] = 0;
       $1649($13_1 | 0, $1930($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, $11_1 + 12 | 0 | 0);
       label$46 : {
        if (!(HEAP32[($11_1 + 12 | 0) >> 2] | 0)) {
         break label$46
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        break label$6;
       }
       $0_1 = 1;
      }
      $2754($17_1 | 0) | 0;
      $2754($16_1 | 0) | 0;
      $2754($15_1 | 0) | 0;
      $2754($14_1 | 0) | 0;
      $2740($13_1 | 0) | 0;
      $1943($12_1 | 0) | 0;
      break label$1;
     }
     $1_1 = $2_1;
    }
    $3_1 = $3_1 + 1 | 0;
    continue label$3;
   };
  }
  global$0 = $11_1 + 528 | 0;
  return $0_1 | 0;
 }
 
 function $1989($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($2004($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1990($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 40 | 0 | 0;
 }
 
 function $1991($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2706($0_1 | 0, $1_1 | 0) | 0;
  $1410($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1992($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $1_1 = $2022($1_1 | 0) | 0;
    $2023($10_1 + 4 | 0 | 0, $1_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $2024($10_1 + 4 | 0 | 0, $1_1 | 0);
    $2025($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2754($10_1 + 4 | 0 | 0) | 0;
    $2026($10_1 + 4 | 0 | 0, $1_1 | 0);
    $2025($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2754($10_1 + 4 | 0 | 0) | 0;
    HEAP32[$3_1 >> 2] = $2027($1_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $2028($1_1 | 0) | 0;
    $2029($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1251($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2740($10_1 + 4 | 0 | 0) | 0;
    $2030($10_1 + 4 | 0 | 0, $1_1 | 0);
    $2025($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2754($10_1 + 4 | 0 | 0) | 0;
    $1_1 = $2031($1_1 | 0) | 0;
    break label$1;
   }
   $1_1 = $2032($1_1 | 0) | 0;
   $2033($10_1 + 4 | 0 | 0, $1_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $2034($10_1 + 4 | 0 | 0, $1_1 | 0);
   $2025($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2754($10_1 + 4 | 0 | 0) | 0;
   $2035($10_1 + 4 | 0 | 0, $1_1 | 0);
   $2025($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2754($10_1 + 4 | 0 | 0) | 0;
   HEAP32[$3_1 >> 2] = $2036($1_1 | 0) | 0;
   HEAP32[$4_1 >> 2] = $2037($1_1 | 0) | 0;
   $2038($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1251($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2740($10_1 + 4 | 0 | 0) | 0;
   $2039($10_1 + 4 | 0 | 0, $1_1 | 0);
   $2025($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2754($10_1 + 4 | 0 | 0) | 0;
   $1_1 = $2040($1_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $1_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1993($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2041($0_1 | 0, $1233(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1994($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1995($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1775($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1996($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $2042($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1997($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($2043($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1998($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1999($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $2000($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($2044($0_1 | 0) | 0) - ($2042($1_1 | 0) | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $2001($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2046($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $2002($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2045($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2003($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($2047($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1989($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($1379() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $1379() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1989($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (110 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1989($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1085($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (110 | 0)) {
     break label$6
    }
    $2048($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 109;
   $4_1 = $1790($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $2049($0_1 | 0, $4_1 | 0) | 0;
   $1793($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1989($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1989($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2725();
  wasm2js_trap();
 }
 
 function $2004($0_1) {
  $0_1 = $0_1 | 0;
  return $2707($0_1 | 0) | 0 | 0;
 }
 
 function $2005($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 440 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 444 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 110;
  $8_1 = $1790($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $1401($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $1222($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($1988($7_1 + 444 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $1157($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$1
   }
   $2006($6_1 | 0);
   label$2 : {
    if ((HEAPU8[($7_1 + 15 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $2763($6_1 | 0, $1396($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $1396($1_1 | 0, 48 | 0) | 0;
   $2_1 = $1989($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $4_1 = $3_1 + -4 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break label$3
     }
     if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + 4 | 0;
     continue label$4;
    };
   }
   $2007($6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($1223($7_1 + 444 | 0 | 0, $7_1 + 440 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 444 | 0) >> 2] | 0;
  $1628($7_1 + 16 | 0 | 0) | 0;
  $1793($8_1 | 0) | 0;
  global$0 = $7_1 + 448 | 0;
  return $2_1 | 0;
 }
 
 function $2006($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1690($0_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($1835($0_1 | 0) | 0)) {
     break label$2
    }
    $3_1 = $2008($0_1 | 0) | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    $2009($3_1 | 0, $1_1 + 12 | 0 | 0);
    $2010($0_1 | 0, 0 | 0);
    break label$1;
   }
   $3_1 = $2011($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $2009($3_1 | 0, $1_1 + 8 | 0 | 0);
   $2012($0_1 | 0, 0 | 0);
  }
  $2013($0_1 | 0, $2_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $2007($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1690($0_1 | 0) | 0;
  $5_1 = $2014($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $2015($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if ($2016($0_1 | 0, $1_1 | 0) | 0) {
     break label$2
    }
    label$3 : {
     if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
      break label$3
     }
     $2017($0_1 | 0, $5_1 | 0, ($4_1 - $5_1 | 0) + $6_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
    }
    $2018($0_1 | 0, $6_1 | 0);
    $5_1 = ($1775($0_1 | 0) | 0) + ($4_1 << 2 | 0) | 0;
    label$4 : {
     label$5 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break label$4
      }
      $2009($5_1 | 0, $1_1 | 0);
      $1_1 = $1_1 + 4 | 0;
      $5_1 = $5_1 + 4 | 0;
      continue label$5;
     };
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = 0;
    $2009($5_1 | 0, $3_1 + 4 | 0 | 0);
    $2019($0_1 | 0, $6_1 + $4_1 | 0 | 0);
    break label$1;
   }
   $1_1 = $2021($3_1 + 4 | 0 | 0, $1_1 | 0, $2_1 | 0, $2020($0_1 | 0) | 0 | 0) | 0;
   $2761($0_1 | 0, $1833($1_1 | 0) | 0 | 0, $1690($1_1 | 0) | 0 | 0) | 0;
   $2754($1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2008($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1921($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $2009($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $2010($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1921($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $2011($0_1) {
  $0_1 = $0_1 | 0;
  return $2438($1921($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2012($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1921($0_1 | 0) | 0;
  HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($1_1 & 127 | 0) | 0;
  $0_1 = $1921($0_1 | 0) | 0;
  HEAP8[($0_1 + 11 | 0) >> 0] = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 127 | 0;
 }
 
 function $2013($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2014($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if (!($1835($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($2452($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $2015($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2511($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2016($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2512($1833($0_1 | 0) | 0 | 0, (($1833($0_1 | 0) | 0) + (($1690($0_1 | 0) | 0) << 2 | 0) | 0) + 4 | 0 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2017($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $2510($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $6_1 = ($3_1 - $5_1 | 0) + $6_1 | 0;
  $2010($0_1 | 0, $6_1 | 0);
  $1898($0_1 | 0, $6_1 | 0);
 }
 
 function $2018($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2019($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($1835($0_1 | 0) | 0)) {
    break label$1
   }
   $2010($0_1 | 0, $1_1 | 0);
   return;
  }
  $2012($0_1 | 0, $1_1 | 0);
 }
 
 function $2020($0_1) {
  $0_1 = $0_1 | 0;
  return $2440($0_1 | 0) | 0 | 0;
 }
 
 function $2021($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $2513($0_1 | 0, $4_1 + 15 | 0 | 0, $3_1 | 0) | 0;
  $2514($3_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $2022($0_1) {
  $0_1 = $0_1 | 0;
  return $1633($0_1 | 0, 104376 | 0) | 0 | 0;
 }
 
 function $2023($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2024($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2025($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2050($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $2026($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2027($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $2028($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $2029($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2030($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2031($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $2032($0_1) {
  $0_1 = $0_1 | 0;
  return $1633($0_1 | 0, 104368 | 0) | 0 | 0;
 }
 
 function $2033($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2034($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2035($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2036($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $2037($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $2038($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2039($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2040($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $2041($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2042($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2043($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($2044($0_1 | 0) | 0 | 0) == ($2042($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $2044($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2045($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $2519($2518($0_1 | 0) | 0 | 0, $2518($1_1 | 0) | 0 | 0, $2518($2_1 | 0) | 0 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2046($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $2525($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2047($0_1) {
  $0_1 = $0_1 | 0;
  return $2069($0_1 | 0) | 0 | 0;
 }
 
 function $2048($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($2068($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2068($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $2049($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1791($0_1 | 0, $2048($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($2047($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2069($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2050($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $37_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $2449($0_1 | 0);
  label$1 : {
   if (!($1835($0_1 | 0) | 0)) {
    break label$1
   }
   $2450($2020($0_1 | 0) | 0 | 0, $2008($0_1 | 0) | 0 | 0, $2452($0_1 | 0) | 0 | 0);
  }
  $3_1 = $1690($1_1 | 0) | 0;
  $4_1 = $1835($1_1 | 0) | 0;
  $2526($0_1 | 0, $1_1 | 0);
  $5_1 = $1921($1_1 | 0) | 0;
  $6_1 = $1921($0_1 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $37_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $37_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $2012($1_1 | 0, 0 | 0);
  $5_1 = $2011($1_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $2009($5_1 | 0, $2_1 + 12 | 0 | 0);
  label$2 : {
   label$3 : {
    $5_1 = ($0_1 | 0) == ($1_1 | 0);
    if ($5_1) {
     break label$3
    }
    if ($4_1) {
     break label$3
    }
    $2013($1_1 | 0, $3_1 | 0);
    break label$2;
   }
   $1898($1_1 | 0, 0 | 0);
  }
  $1_1 = $1835($0_1 | 0) | 0;
  label$4 : {
   if ($5_1) {
    break label$4
   }
   if ($1_1) {
    break label$4
   }
   $1898($0_1 | 0, $1837($0_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2051($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 332 | 0) >> 2] = $7_1 + 336 | 0;
  $8_1 = $1571($7_1 + 336 | 0 | 0, 100 | 0, 66228 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 224 | 0) >> 2] = 109;
  $9_1 = 0;
  $10_1 = $1758($7_1 + 216 | 0 | 0, 0 | 0, $7_1 + 224 | 0 | 0) | 0;
  HEAP32[($7_1 + 224 | 0) >> 2] = 109;
  $11_1 = $1758($7_1 + 208 | 0 | 0, 0 | 0, $7_1 + 224 | 0 | 0) | 0;
  $12_1 = $7_1 + 224 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $1678() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $1759($7_1 + 332 | 0 | 0, $8_1 | 0, 66228 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break label$1
    }
    $1760($10_1 | 0, HEAP32[($7_1 + 332 | 0) >> 2] | 0 | 0);
    $1760($11_1 | 0, $1082($8_1 | 0) | 0 | 0);
    if ($2052($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $1926($11_1 | 0) | 0;
   }
   $1401($7_1 + 204 | 0 | 0, $3_1 | 0);
   $13_1 = $1158($7_1 + 204 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 332 | 0) >> 2] | 0;
   $1677($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (($8_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 332 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $1247($7_1 + 184 | 0 | 0) | 0;
   $14_1 = $1247($7_1 + 172 | 0 | 0) | 0;
   $16_1 = $1247($7_1 + 160 | 0 | 0) | 0;
   $2053($2_1 | 0, $9_1 | 0, $7_1 + 204 | 0 | 0, $7_1 + 200 | 0 | 0, $7_1 + 199 | 0 | 0, $7_1 + 198 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 156 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 109;
   $17_1 = $1758($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (((($1271($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($1271($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 1 | 0;
     break label$4;
    }
    $18_1 = ((($1271($16_1 | 0) | 0) + ($1271($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $1760($17_1 | 0, $1082($18_1 | 0) | 0 | 0);
    $2_1 = $1926($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $2054($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $1157($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + $8_1 | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 200 | 0 | 0, HEAP8[($7_1 + 199 | 0) >> 0] | 0 | 0, HEAP8[($7_1 + 198 | 0) >> 0] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $8_1 = $1747($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $1762($17_1 | 0) | 0;
   $2740($16_1 | 0) | 0;
   $2740($14_1 | 0) | 0;
   $2740($15_1 | 0) | 0;
   $1628($7_1 + 204 | 0 | 0) | 0;
   $1762($11_1 | 0) | 0;
   $1762($10_1 | 0) | 0;
   global$0 = $7_1 + 448 | 0;
   return $8_1 | 0;
  }
  $2725();
  wasm2js_trap();
 }
 
 function $2052($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($2055($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $2053($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $2_1 = $1955($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $1956($10_1 + 4 | 0 | 0, $2_1 | 0);
      $11_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1957($10_1 + 4 | 0 | 0, $2_1 | 0);
      $1251($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $2740($10_1 + 4 | 0 | 0) | 0;
      break label$3;
     }
     $2056($10_1 + 4 | 0 | 0, $2_1 | 0);
     $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1958($10_1 + 4 | 0 | 0, $2_1 | 0);
     $1251($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $2740($10_1 + 4 | 0 | 0) | 0;
    }
    HEAP8[$4_1 >> 0] = $1959($2_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $1960($2_1 | 0) | 0;
    $1961($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1251($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2740($10_1 + 4 | 0 | 0) | 0;
    $1962($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1251($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2740($10_1 + 4 | 0 | 0) | 0;
    $2_1 = $1963($2_1 | 0) | 0;
    break label$1;
   }
   $2_1 = $1964($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $1965($10_1 + 4 | 0 | 0, $2_1 | 0);
     $13_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1966($10_1 + 4 | 0 | 0, $2_1 | 0);
     $1251($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $2740($10_1 + 4 | 0 | 0) | 0;
     break label$5;
    }
    $2057($10_1 + 4 | 0 | 0, $2_1 | 0);
    $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1967($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1251($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2740($10_1 + 4 | 0 | 0) | 0;
   }
   HEAP8[$4_1 >> 0] = $1968($2_1 | 0) | 0;
   HEAP8[$5_1 >> 0] = $1969($2_1 | 0) | 0;
   $1970($10_1 + 4 | 0 | 0, $2_1 | 0);
   $1251($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2740($10_1 + 4 | 0 | 0) | 0;
   $1971($10_1 + 4 | 0 | 0, $2_1 | 0);
   $1251($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2740($10_1 + 4 | 0 | 0) | 0;
   $2_1 = $1972($2_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $2_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $2054($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($17_1 | 0) != (4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($1271($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[($15_1 + 12 | 0) >> 2] = $2058($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $2061($2059($15_1 + 12 | 0 | 0, 1 | 0) | 0 | 0, $2060($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     $18_1 = $3_1 & 176 | 0;
     if (($18_1 | 0) == (16 | 0)) {
      break label$4
     }
     label$5 : {
      if (($18_1 | 0) != (32 | 0)) {
       break label$5
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   label$6 : {
    label$7 : {
     switch (HEAPU8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$6;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $1394($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$6;
     case 3:
      if ($1639($13_1 | 0) | 0) {
       break label$6
      }
      $18_1 = HEAPU8[($1638($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$6;
     case 2:
      $18_1 = $1639($12_1 | 0) | 0;
      if (!$16_1) {
       break label$6
      }
      if ($18_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = $2061($2058($12_1 | 0) | 0 | 0, $2060($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break label$6;
     case 4:
      break label$7;
     default:
      break label$6;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $4_1 + $7_1 | 0;
    $18_1 = $4_1;
    label$12 : {
     label$13 : while (1) {
      if ($18_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      if (!($1161($6_1 | 0, 64 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
       break label$12
      }
      $18_1 = $18_1 + 1 | 0;
      continue label$13;
     };
    }
    $19_1 = $14_1;
    label$14 : {
     if (($19_1 | 0) < (1 | 0)) {
      break label$14
     }
     label$15 : {
      label$16 : while (1) {
       if ($18_1 >>> 0 <= $4_1 >>> 0) {
        break label$15
       }
       if (($19_1 | 0) == (0 | 0)) {
        break label$15
       }
       $19_1 = $19_1 + -1 | 0;
       $18_1 = $18_1 + -1 | 0;
       $21_1 = HEAPU8[$18_1 >> 0] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
       HEAP8[$22_1 >> 0] = $21_1;
       continue label$16;
      };
     }
     label$17 : {
      label$18 : {
       if ($19_1) {
        break label$18
       }
       $22_1 = 0;
       break label$17;
      }
      $22_1 = $1394($6_1 | 0, 48 | 0) | 0;
     }
     label$19 : {
      label$20 : while (1) {
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       if (($19_1 | 0) < (1 | 0)) {
        break label$19
       }
       HEAP8[$21_1 >> 0] = $22_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$20;
      };
     }
     HEAP8[$21_1 >> 0] = $9_1;
    }
    label$21 : {
     label$22 : {
      if (($18_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $18_1 = $1394($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$21;
     }
     label$23 : {
      label$24 : {
       if (!($1639($11_1 | 0) | 0)) {
        break label$24
       }
       $23_1 = $2062() | 0;
       break label$23;
      }
      $23_1 = HEAP8[($1638($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label$25 : while (1) {
      if (($18_1 | 0) == ($4_1 | 0)) {
       break label$21
      }
      label$26 : {
       label$27 : {
        if (($19_1 | 0) == ($23_1 | 0)) {
         break label$27
        }
        $21_1 = $19_1;
        break label$26;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       HEAP8[$21_1 >> 0] = $10_1;
       $21_1 = 0;
       label$28 : {
        $24_1 = $24_1 + 1 | 0;
        if ($24_1 >>> 0 < ($1271($11_1 | 0) | 0) >>> 0) {
         break label$28
        }
        $23_1 = $19_1;
        break label$26;
       }
       label$29 : {
        if ((HEAPU8[($1638($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($1871() | 0) & 255 | 0 | 0)) {
         break label$29
        }
        $23_1 = $2062() | 0;
        break label$26;
       }
       $23_1 = HEAP8[($1638($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
      }
      $18_1 = $18_1 + -1 | 0;
      $19_1 = HEAPU8[$18_1 >> 0] | 0;
      $22_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
      HEAP8[$22_1 >> 0] = $19_1;
      $19_1 = $21_1 + 1 | 0;
      continue label$25;
     };
    }
    $1799($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $2055($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1944($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $2056($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2057($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2058($0_1) {
  $0_1 = $0_1 | 0;
  return $2079($0_1 | 0, $1388($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2059($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $2081($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2060($0_1) {
  $0_1 = $0_1 | 0;
  return $2079($0_1 | 0, ($1388($0_1 | 0) | 0) + ($1271($0_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2061($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2078($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2062() {
  return $2080() | 0 | 0;
 }
 
 function $2063($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 176 | 0;
  global$0 = $6_1;
  $1401($6_1 + 172 | 0 | 0, $3_1 | 0);
  $7_1 = $1158($6_1 + 172 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($1271($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAPU8[($1638($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) == (($1394($7_1 | 0, 45 | 0) | 0) & 255 | 0 | 0);
  }
  $9_1 = $1247($6_1 + 152 | 0 | 0) | 0;
  $10_1 = $1247($6_1 + 140 | 0 | 0) | 0;
  $11_1 = $1247($6_1 + 128 | 0 | 0) | 0;
  $2053($2_1 | 0, $8_1 | 0, $6_1 + 172 | 0 | 0, $6_1 + 168 | 0 | 0, $6_1 + 167 | 0 | 0, $6_1 + 166 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 124 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 109;
  $12_1 = $1758($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($1271($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $1271($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    $13_1 = (((($1271($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($1271($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ((($1271($11_1 | 0) | 0) + ($1271($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $1760($12_1 | 0, $1082($13_1 | 0) | 0 | 0);
   $2_1 = $1926($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $2725();
   wasm2js_trap();
  }
  $2054($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $1157($3_1 | 0) | 0 | 0, $1270($5_1 | 0) | 0 | 0, ($1270($5_1 | 0) | 0) + ($1271($5_1 | 0) | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 168 | 0 | 0, HEAP8[($6_1 + 167 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 166 | 0) >> 0] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0);
  $5_1 = $1747($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1762($12_1 | 0) | 0;
  $2740($11_1 | 0) | 0;
  $2740($10_1 | 0) | 0;
  $2740($9_1 | 0) | 0;
  $1628($6_1 + 172 | 0 | 0) | 0;
  global$0 = $6_1 + 176 | 0;
  return $5_1 | 0;
 }
 
 function $2064($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 1056 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 940 | 0) >> 2] = $7_1 + 944 | 0;
  $8_1 = $1571($7_1 + 944 | 0 | 0, 100 | 0, 66228 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 528 | 0) >> 2] = 109;
  $9_1 = 0;
  $10_1 = $1758($7_1 + 520 | 0 | 0, 0 | 0, $7_1 + 528 | 0 | 0) | 0;
  HEAP32[($7_1 + 528 | 0) >> 2] = 109;
  $11_1 = $1790($7_1 + 512 | 0 | 0, 0 | 0, $7_1 + 528 | 0 | 0) | 0;
  $12_1 = $7_1 + 528 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $1678() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $1759($7_1 + 940 | 0 | 0, $8_1 | 0, 66228 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break label$1
    }
    $1760($10_1 | 0, HEAP32[($7_1 + 940 | 0) >> 2] | 0 | 0);
    $1791($11_1 | 0, $1082($8_1 << 2 | 0 | 0) | 0 | 0);
    if ($2065($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $1989($11_1 | 0) | 0;
   }
   $1401($7_1 + 508 | 0 | 0, $3_1 | 0);
   $13_1 = $1222($7_1 + 508 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 940 | 0) >> 2] | 0;
   $1717($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (($8_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 940 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $1247($7_1 + 484 | 0 | 0) | 0;
   $14_1 = $1896($7_1 + 472 | 0 | 0) | 0;
   $16_1 = $1896($7_1 + 460 | 0 | 0) | 0;
   $2066($2_1 | 0, $9_1 | 0, $7_1 + 508 | 0 | 0, $7_1 + 504 | 0 | 0, $7_1 + 500 | 0 | 0, $7_1 + 496 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 456 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 109;
   $17_1 = $1790($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 456 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (((($1690($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($1690($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 456 | 0) >> 2] | 0) | 0) + 1 | 0;
     break label$4;
    }
    $18_1 = ((($1690($16_1 | 0) | 0) + ($1690($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 456 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $1791($17_1 | 0, $1082($18_1 << 2 | 0 | 0) | 0 | 0);
    $2_1 = $1989($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $2067($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $1157($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + ($8_1 << 2 | 0) | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 504 | 0 | 0, HEAP32[($7_1 + 500 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 496 | 0) >> 2] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 456 | 0) >> 2] | 0 | 0);
   $8_1 = $1781($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $1793($17_1 | 0) | 0;
   $2754($16_1 | 0) | 0;
   $2754($14_1 | 0) | 0;
   $2740($15_1 | 0) | 0;
   $1628($7_1 + 508 | 0 | 0) | 0;
   $1793($11_1 | 0) | 0;
   $1762($10_1 | 0) | 0;
   global$0 = $7_1 + 1056 | 0;
   return $8_1 | 0;
  }
  $2725();
  wasm2js_trap();
 }
 
 function $2065($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($2070($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $2066($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $2_1 = $2022($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $2023($10_1 + 4 | 0 | 0, $2_1 | 0);
      $11_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $2024($10_1 + 4 | 0 | 0, $2_1 | 0);
      $2025($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $2754($10_1 + 4 | 0 | 0) | 0;
      break label$3;
     }
     $2071($10_1 + 4 | 0 | 0, $2_1 | 0);
     $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $2026($10_1 + 4 | 0 | 0, $2_1 | 0);
     $2025($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $2754($10_1 + 4 | 0 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $2027($2_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $2028($2_1 | 0) | 0;
    $2029($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1251($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2740($10_1 + 4 | 0 | 0) | 0;
    $2030($10_1 + 4 | 0 | 0, $2_1 | 0);
    $2025($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2754($10_1 + 4 | 0 | 0) | 0;
    $2_1 = $2031($2_1 | 0) | 0;
    break label$1;
   }
   $2_1 = $2032($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $2033($10_1 + 4 | 0 | 0, $2_1 | 0);
     $13_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $2034($10_1 + 4 | 0 | 0, $2_1 | 0);
     $2025($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $2754($10_1 + 4 | 0 | 0) | 0;
     break label$5;
    }
    $2072($10_1 + 4 | 0 | 0, $2_1 | 0);
    $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $2035($10_1 + 4 | 0 | 0, $2_1 | 0);
    $2025($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2754($10_1 + 4 | 0 | 0) | 0;
   }
   HEAP32[$4_1 >> 2] = $2036($2_1 | 0) | 0;
   HEAP32[$5_1 >> 2] = $2037($2_1 | 0) | 0;
   $2038($10_1 + 4 | 0 | 0, $2_1 | 0);
   $1251($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2740($10_1 + 4 | 0 | 0) | 0;
   $2039($10_1 + 4 | 0 | 0, $2_1 | 0);
   $2025($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2754($10_1 + 4 | 0 | 0) | 0;
   $2_1 = $2040($2_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $2_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $2067($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $19_1 = 0, $21_1 = 0, $23_1 = 0, $22_1 = 0, $24_1 = 0, $15_1 = 0, $18_1 = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $7_1 ? 4 : 0;
  $17_1 = $3_1 & 512 | 0;
  $18_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($18_1 | 0) != (4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($1690($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[($15_1 + 12 | 0) >> 2] = $2073($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $2076($2074($15_1 + 12 | 0 | 0, 1 | 0) | 0 | 0, $2075($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     $7_1 = $3_1 & 176 | 0;
     if (($7_1 | 0) == (16 | 0)) {
      break label$4
     }
     label$5 : {
      if (($7_1 | 0) != (32 | 0)) {
       break label$5
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   label$6 : {
    label$7 : {
     switch (HEAPU8[($8_1 + $18_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$6;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $7_1 = $1396($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break label$6;
     case 3:
      if ($1692($13_1 | 0) | 0) {
       break label$6
      }
      $7_1 = HEAP32[($1691($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break label$6;
     case 2:
      $7_1 = $1692($12_1 | 0) | 0;
      if (!$17_1) {
       break label$6
      }
      if ($7_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = $2076($2073($12_1 | 0) | 0 | 0, $2075($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break label$6;
     case 4:
      break label$7;
     default:
      break label$6;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $4_1 + $16_1 | 0;
    $7_1 = $4_1;
    label$12 : {
     label$13 : while (1) {
      if ($7_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      if (!($1225($6_1 | 0, 64 | 0, HEAP32[$7_1 >> 2] | 0 | 0) | 0)) {
       break label$12
      }
      $7_1 = $7_1 + 4 | 0;
      continue label$13;
     };
    }
    label$14 : {
     if (($14_1 | 0) < (1 | 0)) {
      break label$14
     }
     $19_1 = HEAP32[$2_1 >> 2] | 0;
     $21_1 = $14_1;
     label$15 : {
      label$16 : while (1) {
       if ($7_1 >>> 0 <= $4_1 >>> 0) {
        break label$15
       }
       if (($21_1 | 0) == (0 | 0)) {
        break label$15
       }
       $21_1 = $21_1 + -1 | 0;
       $7_1 = $7_1 + -4 | 0;
       $22_1 = HEAP32[$7_1 >> 2] | 0;
       $23_1 = $19_1 + 4 | 0;
       HEAP32[$2_1 >> 2] = $23_1;
       HEAP32[$19_1 >> 2] = $22_1;
       $19_1 = $23_1;
       continue label$16;
      };
     }
     label$17 : {
      label$18 : {
       if ($21_1) {
        break label$18
       }
       $23_1 = 0;
       break label$17;
      }
      $23_1 = $1396($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
     }
     label$19 : {
      label$20 : while (1) {
       $22_1 = $19_1 + 4 | 0;
       if (($21_1 | 0) < (1 | 0)) {
        break label$19
       }
       HEAP32[$19_1 >> 2] = $23_1;
       $21_1 = $21_1 + -1 | 0;
       $19_1 = $22_1;
       continue label$20;
      };
     }
     HEAP32[$2_1 >> 2] = $22_1;
     HEAP32[$19_1 >> 2] = $9_1;
    }
    label$21 : {
     label$22 : {
      if (($7_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $19_1 = $1396($6_1 | 0, 48 | 0) | 0;
      $21_1 = HEAP32[$2_1 >> 2] | 0;
      $7_1 = $21_1 + 4 | 0;
      HEAP32[$2_1 >> 2] = $7_1;
      HEAP32[$21_1 >> 2] = $19_1;
      break label$21;
     }
     label$23 : {
      label$24 : {
       if (!($1639($11_1 | 0) | 0)) {
        break label$24
       }
       $23_1 = $2062() | 0;
       break label$23;
      }
      $23_1 = HEAP8[($1638($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label$25 : {
      label$26 : while (1) {
       if (($7_1 | 0) == ($4_1 | 0)) {
        break label$25
       }
       label$27 : {
        label$28 : {
         if (($19_1 | 0) == ($23_1 | 0)) {
          break label$28
         }
         $21_1 = $19_1;
         break label$27;
        }
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
        HEAP32[$21_1 >> 2] = $10_1;
        $21_1 = 0;
        label$29 : {
         $24_1 = $24_1 + 1 | 0;
         if ($24_1 >>> 0 < ($1271($11_1 | 0) | 0) >>> 0) {
          break label$29
         }
         $23_1 = $19_1;
         break label$27;
        }
        label$30 : {
         if ((HEAPU8[($1638($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($1871() | 0) & 255 | 0 | 0)) {
          break label$30
         }
         $23_1 = $2062() | 0;
         break label$27;
        }
        $23_1 = HEAP8[($1638($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
       }
       $7_1 = $7_1 + -4 | 0;
       $19_1 = HEAP32[$7_1 >> 2] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
       HEAP32[$22_1 >> 2] = $19_1;
       $19_1 = $21_1 + 1 | 0;
       continue label$26;
      };
     }
     $7_1 = HEAP32[$2_1 >> 2] | 0;
    }
    $1801($20_1 | 0, $7_1 | 0);
   }
   $18_1 = $18_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $2068($0_1) {
  $0_1 = $0_1 | 0;
  return $2708($0_1 | 0) | 0 | 0;
 }
 
 function $2069($0_1) {
  $0_1 = $0_1 | 0;
  return $1411($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2070($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($2004($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $2071($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2072($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $2073($0_1) {
  $0_1 = $0_1 | 0;
  return $2083($0_1 | 0, $1834($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2074($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $2084($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2075($0_1) {
  $0_1 = $0_1 | 0;
  return $2083($0_1 | 0, ($1834($0_1 | 0) | 0) + (($1690($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2076($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2082($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2077($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 480 | 0;
  global$0 = $6_1;
  $1401($6_1 + 476 | 0 | 0, $3_1 | 0);
  $7_1 = $1222($6_1 + 476 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($1690($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAP32[($1691($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($1396($7_1 | 0, 45 | 0) | 0 | 0);
  }
  $9_1 = $1247($6_1 + 452 | 0 | 0) | 0;
  $10_1 = $1896($6_1 + 440 | 0 | 0) | 0;
  $11_1 = $1896($6_1 + 428 | 0 | 0) | 0;
  $2066($2_1 | 0, $8_1 | 0, $6_1 + 476 | 0 | 0, $6_1 + 472 | 0 | 0, $6_1 + 468 | 0 | 0, $6_1 + 464 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 424 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 109;
  $12_1 = $1790($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($1690($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 424 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $1690($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 424 | 0) >> 2] | 0;
    $13_1 = (((($1690($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($1690($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 424 | 0) >> 2] | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ((($1690($11_1 | 0) | 0) + ($1690($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 424 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $1791($12_1 | 0, $1082($13_1 << 2 | 0 | 0) | 0 | 0);
   $2_1 = $1989($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $2725();
   wasm2js_trap();
  }
  $2067($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $1157($3_1 | 0) | 0 | 0, $1833($5_1 | 0) | 0 | 0, ($1833($5_1 | 0) | 0) + (($1690($5_1 | 0) | 0) << 2 | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 472 | 0 | 0, HEAP32[($6_1 + 468 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 464 | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 424 | 0) >> 2] | 0 | 0);
  $5_1 = $1781($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1793($12_1 | 0) | 0;
  $2754($11_1 | 0) | 0;
  $2754($10_1 | 0) | 0;
  $2740($9_1 | 0) | 0;
  $1628($6_1 + 476 | 0 | 0) | 0;
  global$0 = $6_1 + 480 | 0;
  return $5_1 | 0;
 }
 
 function $2078($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2528($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $2079($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($2543($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2080() {
  return -1 | 0;
 }
 
 function $2081($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $2082($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2544($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $2083($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($2559($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2084($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2085($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $2086($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1913($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $2087($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2088($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $2089($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1916($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $2090($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2091($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 86616;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($1678() | 0 | 0)) {
    break label$1
   }
   $1593(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $2092($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $18_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $2093($2_1 + 24 | 0 | 0, $0_1 | 0);
  $0_1 = $2094($2_1 + 16 | 0 | 0, $1_1 | 0) | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $15_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[$2_1 >> 2] = $18_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $0_1 = $2095($2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $2093($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2562($0_1 | 0, $1270($1_1 | 0) | 0 | 0, $1271($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $2094($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2563($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2095($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   if (($2560($0_1 | 0) | 0 | 0) != ($2560($1_1 | 0) | 0 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $4_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   $3_1 = !($2561($0_1 | 0, $2_1 | 0) | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $2096($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1092($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2097($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 85512;
  $0_1 = $2099($1_1 + 8 | 0 | 0, 30 | 0) | 0;
  $1397($1_1 + 144 | 0 | 0, 66484 | 0) | 0;
  $2100($0_1 | 0);
  $2101();
  $2102($1_1 | 0, 105868 | 0);
  $2103();
  $2104($1_1 | 0, 105876 | 0);
  $2105();
  $2106($1_1 | 0, 105884 | 0);
  $2107();
  $2108($1_1 | 0, 105900 | 0);
  $2109();
  $2110($1_1 | 0, 105908 | 0);
  $2111();
  $2112($1_1 | 0, 105916 | 0);
  $2113();
  $2114($1_1 | 0, 105928 | 0);
  $2115();
  $2116($1_1 | 0, 105936 | 0);
  $2117();
  $2118($1_1 | 0, 105944 | 0);
  $2119();
  $2120($1_1 | 0, 105952 | 0);
  $2121();
  $2122($1_1 | 0, 105960 | 0);
  $2123();
  $2124($1_1 | 0, 105984 | 0);
  $2125();
  $2126($1_1 | 0, 106012 | 0);
  $2127();
  $2128($1_1 | 0, 106020 | 0);
  $2129();
  $2130($1_1 | 0, 106028 | 0);
  $2131();
  $2132($1_1 | 0, 106036 | 0);
  $2133();
  $2134($1_1 | 0, 106044 | 0);
  $2135();
  $2136($1_1 | 0, 106052 | 0);
  $2137();
  $2138($1_1 | 0, 106060 | 0);
  $2139();
  $2140($1_1 | 0, 106068 | 0);
  $2141();
  $2142($1_1 | 0, 106076 | 0);
  $2143();
  $2144($1_1 | 0, 106084 | 0);
  $2145();
  $2146($1_1 | 0, 106092 | 0);
  $2147();
  $2148($1_1 | 0, 106100 | 0);
  $2149();
  $2150($1_1 | 0, 106108 | 0);
  $2151();
  $2152($1_1 | 0, 106120 | 0);
  $2153();
  $2154($1_1 | 0, 106132 | 0);
  $2155();
  $2156($1_1 | 0, 106144 | 0);
  $2157();
  $2158($1_1 | 0, 106156 | 0);
  $2159();
  $2160($1_1 | 0, 106164 | 0);
  return $1_1 | 0;
 }
 
 function $2098($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2161($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 86992;
  return $1_1 | 0;
 }
 
 function $2099($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $2162($0_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 11 | 0 | 0) | 0;
  $2164($2_1 + 10 | 0 | 0, HEAP32[($2163($2_1 + 4 | 0 | 0, $0_1 | 0) | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2165($0_1 | 0, $1_1 | 0);
   $2166($0_1 | 0, $1_1 | 0);
  }
  $2167($2_1 + 10 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2100($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $2168($0_1 | 0) | 0;
  $2169($0_1 | 0);
  $2170($0_1 | 0, $1_1 | 0);
 }
 
 function $2101() {
  $2173(105868 | 0, 1 | 0) | 0;
 }
 
 function $2102($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104272 | 0) | 0 | 0);
 }
 
 function $2103() {
  $2174(105876 | 0, 1 | 0) | 0;
 }
 
 function $2104($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104280 | 0) | 0 | 0);
 }
 
 function $2105() {
  $2175(105884 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
 }
 
 function $2106($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104624 | 0) | 0 | 0);
 }
 
 function $2107() {
  $2176(105900 | 0, 1 | 0) | 0;
 }
 
 function $2108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104616 | 0) | 0 | 0);
 }
 
 function $2109() {
  $2177(105908 | 0, 1 | 0) | 0;
 }
 
 function $2110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104632 | 0) | 0 | 0);
 }
 
 function $2111() {
  $2178(105916 | 0, 1 | 0) | 0;
 }
 
 function $2112($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104640 | 0) | 0 | 0);
 }
 
 function $2113() {
  $2179(105928 | 0, 1 | 0) | 0;
 }
 
 function $2114($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104648 | 0) | 0 | 0);
 }
 
 function $2115() {
  $2180(105936 | 0, 1 | 0) | 0;
 }
 
 function $2116($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104664 | 0) | 0 | 0);
 }
 
 function $2117() {
  $2181(105944 | 0, 1 | 0) | 0;
 }
 
 function $2118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104656 | 0) | 0 | 0);
 }
 
 function $2119() {
  $2182(105952 | 0, 1 | 0) | 0;
 }
 
 function $2120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104672 | 0) | 0 | 0);
 }
 
 function $2121() {
  $2183(105960 | 0, 1 | 0) | 0;
 }
 
 function $2122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104680 | 0) | 0 | 0);
 }
 
 function $2123() {
  $2184(105984 | 0, 1 | 0) | 0;
 }
 
 function $2124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104688 | 0) | 0 | 0);
 }
 
 function $2125() {
  $2185(106012 | 0, 1 | 0) | 0;
 }
 
 function $2126($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104288 | 0) | 0 | 0);
 }
 
 function $2127() {
  $2186(106020 | 0, 1 | 0) | 0;
 }
 
 function $2128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104296 | 0) | 0 | 0);
 }
 
 function $2129() {
  $2187(106028 | 0, 1 | 0) | 0;
 }
 
 function $2130($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104304 | 0) | 0 | 0);
 }
 
 function $2131() {
  $2188(106036 | 0, 1 | 0) | 0;
 }
 
 function $2132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104312 | 0) | 0 | 0);
 }
 
 function $2133() {
  $2189(106044 | 0, 1 | 0) | 0;
 }
 
 function $2134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104352 | 0) | 0 | 0);
 }
 
 function $2135() {
  $2190(106052 | 0, 1 | 0) | 0;
 }
 
 function $2136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104360 | 0) | 0 | 0);
 }
 
 function $2137() {
  $2191(106060 | 0, 1 | 0) | 0;
 }
 
 function $2138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104368 | 0) | 0 | 0);
 }
 
 function $2139() {
  $2192(106068 | 0, 1 | 0) | 0;
 }
 
 function $2140($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104376 | 0) | 0 | 0);
 }
 
 function $2141() {
  $2193(106076 | 0, 1 | 0) | 0;
 }
 
 function $2142($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104384 | 0) | 0 | 0);
 }
 
 function $2143() {
  $2194(106084 | 0, 1 | 0) | 0;
 }
 
 function $2144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104392 | 0) | 0 | 0);
 }
 
 function $2145() {
  $2195(106092 | 0, 1 | 0) | 0;
 }
 
 function $2146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104400 | 0) | 0 | 0);
 }
 
 function $2147() {
  $2196(106100 | 0, 1 | 0) | 0;
 }
 
 function $2148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104408 | 0) | 0 | 0);
 }
 
 function $2149() {
  $2197(106108 | 0, 1 | 0) | 0;
 }
 
 function $2150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104320 | 0) | 0 | 0);
 }
 
 function $2151() {
  $2198(106120 | 0, 1 | 0) | 0;
 }
 
 function $2152($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104328 | 0) | 0 | 0);
 }
 
 function $2153() {
  $2199(106132 | 0, 1 | 0) | 0;
 }
 
 function $2154($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104336 | 0) | 0 | 0);
 }
 
 function $2155() {
  $2200(106144 | 0, 1 | 0) | 0;
 }
 
 function $2156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104344 | 0) | 0 | 0);
 }
 
 function $2157() {
  $2201(106156 | 0, 1 | 0) | 0;
 }
 
 function $2158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104416 | 0) | 0 | 0);
 }
 
 function $2159() {
  $2202(106164 | 0, 1 | 0) | 0;
 }
 
 function $2160($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2172($0_1 | 0, $1_1 | 0, $2171(104424 | 0) | 0 | 0);
 }
 
 function $2161($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 92184 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $2162($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2565($0_1 | 0, $1_1 | 0) | 0;
  $2566($1_1 + 4 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $2163($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2164($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2567($0_1 | 0, $1_1 | 0) | 0;
 }
 
 function $2165($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if ($1_1 >>> 0 <= ($2568($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   $2569($0_1 | 0);
   wasm2js_trap();
  }
  $2571($2_1 + 8 | 0 | 0, $2570($0_1 | 0) | 0 | 0, $1_1 | 0);
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $1_1;
  $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  HEAP32[($2572($0_1 | 0) | 0) >> 2] = $1_1 + ($3_1 << 2 | 0) | 0;
  $2573($0_1 | 0, 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2166($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $2574($2_1 + 4 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($4_1 | 0)) {
     break label$2
    }
    $2575($3_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return;
   }
   $2577($2570($0_1 | 0) | 0 | 0, $2576($1_1 | 0) | 0 | 0);
   $1_1 = $1_1 + 4 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   continue label$1;
  };
 }
 
 function $2167($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[$0_1 >> 0] = 1;
 }
 
 function $2168($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $2169($0_1) {
  $0_1 = $0_1 | 0;
  $2595($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $2170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2171($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $2244($0_1 | 0, $1_1 + 12 | 0 | 0);
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 + -1 | 0 | 0;
 }
 
 function $2172($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2205($1_1 | 0);
  $4_1 = $2212($3_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  label$1 : {
   $1_1 = $0_1 + 8 | 0;
   if ($2_1 >>> 0 < ($2168($1_1 | 0) | 0) >>> 0) {
    break label$1
   }
   $2215($1_1 | 0, $2_1 + 1 | 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[($2204($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
    break label$2
   }
   $2216(HEAP32[($2204($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
  }
  $0_1 = $2217($4_1 | 0) | 0;
  HEAP32[($2204($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
  $2213($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88104;
  return $1_1 | 0;
 }
 
 function $2174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88136;
  return $1_1 | 0;
 }
 
 function $2175($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = $2266($2098($0_1 | 0, $3_1 | 0) | 0 | 0) | 0;
  HEAP8[($3_1 + 12 | 0) >> 0] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = 85532;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = 85584;
  }
  return $3_1 | 0;
 }
 
 function $2176($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2266($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87048;
  return $1_1 | 0;
 }
 
 function $2177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2285($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87200;
  return $1_1 | 0;
 }
 
 function $2178($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2285($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 86616;
  HEAP32[($1_1 + 8 | 0) >> 2] = $1678() | 0;
  return $1_1 | 0;
 }
 
 function $2179($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2285($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87348;
  return $1_1 | 0;
 }
 
 function $2180($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2285($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87580;
  return $1_1 | 0;
 }
 
 function $2181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2285($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87464;
  return $1_1 | 0;
 }
 
 function $2182($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2285($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87696;
  return $1_1 | 0;
 }
 
 function $2183($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  HEAP16[($1_1 + 8 | 0) >> 1] = 11310;
  HEAP32[$1_1 >> 2] = 86664;
  $1247($1_1 + 12 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $2184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 46;
  HEAP32[($1_1 + 12 | 0) >> 2] = 44;
  HEAP32[$1_1 >> 2] = 86704;
  $1247($1_1 + 16 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $2185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88168;
  return $1_1 | 0;
 }
 
 function $2186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88416;
  return $1_1 | 0;
 }
 
 function $2187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88628;
  return $1_1 | 0;
 }
 
 function $2188($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88864;
  return $1_1 | 0;
 }
 
 function $2189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2654($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89860;
  return $1_1 | 0;
 }
 
 function $2190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2654($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90008;
  return $1_1 | 0;
 }
 
 function $2191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2654($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90124;
  return $1_1 | 0;
 }
 
 function $2192($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2654($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90240;
  return $1_1 | 0;
 }
 
 function $2193($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2655($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90356;
  return $1_1 | 0;
 }
 
 function $2194($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2656($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90524;
  return $1_1 | 0;
 }
 
 function $2195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2657($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90692;
  return $1_1 | 0;
 }
 
 function $2196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2658($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90860;
  return $1_1 | 0;
 }
 
 function $2197($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  $0_1 = $2659($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89064;
  HEAP32[$0_1 >> 2] = 89112;
  return $1_1 | 0;
 }
 
 function $2198($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  $0_1 = $2660($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89332;
  HEAP32[$0_1 >> 2] = 89380;
  return $1_1 | 0;
 }
 
 function $2199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  $2661($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89572;
  return $1_1 | 0;
 }
 
 function $2200($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2098($0_1 | 0, $1_1 | 0) | 0;
  $2661($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89732;
  return $1_1 | 0;
 }
 
 function $2201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2662($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 91028;
  return $1_1 | 0;
 }
 
 function $2202($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2662($2098($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 91148;
  return $1_1 | 0;
 }
 
 function $2203() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   if (HEAPU8[(0 + 104600 | 0) >> 0] | 0) {
    break label$1
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $2206() | 0;
   $2207(104596 | 0, $0_1 + 15 | 0 | 0, $0_1 + 8 | 0 | 0) | 0;
   $1414(111 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104600 | 0) >> 0] = 1;
  }
  $1_1 = $2209(104596 | 0) | 0;
  global$0 = $0_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2204($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $2205($0_1) {
  $0_1 = $0_1 | 0;
  $2210($0_1 + 4 | 0 | 0) | 0;
 }
 
 function $2206() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 1;
  $2232(104440 | 0, $0_1 + 12 | 0 | 0) | 0;
  $1_1 = $2233(104440 | 0) | 0;
  global$0 = $0_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2207($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2234($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2208($0_1) {
  $0_1 = $0_1 | 0;
  $2235(104596 | 0) | 0;
 }
 
 function $2209($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2210($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $2211($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($2227($0_1 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   $1282();
   wasm2js_trap();
  }
  return HEAP32[($2228($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $2212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $2214($0_1 | 0, $2_1 + 12 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2213($0_1) {
  $0_1 = $0_1 | 0;
  $2218($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $2214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2663($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $2168($0_1 | 0) | 0;
   if ($1_1 >>> 0 <= $2_1 >>> 0) {
    break label$1
   }
   $2224($0_1 | 0, $1_1 - $2_1 | 0 | 0);
   return;
  }
  label$2 : {
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   $2225($0_1 | 0, (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
  }
 }
 
 function $2216($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $2221($0_1 + 4 | 0 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
  }
  return ($1_1 | 0) == (-1 | 0) | 0;
 }
 
 function $2217($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($2226($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2226($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $2218($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($2226($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2226($0_1 | 0) | 0) >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2664($1_1 | 0);
  }
 }
 
 function $2219($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  HEAP32[$0_1 >> 2] = 85512;
  $1_1 = $0_1 + 8 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= ($2168($1_1 | 0) | 0) >>> 0) {
     break label$1
    }
    label$3 : {
     if (!(HEAP32[($2204($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
      break label$3
     }
     $2216(HEAP32[($2204($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  $2740($0_1 + 144 | 0 | 0) | 0;
  $2220($1_1 | 0) | 0;
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $2220($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2222($2163($1_1 + 12 | 0 | 0, $0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2221($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $2222($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $12_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!(HEAP32[$1_1 >> 2] | 0)) {
    break label$1
   }
   $2169($1_1 | 0);
   $2601(HEAP32[$0_1 >> 2] | 0 | 0);
   $12_1 = $2570(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   $2602($12_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $2598($0_1 | 0) | 0 | 0);
  }
 }
 
 function $2223($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2219($0_1 | 0) | 0 | 0, 156 | 0);
 }
 
 function $2224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((((HEAP32[($2572($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $2166($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $2570($0_1 | 0) | 0;
   $3_1 = $2607($2_1 + 12 | 0 | 0, $2599($0_1 | 0, ($2168($0_1 | 0) | 0) + $1_1 | 0 | 0) | 0 | 0, $2168($0_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   $2608($3_1 | 0, $1_1 | 0);
   $2609($0_1 | 0, $3_1 | 0);
   $2610($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $2225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $2168($0_1 | 0) | 0;
  $2595($0_1 | 0, $1_1 | 0);
  $2170($0_1 | 0, $2_1 | 0);
 }
 
 function $2226($0_1) {
  $0_1 = $0_1 | 0;
  return $2665($0_1 | 0) | 0 | 0;
 }
 
 function $2227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   $0_1 = $0_1 + 8 | 0;
   if ($1_1 >>> 0 >= ($2168($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   $2_1 = (HEAP32[($2228($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $2_1 | 0;
 }
 
 function $2228($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $2229() {
  $1414(112 | 0, 0 | 0, 65536 | 0) | 0;
 }
 
 function $2230($0_1) {
  $0_1 = $0_1 | 0;
  $2231(104440 | 0) | 0;
 }
 
 function $2231($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2232($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2097($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2233($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2234($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2235($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2236() {
  label$1 : {
   if (HEAPU8[(0 + 104608 | 0) >> 0] | 0) {
    break label$1
   }
   $2237(104604 | 0, $2203() | 0 | 0) | 0;
   $1414(113 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104608 | 0) >> 0] = 1;
  }
  return $2239(104604 | 0) | 0 | 0;
 }
 
 function $2237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2240($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2238($0_1) {
  $0_1 = $0_1 | 0;
  $2235(104604 | 0) | 0;
 }
 
 function $2239($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $2241($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $2241($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($2233(104440 | 0) | 0 | 0)) {
    break label$1
   }
   $2205($0_1 | 0);
  }
 }
 
 function $2242($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($2233(104440 | 0) | 0 | 0)) {
    break label$1
   }
   $2216($0_1 | 0) | 0;
  }
 }
 
 function $2243($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($2236() | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $2241($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $2244($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($2247($0_1 | 0) | 0 | 0) == (-1 | 0)) {
    break label$1
   }
   $1586($0_1 | 0, $2249($2_1 + 8 | 0 | 0, $2248($2_1 + 12 | 0 | 0, $1_1 | 0) | 0 | 0) | 0 | 0, 114 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2245($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2246($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $2247($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2666($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2250($0_1) {
  $0_1 = $0_1 | 0;
  $2667($0_1 | 0);
 }
 
 function $2251($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2252($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $3_1 = ((HEAP32[(($2_1 << 2 | 0) + 85584 | 0) >> 2] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $2253($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     $5_1 = HEAP32[$1_1 >> 2] | 0;
     if ($5_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $4_1 = HEAP32[(($5_1 << 2 | 0) + 85584 | 0) >> 2] | 0;
    }
    HEAP32[$3_1 >> 2] = $4_1;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $2254($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    label$3 : {
     $4_1 = HEAP32[$2_1 >> 2] | 0;
     if ($4_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     if ((HEAP32[(($4_1 << 2 | 0) + 85584 | 0) >> 2] | 0) & $1_1 | 0) {
      break label$1
     }
    }
    $2_1 = $2_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $2255($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    if ($4_1 >>> 0 > 127 >>> 0) {
     break label$1
    }
    if (!((HEAP32[(($4_1 << 2 | 0) + 85584 | 0) >> 2] | 0) & $1_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $2256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($2257() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $2257() {
  return HEAP32[($1595() | 0) >> 2] | 0 | 0;
 }
 
 function $2258($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($2257() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $2259($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($2260() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $2260() {
  return HEAP32[($1596() | 0) >> 2] | 0 | 0;
 }
 
 function $2261($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($2260() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $2262($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $2263($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $2264($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24 >> 24 | 0;
 }
 
 function $2265($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $2266($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2267($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 85532;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2718($1_1 | 0);
  }
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $2268($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2267($0_1 | 0) | 0 | 0, 16 | 0);
 }
 
 function $2269($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($2257() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 << 24 >> 24 | 0;
 }
 
 function $2270($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($2257() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $2271($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($2260() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 << 24 >> 24 | 0;
 }
 
 function $2272($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($2260() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $2273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $2274($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $2275($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) < (0 | 0) ? $2_1 : $1_1) | 0;
 }
 
 function $2276($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    HEAP8[$4_1 >> 0] = ($5_1 | 0) < (0 | 0) ? $3_1 : $5_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $2277($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2278($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $2279($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $2280($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $2281($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2282($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2283($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 - $2_1 | 0;
  $4_1 = HEAP32[($1280($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $2284($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2285($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2286($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2091($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2287($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAP32[$9_1 >> 2] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 4 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : {
   label$5 : {
    label$6 : while (1) {
     label$7 : {
      label$8 : {
       if (($2_1 | 0) == ($3_1 | 0)) {
        break label$8
       }
       if (($5_1 | 0) == ($6_1 | 0)) {
        break label$8
       }
       i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       $10_1 = 1;
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $11_1 = $2288($5_1 | 0, $4_1 | 0, ($9_1 - $2_1 | 0) >> 2 | 0 | 0, $6_1 - $5_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           switch ($11_1 + 1 | 0 | 0) {
           case 0:
            break label$12;
           case 1:
            break label$4;
           default:
            break label$11;
           };
          }
          HEAP32[$7_1 >> 2] = $5_1;
          label$13 : while (1) {
           if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
            break label$10
           }
           $9_1 = $2289($5_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($9_1 | 0) == (-1 | 0)) {
            break label$10
           }
           $5_1 = (HEAP32[$7_1 >> 2] | 0) + $9_1 | 0;
           HEAP32[$7_1 >> 2] = $5_1;
           $2_1 = $2_1 + 4 | 0;
           continue label$13;
          };
         }
         $5_1 = (HEAP32[$7_1 >> 2] | 0) + $11_1 | 0;
         HEAP32[$7_1 >> 2] = $5_1;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break label$9
         }
         label$14 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$14
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          $9_1 = $3_1;
          continue label$6;
         }
         $9_1 = $2289($8_1 + 4 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         if (($9_1 | 0) == (-1 | 0)) {
          break label$5
         }
         $2_1 = $8_1 + 4 | 0;
         label$15 : {
          if ($9_1 >>> 0 <= ($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) >>> 0) {
           break label$15
          }
          $10_1 = 1;
          break label$4;
         }
         label$16 : {
          label$17 : while (1) {
           if (!$9_1) {
            break label$16
           }
           $5_1 = HEAPU8[$2_1 >> 0] | 0;
           $10_1 = HEAP32[$7_1 >> 2] | 0;
           HEAP32[$7_1 >> 2] = $10_1 + 1 | 0;
           HEAP8[$10_1 >> 0] = $5_1;
           $9_1 = $9_1 + -1 | 0;
           $2_1 = $2_1 + 1 | 0;
           continue label$17;
          };
         }
         $2_1 = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
         HEAP32[$4_1 >> 2] = $2_1;
         $9_1 = $2_1;
         label$18 : while (1) {
          label$19 : {
           if (($9_1 | 0) != ($3_1 | 0)) {
            break label$19
           }
           $9_1 = $3_1;
           break label$7;
          }
          if (!(HEAP32[$9_1 >> 2] | 0)) {
           break label$7
          }
          $9_1 = $9_1 + 4 | 0;
          continue label$18;
         };
        }
        HEAP32[$4_1 >> 2] = $2_1;
        break label$5;
       }
       $2_1 = HEAP32[$4_1 >> 2] | 0;
      }
      $10_1 = ($2_1 | 0) != ($3_1 | 0);
      break label$4;
     }
     $5_1 = HEAP32[$7_1 >> 2] | 0;
     continue label$6;
    };
   }
   $10_1 = 2;
  }
  global$0 = $8_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $2288($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $1681($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $4_1 = $1597($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1682($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $2289($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1681($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $1430($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1682($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2290($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAPU8[$9_1 >> 0] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $10_1 = $2291($5_1 | 0, $4_1 | 0, $9_1 - $2_1 | 0 | 0, ($6_1 - $5_1 | 0) >> 2 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($10_1 | 0) != (-1 | 0)) {
            break label$12
           }
           label$13 : while (1) {
            HEAP32[$7_1 >> 2] = $5_1;
            if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break label$7
            }
            $6_1 = 1;
            label$14 : {
             label$15 : {
              label$16 : {
               $5_1 = $2292($5_1 | 0, $2_1 | 0, $9_1 - $2_1 | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
               switch ($5_1 + 2 | 0 | 0) {
               case 2:
                break label$14;
               case 1:
                break label$16;
               case 0:
                break label$9;
               default:
                break label$15;
               };
              }
              HEAP32[$4_1 >> 2] = $2_1;
              break label$11;
             }
             $6_1 = $5_1;
            }
            $2_1 = $2_1 + $6_1 | 0;
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
            continue label$13;
           };
          }
          $5_1 = (HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
           break label$8
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          label$17 : {
           if (($9_1 | 0) != ($3_1 | 0)) {
            break label$17
           }
           $9_1 = $3_1;
           continue label$4;
          }
          if (!($2292($5_1 | 0, $2_1 | 0, 1 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
           break label$10
          }
         }
         $9_1 = 2;
         break label$6;
        }
        HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
        $2_1 = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $9_1 = $2_1;
        label$18 : while (1) {
         label$19 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$19
          }
          $9_1 = $3_1;
          break label$5;
         }
         if (!(HEAPU8[$9_1 >> 0] | 0)) {
          break label$5
         }
         $9_1 = $9_1 + 1 | 0;
         continue label$18;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = 1;
       break label$6;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $9_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $9_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $2291($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $1681($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $4_1 = $1599($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1682($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $2292($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $1681($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $3_1 = $1425($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1682($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $2293($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $6_1 = 2;
  label$1 : {
   $2_1 = $2289($5_1 + 12 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   if (($2_1 + 1 | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $6_1 = 1;
   $2_1 = $2_1 + -1 | 0;
   if ($2_1 >>> 0 > ($3_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >>> 0) {
    break label$1
   }
   $6_1 = $5_1 + 12 | 0;
   label$2 : while (1) {
    label$3 : {
     if ($2_1) {
      break label$3
     }
     $6_1 = 0;
     break label$1;
    }
    $0_1 = HEAPU8[$6_1 >> 0] | 0;
    $1_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $1_1 + 1 | 0;
    HEAP8[$1_1 >> 0] = $0_1;
    $2_1 = $2_1 + -1 | 0;
    $6_1 = $6_1 + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $2294($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($2295(0 | 0, 0 | 0, 4 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break label$2
   }
   return 1 | 0;
  }
  return ($2296($0_1 | 0) | 0 | 0) == (1 | 0) | 0;
 }
 
 function $2295($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1681($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $1424($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1682($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2296($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1681($1_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  $2_1 = $1600() | 0;
  $1682($0_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2297($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2298($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($6_1 >>> 0 >= $4_1 >>> 0) {
     break label$1
    }
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    $7_1 = 1;
    label$3 : {
     label$4 : {
      $8_1 = $2299($2_1 | 0, $3_1 - $2_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      switch ($8_1 + 2 | 0 | 0) {
      case 0:
      case 1:
       break label$1;
      case 2:
       break label$3;
      default:
       break label$4;
      };
     }
     $7_1 = $8_1;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $7_1 + $5_1 | 0;
    $2_1 = $2_1 + $7_1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function $2299($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1681($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $1601($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1682($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2300($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return $2296($0_1 | 0) | 0 | 0;
 }
 
 function $2301($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2302($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2303($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2303($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $0_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($0_1 >>> 0 < $1_1 >>> 0) {
       break label$5
      }
      $7_1 = 0;
      break label$3;
     }
     $7_1 = 2;
     $3_1 = HEAPU16[$0_1 >> 1] | 0;
     if ($6_1 >>> 0 < $3_1 >>> 0) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if ($3_1 >>> 0 > 127 >>> 0) {
         break label$8
        }
        $7_1 = 1;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (1 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1;
        break label$7;
       }
       label$9 : {
        if ($3_1 >>> 0 > 2047 >>> 0) {
         break label$9
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (2 | 0)) {
         break label$1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$10 : {
        if ($3_1 >>> 0 > 55295 >>> 0) {
         break label$10
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (3 | 0)) {
         break label$1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$11 : {
        if ($3_1 >>> 0 > 56319 >>> 0) {
         break label$11
        }
        $7_1 = 1;
        if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
         break label$3
        }
        $8_1 = HEAPU16[($0_1 + 2 | 0) >> 1] | 0;
        if (($8_1 & 64512 | 0 | 0) != (56320 | 0)) {
         break label$6
        }
        if (($4_1 - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) < (4 | 0)) {
         break label$3
        }
        $7_1 = $3_1 & 960 | 0;
        if ((($7_1 << 10 | 0 | (($3_1 << 10 | 0) & 64512 | 0) | 0 | ($8_1 & 1023 | 0) | 0) + 65536 | 0) >>> 0 > $6_1 >>> 0) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $0_1 + 2 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        $7_1 = ($7_1 >>> 6 | 0) + 1 | 0;
        HEAP8[$0_1 >> 0] = $7_1 >>> 2 | 0 | 240 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($7_1 << 4 | 0) & 48 | 0 | (($3_1 >>> 2 | 0) & 15 | 0) | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($8_1 >>> 6 | 0) & 15 | 0 | (($3_1 << 4 | 0) & 48 | 0) | 0 | 128 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
        HEAP8[$3_1 >> 0] = $8_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       if ($3_1 >>> 0 < 57344 >>> 0) {
        break label$3
       }
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (3 | 0)) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 191 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
      }
      $0_1 = (HEAP32[$2_1 >> 2] | 0) + 2 | 0;
      HEAP32[$2_1 >> 2] = $0_1;
      continue label$4;
     }
     break label$4;
    };
    return 2 | 0;
   }
   return $7_1 | 0;
  }
  return 1 | 0;
 }
 
 function $2304($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2305($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2305($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $189_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $0_1 + 3 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if ($3_1 >>> 0 >= $1_1 >>> 0) {
       break label$4
      }
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      if ($7_1 >>> 0 >= $4_1 >>> 0) {
       break label$4
      }
      $8_1 = 2;
      $0_1 = HEAPU8[$3_1 >> 0] | 0;
      if ($6_1 >>> 0 < $0_1 >>> 0) {
       break label$2
      }
      label$6 : {
       label$7 : {
        if (($0_1 << 24 >> 24 | 0) < (0 | 0)) {
         break label$7
        }
        HEAP16[$7_1 >> 1] = $0_1;
        $0_1 = $3_1 + 1 | 0;
        break label$6;
       }
       if ($0_1 >>> 0 < 194 >>> 0) {
        break label$2
       }
       label$8 : {
        if ($0_1 >>> 0 > 223 >>> 0) {
         break label$8
        }
        label$9 : {
         if (($1_1 - $3_1 | 0 | 0) >= (2 | 0)) {
          break label$9
         }
         return 1 | 0;
        }
        $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $8_1 = 2;
        $0_1 = $9_1 & 63 | 0 | (($0_1 << 6 | 0) & 1984 | 0) | 0;
        if ($0_1 >>> 0 > $6_1 >>> 0) {
         break label$3
        }
        HEAP16[$7_1 >> 1] = $0_1;
        $0_1 = $3_1 + 2 | 0;
        break label$6;
       }
       label$10 : {
        if ($0_1 >>> 0 > 239 >>> 0) {
         break label$10
        }
        $8_1 = 1;
        $10_1 = $1_1 - $3_1 | 0;
        if (($10_1 | 0) < (2 | 0)) {
         break label$3
        }
        $9_1 = HEAP8[($3_1 + 1 | 0) >> 0] | 0;
        label$11 : {
         label$12 : {
          label$13 : {
           if (($0_1 | 0) == (237 | 0)) {
            break label$13
           }
           if (($0_1 | 0) != (224 | 0)) {
            break label$12
           }
           if (($9_1 & -32 | 0 | 0) != (-96 | 0)) {
            break label$2
           }
           break label$11;
          }
          if (($9_1 | 0) >= (-96 | 0)) {
           break label$2
          }
          break label$11;
         }
         if (($9_1 | 0) > (-65 | 0)) {
          break label$2
         }
        }
        if (($10_1 | 0) == (2 | 0)) {
         break label$3
        }
        $10_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        $8_1 = 2;
        $0_1 = $10_1 & 63 | 0 | (($9_1 & 63 | 0) << 6 | 0 | ($0_1 << 12 | 0) | 0) | 0;
        if (($0_1 & 65535 | 0) >>> 0 > $6_1 >>> 0) {
         break label$3
        }
        HEAP16[$7_1 >> 1] = $0_1;
        $0_1 = $3_1 + 3 | 0;
        break label$6;
       }
       if ($0_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       $8_1 = 1;
       $9_1 = $1_1 - $3_1 | 0;
       if (($9_1 | 0) < (2 | 0)) {
        break label$3
       }
       $10_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
       $11_1 = $10_1 << 24 >> 24;
       label$14 : {
        label$15 : {
         switch ($0_1 + -240 | 0 | 0) {
         case 0:
          if ((($11_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
           break label$2
          }
          break label$14;
         case 4:
          if (($11_1 | 0) >= (-112 | 0)) {
           break label$2
          }
          break label$14;
         default:
          break label$15;
         };
        }
        if (($11_1 | 0) > (-65 | 0)) {
         break label$2
        }
       }
       if (($9_1 | 0) == (2 | 0)) {
        break label$3
       }
       $11_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($9_1 | 0) == (3 | 0)) {
        break label$3
       }
       $3_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
       if (($3_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
        break label$3
       }
       $8_1 = 2;
       $3_1 = $3_1 & 63 | 0;
       $9_1 = $11_1 << 6 | 0;
       $0_1 = $0_1 & 7 | 0;
       if (($3_1 | ($9_1 & 4032 | 0 | (($10_1 << 12 | 0) & 258048 | 0 | ($0_1 << 18 | 0) | 0) | 0) | 0) >>> 0 > $6_1 >>> 0) {
        break label$3
       }
       $189_1 = $0_1 << 8 | 0;
       $0_1 = $10_1 << 2 | 0;
       HEAP16[$7_1 >> 1] = ($189_1 | ($0_1 & 192 | 0) | 0 | ($0_1 & 60 | 0) | 0 | (($11_1 >>> 4 | 0) & 3 | 0) | 0) + 16320 | 0 | 55296 | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 2 | 0;
       HEAP16[($7_1 + 2 | 0) >> 1] = $3_1 | ($9_1 & 960 | 0) | 0 | 56320 | 0;
       $0_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
      }
      HEAP32[$2_1 >> 2] = $0_1;
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 2 | 0;
      continue label$5;
     };
    }
    $8_1 = $3_1 >>> 0 < $1_1 >>> 0;
   }
   return $8_1 | 0;
  }
  return 2 | 0;
 }
 
 function $2306($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $2307($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2308($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2309($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $2310($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2310($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = $5_1 + ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 <= $6_1 >>> 0) {
     break label$2
    }
    $4_1 = HEAPU8[$5_1 >> 0] | 0;
    if ($3_1 >>> 0 < $4_1 >>> 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (($4_1 << 24 >> 24 | 0) < (0 | 0)) {
       break label$5
      }
      $5_1 = $5_1 + 1 | 0;
      break label$4;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 2 | 0;
      break label$4;
     }
     label$7 : {
      if ($4_1 >>> 0 > 239 >>> 0) {
       break label$7
      }
      if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
       break label$2
      }
      $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
      $7_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
      label$8 : {
       label$9 : {
        label$10 : {
         if (($4_1 | 0) == (237 | 0)) {
          break label$10
         }
         if (($4_1 | 0) != (224 | 0)) {
          break label$9
         }
         if (($7_1 & -32 | 0 | 0) == (-96 | 0)) {
          break label$8
         }
         break label$2;
        }
        if (($7_1 | 0) >= (-96 | 0)) {
         break label$2
        }
        break label$8;
       }
       if (($7_1 | 0) > (-65 | 0)) {
        break label$2
       }
      }
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if ((($7_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 3 | 0;
      break label$4;
     }
     if ($4_1 >>> 0 > 244 >>> 0) {
      break label$2
     }
     if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
      break label$2
     }
     if (($2_1 - $6_1 | 0) >>> 0 < 2 >>> 0) {
      break label$2
     }
     $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
     $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
     $7_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
     label$11 : {
      label$12 : {
       switch ($4_1 + -240 | 0 | 0) {
       case 0:
        if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
         break label$2
        }
        break label$11;
       case 4:
        if (($7_1 | 0) >= (-112 | 0)) {
         break label$2
        }
        break label$11;
       default:
        break label$12;
       };
      }
      if (($7_1 | 0) > (-65 | 0)) {
       break label$2
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
     $5_1 = $5_1 + 4 | 0;
     $6_1 = $6_1 + 1 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $2311($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $2312($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2313($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2303($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2314($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2305($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2315($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $2316($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2317($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2318($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $2310($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2319($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $2320($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2321($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2322($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2322($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($3_1 >>> 0 < $1_1 >>> 0) {
       break label$5
      }
      $0_1 = 0;
      break label$3;
     }
     $0_1 = 2;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if ($3_1 >>> 0 > $6_1 >>> 0) {
      break label$3
     }
     if (($3_1 & -2048 | 0 | 0) == (55296 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       if ($3_1 >>> 0 > 127 >>> 0) {
        break label$7
       }
       $0_1 = 1;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (1 | 0)) {
        break label$3
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1;
       break label$6;
      }
      label$8 : {
       if ($3_1 >>> 0 > 2047 >>> 0) {
        break label$8
       }
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (2 | 0)) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      $0_1 = HEAP32[$5_1 >> 2] | 0;
      $7_1 = $4_1 - $0_1 | 0;
      label$9 : {
       if ($3_1 >>> 0 > 65535 >>> 0) {
        break label$9
       }
       if (($7_1 | 0) < (3 | 0)) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      if (($7_1 | 0) < (4 | 0)) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = $3_1 >>> 18 | 0 | 240 | 0;
      $0_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = ($3_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      $0_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      $0_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
     }
     $3_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     continue label$4;
    };
   }
   return $0_1 | 0;
  }
  return 1 | 0;
 }
 
 function $2323($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2324($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2324($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $0_1 + 3 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$4
      }
      $8_1 = HEAP32[$5_1 >> 2] | 0;
      if ($8_1 >>> 0 >= $4_1 >>> 0) {
       break label$4
      }
      $7_1 = HEAP8[$0_1 >> 0] | 0;
      $3_1 = $7_1 & 255 | 0;
      label$6 : {
       label$7 : {
        if (($7_1 | 0) < (0 | 0)) {
         break label$7
        }
        if ($6_1 >>> 0 < $3_1 >>> 0) {
         break label$2
        }
        $7_1 = 1;
        break label$6;
       }
       if ($7_1 >>> 0 < -62 >>> 0) {
        break label$2
       }
       label$8 : {
        if ($7_1 >>> 0 > -33 >>> 0) {
         break label$8
        }
        label$9 : {
         if (($1_1 - $0_1 | 0 | 0) >= (2 | 0)) {
          break label$9
         }
         return 1 | 0;
        }
        $7_1 = 2;
        $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $7_1 = 2;
        $3_1 = $9_1 & 63 | 0 | (($3_1 << 6 | 0) & 1984 | 0) | 0;
        if ($3_1 >>> 0 <= $6_1 >>> 0) {
         break label$6
        }
        break label$3;
       }
       label$10 : {
        if ($7_1 >>> 0 > -17 >>> 0) {
         break label$10
        }
        $7_1 = 1;
        $10_1 = $1_1 - $0_1 | 0;
        if (($10_1 | 0) < (2 | 0)) {
         break label$3
        }
        $9_1 = HEAP8[($0_1 + 1 | 0) >> 0] | 0;
        label$11 : {
         label$12 : {
          label$13 : {
           if (($3_1 | 0) == (237 | 0)) {
            break label$13
           }
           if (($3_1 | 0) != (224 | 0)) {
            break label$12
           }
           if (($9_1 & -32 | 0 | 0) == (-96 | 0)) {
            break label$11
           }
           break label$2;
          }
          if (($9_1 | 0) < (-96 | 0)) {
           break label$11
          }
          break label$2;
         }
         if (($9_1 | 0) > (-65 | 0)) {
          break label$2
         }
        }
        if (($10_1 | 0) == (2 | 0)) {
         break label$3
        }
        $10_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        $7_1 = 2;
        $3_1 = $10_1 & 63 | 0 | (($9_1 & 63 | 0) << 6 | 0 | (($3_1 << 12 | 0) & 61440 | 0) | 0) | 0;
        if ($3_1 >>> 0 > $6_1 >>> 0) {
         break label$3
        }
        $7_1 = 3;
        break label$6;
       }
       if ($7_1 >>> 0 > -12 >>> 0) {
        break label$2
       }
       $7_1 = 1;
       $9_1 = $1_1 - $0_1 | 0;
       if (($9_1 | 0) < (2 | 0)) {
        break label$3
       }
       $10_1 = HEAP8[($0_1 + 1 | 0) >> 0] | 0;
       label$14 : {
        label$15 : {
         switch ($3_1 + -240 | 0 | 0) {
         case 0:
          if ((($10_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
           break label$2
          }
          break label$14;
         case 4:
          if (($10_1 | 0) >= (-112 | 0)) {
           break label$2
          }
          break label$14;
         default:
          break label$15;
         };
        }
        if (($10_1 | 0) > (-65 | 0)) {
         break label$2
        }
       }
       if (($9_1 | 0) == (2 | 0)) {
        break label$3
       }
       $11_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($9_1 | 0) == (3 | 0)) {
        break label$3
       }
       $9_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       $7_1 = 2;
       $3_1 = $9_1 & 63 | 0 | (($11_1 << 6 | 0) & 4032 | 0 | (($10_1 & 63 | 0) << 12 | 0 | (($3_1 << 18 | 0) & 1835008 | 0) | 0) | 0) | 0;
       if ($3_1 >>> 0 > $6_1 >>> 0) {
        break label$3
       }
       $7_1 = 4;
      }
      HEAP32[$8_1 >> 2] = $3_1;
      HEAP32[$2_1 >> 2] = $0_1 + $7_1 | 0;
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 4 | 0;
      continue label$5;
     };
    }
    $7_1 = $0_1 >>> 0 < $1_1 >>> 0;
   }
   return $7_1 | 0;
  }
  return 2 | 0;
 }
 
 function $2325($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $2326($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2327($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2328($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $2329($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2329($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = $5_1 + ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $4_1 = HEAP8[$5_1 >> 0] | 0;
    $7_1 = $4_1 & 255 | 0;
    label$4 : {
     label$5 : {
      if (($4_1 | 0) < (0 | 0)) {
       break label$5
      }
      if ($3_1 >>> 0 < $7_1 >>> 0) {
       break label$2
      }
      $4_1 = 1;
      break label$4;
     }
     if ($4_1 >>> 0 < -62 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > -33 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $4_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($4_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if (($4_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $4_1 = 2;
      break label$4;
     }
     label$7 : {
      if ($4_1 >>> 0 > -17 >>> 0) {
       break label$7
      }
      if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
       break label$2
      }
      $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
      $4_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
      label$8 : {
       label$9 : {
        label$10 : {
         if (($7_1 | 0) == (237 | 0)) {
          break label$10
         }
         if (($7_1 | 0) != (224 | 0)) {
          break label$9
         }
         if (($4_1 & -32 | 0 | 0) == (-96 | 0)) {
          break label$8
         }
         break label$2;
        }
        if (($4_1 | 0) >= (-96 | 0)) {
         break label$2
        }
        break label$8;
       }
       if (($4_1 | 0) > (-65 | 0)) {
        break label$2
       }
      }
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if ((($4_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $4_1 = 3;
      break label$4;
     }
     if ($4_1 >>> 0 > -12 >>> 0) {
      break label$2
     }
     if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
      break label$2
     }
     $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
     $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
     $4_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
     label$11 : {
      label$12 : {
       switch ($7_1 + -240 | 0 | 0) {
       case 0:
        if ((($4_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
         break label$2
        }
        break label$11;
       case 4:
        if (($4_1 | 0) >= (-112 | 0)) {
         break label$2
        }
        break label$11;
       default:
        break label$12;
       };
      }
      if (($4_1 | 0) > (-65 | 0)) {
       break label$2
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if ((($4_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
     $4_1 = 4;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $5_1 + $4_1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $2330($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $2331($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2332($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2322($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2333($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2324($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2334($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $2335($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2336($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2337($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $2329($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2338($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $2339($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 86664;
  $2740($0_1 + 12 | 0 | 0) | 0;
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $2340($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2339($0_1 | 0) | 0 | 0, 24 | 0);
 }
 
 function $2341($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 86704;
  $2740($0_1 + 16 | 0 | 0) | 0;
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $2342($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2341($0_1 | 0) | 0 | 0, 28 | 0);
 }
 
 function $2343($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 8 | 0) >> 0] | 0 | 0;
 }
 
 function $2344($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $2345($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 9 | 0) >> 0] | 0 | 0;
 }
 
 function $2346($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $2347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1913($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
 }
 
 function $2348($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1913($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
 }
 
 function $2349($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1397($0_1 | 0, 66245 | 0) | 0;
 }
 
 function $2350($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2351($0_1 | 0, 86736 | 0) | 0;
 }
 
 function $2351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = $1624($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  $2757($0_1 | 0, $1_1 | 0, $2352($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2352($0_1) {
  $0_1 = $0_1 | 0;
  return $2650($0_1 | 0) | 0 | 0;
 }
 
 function $2353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1397($0_1 | 0, 66263 | 0) | 0;
 }
 
 function $2354($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2351($0_1 | 0, 86756 | 0) | 0;
 }
 
 function $2355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2356($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2746($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2357($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2651($0_1 | 0, $1_1 | 0);
 }
 
 function $2358($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 104700 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 104696 | 0) >> 2] | 0 | 0;
  }
  $2359();
  HEAP8[(0 + 104700 | 0) >> 0] = 1;
  HEAP32[(0 + 104696 | 0) >> 2] = 104848;
  return 104848 | 0;
 }
 
 function $2359() {
  label$1 : {
   if (HEAPU8[(0 + 105016 | 0) >> 0] | 0) {
    break label$1
   }
   $1414(115 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105016 | 0) >> 0] = 1;
  }
  $2355(104848 | 0, 65603 | 0) | 0;
  $2355(104860 | 0, 65610 | 0) | 0;
  $2355(104872 | 0, 65576 | 0) | 0;
  $2355(104884 | 0, 65584 | 0) | 0;
  $2355(104896 | 0, 65567 | 0) | 0;
  $2355(104908 | 0, 65617 | 0) | 0;
  $2355(104920 | 0, 65594 | 0) | 0;
  $2355(104932 | 0, 65953 | 0) | 0;
  $2355(104944 | 0, 65976 | 0) | 0;
  $2355(104956 | 0, 66250 | 0) | 0;
  $2355(104968 | 0, 66374 | 0) | 0;
  $2355(104980 | 0, 65670 | 0) | 0;
  $2355(104992 | 0, 66029 | 0) | 0;
  $2355(105004 | 0, 65772 | 0) | 0;
 }
 
 function $2360($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105016;
  label$1 : while (1) {
   $1_1 = $2740($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (104848 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $2361($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 104708 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 104704 | 0) >> 2] | 0 | 0;
  }
  $2362();
  HEAP8[(0 + 104708 | 0) >> 0] = 1;
  HEAP32[(0 + 104704 | 0) >> 2] = 105024;
  return 105024 | 0;
 }
 
 function $2362() {
  label$1 : {
   if (HEAPU8[(0 + 105192 | 0) >> 0] | 0) {
    break label$1
   }
   $1414(116 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105192 | 0) >> 0] = 1;
  }
  $2364(105024 | 0, 91228 | 0) | 0;
  $2364(105036 | 0, 91256 | 0) | 0;
  $2364(105048 | 0, 91284 | 0) | 0;
  $2364(105060 | 0, 91316 | 0) | 0;
  $2364(105072 | 0, 91356 | 0) | 0;
  $2364(105084 | 0, 91392 | 0) | 0;
  $2364(105096 | 0, 91420 | 0) | 0;
  $2364(105108 | 0, 91456 | 0) | 0;
  $2364(105120 | 0, 91472 | 0) | 0;
  $2364(105132 | 0, 91488 | 0) | 0;
  $2364(105144 | 0, 91504 | 0) | 0;
  $2364(105156 | 0, 91520 | 0) | 0;
  $2364(105168 | 0, 91536 | 0) | 0;
  $2364(105180 | 0, 91552 | 0) | 0;
 }
 
 function $2363($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105192;
  label$1 : while (1) {
   $1_1 = $2754($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (105024 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $2364($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2394($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2365($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 104716 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 104712 | 0) >> 2] | 0 | 0;
  }
  $2366();
  HEAP8[(0 + 104716 | 0) >> 0] = 1;
  HEAP32[(0 + 104712 | 0) >> 2] = 105200;
  return 105200 | 0;
 }
 
 function $2366() {
  label$1 : {
   if (HEAPU8[(0 + 105488 | 0) >> 0] | 0) {
    break label$1
   }
   $1414(117 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105488 | 0) >> 0] = 1;
  }
  $2355(105200 | 0, 65554 | 0) | 0;
  $2355(105212 | 0, 65545 | 0) | 0;
  $2355(105224 | 0, 66064 | 0) | 0;
  $2355(105236 | 0, 66013 | 0) | 0;
  $2355(105248 | 0, 65624 | 0) | 0;
  $2355(105260 | 0, 66269 | 0) | 0;
  $2355(105272 | 0, 65562 | 0) | 0;
  $2355(105284 | 0, 65719 | 0) | 0;
  $2355(105296 | 0, 65829 | 0) | 0;
  $2355(105308 | 0, 65812 | 0) | 0;
  $2355(105320 | 0, 65820 | 0) | 0;
  $2355(105332 | 0, 65839 | 0) | 0;
  $2355(105344 | 0, 65984 | 0) | 0;
  $2355(105356 | 0, 66406 | 0) | 0;
  $2355(105368 | 0, 65878 | 0) | 0;
  $2355(105380 | 0, 65785 | 0) | 0;
  $2355(105392 | 0, 65624 | 0) | 0;
  $2355(105404 | 0, 65957 | 0) | 0;
  $2355(105416 | 0, 66001 | 0) | 0;
  $2355(105428 | 0, 66138 | 0) | 0;
  $2355(105440 | 0, 65937 | 0) | 0;
  $2355(105452 | 0, 65762 | 0) | 0;
  $2355(105464 | 0, 65666 | 0) | 0;
  $2355(105476 | 0, 66402 | 0) | 0;
 }
 
 function $2367($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105488;
  label$1 : while (1) {
   $1_1 = $2740($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (105200 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $2368($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 104724 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 104720 | 0) >> 2] | 0 | 0;
  }
  $2369();
  HEAP8[(0 + 104724 | 0) >> 0] = 1;
  HEAP32[(0 + 104720 | 0) >> 2] = 105504;
  return 105504 | 0;
 }
 
 function $2369() {
  label$1 : {
   if (HEAPU8[(0 + 105792 | 0) >> 0] | 0) {
    break label$1
   }
   $1414(118 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105792 | 0) >> 0] = 1;
  }
  $2364(105504 | 0, 91568 | 0) | 0;
  $2364(105516 | 0, 91600 | 0) | 0;
  $2364(105528 | 0, 91636 | 0) | 0;
  $2364(105540 | 0, 91660 | 0) | 0;
  $2364(105552 | 0, 91684 | 0) | 0;
  $2364(105564 | 0, 91700 | 0) | 0;
  $2364(105576 | 0, 91720 | 0) | 0;
  $2364(105588 | 0, 91740 | 0) | 0;
  $2364(105600 | 0, 91768 | 0) | 0;
  $2364(105612 | 0, 91808 | 0) | 0;
  $2364(105624 | 0, 91840 | 0) | 0;
  $2364(105636 | 0, 91876 | 0) | 0;
  $2364(105648 | 0, 91912 | 0) | 0;
  $2364(105660 | 0, 91928 | 0) | 0;
  $2364(105672 | 0, 91944 | 0) | 0;
  $2364(105684 | 0, 91960 | 0) | 0;
  $2364(105696 | 0, 91684 | 0) | 0;
  $2364(105708 | 0, 91976 | 0) | 0;
  $2364(105720 | 0, 91992 | 0) | 0;
  $2364(105732 | 0, 92008 | 0) | 0;
  $2364(105744 | 0, 92024 | 0) | 0;
  $2364(105756 | 0, 92040 | 0) | 0;
  $2364(105768 | 0, 92056 | 0) | 0;
  $2364(105780 | 0, 92072 | 0) | 0;
 }
 
 function $2370($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105792;
  label$1 : while (1) {
   $1_1 = $2754($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (105504 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $2371($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 104732 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 104728 | 0) >> 2] | 0 | 0;
  }
  $2372();
  HEAP8[(0 + 104732 | 0) >> 0] = 1;
  HEAP32[(0 + 104728 | 0) >> 2] = 105808;
  return 105808 | 0;
 }
 
 function $2372() {
  label$1 : {
   if (HEAPU8[(0 + 105832 | 0) >> 0] | 0) {
    break label$1
   }
   $1414(119 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105832 | 0) >> 0] = 1;
  }
  $2355(105808 | 0, 66453 | 0) | 0;
  $2355(105820 | 0, 66450 | 0) | 0;
 }
 
 function $2373($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105832;
  label$1 : while (1) {
   $1_1 = $2740($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (105808 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $2374($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 104740 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 104736 | 0) >> 2] | 0 | 0;
  }
  $2375();
  HEAP8[(0 + 104740 | 0) >> 0] = 1;
  HEAP32[(0 + 104736 | 0) >> 2] = 105840;
  return 105840 | 0;
 }
 
 function $2375() {
  label$1 : {
   if (HEAPU8[(0 + 105864 | 0) >> 0] | 0) {
    break label$1
   }
   $1414(120 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105864 | 0) >> 0] = 1;
  }
  $2364(105840 | 0, 92088 | 0) | 0;
  $2364(105852 | 0, 92100 | 0) | 0;
 }
 
 function $2376($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105864;
  label$1 : while (1) {
   $1_1 = $2754($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (105840 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $2377($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 104741 | 0) >> 0] | 0) {
    break label$1
   }
   $1414(121 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104741 | 0) >> 0] = 1;
  }
  return 96028 | 0;
 }
 
 function $2378($0_1) {
  $0_1 = $0_1 | 0;
  $2740(96028 | 0) | 0;
 }
 
 function $2379($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 104756 | 0) >> 0] | 0) {
    break label$1
   }
   $2351(104744 | 0, 86780 | 0) | 0;
   $1414(122 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104756 | 0) >> 0] = 1;
  }
  return 104744 | 0;
 }
 
 function $2380($0_1) {
  $0_1 = $0_1 | 0;
  $2754(104744 | 0) | 0;
 }
 
 function $2381($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 104757 | 0) >> 0] | 0) {
    break label$1
   }
   $1414(123 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104757 | 0) >> 0] = 1;
  }
  return 96040 | 0;
 }
 
 function $2382($0_1) {
  $0_1 = $0_1 | 0;
  $2740(96040 | 0) | 0;
 }
 
 function $2383($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 104772 | 0) >> 0] | 0) {
    break label$1
   }
   $2351(104760 | 0, 86816 | 0) | 0;
   $1414(124 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104772 | 0) >> 0] = 1;
  }
  return 104760 | 0;
 }
 
 function $2384($0_1) {
  $0_1 = $0_1 | 0;
  $2754(104760 | 0) | 0;
 }
 
 function $2385($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 104788 | 0) >> 0] | 0) {
    break label$1
   }
   $1397(104776 | 0, 66410 | 0) | 0;
   $1414(125 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104788 | 0) >> 0] = 1;
  }
  return 104776 | 0;
 }
 
 function $2386($0_1) {
  $0_1 = $0_1 | 0;
  $2740(104776 | 0) | 0;
 }
 
 function $2387($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 104804 | 0) >> 0] | 0) {
    break label$1
   }
   $2351(104792 | 0, 86852 | 0) | 0;
   $1414(126 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104804 | 0) >> 0] = 1;
  }
  return 104792 | 0;
 }
 
 function $2388($0_1) {
  $0_1 = $0_1 | 0;
  $2754(104792 | 0) | 0;
 }
 
 function $2389($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 104820 | 0) >> 0] | 0) {
    break label$1
   }
   $1397(104808 | 0, 65941 | 0) | 0;
   $1414(127 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104820 | 0) >> 0] = 1;
  }
  return 104808 | 0;
 }
 
 function $2390($0_1) {
  $0_1 = $0_1 | 0;
  $2740(104808 | 0) | 0;
 }
 
 function $2391($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 104836 | 0) >> 0] | 0) {
    break label$1
   }
   $2351(104824 | 0, 86936 | 0) | 0;
   $1414(128 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104836 | 0) >> 0] = 1;
  }
  return 104824 | 0;
 }
 
 function $2392($0_1) {
  $0_1 = $0_1 | 0;
  $2754(104824 | 0) | 0;
 }
 
 function $2393($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1678() | 0 | 0)) {
    break label$1
   }
   $1593(HEAP32[$0_1 >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2760($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2395($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2396($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2397($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2398($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2399($0_1) {
  $0_1 = $0_1 | 0;
  $2400($0_1 + 8 | 0 | 0) | 0;
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $2400($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2401($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2399($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2402($0_1) {
  $0_1 = $0_1 | 0;
  $2403($0_1 + 8 | 0 | 0) | 0;
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $2403($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2404($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2402($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2405($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2406($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2406($0_1) {
  $0_1 = $0_1 | 0;
  $2393($0_1 + 8 | 0 | 0) | 0;
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $2407($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2408($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2408($0_1) {
  $0_1 = $0_1 | 0;
  $2393($0_1 + 8 | 0 | 0) | 0;
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $2409($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2410($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2411($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2412($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2413($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2414($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2415($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2416($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2417($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2418($0_1) {
  $0_1 = $0_1 | 0;
  $2717($1612($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2419($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2421($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2420($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if ($3_1 >>> 0 > ($1369($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1370($3_1 | 0) | 0)) {
      break label$3
     }
     $1350($0_1 | 0, $3_1 | 0);
     $5_1 = $1344($0_1 | 0) | 0;
     break label$2;
    }
    $1372($4_1 + 8 | 0 | 0, $1260($0_1 | 0) | 0 | 0, ($1371($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $1373($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1374($0_1 | 0, $5_1 | 0);
    $1375($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1376($0_1 | 0, $3_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1351($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($4_1 + 7 | 0) >> 0] = 0;
   $1351($5_1 | 0, $4_1 + 7 | 0 | 0);
   $1249($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1377($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $2422($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2423($0_1) {
  $0_1 = $0_1 | 0;
  return $2426($0_1 | 0) | 0 | 0;
 }
 
 function $2424($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2428($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2425($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if ($3_1 >>> 0 > ($2429($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($2430($3_1 | 0) | 0)) {
      break label$3
     }
     $2012($0_1 | 0, $3_1 | 0);
     $5_1 = $2011($0_1 | 0) | 0;
     break label$2;
    }
    $2432($4_1 + 8 | 0 | 0, $2020($0_1 | 0) | 0 | 0, ($2431($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $2433($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $2434($0_1 | 0, $5_1 | 0);
    $2435($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $2010($0_1 | 0, $3_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $2009($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   $2009($5_1 | 0, $4_1 + 4 | 0 | 0);
   $1898($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $2436($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2426($0_1) {
  $0_1 = $0_1 | 0;
  return $2427($0_1 | 0) | 0 | 0;
 }
 
 function $2427($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2428($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $2429($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $2437($1917($0_1 | 0) | 0 | 0) | 0;
  return ($0_1 >>> ($0_1 >>> 0 > (($1379() | 0) >>> 1 | 0) >>> 0) | 0) + -8 | 0 | 0;
 }
 
 function $2430($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 2 >>> 0 | 0;
 }
 
 function $2431($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 1;
  label$1 : {
   if ($0_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $0_1 = $2441($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $2432($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2439($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $2433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2434($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1921($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $2435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1921($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
  $0_1 = $1921($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
 }
 
 function $2436($0_1) {
  $0_1 = $0_1 | 0;
  $1380(66169 | 0);
  wasm2js_trap();
 }
 
 function $2437($0_1) {
  $0_1 = $0_1 | 0;
  return ($1379() | 0) >>> 2 | 0 | 0;
 }
 
 function $2438($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2439($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 <= ($2437($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   $1384();
   wasm2js_trap();
  }
  return $1385($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $2440($0_1) {
  $0_1 = $0_1 | 0;
  return $2445($0_1 | 0) | 0 | 0;
 }
 
 function $2441($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 1 | 0) & -2 | 0 | 0;
 }
 
 function $2442($0_1) {
  $0_1 = $0_1 | 0;
  return $2443($0_1 | 0) | 0 | 0;
 }
 
 function $2443($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2444($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2445($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2446($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2447($0_1 | 0, $1254($1253($0_1 | 0) | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
 }
 
 function $2447($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1271($0_1 | 0) | 0;
   if ($2_1 >>> 0 <= $4_1 >>> 0) {
    break label$1
   }
   $1267($0_1 | 0, $2_1 - $4_1 | 0 | 0);
  }
  $1952($0_1 | 0, $2_1 | 0);
  HEAP8[($3_1 + 15 | 0) >> 0] = 0;
  $1351($1_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  label$2 : {
   if ($2_1 >>> 0 >= $4_1 >>> 0) {
    break label$2
   }
   $1269($0_1 | 0, $4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2448($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1369($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($8_1 - $1_1 | 0) >>> 0) {
    break label$1
   }
   $9_1 = $1253($0_1 | 0) | 0;
   label$2 : {
    if ($1_1 >>> 0 >= (($8_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($7_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $8_1 = ($1371(HEAP32[($1402($7_1 + 4 | 0 | 0, $7_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $1258($0_1 | 0);
   $1372($7_1 + 4 | 0 | 0, $1260($0_1 | 0) | 0 | 0, $8_1 | 0);
   $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   $1373($8_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   label$3 : {
    if (!$4_1) {
     break label$3
    }
    $1137($1254($8_1 | 0) | 0 | 0, $1254($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$4 : {
    $2_1 = $5_1 + $4_1 | 0;
    if (($3_1 | 0) == ($2_1 | 0)) {
     break label$4
    }
    $1137((($1254($8_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1254($9_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $3_1 - $2_1 | 0 | 0) | 0;
   }
   label$5 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$5
    }
    $1348($1260($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1374($0_1 | 0, $8_1 | 0);
   $1375($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1377($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2449($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2450($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2451($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2451($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1355($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $2452($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1920($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $2453($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2454($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1534($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2455($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1534($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2456($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1603($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2457($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1603($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2458($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2459($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2460($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $2461($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2462(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $2462($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1861($0_1 | 0, $1_1 | 0);
 }
 
 function $2463($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $2464($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2464($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2465(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $2465($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2466($0_1 | 0, $1_1 | 0);
 }
 
 function $2466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $2467($0_1) {
  $0_1 = $0_1 | 0;
  return $2468($1920($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2468($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2469($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2470($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $2470($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $2471($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $2473($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $2472($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $2474($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2475($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $2476($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $2471($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2477($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2472($0_1) {
  $0_1 = $0_1 | 0;
  return $2478($0_1 | 0) | 0 | 0;
 }
 
 function $2473($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    $4_1 = HEAP8[$2_1 >> 0] | 0;
    $1187($1186($5_1 + 12 | 0 | 0) | 0 | 0, $4_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
    $1188($5_1 + 12 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $2476($0_1 | 0, $5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $2474($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2480($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2475($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2481($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2476($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2479($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2477($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1293($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1293($2_1 | 0) | 0;
  $2482($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2478($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2479($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2480($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1296($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2481($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $2482($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2483($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2484($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $2484($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $2485($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $2487($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $2486($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $2488($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2489($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $2490($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $2485($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2491($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2486($0_1) {
  $0_1 = $0_1 | 0;
  return $2492($0_1 | 0) | 0 | 0;
 }
 
 function $2487($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    $1244($1243($5_1 + 12 | 0 | 0) | 0 | 0, $4_1 | 0) | 0;
    $2_1 = $2_1 + 4 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
    $1245($5_1 + 12 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $2490($0_1 | 0, $5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $2488($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2494($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2495($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2490($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2493($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2491($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1318($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1318($2_1 | 0) | 0;
  $2496($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2492($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2493($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2494($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1321($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2495($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $2496($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2497($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $2498($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $2499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $2500($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  $1_1 = 0;
  label$1 : {
   if ($2501($3_1 + 3 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 12 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $2501($3_1 + 2 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2501($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $2502($0_1) {
  $0_1 = $0_1 | 0;
  return $2505($0_1 | 0) | 0 | 0;
 }
 
 function $2503($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $2504($0_1 | 0, $2_1 | 0, $1_1 - $0_1 | 0 | 0) | 0 | 0;
 }
 
 function $2504($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return !($1092($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0) | 0;
 }
 
 function $2505($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $2506($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2506($0_1) {
  $0_1 = $0_1 | 0;
  return $2507($0_1 | 0) | 0 | 0;
 }
 
 function $2507($0_1) {
  $0_1 = $0_1 | 0;
  return $2508(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2508($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1254($1974($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2509($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $2510($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $2429($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($8_1 - $1_1 | 0) >>> 0) {
    break label$1
   }
   $9_1 = $1775($0_1 | 0) | 0;
   label$2 : {
    if ($1_1 >>> 0 >= (($8_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($7_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $8_1 = ($2431(HEAP32[($1402($7_1 + 4 | 0 | 0, $7_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $2449($0_1 | 0);
   $2432($7_1 + 4 | 0 | 0, $2020($0_1 | 0) | 0 | 0, $8_1 | 0);
   $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   $2433($8_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   label$3 : {
    if (!$4_1) {
     break label$3
    }
    $1203($1336($8_1 | 0) | 0 | 0, $1336($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$4 : {
    $2_1 = $5_1 + $4_1 | 0;
    if (($3_1 | 0) == ($2_1 | 0)) {
     break label$4
    }
    $4_1 = $4_1 << 2 | 0;
    $1203((($1336($8_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1336($9_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $3_1 - $2_1 | 0 | 0) | 0;
   }
   label$5 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$5
    }
    $2450($2020($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $2434($0_1 | 0, $8_1 | 0);
   $2435($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $2436($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2511($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $2512($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  $1_1 = 0;
  label$1 : {
   if ($2515($3_1 + 3 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 12 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $2515($3_1 + 2 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2513($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2516($2422($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2514($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2517($0_1 | 0, $1_1 | 0, $2_1 | 0, $2015($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $2515($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $2516($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $2517($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if ($3_1 >>> 0 > ($2429($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($2430($3_1 | 0) | 0)) {
      break label$3
     }
     $2012($0_1 | 0, $3_1 | 0);
     $5_1 = $2011($0_1 | 0) | 0;
     break label$2;
    }
    $2432($4_1 + 8 | 0 | 0, $2020($0_1 | 0) | 0 | 0, ($2431($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $2433($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $2434($0_1 | 0, $5_1 | 0);
    $2435($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $2010($0_1 | 0, $3_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $2009($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   $2009($5_1 | 0, $4_1 + 4 | 0 | 0);
   $1898($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $2436($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2518($0_1) {
  $0_1 = $0_1 | 0;
  return $2521($0_1 | 0) | 0 | 0;
 }
 
 function $2519($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $2520($0_1 | 0, $2_1 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0 | 0;
 }
 
 function $2520($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return !($1092($0_1 | 0, $1_1 | 0, $2_1 << 2 | 0 | 0) | 0) | 0;
 }
 
 function $2521($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $2522($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2522($0_1) {
  $0_1 = $0_1 | 0;
  return $2523($0_1 | 0) | 0 | 0;
 }
 
 function $2523($0_1) {
  $0_1 = $0_1 | 0;
  return $2524(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2524($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1336($2042($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2525($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2527($0_1 | 0, $1_1 | 0);
 }
 
 function $2527($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2020($1_1 | 0) | 0;
  $2020($0_1 | 0) | 0;
 }
 
 function $2528($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2529($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $2529($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $2530($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1294($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1293($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $2531($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1296($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $2532($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $2530($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2533($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2531($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2535($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2532($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2534($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2533($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2536($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2536($2_1 | 0) | 0;
  $1305($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2534($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2535($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2541($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2536($0_1) {
  $0_1 = $0_1 | 0;
  return $2537($0_1 | 0) | 0 | 0;
 }
 
 function $2537($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $2538($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2538($0_1) {
  $0_1 = $0_1 | 0;
  return $2539($0_1 | 0) | 0 | 0;
 }
 
 function $2539($0_1) {
  $0_1 = $0_1 | 0;
  return $2540(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2540($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1307($1976($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2541($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2542($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2542($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $2059($2_1 + 12 | 0 | 0, $1_1 - ($2538($2_1 + 12 | 0 | 0) | 0) | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2543($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2544($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2545($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $2545($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $2546($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1319($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1318($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $2547($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1321($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $2548($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $2546($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2549($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2551($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2548($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2550($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2549($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2552($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2552($2_1 | 0) | 0;
  $1330($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2550($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2551($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2557($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2552($0_1) {
  $0_1 = $0_1 | 0;
  return $2553($0_1 | 0) | 0 | 0;
 }
 
 function $2553($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $2554($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2554($0_1) {
  $0_1 = $0_1 | 0;
  return $2555($0_1 | 0) | 0 | 0;
 }
 
 function $2555($0_1) {
  $0_1 = $0_1 | 0;
  return $2556(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2556($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1332($2044($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2557($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2558($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $2074($2_1 + 12 | 0 | 0, ($1_1 - ($2554($2_1 + 12 | 0 | 0) | 0) | 0) >> 2 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2559($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2560($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $2561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $2560($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $2560($1_1 | 0) | 0;
  $3_1 = HEAP32[($1280($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  label$1 : {
   $3_1 = $2096($2564($0_1 | 0) | 0 | 0, $2564($1_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   if ($3_1) {
    break label$1
   }
   $3_1 = 0;
   if (($2560($0_1 | 0) | 0 | 0) == ($2560($1_1 | 0) | 0 | 0)) {
    break label$1
   }
   $3_1 = ($2560($0_1 | 0) | 0) >>> 0 < ($2560($1_1 | 0) | 0) >>> 0 ? -1 : 1;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $2562($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2563($0_1) {
  $0_1 = $0_1 | 0;
  return $1399($0_1 | 0) | 0 | 0;
 }
 
 function $2564($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $2566($0_1) {
  $0_1 = $0_1 | 0;
  return $2578($0_1 | 0) | 0 | 0;
 }
 
 function $2567($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $2568($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $2580($2579($0_1 | 0) | 0 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $1175() | 0;
  $0_1 = HEAP32[($1280($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2569($0_1) {
  $0_1 = $0_1 | 0;
  $1380(65789 | 0);
  wasm2js_trap();
 }
 
 function $2570($0_1) {
  $0_1 = $0_1 | 0;
  return $2582($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $2571($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2581($1_1 | 0, $2_1 | 0, 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $2572($0_1) {
  $0_1 = $0_1 | 0;
  return $2583($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $2573($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2574($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2575($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2576($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2593($1_1 | 0) | 0;
 }
 
 function $2578($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 120 | 0) >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $2579($0_1) {
  $0_1 = $0_1 | 0;
  return $2585($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $2580($0_1) {
  $0_1 = $0_1 | 0;
  return $2584($0_1 | 0) | 0 | 0;
 }
 
 function $2581($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 30 >>> 0) {
     break label$2
    }
    if ((HEAPU8[($0_1 + 120 | 0) >> 0] | 0) & 1 | 0) {
     break label$2
    }
    HEAP8[($0_1 + 120 | 0) >> 0] = 1;
    break label$1;
   }
   $0_1 = $2588($2587($3_1 + 15 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2582($0_1) {
  $0_1 = $0_1 | 0;
  return $2591($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2583($0_1) {
  $0_1 = $0_1 | 0;
  return $2592($0_1 | 0) | 0 | 0;
 }
 
 function $2584($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $2585($0_1) {
  $0_1 = $0_1 | 0;
  return $2586($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2586($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2587($0_1) {
  $0_1 = $0_1 | 0;
  return $2589($0_1 | 0) | 0 | 0;
 }
 
 function $2588($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 <= ($2590($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   $1384();
   wasm2js_trap();
  }
  return $1385($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $2589($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2590($0_1) {
  $0_1 = $0_1 | 0;
  return ($1379() | 0) >>> 2 | 0 | 0;
 }
 
 function $2591($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2592($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2593($0_1) {
  $0_1 = $0_1 | 0;
  return $2594($0_1 | 0) | 0 | 0;
 }
 
 function $2594($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $2595($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + -4 | 0;
    $2596($2570($0_1 | 0) | 0 | 0, $2576($2_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $2596($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2597($1_1 | 0);
 }
 
 function $2597($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2598($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($2600($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $2599($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   $3_1 = $2568($0_1 | 0) | 0;
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    break label$1
   }
   label$2 : {
    $1_1 = $2598($0_1 | 0) | 0;
    if ($1_1 >>> 0 >= ($3_1 >>> 1 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
    $3_1 = HEAP32[($1402($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
   }
   global$0 = $2_1 + 16 | 0;
   return $3_1 | 0;
  }
  $2569($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2600($0_1) {
  $0_1 = $0_1 | 0;
  return $2603($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $2601($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2602($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2605($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2603($0_1) {
  $0_1 = $0_1 | 0;
  return $2604($0_1 | 0) | 0 | 0;
 }
 
 function $2604($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2605($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) != ($0_1 | 0)) {
     break label$2
    }
    HEAP8[($0_1 + 120 | 0) >> 0] = 0;
    break label$1;
   }
   $2606($2587($3_1 + 15 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2606($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1355($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $2607($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $2611($0_1 + 12 | 0 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   $2571($4_1 + 4 | 0 | 0, $2612($0_1 | 0) | 0 | 0, $1_1 | 0);
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  HEAP32[$0_1 >> 2] = $5_1;
  $3_1 = $5_1 + ($2_1 << 2 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[($2613($0_1 | 0) | 0) >> 2] = $5_1 + ($1_1 << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2608($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $2614($2_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $2577($2612($0_1 | 0) | 0 | 0, $2576(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0);
    $3_1 = (HEAP32[$1_1 >> 2] | 0) + 4 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    continue label$2;
   };
  }
  $2615($1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2609($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $2601($0_1 | 0);
  $3_1 = $2570($0_1 | 0) | 0;
  $4_1 = $2616($2_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = $2616($2_1 + 4 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  $6_1 = $2616($2_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $2617($3_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $2618($2_1 + 12 | 0 | 0) | 0;
  $2619($0_1 | 0, $1_1 + 4 | 0 | 0);
  $2619($0_1 + 4 | 0 | 0, $1_1 + 8 | 0 | 0);
  $2619($2572($0_1 | 0) | 0 | 0, $2613($1_1 | 0) | 0 | 0);
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $2573($0_1 | 0, $2168($0_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2610($0_1) {
  $0_1 = $0_1 | 0;
  $2620($0_1 | 0);
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $2602($2612($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $2621($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2611($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2565($0_1 | 0, $1_1 | 0) | 0;
  $2622($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $2612($0_1) {
  $0_1 = $0_1 | 0;
  return $2623($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $2613($0_1) {
  $0_1 = $0_1 | 0;
  return $2624($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $2614($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $3_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2615($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2616($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2617($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $2626($1_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function $2618($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2619($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $2620($0_1) {
  $0_1 = $0_1 | 0;
  $2646($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $2621($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($2647($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $2622($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2623($0_1) {
  $0_1 = $0_1 | 0;
  return $2625($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2624($0_1) {
  $0_1 = $0_1 | 0;
  return $2592($0_1 | 0) | 0 | 0;
 }
 
 function $2625($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2626($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2627($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2627($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2628($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $2628($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2629($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $2629($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $2630($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $2632($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $2631($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $2633($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2634($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $2635($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $2630($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2636($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2631($0_1) {
  $0_1 = $0_1 | 0;
  return $2641($0_1 | 0) | 0 | 0;
 }
 
 function $2632($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : while (1) {
    if (!($2637($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($2638($5_1 + 12 | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($2639($5_1 + 4 | 0 | 0) | 0) >> 2] = $3_1;
    $2640($5_1 + 12 | 0 | 0) | 0;
    $2640($5_1 + 4 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $2635($0_1 | 0, $5_1 + 12 | 0 | 0, $5_1 + 4 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $2633($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2643($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2634($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2644($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2635($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2642($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2636($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2631($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2631($2_1 | 0) | 0;
  $2642($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2637($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($2618($0_1 | 0) | 0 | 0) != ($2618($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $2638($0_1) {
  $0_1 = $0_1 | 0;
  $2645();
  return $2639($0_1 | 0) | 0 | 0;
 }
 
 function $2639($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + -4 | 0 | 0;
 }
 
 function $2640($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + -4 | 0;
  return $0_1 | 0;
 }
 
 function $2641($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2642($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2643($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2634($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2644($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $2645() {
  
 }
 
 function $2646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2648($0_1 | 0, $1_1 | 0);
 }
 
 function $2647($0_1) {
  $0_1 = $0_1 | 0;
  return $2649($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $2648($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $2_1 = $2612($0_1 | 0) | 0;
    $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $2596($2_1 | 0, $2576($3_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
 }
 
 function $2649($0_1) {
  $0_1 = $0_1 | 0;
  return $2604($0_1 | 0) | 0 | 0;
 }
 
 function $2650($0_1) {
  $0_1 = $0_1 | 0;
  return $1594($0_1 | 0) | 0 | 0;
 }
 
 function $2651($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $2652($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2652($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2653(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $2653($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1256($0_1 | 0, $1_1 | 0);
 }
 
 function $2654($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2655($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2656($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2657($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2658($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2659($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 92120;
  return $0_1 | 0;
 }
 
 function $2660($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 92156;
  return $0_1 | 0;
 }
 
 function $2661($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = $1678() | 0;
  return $0_1 | 0;
 }
 
 function $2662($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2663($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2664($0_1) {
  $0_1 = $0_1 | 0;
  $2216($0_1 | 0) | 0;
 }
 
 function $2665($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2668($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2667($0_1) {
  $0_1 = $0_1 | 0;
  $2669($0_1 | 0);
 }
 
 function $2668($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2669($0_1) {
  $0_1 = $0_1 | 0;
  $2671($2670(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
 }
 
 function $2670($0_1) {
  $0_1 = $0_1 | 0;
  return $2673($0_1 | 0) | 0 | 0;
 }
 
 function $2671($0_1) {
  $0_1 = $0_1 | 0;
  $2672($0_1 | 0);
 }
 
 function $2672($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = $2674() | 0;
 }
 
 function $2673($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2674() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 104612 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 104612 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $2675($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2678($0_1 | 0, $1_1 | 0) | 0;
  $1410($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $2676($0_1) {
  $0_1 = $0_1 | 0;
  return $2679($0_1 | 0) | 0 | 0;
 }
 
 function $2677($0_1) {
  $0_1 = $0_1 | 0;
  return $1411($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2678($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2679($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2680($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1690($0_1 | 0) | 0;
   if ($2_1 >>> 0 <= $4_1 >>> 0) {
    break label$1
   }
   $2018($0_1 | 0, $2_1 - $4_1 | 0 | 0);
  }
  $2019($0_1 | 0, $2_1 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  $2009($1_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
  label$2 : {
   if ($2_1 >>> 0 >= $4_1 >>> 0) {
    break label$2
   }
   $2013($0_1 | 0, $4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2681($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $2682($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1578($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2683() {
  return $2684() | 0 | 0;
 }
 
 function $2684() {
  return -2147483648 | 0;
 }
 
 function $2685() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2687() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2686() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2688() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2687() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0 | 0;
 }
 
 function $2688() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1 | 0;
 }
 
 function $2689($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1575($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2690() {
  return $2691() | 0 | 0;
 }
 
 function $2691() {
  return 65535 | 0;
 }
 
 function $2692() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2693() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2693() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1 | 0;
 }
 
 function $2694($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround($1608($0_1 | 0, $1_1 | 0, $1678() | 0 | 0)));
 }
 
 function $2695($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return +(+$1609($0_1 | 0, $1_1 | 0, $1678() | 0 | 0));
 }
 
 function $2696($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1610($3_1 | 0, $1_1 | 0, $2_1 | 0, $1678() | 0 | 0);
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2697($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $2698($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2699($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2700($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2701($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2702($0_1) {
  $0_1 = $0_1 | 0;
  return $2704($0_1 | 0) | 0 | 0;
 }
 
 function $2703($0_1) {
  $0_1 = $0_1 | 0;
  return $1411($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2704($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2705($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2706($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2707($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2708($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2709() {
  $2229();
 }
 
 function $2710($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2711($0_1) {
  $0_1 = $0_1 | 0;
  wasm2js_trap();
 }
 
 function $2712($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   if ($0_1 & 3 | 0) {
    break label$1
   }
   if (($1_1 >>> 0) % ($0_1 >>> 0) | 0) {
    break label$1
   }
   $0_1 = $1088($2_1 + 12 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
   $3_1 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$2 = $0_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $2713($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = $2714($0_1 | 0) | 0;
   if ($0_1) {
    break label$1
   }
   $2715();
  }
  return $0_1 | 0;
 }
 
 function $2714($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $1082($1_1 | 0) | 0;
    if ($2_1) {
     break label$1
    }
    $0_1 = $2779() | 0;
    if (!$0_1) {
     break label$1
    }
    FUNCTION_TABLE[$0_1 | 0]();
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $2715() {
  $2725();
  wasm2js_trap();
 }
 
 function $2716($0_1) {
  $0_1 = $0_1 | 0;
  $1084($0_1 | 0);
 }
 
 function $2717($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2716($0_1 | 0);
 }
 
 function $2718($0_1) {
  $0_1 = $0_1 | 0;
  $2716($0_1 | 0);
 }
 
 function $2719($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $1_1 = $2720($0_1 | 0, $1_1 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $2715();
  }
  return $1_1 | 0;
 }
 
 function $2720($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $1_1 >>> 0 > 4 >>> 0 ? $1_1 : 4;
  $0_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $2721($2_1 | 0, $0_1 | 0) | 0;
    if ($3_1) {
     break label$1
    }
    $1_1 = $2779() | 0;
    if (!$1_1) {
     break label$1
    }
    FUNCTION_TABLE[$1_1 | 0]();
    continue label$2;
   };
  }
  return $3_1 | 0;
 }
 
 function $2721($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = (($0_1 + $1_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0;
  return $2712($0_1 | 0, ($1_1 >>> 0 > $2_1 >>> 0 ? $1_1 : $2_1) | 0) | 0 | 0;
 }
 
 function $2722($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2723($0_1 | 0);
 }
 
 function $2723($0_1) {
  $0_1 = $0_1 | 0;
  $1084($0_1 | 0);
 }
 
 function $2724($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2722($0_1 | 0, $2_1 | 0);
 }
 
 function $2725() {
  $1119();
  wasm2js_trap();
 }
 
 function $2726($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 < 257 >>> 0) {
     break label$2
    }
    HEAP32[($1081() | 0) >> 2] = 29;
    $1_1 = -1;
    break label$1;
   }
   $1110(1 | 0, $2_1 + 12 | 0 | 0) | 0;
   $1_1 = $1098(fimport$26($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
   $1110(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2727($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if ($2092($1_1 | 0, 65988 | 0) | 0) {
    break label$1
   }
   $2764($2_1 + 4 | 0 | 0, 67320 | 0, $1_1 | 0);
   $2770(44 | 0, $1277($2_1 + 4 | 0 | 0) | 0 | 0);
   wasm2js_trap();
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2728($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2729($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($2726($1_1 + 12 | 0 | 0, 4 | 0) | 0)) {
    break label$1
   }
   $2770(HEAP32[($1081() | 0) >> 2] | 0 | 0, 66333 | 0);
   wasm2js_trap();
  }
  $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2730($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 95336 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $2731($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $1078($1_1 | 0) | 0;
  $3_1 = $2713($2_1 + 13 | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1031($2732($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2732($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 12 | 0 | 0;
 }
 
 function $2733($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $2730($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 95448 + 8 | 0;
  $2731($0_1 + 4 | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2734($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2735($0_1) {
  $0_1 = $0_1 | 0;
  $1119();
  wasm2js_trap();
 }
 
 function $2736($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAPU16[((($0_1 >>> 0 > 153 >>> 0 ? 0 : $0_1) << 1 | 0) + 94160 | 0) >> 1] | 0) + 92237 | 0 | 0;
 }
 
 function $2737($0_1) {
  $0_1 = $0_1 | 0;
  return $2736($0_1 | 0, $0_1 | 0) | 0 | 0;
 }
 
 function $2738($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1308($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2739($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1369($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0) {
    break label$1
   }
   $10_1 = $1253($0_1 | 0) | 0;
   label$2 : {
    if ($1_1 >>> 0 >= (($9_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($8_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $9_1 = ($1371(HEAP32[($1402($8_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $1258($0_1 | 0);
   $1372($8_1 + 4 | 0 | 0, $1260($0_1 | 0) | 0 | 0, $9_1 | 0);
   $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
   $1373($9_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   label$3 : {
    if (!$4_1) {
     break label$3
    }
    $1137($1254($9_1 | 0) | 0 | 0, $1254($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$4 : {
    if (!$6_1) {
     break label$4
    }
    $1137(($1254($9_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   $11_1 = $5_1 + $4_1 | 0;
   $7_1 = $3_1 - $11_1 | 0;
   label$5 : {
    if (($3_1 | 0) == ($11_1 | 0)) {
     break label$5
    }
    $1137((($1254($9_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1254($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $7_1 | 0) | 0;
   }
   label$6 : {
    $3_1 = $1_1 + 1 | 0;
    if (($3_1 | 0) == (11 | 0)) {
     break label$6
    }
    $1348($1260($0_1 | 0) | 0 | 0, $10_1 | 0, $3_1 | 0);
   }
   $1374($0_1 | 0, $9_1 | 0);
   $1375($0_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $7_1 | 0;
   $1376($0_1 | 0, $4_1 | 0);
   HEAP8[($8_1 + 12 | 0) >> 0] = 0;
   $1351($9_1 + $4_1 | 0 | 0, $8_1 + 12 | 0 | 0);
   $1249($0_1 | 0, $2_1 + $1_1 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1377($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2740($0_1) {
  $0_1 = $0_1 | 0;
  $1258($0_1 | 0);
  label$1 : {
   if (!($1257($0_1 | 0) | 0)) {
    break label$1
   }
   $1348($1260($0_1 | 0) | 0 | 0, $1343($0_1 | 0) | 0 | 0, $1275($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2741($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP8[($3_1 + 15 | 0) >> 0] = $2_1;
  $2742($0_1 | 0, $1_1 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2742($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2768($0_1 | 0, $2767($1_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2743($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if ($2_1 >>> 0 > ($1369($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1370($2_1 | 0) | 0)) {
      break label$3
     }
     $1350($0_1 | 0, $2_1 | 0);
     $4_1 = $1344($0_1 | 0) | 0;
     break label$2;
    }
    $1372($3_1 + 8 | 0 | 0, $1260($0_1 | 0) | 0 | 0, ($1371($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1373($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1374($0_1 | 0, $4_1 | 0);
    $1375($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1376($0_1 | 0, $2_1 | 0);
   }
   $1137($1254($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $1351($4_1 + $2_1 | 0 | 0, $3_1 + 7 | 0 | 0);
   $1249($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1377($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2744($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($1370($2_1 | 0) | 0)) {
      break label$3
     }
     $4_1 = $1344($0_1 | 0) | 0;
     $1350($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    if ($2_1 >>> 0 > ($1369($0_1 | 0) | 0) >>> 0) {
     break label$1
    }
    $1372($3_1 + 8 | 0 | 0, $1260($0_1 | 0) | 0 | 0, ($1371($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1373($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1374($0_1 | 0, $4_1 | 0);
    $1375($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1376($0_1 | 0, $2_1 | 0);
   }
   $1137($1254($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   $1249($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1377($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2745($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $1272($0_1 | 0) | 0;
  $4_1 = $1271($0_1 | 0) | 0;
  label$1 : {
   if ($2_1 >>> 0 > $3_1 >>> 0) {
    break label$1
   }
   label$2 : {
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     break label$2
    }
    $1267($0_1 | 0, $2_1 - $4_1 | 0 | 0);
   }
   $3_1 = $1254($1253($0_1 | 0) | 0 | 0) | 0;
   $2738($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $2447($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $2739($0_1 | 0, $3_1 | 0, $2_1 - $3_1 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $2746($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2745($0_1 | 0, $1_1 | 0, $1399($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2747($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1272($0_1 | 0) | 0;
    $5_1 = $1271($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $1267($0_1 | 0, $2_1 | 0);
    $4_1 = $1254($1253($0_1 | 0) | 0 | 0) | 0;
    $1137($4_1 + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1952($0_1 | 0, $2_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $1351($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    break label$1;
   }
   $2739($0_1 | 0, $4_1 | 0, ($2_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2748($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if ($1_1 >>> 0 > ($1369($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1370($1_1 | 0) | 0)) {
      break label$3
     }
     $1350($0_1 | 0, $1_1 | 0);
     $4_1 = $1344($0_1 | 0) | 0;
     break label$2;
    }
    $1372($3_1 + 8 | 0 | 0, $1260($0_1 | 0) | 0 | 0, ($1371($1_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1373($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1374($0_1 | 0, $4_1 | 0);
    $1375($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1376($0_1 | 0, $1_1 | 0);
   }
   $2741($1254($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $1351($4_1 + $1_1 | 0 | 0, $3_1 + 7 | 0 | 0);
   $1249($0_1 | 0, $1_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1377($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2749($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = $1257($0_1 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 10;
    $1_1 = $1261($0_1 | 0) | 0;
    break label$1;
   }
   $4_1 = ($1275($0_1 | 0) | 0) + -1 | 0;
   $1_1 = $1276($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (($1_1 | 0) != ($4_1 | 0)) {
      break label$5
     }
     $1951($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1267($0_1 | 0, 1 | 0);
     $1253($0_1 | 0) | 0;
     break label$4;
    }
    $1267($0_1 | 0, 1 | 0);
    $1253($0_1 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $4_1 = $1344($0_1 | 0) | 0;
    $1350($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$3;
   }
   $4_1 = $1343($0_1 | 0) | 0;
   $1376($0_1 | 0, $1_1 + 1 | 0 | 0);
  }
  $0_1 = $4_1 + $1_1 | 0;
  $1351($0_1 | 0, $2_1 + 15 | 0 | 0);
  HEAP8[($2_1 + 14 | 0) >> 0] = 0;
  $1351($0_1 + 1 | 0 | 0, $2_1 + 14 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2750($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $4_1 = $1272($0_1 | 0) | 0;
    $5_1 = $1271($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $1951($0_1 | 0, $4_1 | 0, ($1_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
   }
   $1267($0_1 | 0, $1_1 | 0);
   $4_1 = $1253($0_1 | 0) | 0;
   $2741(($1254($4_1 | 0) | 0) + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   $1_1 = $5_1 + $1_1 | 0;
   $1952($0_1 | 0, $1_1 | 0);
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $1351($4_1 + $1_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2751($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = $1271($0_1 | 0) | 0;
   if ($1_1 >>> 0 <= $3_1 >>> 0) {
    break label$1
   }
   $2750($0_1 | 0, $1_1 - $3_1 | 0 | 0, $2_1 | 0) | 0;
   return;
  }
  $2446($0_1 | 0, $1_1 | 0);
 }
 
 function $2752($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1333($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2753($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $2429($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0) {
    break label$1
   }
   $10_1 = $1775($0_1 | 0) | 0;
   label$2 : {
    if ($1_1 >>> 0 >= (($9_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($8_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $9_1 = ($2431(HEAP32[($1402($8_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $2449($0_1 | 0);
   $2432($8_1 + 4 | 0 | 0, $2020($0_1 | 0) | 0 | 0, $9_1 | 0);
   $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
   $2433($9_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   label$3 : {
    if (!$4_1) {
     break label$3
    }
    $1203($1336($9_1 | 0) | 0 | 0, $1336($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$4 : {
    if (!$6_1) {
     break label$4
    }
    $1203(($1336($9_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   $11_1 = $5_1 + $4_1 | 0;
   $7_1 = $3_1 - $11_1 | 0;
   label$5 : {
    if (($3_1 | 0) == ($11_1 | 0)) {
     break label$5
    }
    $3_1 = $4_1 << 2 | 0;
    $1203((($1336($9_1 | 0) | 0) + $3_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1336($10_1 | 0) | 0) + $3_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $7_1 | 0) | 0;
   }
   label$6 : {
    $3_1 = $1_1 + 1 | 0;
    if (($3_1 | 0) == (2 | 0)) {
     break label$6
    }
    $2450($2020($0_1 | 0) | 0 | 0, $10_1 | 0, $3_1 | 0);
   }
   $2434($0_1 | 0, $9_1 | 0);
   $2435($0_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $7_1 | 0;
   $2010($0_1 | 0, $4_1 | 0);
   HEAP32[($8_1 + 12 | 0) >> 2] = 0;
   $2009($9_1 + ($4_1 << 2 | 0) | 0 | 0, $8_1 + 12 | 0 | 0);
   $1898($0_1 | 0, $2_1 + $1_1 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $2436($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2754($0_1) {
  $0_1 = $0_1 | 0;
  $2449($0_1 | 0);
  label$1 : {
   if (!($1835($0_1 | 0) | 0)) {
    break label$1
   }
   $2450($2020($0_1 | 0) | 0 | 0, $2008($0_1 | 0) | 0 | 0, $2452($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2755($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2756($0_1 | 0, $1_1 | 0, $3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2756($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2769($0_1 | 0, $2767($1_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2757($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if ($2_1 >>> 0 > ($2429($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($2430($2_1 | 0) | 0)) {
      break label$3
     }
     $2012($0_1 | 0, $2_1 | 0);
     $4_1 = $2011($0_1 | 0) | 0;
     break label$2;
    }
    $2432($3_1 + 8 | 0 | 0, $2020($0_1 | 0) | 0 | 0, ($2431($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $2433($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $2434($0_1 | 0, $4_1 | 0);
    $2435($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $2010($0_1 | 0, $2_1 | 0);
   }
   $1203($1336($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $2009($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 4 | 0 | 0);
   $1898($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2436($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2758($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($2430($2_1 | 0) | 0)) {
      break label$3
     }
     $4_1 = $2011($0_1 | 0) | 0;
     $2012($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    if ($2_1 >>> 0 > ($2429($0_1 | 0) | 0) >>> 0) {
     break label$1
    }
    $2432($3_1 + 8 | 0 | 0, $2020($0_1 | 0) | 0 | 0, ($2431($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $2433($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $2434($0_1 | 0, $4_1 | 0);
    $2435($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $2010($0_1 | 0, $2_1 | 0);
   }
   $1203($1336($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   $1898($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2436($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2759($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $2014($0_1 | 0) | 0;
  $4_1 = $1690($0_1 | 0) | 0;
  label$1 : {
   if ($2_1 >>> 0 > $3_1 >>> 0) {
    break label$1
   }
   label$2 : {
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     break label$2
    }
    $2018($0_1 | 0, $2_1 - $4_1 | 0 | 0);
   }
   $3_1 = $1336($1775($0_1 | 0) | 0 | 0) | 0;
   $2752($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $2680($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $2753($0_1 | 0, $3_1 | 0, $2_1 - $3_1 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $2760($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2759($0_1 | 0, $1_1 | 0, $2352($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2761($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $2014($0_1 | 0) | 0;
    $5_1 = $1690($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $2018($0_1 | 0, $2_1 | 0);
    $4_1 = $1336($1775($0_1 | 0) | 0 | 0) | 0;
    $1203($4_1 + ($5_1 << 2 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $2019($0_1 | 0, $2_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $2009($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    break label$1;
   }
   $2753($0_1 | 0, $4_1 | 0, ($2_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2762($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if ($1_1 >>> 0 > ($2429($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($2430($1_1 | 0) | 0)) {
      break label$3
     }
     $2012($0_1 | 0, $1_1 | 0);
     $4_1 = $2011($0_1 | 0) | 0;
     break label$2;
    }
    $2432($3_1 + 8 | 0 | 0, $2020($0_1 | 0) | 0 | 0, ($2431($1_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $2433($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $2434($0_1 | 0, $4_1 | 0);
    $2435($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $2010($0_1 | 0, $1_1 | 0);
   }
   $2755($1336($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $2009($4_1 + ($1_1 << 2 | 0) | 0 | 0, $3_1 + 4 | 0 | 0);
   $1898($0_1 | 0, $1_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2436($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2763($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = $1835($0_1 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 1;
    $1_1 = $1837($0_1 | 0) | 0;
    break label$1;
   }
   $4_1 = ($2452($0_1 | 0) | 0) + -1 | 0;
   $1_1 = $1836($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (($1_1 | 0) != ($4_1 | 0)) {
      break label$5
     }
     $2017($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $2018($0_1 | 0, 1 | 0);
     $1775($0_1 | 0) | 0;
     break label$4;
    }
    $2018($0_1 | 0, 1 | 0);
    $1775($0_1 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $4_1 = $2011($0_1 | 0) | 0;
    $2012($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$3;
   }
   $4_1 = $2008($0_1 | 0) | 0;
   $2010($0_1 | 0, $1_1 + 1 | 0 | 0);
  }
  $0_1 = $4_1 + ($1_1 << 2 | 0) | 0;
  $2009($0_1 | 0, $2_1 + 12 | 0 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  $2009($0_1 + 4 | 0 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2764($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1399($1_1 | 0) | 0;
  $5_1 = $1271($2_1 | 0) | 0;
  $1262($2_1 | 0);
  $1914($3_1 + 14 | 0 | 0);
  $0_1 = $1254($1253($2765($0_1 | 0, $5_1 + $4_1 | 0 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0 | 0) | 0;
  $1137($0_1 | 0, $1_1 | 0, $4_1 | 0) | 0;
  $4_1 = $0_1 + $4_1 | 0;
  $1137($4_1 | 0, $1270($2_1 | 0) | 0 | 0, $5_1 | 0) | 0;
  $2741($4_1 + $5_1 | 0 | 0, 1 | 0, 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2765($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $2_1 = $1265($0_1 | 0, $3_1 + 15 | 0 | 0, $2_1 | 0) | 0;
   if ($1_1 >>> 0 > ($1369($2_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1370($1_1 | 0) | 0)) {
      break label$3
     }
     $0_1 = $1259($2_1 | 0) | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = 0;
     $1350($2_1 | 0, $1_1 | 0);
     break label$2;
    }
    $0_1 = $1371($1_1 | 0) | 0;
    $0_1 = $0_1 + 1 | 0;
    $4_1 = $2766($1260($2_1 | 0) | 0 | 0, $0_1 | 0) | 0;
    $1373($4_1 | 0, $0_1 | 0);
    $1375($2_1 | 0, $0_1 | 0);
    $1374($2_1 | 0, $4_1 | 0);
    $1376($2_1 | 0, $1_1 | 0);
   }
   $1249($2_1 | 0, $1_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return $2_1 | 0;
  }
  $1377($2_1 | 0);
  wasm2js_trap();
 }
 
 function $2766($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1381($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2767($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2768($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!$1_1) {
     break label$1
    }
    HEAP8[$0_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
    $1_1 = $1_1 + -1 | 0;
    $0_1 = $0_1 + 1 | 0;
    continue label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $2769($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!$1_1) {
     break label$1
    }
    HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    $1_1 = $1_1 + -1 | 0;
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $2770($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1119();
  wasm2js_trap();
 }
 
 function $2771($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2772($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2772($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
    if (($2_1 | 0) < (0 | 0)) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    if (($2_1 & 1073741823 | 0 | 0) != (HEAP32[(($1067() | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   label$3 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    return $2_1 | 0;
   }
   return $1432($1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  return $2773($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = $1_1 + 76 | 0;
   if (!($2774($2_1 | 0) | 0)) {
    break label$1
   }
   $1115($1_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    $3_1 = $0_1 & 255 | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $0_1;
    break label$2;
   }
   $3_1 = $1432($1_1 | 0, $3_1 | 0) | 0;
  }
  label$4 : {
   if (!(($2775($2_1 | 0) | 0) & 1073741824 | 0)) {
    break label$4
   }
   $2776($2_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $2774($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
  return $1_1 | 0;
 }
 
 function $2775($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $2776($0_1) {
  $0_1 = $0_1 | 0;
  $1105($0_1 | 0, 1 | 0) | 0;
 }
 
 function $2777($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[(0 + 80108 | 0) >> 2] | 0;
  $1122(67349 | 0, 11 | 0, 1 | 0, $3_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1558($3_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $2771(10 | 0, $3_1 | 0) | 0;
  $1119();
  wasm2js_trap();
 }
 
 function $2778($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2779() {
  return $2778(106172 | 0) | 0 | 0;
 }
 
 function $2780() {
  return 0 | 0;
 }
 
 function $2781($0_1) {
  $0_1 = $0_1 | 0;
  return ($1082($0_1 + 80 | 0 | 0) | 0) + 80 | 0 | 0;
 }
 
 function $2782() {
  $2777(67290 | 0, 0 | 0);
  wasm2js_trap();
 }
 
 function $2783($0_1) {
  $0_1 = $0_1 | 0;
  return $2837($0_1 | 0) | 0 | 0;
 }
 
 function $2784($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2785($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2786($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2783($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2787($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2783($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2788($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2783($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2789($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2783($0_1 | 0) | 0 | 0, 24 | 0);
 }
 
 function $2790($0_1) {
  $0_1 = $0_1 | 0;
  $2717($2783($0_1 | 0) | 0 | 0, 16 | 0);
 }
 
 function $2791($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2792($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2792($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($1540($2793($0_1 | 0) | 0 | 0, $2793($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $2793($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $2794($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   label$2 : {
    if ($2792($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
     break label$2
    }
    $4_1 = 0;
    if (!$1_1) {
     break label$2
    }
    $4_1 = 0;
    $1_1 = $2795($1_1 | 0, 94468 | 0, 94516 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$4_1) {
     break label$1
    }
    $1064($3_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
    HEAP8[($3_1 + 59 | 0) >> 0] = 1;
    HEAP32[($3_1 + 16 | 0) >> 2] = -1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 52 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 4 | 0, $4_1, 1);
    label$3 : {
     $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
     if (($4_1 | 0) != (1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    }
    $4_1 = ($4_1 | 0) == (1 | 0);
   }
   global$0 = $3_1 + 64 | 0;
   return $4_1 | 0;
  }
  fimport$0(67237 | 0, 65882 | 0, 473 | 0, 66054 | 0);
  wasm2js_trap();
 }
 
 function $2795($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $2796($4_1 + 4 | 0 | 0, $0_1 | 0);
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = $2792($5_1 | 0, $2_1 | 0, 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $6_1 = $2797($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $6_1 = $2798($0_1 | 0, $7_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
   if ($6_1) {
    break label$1
   }
   $6_1 = $2799($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $2796($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = HEAP32[($2_1 + -8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $1_1 + $3_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($2_1 + -4 | 0) >> 2] | 0;
 }
 
 function $2797($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  label$1 : {
   label$2 : {
    if (($5_1 | 0) < (0 | 0)) {
     break label$2
    }
    $7_1 = ($4_1 | 0) == (0 - $5_1 | 0 | 0) ? $1_1 : 0;
    break label$1;
   }
   if (($5_1 | 0) == (-2 | 0)) {
    break label$1
   }
   $7_1 = $6_1 + 28 | 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 36 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = 0;
   HEAP32[($6_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 60 | 0) >> 2] = 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 16777216;
   HEAP32[($6_1 + 52 | 0) >> 2] = 1;
   HEAP32[($6_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3_1, $6_1 + 4 | 0, $1_1, $1_1, 1, 0);
   $7_1 = (HEAP32[$7_1 >> 2] | 0 | 0) == (1 | 0) ? $1_1 : 0;
  }
  global$0 = $6_1 + 64 | 0;
  return $7_1 | 0;
 }
 
 function $2798($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  label$1 : {
   if (($4_1 | 0) < (0 | 0)) {
    break label$1
   }
   $0_1 = $0_1 - $4_1 | 0;
   if (($0_1 | 0) < ($1_1 | 0)) {
    break label$1
   }
   $6_1 = $5_1 + 28 | 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1 + 36 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 60 | 0) >> 2] = 0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 16777216;
   HEAP32[($5_1 + 52 | 0) >> 2] = 1;
   HEAP32[($5_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3_1, $5_1 + 4 | 0, $1_1, $1_1, 1, 0);
   $6_1 = HEAP32[$6_1 >> 2] | 0 ? $0_1 : 0;
  }
  global$0 = $5_1 + 64 | 0;
  return $6_1 | 0;
 }
 
 function $2799($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
  $5_1 = 0;
  $1064($6_1 + 20 | 0 | 0, 0 | 0, 39 | 0) | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  HEAP8[($6_1 + 59 | 0) >> 0] = 1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($4_1, $6_1 + 4 | 0, $1_1, 1, 0);
  label$1 : {
   label$2 : {
    switch (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) {
    case 0:
     $5_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($6_1 + 24 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   label$4 : {
    if ((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$4
    }
    if (HEAP32[($6_1 + 44 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $5_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  }
  global$0 = $6_1 + 64 | 0;
  return $5_1 | 0;
 }
 
 function $2800($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
   return;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = $4_1 + 1 | 0;
  }
 }
 
 function $2801($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($2792($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2800($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $2802($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($2792($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2800($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $2803($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $5_1 = $4_1 & 1 | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($1_1 + 55 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $6_1 = $4_1 >> 8 | 0;
    if (!$5_1) {
     break label$1
    }
    $6_1 = $2804(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if ($5_1) {
     break label$3
    }
    $6_1 = $4_1 >> 8 | 0;
    break label$1;
   }
   HEAP32[($1_1 + 56 | 0) >> 2] = $2793(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $6_1 = 0;
   $2_1 = 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $2804($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[($0_1 + $1_1 | 0) >> 2] | 0 | 0;
 }
 
 function $2805($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($2792($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2800($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $2803($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   if ($4_1 >>> 0 < 2 >>> 0) {
    break label$2
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    $2803($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $2806($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 24 | 0) {
     break label$2
    }
    $3_1 = 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $2795($1_1 | 0, 94468 | 0, 94564 | 0, 0 | 0) | 0;
    if (!$4_1) {
     break label$1
    }
    $3_1 = ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 24 | 0 | 0) != (0 | 0);
   }
   $3_1 = $2792($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $2807($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($2792($1_1 | 0, 94864 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 0;
    $4_1 = 1;
    break label$1;
   }
   label$3 : {
    if (!($2806($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0)) {
     break label$3
    }
    $4_1 = 1;
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    break label$1;
   }
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    $4_1 = 0;
    $1_1 = $2795($1_1 | 0, 94468 | 0, 94612 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    label$5 : {
     $5_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($5_1 & ($6_1 ^ -1 | 0) | 0) & 7 | 0) {
     break label$1
    }
    if ((($5_1 ^ -1 | 0) & $6_1 | 0) & 96 | 0) {
     break label$1
    }
    $4_1 = 1;
    if ($2792(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
     break label$1
    }
    label$6 : {
     if (!($2792(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 94852 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$1
     }
     $4_1 = !($2795($1_1 | 0, 94468 | 0, 94660 | 0, 0 | 0) | 0);
     break label$1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    $4_1 = 0;
    label$7 : {
     $6_1 = $2795($5_1 | 0, 94468 | 0, 94612 | 0, 0 | 0) | 0;
     if (!$6_1) {
      break label$7
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $2808($6_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $4_1 = 0;
    label$8 : {
     $6_1 = $2795($5_1 | 0, 94468 | 0, 94712 | 0, 0 | 0) | 0;
     if (!$6_1) {
      break label$8
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $2809($6_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $4_1 = 0;
    $0_1 = $2795($5_1 | 0, 94468 | 0, 94516 | 0, 0 | 0) | 0;
    if (!$0_1) {
     break label$1
    }
    $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = 0;
    $1_1 = $2795($1_1 | 0, 94468 | 0, 94516 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    $1064($3_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
    HEAP8[($3_1 + 59 | 0) >> 0] = ($4_1 | 0) != (0 | 0);
    HEAP32[($3_1 + 16 | 0) >> 2] = -1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 52 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 4 | 0, $4_1, 1);
    label$9 : {
     $1_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
     if (($1_1 | 0) != (1 | 0)) {
      break label$9
     }
     HEAP32[$2_1 >> 2] = (wasm2js_i32$0 = HEAP32[($3_1 + 20 | 0) >> 2] | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $4_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    }
    $4_1 = ($1_1 | 0) == (1 | 0);
    break label$1;
   }
   $4_1 = 0;
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $2808($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     return 0 | 0;
    }
    $2_1 = 0;
    $1_1 = $2795($1_1 | 0, 94468 | 0, 94612 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
     break label$1
    }
    label$4 : {
     if (!($2792(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     return 1 | 0;
    }
    if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
    label$5 : {
     $0_1 = $2795($3_1 | 0, 94468 | 0, 94612 | 0, 0 | 0) | 0;
     if (!$0_1) {
      break label$5
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   $2_1 = 0;
   $0_1 = $2795($3_1 | 0, 94468 | 0, 94712 | 0, 0 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = $2809($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $2809($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = $2795($1_1 | 0, 94468 | 0, 94712 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
    break label$1
   }
   $2_1 = 0;
   if (!($2792(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = $2792(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $2810($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if (($3_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if ($3_1) {
      break label$3
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = 1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     if (($4_1 | 0) != (1 | 0)) {
      break label$1
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($3_1 | 0) != ($2_1 | 0)) {
      break label$4
     }
     label$5 : {
      $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (($3_1 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
      $3_1 = $4_1;
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($3_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function $2811($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (($2_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $2812($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($2792($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2811($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     if (!($2792($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : {
       if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
      }
      if (($3_1 | 0) != (1 | 0)) {
       break label$2
      }
      HEAP32[($1_1 + 32 | 0) >> 2] = 1;
      return;
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$3
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : while (1) {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          if ($5_1 >>> 0 >= $3_1 >>> 0) {
           break label$11
          }
          HEAP16[($1_1 + 52 | 0) >> 1] = 0;
          $2813($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
          if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
           break label$11
          }
          if ((HEAPU8[($1_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
           break label$8
          }
          label$12 : {
           if ((HEAPU8[($1_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
            break label$12
           }
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$9
           }
           $6_1 = 1;
           $7_1 = 1;
           if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0)) {
            break label$9
           }
           break label$8;
          }
          $6_1 = 1;
          if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0) {
           break label$8
          }
          $5_1 = 3;
          break label$10;
         }
         $5_1 = $6_1 & 1 | 0 ? 3 : 4;
        }
        HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
        if ($7_1 & 1 | 0) {
         break label$2
        }
        break label$3;
       }
       HEAP32[($1_1 + 44 | 0) >> 2] = 3;
       break label$2;
      }
      $5_1 = $5_1 + 8 | 0;
      continue label$7;
     };
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $6_1 = $0_1 + 16 | 0;
    $2814($6_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    if ($5_1 >>> 0 < 2 >>> 0) {
     break label$2
    }
    $6_1 = $6_1 + ($5_1 << 3 | 0) | 0;
    $5_1 = $0_1 + 24 | 0;
    label$13 : {
     label$14 : {
      $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if ($0_1 & 2 | 0) {
       break label$14
      }
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
       break label$13
      }
     }
     label$15 : while (1) {
      if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
       break label$2
      }
      $2814($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
      $5_1 = $5_1 + 8 | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       continue label$15
      }
      break label$2;
     };
    }
    label$16 : {
     if ($0_1 & 1 | 0) {
      break label$16
     }
     label$17 : while (1) {
      if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
       break label$2
      }
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      $2814($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
      $5_1 = $5_1 + 8 | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       continue label$17
      }
      break label$2;
     };
    }
    label$18 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     label$19 : {
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
       break label$19
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
     }
     $2814($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $6_1 >>> 0) {
      continue label$18
     }
     break label$2;
    };
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$2
   }
   if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
    break label$2
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   return;
  }
 }
 
 function $2813($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  label$1 : {
   if (!($6_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = $2804(HEAP32[$3_1 >> 2] | 0 | 0, $7_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $2814($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  label$1 : {
   if (!($5_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = $2804(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $2815($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($2792($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2811($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($2792($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if ((HEAPU8[($1_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $2816($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($2792($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2811($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($2792($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$4
     }
     if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $2817($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   if (!($2792($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2810($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $2813($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $11_1 | 0;
  label$2 : {
   if ($7_1 >>> 0 < 2 >>> 0) {
    break label$2
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($10_1 & 1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($11_1 & 1 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $2813($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $11_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = ($11_1 | $6_1 | 0) & 1 | 0;
    $10_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = ($10_1 | $8_1 | 0) & 1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = $6_1 & 1 | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = $8_1 & 1 | 0;
 }
 
 function $2818($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($2792($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2810($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $2819($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($2792($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2810($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $2820($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2821($0_1) {
  $0_1 = $0_1 | 0;
  $2820($0_1 | 0) | 0;
  $2717($0_1 | 0, 4 | 0);
 }
 
 function $2822($0_1) {
  $0_1 = $0_1 | 0;
  return 65961 | 0;
 }
 
 function $2823($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $2730($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 95296 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $2824($0_1) {
  $0_1 = $0_1 | 0;
  $2820($0_1 | 0) | 0;
  $2717($0_1 | 0, 4 | 0);
 }
 
 function $2825($0_1) {
  $0_1 = $0_1 | 0;
  return 66387 | 0;
 }
 
 function $2826($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $2823($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 95316 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $2827($0_1) {
  $0_1 = $0_1 | 0;
  $2820($0_1 | 0) | 0;
  $2717($0_1 | 0, 4 | 0);
 }
 
 function $2828($0_1) {
  $0_1 = $0_1 | 0;
  return 66033 | 0;
 }
 
 function $2829($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 95448 + 8 | 0;
  $2830($0_1 + 4 | 0 | 0) | 0;
  return $2820($0_1 | 0) | 0 | 0;
 }
 
 function $2830($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!($2734($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = $2831(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($2832($1_1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $2716($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2831($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + -12 | 0 | 0;
 }
 
 function $2832($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $2833($0_1) {
  $0_1 = $0_1 | 0;
  $2829($0_1 | 0) | 0;
  $2717($0_1 | 0, 8 | 0);
 }
 
 function $2834($0_1) {
  $0_1 = $0_1 | 0;
  return $2835($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2835($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2836($0_1) {
  $0_1 = $0_1 | 0;
  $2829($0_1 | 0) | 0;
  $2717($0_1 | 0, 8 | 0);
 }
 
 function $2837($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2838($0_1) {
  $0_1 = $0_1 | 0;
  global$1 = $0_1;
 }
 
 function $2840() {
  global$3 = 65536;
  global$2 = (0 + 15 | 0) & -16 | 0;
 }
 
 function $2841() {
  return global$0 - global$2 | 0 | 0;
 }
 
 function $2842() {
  return global$3 | 0;
 }
 
 function $2843() {
  return global$2 | 0;
 }
 
 function $2844($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $2845($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $2846() {
  return global$0 | 0;
 }
 
 function $2847($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
 }
 
 function $2848($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2849($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $2850($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0;
 }
 
 function $2851($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  $7_1 = $7_1 | 0;
  $7$hi = $7$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) | 0 | 0;
 }
 
 function $2852($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $2847($7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $5_1 | 0, $6_1 | 0);
 }
 
 function $2853($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $2848($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $2838($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $2854($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $16$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  $10_1 = $3_1;
  $11_1 = $4_1;
  i64toi32_i32$0 = 0;
  $13_1 = $5_1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$0 = $13_1;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $2849($7_1 | 0, $8_1 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2855($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $29_1 = 0, $30_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $15$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $21_1 = 0, $21$hi = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0;
  $9_1 = $0_1;
  $10_1 = $1_1;
  $11_1 = $2_1;
  $12_1 = $3_1;
  $13_1 = $4_1;
  i64toi32_i32$0 = 0;
  $15_1 = $5_1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $21_1 = $7_1;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $30_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$2 = $21_1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$3 = $30_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$2 = $25$hi;
  return $2850($9_1 | 0, $10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2856($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $31_1 = 0, $32_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0;
  $10_1 = $0_1;
  $11_1 = $1_1;
  $12_1 = $2_1;
  $13_1 = $3_1;
  $14_1 = $4_1;
  $15_1 = $5_1;
  i64toi32_i32$0 = 0;
  $17_1 = $6_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $31_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $31_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $23_1 = $8_1;
  $23$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $32_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $26$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$2 = $23_1;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$3 = $32_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $27$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = $27$hi;
  return $2851($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2857($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18_1 = 0, $19_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0;
  $5_1 = $0_1;
  $6_1 = $1_1;
  $7_1 = $2_1;
  i64toi32_i32$0 = $3$hi;
  $9_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12_1 = $18_1;
  i64toi32_i32$1 = $4$hi;
  $14_1 = $4_1;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$27($5_1 | 0, $6_1 | 0, $7_1 | 0, $9_1 | 0, $12_1 | 0, $14_1 | 0, $19_1 | 0);
 }
 
 function $2858($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$28($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $23$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $21_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $22_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $22_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$2 = $22_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$5 = var$2;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17_1 = i64toi32_i32$1;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $23_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
   $23_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
  }
  var$0 = $23_1;
  var$0$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$1 = $17_1;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $23$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = $23$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, var$2 = 0, $20_1 = 0, $21_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $20_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $20_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $21_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $21_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$0 = $21_1;
  var$0$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_urem($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$2$hi;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $19$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$4 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$0 = var$3;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38_1;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = i64toi32_i32$2;
             i64toi32_i32$1 = i64toi32_i32$2;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140_1 = $45_1;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140_1;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46_1;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144_1 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47_1;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144_1;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151_1;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48_1;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_sdiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_srem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = __wasm_intrinsics_temp_i64$hi;
  i64toi32_i32$1 = __wasm_intrinsics_temp_i64;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, $3, $13, $117, $6, $2829, $2820, $840, $841, $30, $843, $846, $854, $859, $861, $863, $886, $891, $899, $906, $914, $955, $289, $2782, $304, $313, $790, $818, $1125, $1126, $1128, $1129, $1130, $1132, $1133, $1134, $1135, $1142, $1144, $1146, $1147, $1148, $1150, $1152, $1151, $1153, $1178, $1180, $1179, $1181, $1193, $1194, $1196, $1197, $1198, $1199, $1200, $1201, $1202, $1207, $1209, $1211, $1212, $1213, $1215, $1217, $1216, $1218, $1237, $1239, $1238, $1240, $1123, $1124, $1191, $1192, $1405, $1406, $1104, $1102, $1100, $1412, $1101, $1413, $1459, $1460, $1461, $1462, $1464, $1465, $1472, $1473, $1474, $1475, $1476, $1478, $1479, $1481, $1483, $1484, $1489, $1490, $1491, $1493, $1494, $1536, $1559, $1560, $1563, $1084, $1924, $2208, $2230, $2238, $2250, $2360, $2363, $2367, $2370, $2373, $2376, $2378, $2380, $2382, $2384, $2386, $2388, $2390, $2392, $2219, $2223, $2246, $2267, $2268, $2269, $2270, $2271, $2272, $2273, $2274, $2275, $2276, $2091, $2286, $2287, $2290, $2293, $2294, $2297, $2298, $2300, $2339, $2340, $2343, $2345, $2347, $2349, $2353, $2341, $2342, $2344, $2346, $2348, $2350, $2354, $1612, $2245, $2251, $2252, $2253, $2254, $2255, $2256, $2258, $2259, $2261, $2262, $2263, $2264, $2265, $2277, $2278, $2279, $2280, $2281, $2282, $2283, $2284, $2301, $2302, $2304, $2306, $2307, $2308, $2309, $2311, $2312, $2313, $2314, $2315, $2316, $2317, $2318, $2319, $2320, $2321, $2323, $2325, $2326, $2327, $2328, $2330, $2331, $2332, $2333, $2334, $2335, $2336, $2337, $2338, $1611, $1613, $1614, $1615, $1618, $1619, $1620, $1621, $1622, $1626, $2395, $1627, $1641, $1650, $1653, $1656, $1659, $1662, $1665, $1670, $1673, $1676, $2396, $1683, $1693, $1698, $1700, $1702, $1704, $1706, $1708, $1712, $1714, $1716, $2397, $1733, $1741, $1748, $1750, $1752, $1754, $1763, $1765, $2398, $1769, $1778, $1782, $1784, $1786, $1788, $1794, $1796, $2399, $2401, $1805, $1806, $1807, $1808, $1810, $1812, $1815, $2358, $2365, $2371, $2385, $2389, $2377, $2381, $2402, $2404, $1830, $1831, $1832, $1838, $1840, $1842, $1845, $2361, $2368, $2374, $2387, $2391, $2379, $2383, $2406, $2405, $1858, $2408, $2407, $1864, $2409, $1870, $1873, $1874, $1875, $1876, $1877, $1878, $1879, $1880, $2410, $1881, $1882, $1883, $1884, $1885, $1886, $1887, $1888, $1889, $2411, $1890, $1893, $1894, $1895, $1899, $1900, $1901, $1902, $1903, $2412, $1904, $1905, $1906, $1907, $1908, $1909, $1910, $1911, $1912, $2413, $1923, $1947, $2414, $1987, $2005, $2415, $2051, $2063, $2416, $2064, $2077, $2417, $2085, $2086, $2087, $2418, $2088, $2089, $2090, $2710, $2711, $2783, $2786, $2784, $2785, $2791, $2787, $2794, $2819, $2816, $2801, $2788, $2818, $2815, $2802, $2789, $2817, $2812, $2805, $2790, $2807, $2824, $2825, $2827, $2828, $2821, $2822, $2833, $2834, $2836]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "__wasm_call_ctors": $0, 
  "__getTypeName": $1, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "fflush": $1117, 
  "malloc": $1082, 
  "strerror": $2737, 
  "free": $1084, 
  "emscripten_stack_init": $2840, 
  "emscripten_stack_get_free": $2841, 
  "emscripten_stack_get_base": $2842, 
  "emscripten_stack_get_end": $2843, 
  "_emscripten_stack_restore": $2844, 
  "_emscripten_stack_alloc": $2845, 
  "emscripten_stack_get_current": $2846, 
  "dynCall_viijii": $2852, 
  "dynCall_jiji": $2853, 
  "dynCall_iiiiij": $2854, 
  "dynCall_iiiiijj": $2855, 
  "dynCall_iiiiiijj": $2856
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error,

  isWasm2js: true,
};
// end include: wasm2js.js
if (WebAssembly.isWasm2js) {
  // We don't need to actually download a wasm binary, mark it as present but
  // empty.
  wasmBinary = [];
}

if (typeof WebAssembly != 'object') {
  err('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

// include: runtime_shared.js
function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

// end include: runtime_shared.js
assert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time')

assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// If memory is defined in wasm, the user can't provide it, or set INITIAL_MEMORY
assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally');
assert(!Module['INITIAL_MEMORY'], 'Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically');

// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with SAFE_HEAP and ASAN which also
  // monitor writes to address zero.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x02135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[((0)>>2)] = 1668509029;
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[((0)>>2)] != 0x63736d65 /* 'emsc' */) {
    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
  }
}
// end include: runtime_stack_check.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
if (!Module['noFSInit'] && !FS.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(() => {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err(`dependency: ${dep}`);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  Module['onAbort']?.(what);

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// include: memoryprofiler.js
// end include: memoryprofiler.js
// include: URIUtils.js
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

/**
 * Indicates whether filename is a base64 data URI.
 * @noinline
 */
var isDataURI = (filename) => filename.startsWith(dataURIPrefix);

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */
var isFileURI = (filename) => filename.startsWith('file://');
// end include: URIUtils.js
function createExportWrapper(name, nargs) {
  return (...args) => {
    assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
    var f = wasmExports[name];
    assert(f, `exported native function \`${name}\` not found`);
    // Only assert for too many arguments. Too few can be valid since the missing arguments will be zero filled.
    assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
    return f(...args);
  };
}

// include: runtime_exceptions.js
// end include: runtime_exceptions.js
function findWasmBinary() {
    var f = 'LSFx.wasm';
    if (!isDataURI(f)) {
      return locateFile(f);
    }
    return f;
}

var wasmBinaryFile;

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw 'both async and sync fetching of the wasm failed';
}

function getBinaryPromise(binaryFile) {
  // If we don't have the binary yet, load it asynchronously using readAsync.
  if (!wasmBinary
      ) {
    // Fetch the binary using readAsync
    return readAsync(binaryFile).then(
      (response) => new Uint8Array(/** @type{!ArrayBuffer} */(response)),
      // Fall back to getBinarySync if readAsync fails
      () => getBinarySync(binaryFile)
    );
  }

  // Otherwise, getBinarySync should be able to get it synchronously
  return Promise.resolve().then(() => getBinarySync(binaryFile));
}

function instantiateArrayBuffer(binaryFile, imports, receiver) {
  return getBinaryPromise(binaryFile).then((binary) => {
    return WebAssembly.instantiate(binary, imports);
  }).then(receiver, (reason) => {
    err(`failed to asynchronously prepare wasm: ${reason}`);

    // Warn on some common problems.
    if (isFileURI(wasmBinaryFile)) {
      err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
    }
    abort(reason);
  });
}

function instantiateAsync(binary, binaryFile, imports, callback) {
  if (!binary &&
      typeof WebAssembly.instantiateStreaming == 'function' &&
      !isDataURI(binaryFile) &&
      typeof fetch == 'function') {
    return fetch(binaryFile, { credentials: 'same-origin' }).then((response) => {
      // Suppress closure warning here since the upstream definition for
      // instantiateStreaming only allows Promise<Repsponse> rather than
      // an actual Response.
      // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
      /** @suppress {checkTypes} */
      var result = WebAssembly.instantiateStreaming(response, imports);

      return result.then(
        callback,
        function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          err(`wasm streaming compile failed: ${reason}`);
          err('falling back to ArrayBuffer instantiation');
          return instantiateArrayBuffer(binaryFile, imports, callback);
        });
    });
  }
  return instantiateArrayBuffer(binaryFile, imports, callback);
}

function getWasmImports() {
  // prepare imports
  return {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  var info = getWasmImports();
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    wasmExports = instance.exports;

    

    wasmMemory = wasmExports['memory'];
    
    assert(wasmMemory, 'memory not found in wasm exports');
    updateMemoryViews();

    wasmTable = wasmExports['__indirect_function_table'];
    
    assert(wasmTable, 'table not found in wasm exports');

    addOnInit(wasmExports['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {
    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch(e) {
      err(`Module.instantiateWasm callback failed with error: ${e}`);
        return false;
    }
  }

  wasmBinaryFile ??= findWasmBinary();

  instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// include: runtime_debug.js
// Endianness check
(() => {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

function legacyModuleProp(prop, newName, incoming=true) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get() {
        let extra = incoming ? ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)' : '';
        abort(`\`Module.${prop}\` has been replaced by \`${newName}\`` + extra);

      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

/**
 * Intercept access to a global symbol.  This enables us to give informative
 * warnings/errors when folks attempt to use symbols they did not include in
 * their build, or no symbols that no longer exist.
 */
function hookGlobalSymbolAccess(sym, func) {
  if (typeof globalThis != 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        func();
        return undefined;
      }
    });
  }
}

function missingGlobal(sym, msg) {
  hookGlobalSymbolAccess(sym, () => {
    warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
  });
}

missingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');
missingGlobal('asm', 'Please use wasmExports instead');

function missingLibrarySymbol(sym) {
  hookGlobalSymbolAccess(sym, () => {
    // Can't `abort()` here because it would break code that does runtime
    // checks.  e.g. `if (typeof SDL === 'undefined')`.
    var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
    // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
    // library.js, which means $name for a JS name with no prefix, or name
    // for a JS name like _name.
    var librarySymbol = sym;
    if (!librarySymbol.startsWith('_')) {
      librarySymbol = '$' + sym;
    }
    msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
    if (isExportedByForceFilesystem(sym)) {
      msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
    }
    warnOnce(msg);
  });

  // Any symbol that is not included from the JS library is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get() {
        var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// Used by XXXXX_DEBUG settings to output debug messages.
function dbg(...args) {
  // TODO(sbc): Make this configurable somehow.  Its not always convenient for
  // logging to show up as warnings.
  console.warn(...args);
}
// end include: runtime_debug.js
// === Body ===
// end include: preamble.js


  class ExitStatus {
      name = 'ExitStatus';
      constructor(status) {
        this.message = `Program terminated with exit(${status})`;
        this.status = status;
      }
    }

  var callRuntimeCallbacks = (callbacks) => {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    };

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[ptr];
      case 'i8': return HEAP8[ptr];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': abort('to do getValue(i64) use WASM_BIGINT');
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort(`invalid type for getValue: ${type}`);
    }
  }

  var noExitRuntime = Module['noExitRuntime'] || true;

  var ptrToString = (ptr) => {
      assert(typeof ptr === 'number');
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      ptr >>>= 0;
      return '0x' + ptr.toString(16).padStart(8, '0');
    };

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[ptr] = value; break;
      case 'i8': HEAP8[ptr] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': abort('to do setValue(i64) use WASM_BIGINT');
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort(`invalid type for setValue: ${type}`);
    }
  }

  var stackRestore = (val) => __emscripten_stack_restore(val);

  var stackSave = () => _emscripten_stack_get_current();

  var warnOnce = (text) => {
      warnOnce.shown ||= {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        err(text);
      }
    };

  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;
  
    /**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number=} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
  var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.  Also, use the length info to avoid running tiny
      // strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation,
      // so that undefined/NaN means Infinity)
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      // If building with TextDecoder, we have already computed the string length
      // above, so test loop end condition against that
      while (idx < endPtr) {
        // For UTF8 byte structure, see:
        // http://en.wikipedia.org/wiki/UTF-8#Description
        // https://www.ietf.org/rfc/rfc2279.txt
        // https://tools.ietf.org/html/rfc3629
        var u0 = heapOrArray[idx++];
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
        }
  
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
      return str;
    };
  
    /**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */
  var UTF8ToString = (ptr, maxBytesToRead) => {
      assert(typeof ptr == 'number', `UTF8ToString expects a number (got ${typeof ptr})`);
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    };
  var ___assert_fail = (condition, filename, line, func) => {
      abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    };

  class ExceptionInfo {
      // excPtr - Thrown object pointer to wrap. Metadata pointer is calculated from it.
      constructor(excPtr) {
        this.excPtr = excPtr;
        this.ptr = excPtr - 24;
      }
  
      set_type(type) {
        HEAPU32[(((this.ptr)+(4))>>2)] = type;
      }
  
      get_type() {
        return HEAPU32[(((this.ptr)+(4))>>2)];
      }
  
      set_destructor(destructor) {
        HEAPU32[(((this.ptr)+(8))>>2)] = destructor;
      }
  
      get_destructor() {
        return HEAPU32[(((this.ptr)+(8))>>2)];
      }
  
      set_caught(caught) {
        caught = caught ? 1 : 0;
        HEAP8[(this.ptr)+(12)] = caught;
      }
  
      get_caught() {
        return HEAP8[(this.ptr)+(12)] != 0;
      }
  
      set_rethrown(rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(this.ptr)+(13)] = rethrown;
      }
  
      get_rethrown() {
        return HEAP8[(this.ptr)+(13)] != 0;
      }
  
      // Initialize native structure fields. Should be called once after allocated.
      init(type, destructor) {
        this.set_adjusted_ptr(0);
        this.set_type(type);
        this.set_destructor(destructor);
      }
  
      set_adjusted_ptr(adjustedPtr) {
        HEAPU32[(((this.ptr)+(16))>>2)] = adjustedPtr;
      }
  
      get_adjusted_ptr() {
        return HEAPU32[(((this.ptr)+(16))>>2)];
      }
    }
  
  var exceptionLast = 0;
  
  var uncaughtExceptionCount = 0;
  var ___cxa_throw = (ptr, type, destructor) => {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      assert(false, 'Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.');
    };

  var __abort_js = () => {
      abort('native code called abort()');
    };

  var __embind_register_bigint = (primitiveType, name, size, minRange, maxRange) => {};

  var embind_init_charCodes = () => {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    };
  var embind_charCodes;
  var readLatin1String = (ptr) => {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    };
  
  var awaitingDependencies = {
  };
  
  var registeredTypes = {
  };
  
  var typeDependencies = {
  };
  
  var BindingError;
  var throwBindingError = (message) => { throw new BindingError(message); };
  
  
  
  
  var InternalError;
  var throwInternalError = (message) => { throw new InternalError(message); };
  var whenDependentTypesAreResolved = (myTypes, dependentTypes, getTypeConverters) => {
      myTypes.forEach((type) => typeDependencies[type] = dependentTypes);
  
      function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
          throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
          registerType(myTypes[i], myTypeConverters[i]);
        }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach((dt, i) => {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);
          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }
          awaitingDependencies[dt].push(() => {
            typeConverters[i] = registeredTypes[dt];
            ++registered;
            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });
      if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
      }
    };
  /** @param {Object=} options */
  function sharedRegisterType(rawType, registeredInstance, options = {}) {
      var name = registeredInstance.name;
      if (!rawType) {
        throwBindingError(`type "${name}" must have a positive integer typeid pointer`);
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
        if (options.ignoreDuplicateRegistrations) {
          return;
        } else {
          throwBindingError(`Cannot register type '${name}' twice`);
        }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach((cb) => cb());
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options = {}) {
      if (registeredInstance.argPackAdvance === undefined) {
        throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
      return sharedRegisterType(rawType, registeredInstance, options);
    }
  
  var GenericWireTypeSize = 8;
  /** @suppress {globalThis} */
  var __embind_register_bool = (rawType, name, trueValue, falseValue) => {
      name = readLatin1String(name);
      registerType(rawType, {
          name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          argPackAdvance: GenericWireTypeSize,
          'readValueFromPointer': function(pointer) {
              return this['fromWireType'](HEAPU8[pointer]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    };

  
  
  var shallowCopyInternalPointer = (o) => {
      return {
        count: o.count,
        deleteScheduled: o.deleteScheduled,
        preservePointerOnDelete: o.preservePointerOnDelete,
        ptr: o.ptr,
        ptrType: o.ptrType,
        smartPtr: o.smartPtr,
        smartPtrType: o.smartPtrType,
      };
    };
  
  var throwInstanceAlreadyDeleted = (obj) => {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    };
  
  var finalizationRegistry = false;
  
  var detachFinalizer = (handle) => {};
  
  var runDestructor = ($$) => {
      if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    };
  var releaseClassHandle = ($$) => {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
        runDestructor($$);
      }
    };
  
  var downcastPointer = (ptr, ptrClass, desiredClass) => {
      if (ptrClass === desiredClass) {
        return ptr;
      }
      if (undefined === desiredClass.baseClass) {
        return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
        return null;
      }
      return desiredClass.downcast(rv);
    };
  
  var registeredPointers = {
  };
  
  var registeredInstances = {
  };
  
  var getBasestPointer = (class_, ptr) => {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    };
  var getInheritedInstance = (class_, ptr) => {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    };
  
  
  var makeClassHandle = (prototype, record) => {
      if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
        $$: {
          value: record,
          writable: true,
        },
      }));
    };
  /** @suppress {globalThis} */
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
        this.destructor(ptr);
        return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
        // JS object has been neutered, time to repopulate it
        if (0 === registeredInstance.$$.count.value) {
          registeredInstance.$$.ptr = rawPointer;
          registeredInstance.$$.smartPtr = ptr;
          return registeredInstance['clone']();
        } else {
          // else, just increment reference count on existing object
          // it already has a reference to the smart pointer
          var rv = registeredInstance['clone']();
          this.destructor(ptr);
          return rv;
        }
      }
  
      function makeDefaultHandle() {
        if (this.isSmartPointer) {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this.pointeeType,
            ptr: rawPointer,
            smartPtrType: this,
            smartPtr: ptr,
          });
        } else {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this,
            ptr,
          });
        }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
      } else {
        toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
        return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
          smartPtrType: this,
          smartPtr: ptr,
        });
      } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
        });
      }
    }
  var attachFinalizer = (handle) => {
      if ('undefined' === typeof FinalizationRegistry) {
        attachFinalizer = (handle) => handle;
        return handle;
      }
      // If the running environment has a FinalizationRegistry (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationRegistry
      // at run-time, not build-time.
      finalizationRegistry = new FinalizationRegistry((info) => {
        console.warn(info.leakWarning);
        releaseClassHandle(info.$$);
      });
      attachFinalizer = (handle) => {
        var $$ = handle.$$;
        var hasSmartPtr = !!$$.smartPtr;
        if (hasSmartPtr) {
          // We should not call the destructor on raw pointers in case other code expects the pointee to live
          var info = { $$: $$ };
          // Create a warning as an Error instance in advance so that we can store
          // the current stacktrace and point to it when / if a leak is detected.
          // This is more useful than the empty stacktrace of `FinalizationRegistry`
          // callback.
          var cls = $$.ptrType.registeredClass;
          var err = new Error(`Embind found a leaked C++ instance ${cls.name} <${ptrToString($$.ptr)}>.\n` +
          "We'll free it automatically in this case, but this functionality is not reliable across various environments.\n" +
          "Make sure to invoke .delete() manually once you're done with the instance instead.\n" +
          "Originally allocated"); // `.stack` will add "at ..." after this sentence
          if ('captureStackTrace' in Error) {
            Error.captureStackTrace(err, RegisteredPointer_fromWireType);
          }
          info.leakWarning = err.stack.replace(/^Error: /, '');
          finalizationRegistry.register(handle, info, handle);
        }
        return handle;
      };
      detachFinalizer = (handle) => finalizationRegistry.unregister(handle);
      return attachFinalizer(handle);
    };
  
  
  
  
  var deletionQueue = [];
  var flushPendingDeletes = () => {
      while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
      }
    };
  
  var delayFunction;
  var init_ClassHandle = () => {
      Object.assign(ClassHandle.prototype, {
        "isAliasOf"(other) {
          if (!(this instanceof ClassHandle)) {
            return false;
          }
          if (!(other instanceof ClassHandle)) {
            return false;
          }
  
          var leftClass = this.$$.ptrType.registeredClass;
          var left = this.$$.ptr;
          other.$$ = /** @type {Object} */ (other.$$);
          var rightClass = other.$$.ptrType.registeredClass;
          var right = other.$$.ptr;
  
          while (leftClass.baseClass) {
            left = leftClass.upcast(left);
            leftClass = leftClass.baseClass;
          }
  
          while (rightClass.baseClass) {
            right = rightClass.upcast(right);
            rightClass = rightClass.baseClass;
          }
  
          return leftClass === rightClass && left === right;
        },
  
        "clone"() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
  
          if (this.$$.preservePointerOnDelete) {
            this.$$.count.value += 1;
            return this;
          } else {
            var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                value: shallowCopyInternalPointer(this.$$),
              }
            }));
  
            clone.$$.count.value += 1;
            clone.$$.deleteScheduled = false;
            return clone;
          }
        },
  
        "delete"() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
  
          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError('Object already scheduled for deletion');
          }
  
          detachFinalizer(this);
          releaseClassHandle(this.$$);
  
          if (!this.$$.preservePointerOnDelete) {
            this.$$.smartPtr = undefined;
            this.$$.ptr = undefined;
          }
        },
  
        "isDeleted"() {
          return !this.$$.ptr;
        },
  
        "deleteLater"() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError('Object already scheduled for deletion');
          }
          deletionQueue.push(this);
          if (deletionQueue.length === 1 && delayFunction) {
            delayFunction(flushPendingDeletes);
          }
          this.$$.deleteScheduled = true;
          return this;
        },
      });
    };
  /** @constructor */
  function ClassHandle() {
    }
  
  var createNamedFunction = (name, body) => Object.defineProperty(body, 'name', {
      value: name
    });
  
  
  var ensureOverloadTable = (proto, methodName, humanName) => {
      if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function(...args) {
          // TODO This check can be removed in -O3 level "unsafe" optimizations.
          if (!proto[methodName].overloadTable.hasOwnProperty(args.length)) {
            throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${args.length}) - expects one of (${proto[methodName].overloadTable})!`);
          }
          return proto[methodName].overloadTable[args.length].apply(this, args);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    };
  
  /** @param {number=} numArguments */
  var exposePublicSymbol = (name, value, numArguments) => {
      if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
          throwBindingError(`Cannot register public name '${name}' twice`);
        }
  
        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module[name].overloadTable.hasOwnProperty(numArguments)) {
          throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`);
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    };
  
  var char_0 = 48;
  
  var char_9 = 57;
  var makeLegalFunctionName = (name) => {
      assert(typeof name === 'string');
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
        return `_${name}`;
      }
      return name;
    };
  
  
  /** @constructor */
  function RegisteredClass(name,
                               constructor,
                               instancePrototype,
                               rawDestructor,
                               baseClass,
                               getActualType,
                               upcast,
                               downcast) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  var upcastPointer = (ptr, ptrClass, desiredClass) => {
      while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
          throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
      }
      return ptr;
    };
  /** @suppress {globalThis} */
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError(`null is not a valid ${this.name}`);
        }
        return 0;
      }
  
      if (!handle.$$) {
        throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
      }
      if (!handle.$$.ptr) {
        throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  /** @suppress {globalThis} */
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
        if (this.isReference) {
          throwBindingError(`null is not a valid ${this.name}`);
        }
  
        if (this.isSmartPointer) {
          ptr = this.rawConstructor();
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
          return ptr;
        } else {
          return 0;
        }
      }
  
      if (!handle || !handle.$$) {
        throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
      }
      if (!handle.$$.ptr) {
        throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name)} to parameter type ${this.name}`);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
          throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
  
        switch (this.sharingPolicy) {
          case 0: // NONE
            // no upcasting
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name)} to parameter type ${this.name}`);
            }
            break;
  
          case 1: // INTRUSIVE
            ptr = handle.$$.smartPtr;
            break;
  
          case 2: // BY_EMVAL
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              var clonedHandle = handle['clone']();
              ptr = this.rawShare(
                ptr,
                Emval.toHandle(() => clonedHandle['delete']())
              );
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
            }
            break;
  
          default:
            throwBindingError('Unsupporting sharing policy');
        }
      }
      return ptr;
    }
  
  
  /** @suppress {globalThis} */
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError(`null is not a valid ${this.name}`);
        }
        return 0;
      }
  
      if (!handle.$$) {
        throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
      }
      if (!handle.$$.ptr) {
        throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  /** @suppress {globalThis} */
  function readPointer(pointer) {
      return this['fromWireType'](HEAPU32[((pointer)>>2)]);
    }
  
  
  var init_RegisteredPointer = () => {
      Object.assign(RegisteredPointer.prototype, {
        getPointee(ptr) {
          if (this.rawGetPointee) {
            ptr = this.rawGetPointee(ptr);
          }
          return ptr;
        },
        destructor(ptr) {
          this.rawDestructor?.(ptr);
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': readPointer,
        'fromWireType': RegisteredPointer_fromWireType,
      });
    };
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
          this['toWireType'] = constNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        } else {
          this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        }
      } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
        //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  var replacePublicSymbol = (name, value, numArguments) => {
      if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistent public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    };
  
  
  
  var dynCallLegacy = (sig, ptr, args) => {
      sig = sig.replace(/p/g, 'i')
      assert(('dynCall_' + sig) in Module, `bad function pointer type - dynCall function not found for sig '${sig}'`);
      if (args?.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module['dynCall_' + sig];
      return f(ptr, ...args);
    };
  
  var wasmTableMirror = [];
  
  /** @type {WebAssembly.Table} */
  var wasmTable;
  var getWasmTableEntry = (funcPtr) => {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      assert(wasmTable.get(funcPtr) == func, 'JavaScript-side Wasm function table mirror is out of date!');
      return func;
    };
  
  var dynCall = (sig, ptr, args = []) => {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of their signature, so we rely on the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(getWasmTableEntry(ptr), `missing table entry in dynCall: ${ptr}`);
      var rtn = getWasmTableEntry(ptr)(...args);
      return rtn;
    };
  var getDynCaller = (sig, ptr) => {
      assert(sig.includes('j') || sig.includes('p'), 'getDynCaller should only be called with i64 sigs')
      return (...args) => dynCall(sig, ptr, args);
    };
  
  
  var embind__requireFunction = (signature, rawFunction) => {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return getWasmTableEntry(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp != "function") {
          throwBindingError(`unknown function pointer with signature ${signature}: ${rawFunction}`);
      }
      return fp;
    };
  
  
  
  var extendError = (baseErrorType, errorName) => {
      var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
  
        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
          this.stack = this.toString() + '\n' +
              stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
        if (this.message === undefined) {
          return this.name;
        } else {
          return `${this.name}: ${this.message}`;
        }
      };
  
      return errorClass;
    };
  var UnboundTypeError;
  
  
  
  var getTypeName = (type) => {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    };
  var throwUnboundTypeError = (message, types) => {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
        if (seen[type]) {
          return;
        }
        if (registeredTypes[type]) {
          return;
        }
        if (typeDependencies[type]) {
          typeDependencies[type].forEach(visit);
          return;
        }
        unboundTypes.push(type);
        seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(`${message}: ` + unboundTypes.map(getTypeName).join([', ']));
    };
  
  var __embind_register_class = (rawType,
                             rawPointerType,
                             rawConstPointerType,
                             baseClassRawType,
                             getActualTypeSignature,
                             getActualType,
                             upcastSignature,
                             upcast,
                             downcastSignature,
                             downcast,
                             name,
                             destructorSignature,
                             rawDestructor) => {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      upcast &&= embind__requireFunction(upcastSignature, upcast);
      downcast &&= embind__requireFunction(downcastSignature, downcast);
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError(`Cannot construct ${name} due to unbound types`, [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        (base) => {
          base = base[0];
  
          var baseClass;
          var basePrototype;
          if (baseClassRawType) {
            baseClass = base.registeredClass;
            basePrototype = baseClass.instancePrototype;
          } else {
            basePrototype = ClassHandle.prototype;
          }
  
          var constructor = createNamedFunction(name, function(...args) {
            if (Object.getPrototypeOf(this) !== instancePrototype) {
              throw new BindingError("Use 'new' to construct " + name);
            }
            if (undefined === registeredClass.constructor_body) {
              throw new BindingError(name + " has no accessible constructor");
            }
            var body = registeredClass.constructor_body[args.length];
            if (undefined === body) {
              throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${args.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);
            }
            return body.apply(this, args);
          });
  
          var instancePrototype = Object.create(basePrototype, {
            constructor: { value: constructor },
          });
  
          constructor.prototype = instancePrototype;
  
          var registeredClass = new RegisteredClass(name,
                                                    constructor,
                                                    instancePrototype,
                                                    rawDestructor,
                                                    baseClass,
                                                    getActualType,
                                                    upcast,
                                                    downcast);
  
          if (registeredClass.baseClass) {
            // Keep track of class hierarchy. Used to allow sub-classes to inherit class functions.
            registeredClass.baseClass.__derivedClasses ??= [];
  
            registeredClass.baseClass.__derivedClasses.push(registeredClass);
          }
  
          var referenceConverter = new RegisteredPointer(name,
                                                         registeredClass,
                                                         true,
                                                         false,
                                                         false);
  
          var pointerConverter = new RegisteredPointer(name + '*',
                                                       registeredClass,
                                                       false,
                                                       false,
                                                       false);
  
          var constPointerConverter = new RegisteredPointer(name + ' const*',
                                                            registeredClass,
                                                            false,
                                                            true,
                                                            false);
  
          registeredPointers[rawType] = {
            pointerType: pointerConverter,
            constPointerType: constPointerConverter
          };
  
          replacePublicSymbol(legalFunctionName, constructor);
  
          return [referenceConverter, pointerConverter, constPointerConverter];
        }
      );
    };

  var heap32VectorToArray = (count, firstElement) => {
      var array = [];
      for (var i = 0; i < count; i++) {
        // TODO(https://github.com/emscripten-core/emscripten/issues/17310):
        // Find a way to hoist the `>> 2` or `>> 3` out of this loop.
        array.push(HEAPU32[(((firstElement)+(i * 4))>>2)]);
      }
      return array;
    };
  
  
  var runDestructors = (destructors) => {
      while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
      }
    };
  
  
  
  
  
  
  
  function usesDestructorStack(argTypes) {
      // Skip return value at index 0 - it's not deleted here.
      for (var i = 1; i < argTypes.length; ++i) {
        // The type does not define a destructor function - must use dynamic stack
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
          return true;
        }
      }
      return false;
    }
  
  function newFunc(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
        throw new TypeError(`new_ called with constructor type ${typeof(constructor)} which is not a function`);
      }
      /*
       * Previously, the following line was just:
       *   function dummy() {};
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even
       * though at creation, the 'dummy' has the correct constructor name.  Thus,
       * objects created with IMVU.new would show up in the debugger as 'dummy',
       * which isn't very helpful.  Using IMVU.createNamedFunction addresses the
       * issue.  Doubly-unfortunately, there's no way to write a test for this
       * behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  
  function checkArgCount(numArgs, minArgs, maxArgs, humanName, throwBindingError) {
      if (numArgs < minArgs || numArgs > maxArgs) {
        var argCountMessage = minArgs == maxArgs ? minArgs : `${minArgs} to ${maxArgs}`;
        throwBindingError(`function ${humanName} called with ${numArgs} arguments, expected ${argCountMessage}`);
      }
    }
  function createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync) {
      var needsDestructorStack = usesDestructorStack(argTypes);
      var argCount = argTypes.length - 2;
      var argsList = [];
      var argsListWired = ['fn'];
      if (isClassMethodFunc) {
        argsListWired.push('thisWired');
      }
      for (var i = 0; i < argCount; ++i) {
        argsList.push(`arg${i}`)
        argsListWired.push(`arg${i}Wired`)
      }
      argsList = argsList.join(',')
      argsListWired = argsListWired.join(',')
  
      var invokerFnBody = `return function (${argsList}) {\n`;
  
      invokerFnBody += "checkArgCount(arguments.length, minArgs, maxArgs, humanName, throwBindingError);\n";
  
      if (needsDestructorStack) {
        invokerFnBody += "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["humanName", "throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
  
      if (isClassMethodFunc) {
        invokerFnBody += `var thisWired = classParam['toWireType'](${dtorStack}, this);\n`;
      }
  
      for (var i = 0; i < argCount; ++i) {
        invokerFnBody += `var arg${i}Wired = argType${i}['toWireType'](${dtorStack}, arg${i});\n`;
        args1.push(`argType${i}`);
      }
  
      invokerFnBody += (returns || isAsync ? "var rv = ":"") + `invoker(${argsListWired});\n`;
  
      var returnVal = returns ? "rv" : "";
  
      if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
      } else {
        for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
          var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
          if (argTypes[i].destructorFunction !== null) {
            invokerFnBody += `${paramName}_dtor(${paramName});\n`;
            args1.push(`${paramName}_dtor`);
          }
        }
      }
  
      if (returns) {
        invokerFnBody += "var ret = retType['fromWireType'](rv);\n" +
                         "return ret;\n";
      } else {
      }
  
      invokerFnBody += "}\n";
  
      args1.push('checkArgCount', 'minArgs', 'maxArgs');
      invokerFnBody = `if (arguments.length !== ${args1.length}){ throw new Error(humanName + "Expected ${args1.length} closure arguments " + arguments.length + " given."); }\n${invokerFnBody}`;
      return [args1, invokerFnBody];
    }
  
  function getRequiredArgCount(argTypes) {
      var requiredArgCount = argTypes.length - 2;
      for (var i = argTypes.length - 1; i >= 2; --i) {
        if (!argTypes[i].optional) {
          break;
        }
        requiredArgCount--;
      }
      return requiredArgCount;
    }
  
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, /** boolean= */ isAsync) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      // isAsync: Optional. If true, returns an async function. Async bindings are only supported with JSPI.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      assert(!isAsync, 'Async bindings are only supported with JSPI.');
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = usesDestructorStack(argTypes);
  
      var returns = (argTypes[0].name !== "void");
  
      var expectedArgCount = argCount - 2;
      var minArgs = getRequiredArgCount(argTypes);
    // Builld the arguments that will be passed into the closure around the invoker
    // function.
    var closureArgs = [humanName, throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
    for (var i = 0; i < argCount - 2; ++i) {
      closureArgs.push(argTypes[i+2]);
    }
    if (!needsDestructorStack) {
      for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
        if (argTypes[i].destructorFunction !== null) {
          closureArgs.push(argTypes[i].destructorFunction);
        }
      }
    }
    closureArgs.push(checkArgCount, minArgs, expectedArgCount);
  
    let [args, invokerFnBody] = createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync);
    args.push(invokerFnBody);
    var invokerFn = newFunc(Function, args)(...closureArgs);
      return createNamedFunction(humanName, invokerFn);
    }
  var __embind_register_class_constructor = (
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) => {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], (classType) => {
        classType = classType[0];
        var humanName = `constructor ${classType.name}`;
  
        if (undefined === classType.registeredClass.constructor_body) {
          classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
          throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);
        }
        classType.registeredClass.constructor_body[argCount - 1] = () => {
          throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`, rawArgTypes);
        };
  
        whenDependentTypesAreResolved([], rawArgTypes, (argTypes) => {
          // Insert empty slot for context type (argTypes[1]).
          argTypes.splice(1, 0, null);
          classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
          return [];
        });
        return [];
      });
    };

  
  
  
  
  
  
  var getFunctionName = (signature) => {
      signature = signature.trim();
      const argsIndex = signature.indexOf("(");
      if (argsIndex !== -1) {
        assert(signature[signature.length - 1] == ")", "Parentheses for argument names should match.");
        return signature.substr(0, argsIndex);
      } else {
        return signature;
      }
    };
  var __embind_register_class_function = (rawClassType,
                                      methodName,
                                      argCount,
                                      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
                                      invokerSignature,
                                      rawInvoker,
                                      context,
                                      isPureVirtual,
                                      isAsync,
                                      isNonnullReturn) => {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      methodName = getFunctionName(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], (classType) => {
        classType = classType[0];
        var humanName = `${classType.name}.${methodName}`;
  
        if (methodName.startsWith("@@")) {
          methodName = Symbol[methodName.substring(2)];
        }
  
        if (isPureVirtual) {
          classType.registeredClass.pureVirtualFunctions.push(methodName);
        }
  
        function unboundTypesHandler() {
          throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`, rawArgTypes);
        }
  
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
          // This is the first overload to be registered, OR we are replacing a
          // function in the base class with a function in the derived class.
          unboundTypesHandler.argCount = argCount - 2;
          unboundTypesHandler.className = classType.name;
          proto[methodName] = unboundTypesHandler;
        } else {
          // There was an existing function with the same name registered. Set up
          // a function overload routing table.
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }
  
        whenDependentTypesAreResolved([], rawArgTypes, (argTypes) => {
          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);
  
          // Replace the initial unbound-handler-stub function with the
          // appropriate member function, now that all types are resolved. If
          // multiple overloads are registered for this function, the function
          // goes into an overload table.
          if (undefined === proto[methodName].overloadTable) {
            // Set argCount in case an overload is registered later
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
          } else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
          }
  
          return [];
        });
        return [];
      });
    };

  
  var emval_freelist = [];
  
  var emval_handles = [];
  var __emval_decref = (handle) => {
      if (handle > 9 && 0 === --emval_handles[handle + 1]) {
        assert(emval_handles[handle] !== undefined, `Decref for unallocated handle.`);
        emval_handles[handle] = undefined;
        emval_freelist.push(handle);
      }
    };
  
  
  
  
  
  var count_emval_handles = () => {
      return emval_handles.length / 2 - 5 - emval_freelist.length;
    };
  
  var init_emval = () => {
      // reserve 0 and some special values. These never get de-allocated.
      emval_handles.push(
        0, 1,
        undefined, 1,
        null, 1,
        true, 1,
        false, 1,
      );
      assert(emval_handles.length === 5 * 2);
      Module['count_emval_handles'] = count_emval_handles;
    };
  var Emval = {
  toValue:(handle) => {
        if (!handle) {
            throwBindingError('Cannot use deleted val. handle = ' + handle);
        }
        // handle 2 is supposed to be `undefined`.
        assert(handle === 2 || emval_handles[handle] !== undefined && handle % 2 === 0, `invalid handle: ${handle}`);
        return emval_handles[handle];
      },
  toHandle:(value) => {
        switch (value) {
          case undefined: return 2;
          case null: return 4;
          case true: return 6;
          case false: return 8;
          default:{
            const handle = emval_freelist.pop() || emval_handles.length;
            emval_handles[handle] = value;
            emval_handles[handle + 1] = 1;
            return handle;
          }
        }
      },
  };
  
  
  var EmValType = {
      name: 'emscripten::val',
      'fromWireType': (handle) => {
        var rv = Emval.toValue(handle);
        __emval_decref(handle);
        return rv;
      },
      'toWireType': (destructors, value) => Emval.toHandle(value),
      argPackAdvance: GenericWireTypeSize,
      'readValueFromPointer': readPointer,
      destructorFunction: null, // This type does not need a destructor
  
      // TODO: do we need a deleteObject here?  write a test where
      // emval is passed into JS via an interface
    };
  var __embind_register_emval = (rawType) => registerType(rawType, EmValType);

  var embindRepr = (v) => {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    };
  
  var floatReadValueFromPointer = (name, width) => {
      switch (width) {
          case 4: return function(pointer) {
              return this['fromWireType'](HEAPF32[((pointer)>>2)]);
          };
          case 8: return function(pointer) {
              return this['fromWireType'](HEAPF64[((pointer)>>3)]);
          };
          default:
              throw new TypeError(`invalid float width (${width}): ${name}`);
      }
    };
  
  
  var __embind_register_float = (rawType, name, size) => {
      name = readLatin1String(name);
      registerType(rawType, {
        name,
        'fromWireType': (value) => value,
        'toWireType': (destructors, value) => {
          if (typeof value != "number" && typeof value != "boolean") {
            throw new TypeError(`Cannot convert ${embindRepr(value)} to ${this.name}`);
          }
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': floatReadValueFromPointer(name, size),
        destructorFunction: null, // This type does not need a destructor
      });
    };

  
  
  
  
  
  
  
  
  var __embind_register_function = (name, argCount, rawArgTypesAddr, signature, rawInvoker, fn, isAsync, isNonnullReturn) => {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      name = getFunctionName(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
        throwUnboundTypeError(`Cannot call ${name} due to unbound types`, argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, (argTypes) => {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn, isAsync), argCount - 1);
        return [];
      });
    };

  
  var integerReadValueFromPointer = (name, width, signed) => {
      // integers are quite common, so generate very specialized functions
      switch (width) {
          case 1: return signed ?
              (pointer) => HEAP8[pointer] :
              (pointer) => HEAPU8[pointer];
          case 2: return signed ?
              (pointer) => HEAP16[((pointer)>>1)] :
              (pointer) => HEAPU16[((pointer)>>1)]
          case 4: return signed ?
              (pointer) => HEAP32[((pointer)>>2)] :
              (pointer) => HEAPU32[((pointer)>>2)]
          default:
              throw new TypeError(`invalid integer width (${width}): ${name}`);
      }
    };
  
  
  /** @suppress {globalThis} */
  var __embind_register_integer = (primitiveType, name, size, minRange, maxRange) => {
      name = readLatin1String(name);
      // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come
      // out as 'i32 -1'. Always treat those as max u32.
      if (maxRange === -1) {
        maxRange = 4294967295;
      }
  
      var fromWireType = (value) => value;
  
      if (minRange === 0) {
        var bitshift = 32 - 8*size;
        fromWireType = (value) => (value << bitshift) >>> bitshift;
      }
  
      var isUnsignedType = (name.includes('unsigned'));
      var checkAssertions = (value, toTypeName) => {
        if (typeof value != "number" && typeof value != "boolean") {
          throw new TypeError(`Cannot convert "${embindRepr(value)}" to ${toTypeName}`);
        }
        if (value < minRange || value > maxRange) {
          throw new TypeError(`Passing a number "${embindRepr(value)}" from JS side to C/C++ side to an argument of type "${name}", which is outside the valid range [${minRange}, ${maxRange}]!`);
        }
      }
      var toWireType;
      if (isUnsignedType) {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          return value >>> 0;
        }
      } else {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        }
      }
      registerType(primitiveType, {
        name,
        'fromWireType': fromWireType,
        'toWireType': toWireType,
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': integerReadValueFromPointer(name, size, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
      });
    };

  
  var __embind_register_memory_view = (rawType, dataTypeIndex, name) => {
      var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
        var size = HEAPU32[((handle)>>2)];
        var data = HEAPU32[(((handle)+(4))>>2)];
        return new TA(HEAP8.buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
        name,
        'fromWireType': decodeMemoryView,
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': decodeMemoryView,
      }, {
        ignoreDuplicateRegistrations: true,
      });
    };

  
  var EmValOptionalType = Object.assign({optional: true}, EmValType);;
  var __embind_register_optional = (rawOptionalType, rawType) => {
      registerType(rawOptionalType, EmValOptionalType);
    };

  
  
  
  
  var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
      assert(typeof str === 'string', `stringToUTF8Array expects a string (got ${typeof str})`);
      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
      // undefined and false each don't write out any bytes.
      if (!(maxBytesToWrite > 0))
        return 0;
  
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
        // and https://www.ietf.org/rfc/rfc2279.txt
        // and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
          var u1 = str.charCodeAt(++i);
          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xC0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xE0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
          heap[outIdx++] = 0xF0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    };
  var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    };
  
  var lengthBytesUTF8 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var c = str.charCodeAt(i); // possibly a lead surrogate
        if (c <= 0x7F) {
          len++;
        } else if (c <= 0x7FF) {
          len += 2;
        } else if (c >= 0xD800 && c <= 0xDFFF) {
          len += 4; ++i;
        } else {
          len += 3;
        }
      }
      return len;
    };
  
  
  
  var __embind_register_std_string = (rawType, name) => {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
        name,
        // For some method names we use string keys here since they are part of
        // the public/external API and/or used by the runtime-generated code.
        'fromWireType'(value) {
          var length = HEAPU32[((value)>>2)];
          var payload = value + 4;
  
          var str;
          if (stdStringIsUTF8) {
            var decodeStartPtr = payload;
            // Looping here to support possible embedded '0' bytes
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = payload + i;
              if (i == length || HEAPU8[currentBytePtr] == 0) {
                var maxRead = currentBytePtr - decodeStartPtr;
                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                if (str === undefined) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + 1;
              }
            }
          } else {
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
              a[i] = String.fromCharCode(HEAPU8[payload + i]);
            }
            str = a.join('');
          }
  
          _free(value);
  
          return str;
        },
        'toWireType'(destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }
  
          var length;
          var valueIsOfTypeString = (typeof value == 'string');
  
          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
            throwBindingError('Cannot pass non-string to std::string');
          }
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            length = lengthBytesUTF8(value);
          } else {
            length = value.length;
          }
  
          // assumes POINTER_SIZE alignment
          var base = _malloc(4 + length + 1);
          var ptr = base + 4;
          HEAPU32[((base)>>2)] = length;
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            stringToUTF8(value, ptr, length + 1);
          } else {
            if (valueIsOfTypeString) {
              for (var i = 0; i < length; ++i) {
                var charCode = value.charCodeAt(i);
                if (charCode > 255) {
                  _free(ptr);
                  throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + i] = charCode;
              }
            } else {
              for (var i = 0; i < length; ++i) {
                HEAPU8[ptr + i] = value[i];
              }
            }
          }
  
          if (destructors !== null) {
            destructors.push(_free, base);
          }
          return base;
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': readPointer,
        destructorFunction(ptr) {
          _free(ptr);
        },
      });
    };

  
  
  
  var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;
  var UTF16ToString = (ptr, maxBytesToRead) => {
      assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
      var endPtr = ptr;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.
      // Also, use the length info to avoid running tiny strings through
      // TextDecoder, since .subarray() allocates garbage.
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
      endPtr = idx << 1;
  
      if (endPtr - ptr > 32 && UTF16Decoder)
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  
      // Fallback: decode without UTF16Decoder
      var str = '';
  
      // If maxBytesToRead is not passed explicitly, it will be undefined, and the
      // for-loop's condition will always evaluate to true. The loop is then
      // terminated on the first null char.
      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
        var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
        if (codeUnit == 0) break;
        // fromCharCode constructs a character from a UTF-16 code unit, so we can
        // pass the UTF16 string right through.
        str += String.fromCharCode(codeUnit);
      }
  
      return str;
    };
  
  var stringToUTF16 = (str, outPtr, maxBytesToWrite) => {
      assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      maxBytesToWrite ??= 0x7FFFFFFF;
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2; // Null terminator.
      var startPtr = outPtr;
      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr)>>1)] = codeUnit;
        outPtr += 2;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP16[((outPtr)>>1)] = 0;
      return outPtr - startPtr;
    };
  
  var lengthBytesUTF16 = (str) => {
      return str.length*2;
    };
  
  var UTF32ToString = (ptr, maxBytesToRead) => {
      assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
      var i = 0;
  
      var str = '';
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
        if (utf32 == 0) break;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
          var ch = utf32 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    };
  
  var stringToUTF32 = (str, outPtr, maxBytesToWrite) => {
      assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      maxBytesToWrite ??= 0x7FFFFFFF;
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr)>>2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP32[((outPtr)>>2)] = 0;
      return outPtr - startPtr;
    };
  
  var lengthBytesUTF32 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
      }
  
      return len;
    };
  var __embind_register_std_wstring = (rawType, charSize, name) => {
      name = readLatin1String(name);
      var decodeString, encodeString, readCharAt, lengthBytesUTF;
      if (charSize === 2) {
        decodeString = UTF16ToString;
        encodeString = stringToUTF16;
        lengthBytesUTF = lengthBytesUTF16;
        readCharAt = (pointer) => HEAPU16[((pointer)>>1)];
      } else if (charSize === 4) {
        decodeString = UTF32ToString;
        encodeString = stringToUTF32;
        lengthBytesUTF = lengthBytesUTF32;
        readCharAt = (pointer) => HEAPU32[((pointer)>>2)];
      }
      registerType(rawType, {
        name,
        'fromWireType': (value) => {
          // Code mostly taken from _embind_register_std_string fromWireType
          var length = HEAPU32[((value)>>2)];
          var str;
  
          var decodeStartPtr = value + 4;
          // Looping here to support possible embedded '0' bytes
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i * charSize;
            if (i == length || readCharAt(currentBytePtr) == 0) {
              var maxReadBytes = currentBytePtr - decodeStartPtr;
              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
              if (str === undefined) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + charSize;
            }
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': (destructors, value) => {
          if (!(typeof value == 'string')) {
            throwBindingError(`Cannot pass non-string to C++ string type ${name}`);
          }
  
          // assumes POINTER_SIZE alignment
          var length = lengthBytesUTF(value);
          var ptr = _malloc(4 + length + charSize);
          HEAPU32[((ptr)>>2)] = length / charSize;
  
          encodeString(value, ptr + 4, length + charSize);
  
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': readPointer,
        destructorFunction(ptr) {
          _free(ptr);
        }
      });
    };

  
  var __embind_register_void = (rawType, name) => {
      name = readLatin1String(name);
      registerType(rawType, {
        isVoid: true, // void return values can be optimized out sometimes
        name,
        argPackAdvance: 0,
        'fromWireType': () => undefined,
        // TODO: assert if anything else is given?
        'toWireType': (destructors, o) => undefined,
      });
    };

  var __emscripten_memcpy_js = (dest, src, num) => HEAPU8.copyWithin(dest, src, src + num);


  
  
  
  var requireRegisteredType = (rawType, humanName) => {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
        throwBindingError(`${humanName} has unknown type ${getTypeName(rawType)}`);
      }
      return impl;
    };
  var __emval_take_value = (type, arg) => {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](arg);
      return Emval.toHandle(v);
    };

  
  var __tzset_js = (timezone, daylight, std_name, dst_name) => {
      // TODO: Use (malleable) environment variables instead of system settings.
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      var winterOffset = winter.getTimezoneOffset();
      var summerOffset = summer.getTimezoneOffset();
  
      // Local standard timezone offset. Local standard time is not adjusted for
      // daylight savings.  This code uses the fact that getTimezoneOffset returns
      // a greater value during Standard Time versus Daylight Saving Time (DST).
      // Thus it determines the expected output during Standard Time, and it
      // compares whether the output of the given date the same (Standard) or less
      // (DST).
      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by stdTimezoneOffset.
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAPU32[((timezone)>>2)] = stdTimezoneOffset * 60;
  
      HEAP32[((daylight)>>2)] = Number(winterOffset != summerOffset);
  
      var extractZone = (timezoneOffset) => {
        // Why inverse sign?
        // Read here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
        var sign = timezoneOffset >= 0 ? "-" : "+";
  
        var absOffset = Math.abs(timezoneOffset)
        var hours = String(Math.floor(absOffset / 60)).padStart(2, "0");
        var minutes = String(absOffset % 60).padStart(2, "0");
  
        return `UTC${sign}${hours}${minutes}`;
      }
  
      var winterName = extractZone(winterOffset);
      var summerName = extractZone(summerOffset);
      assert(winterName);
      assert(summerName);
      assert(lengthBytesUTF8(winterName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${winterName})`);
      assert(lengthBytesUTF8(summerName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${summerName})`);
      if (summerOffset < winterOffset) {
        // Northern hemisphere
        stringToUTF8(winterName, std_name, 17);
        stringToUTF8(summerName, dst_name, 17);
      } else {
        stringToUTF8(winterName, dst_name, 17);
        stringToUTF8(summerName, std_name, 17);
      }
    };

  var getHeapMax = () =>
      HEAPU8.length;
  
  var alignMemory = (size, alignment) => {
      assert(alignment, "alignment argument is required");
      return Math.ceil(size / alignment) * alignment;
    };
  
  var abortOnCannotGrowMemory = (requestedSize) => {
      abort(`Cannot enlarge memory arrays to size ${requestedSize} bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ${HEAP8.length}, (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0`);
    };
  var _emscripten_resize_heap = (requestedSize) => {
      var oldSize = HEAPU8.length;
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      requestedSize >>>= 0;
      abortOnCannotGrowMemory(requestedSize);
    };

  var ENV = {
  };
  
  var getExecutableName = () => {
      return thisProgram || './this.program';
    };
  var getEnvStrings = () => {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          // x is a key in ENV; if ENV[x] is undefined, that means it was
          // explicitly set to be so. We allow user code to do that to
          // force variables with default values to remain unset.
          if (ENV[x] === undefined) delete env[x];
          else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(`${x}=${env[x]}`);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    };
  
  var stringToAscii = (str, buffer) => {
      for (var i = 0; i < str.length; ++i) {
        assert(str.charCodeAt(i) === (str.charCodeAt(i) & 0xff));
        HEAP8[buffer++] = str.charCodeAt(i);
      }
      // Null-terminate the string
      HEAP8[buffer] = 0;
    };
  var _environ_get = (__environ, environ_buf) => {
      var bufSize = 0;
      getEnvStrings().forEach((string, i) => {
        var ptr = environ_buf + bufSize;
        HEAPU32[(((__environ)+(i*4))>>2)] = ptr;
        stringToAscii(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    };

  var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
      var strings = getEnvStrings();
      HEAPU32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach((string) => bufSize += string.length + 1);
      HEAPU32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    };

  var PATH = {
  isAbs:(path) => path.charAt(0) === '/',
  splitPath:(filename) => {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },
  normalizeArray:(parts, allowAboveRoot) => {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },
  normalize:(path) => {
        var isAbsolute = PATH.isAbs(path),
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },
  dirname:(path) => {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },
  basename:(path) => {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },
  join:(...paths) => PATH.normalize(paths.join('/')),
  join2:(l, r) => PATH.normalize(l + '/' + r),
  };
  
  var initRandomFill = () => {
      if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {
        // for modern web browsers
        return (view) => crypto.getRandomValues(view);
      } else
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      abort('no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: (array) => { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };');
    };
  var randomFill = (view) => {
      // Lazily init on the first invocation.
      return (randomFill = initRandomFill())(view);
    };
  
  
  
  var PATH_FS = {
  resolve:(...args) => {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? args[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path != 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },
  relative:(from, to) => {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      },
  };
  
  
  
  var FS_stdin_getChar_buffer = [];
  
  
  /** @type {function(string, boolean=, number=)} */
  function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
  }
  var FS_stdin_getChar = () => {
      if (!FS_stdin_getChar_buffer.length) {
        var result = null;
        if (typeof window != 'undefined' &&
          typeof window.prompt == 'function') {
          // Browser.
          result = window.prompt('Input: ');  // returns null on cancel
          if (result !== null) {
            result += '\n';
          }
        } else
        {}
        if (!result) {
          return null;
        }
        FS_stdin_getChar_buffer = intArrayFromString(result, true);
      }
      return FS_stdin_getChar_buffer.shift();
    };
  var TTY = {
  ttys:[],
  init() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process.stdin.setEncoding('utf8');
        // }
      },
  shutdown() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process.stdin.pause();
        // }
      },
  register(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },
  stream_ops:{
  open(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },
  close(stream) {
          // flush any pending line data
          stream.tty.ops.fsync(stream.tty);
        },
  fsync(stream) {
          stream.tty.ops.fsync(stream.tty);
        },
  read(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },
  write(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        },
  },
  default_tty_ops:{
  get_char(tty) {
          return FS_stdin_getChar();
        },
  put_char(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },
  fsync(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  ioctl_tcgets(tty) {
          // typical setting
          return {
            c_iflag: 25856,
            c_oflag: 5,
            c_cflag: 191,
            c_lflag: 35387,
            c_cc: [
              0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,
              0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ]
          };
        },
  ioctl_tcsets(tty, optional_actions, data) {
          // currently just ignore
          return 0;
        },
  ioctl_tiocgwinsz(tty) {
          return [24, 80];
        },
  },
  default_tty1_ops:{
  put_char(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
  fsync(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  },
  };
  
  
  var zeroMemory = (address, size) => {
      HEAPU8.fill(0, address, address + size);
    };
  
  var mmapAlloc = (size) => {
      abort('internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported');
    };
  var MEMFS = {
  ops_table:null,
  mount(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },
  createNode(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        MEMFS.ops_table ||= {
          dir: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              lookup: MEMFS.node_ops.lookup,
              mknod: MEMFS.node_ops.mknod,
              rename: MEMFS.node_ops.rename,
              unlink: MEMFS.node_ops.unlink,
              rmdir: MEMFS.node_ops.rmdir,
              readdir: MEMFS.node_ops.readdir,
              symlink: MEMFS.node_ops.symlink
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek
            }
          },
          file: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek,
              read: MEMFS.stream_ops.read,
              write: MEMFS.stream_ops.write,
              allocate: MEMFS.stream_ops.allocate,
              mmap: MEMFS.stream_ops.mmap,
              msync: MEMFS.stream_ops.msync
            }
          },
          link: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              readlink: MEMFS.node_ops.readlink
            },
            stream: {}
          },
          chrdev: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: FS.chrdev_stream_ops
          }
        };
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },
  getFileDataAsTypedArray(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },
  expandFileStorage(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },
  resizeFileStorage(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },
  node_ops:{
  getattr(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },
  setattr(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },
  lookup(parent, name) {
          throw FS.genericErrors[44];
        },
  mknod(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },
  rename(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
        },
  unlink(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },
  rmdir(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },
  readdir(node) {
          var entries = ['.', '..'];
          for (var key of Object.keys(node.contents)) {
            entries.push(key);
          }
          return entries;
        },
  symlink(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },
  readlink(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        },
  },
  stream_ops:{
  read(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },
  write(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },
  llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
  allocate(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },
  mmap(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the
            // buffer we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            if (contents) {
              // Try to avoid unnecessary slices.
              if (position > 0 || position + length < contents.length) {
                if (contents.subarray) {
                  contents = contents.subarray(position, position + length);
                } else {
                  contents = Array.prototype.slice.call(contents, position, position + length);
                }
              }
              HEAP8.set(contents, ptr);
            }
          }
          return { ptr, allocated };
        },
  msync(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        },
  },
  };
  
  /** @param {boolean=} noRunDep */
  var asyncLoad = (url, onload, onerror, noRunDep) => {
      var dep = !noRunDep ? getUniqueRunDependency(`al ${url}`) : '';
      readAsync(url).then(
        (arrayBuffer) => {
          assert(arrayBuffer, `Loading data file "${url}" failed (no arrayBuffer).`);
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        },
        (err) => {
          if (onerror) {
            onerror();
          } else {
            throw `Loading data file "${url}" failed.`;
          }
        }
      );
      if (dep) addRunDependency(dep);
    };
  
  
  var FS_createDataFile = (parent, name, fileData, canRead, canWrite, canOwn) => {
      FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);
    };
  
  var preloadPlugins = Module['preloadPlugins'] || [];
  var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
      // Ensure plugins are ready.
      if (typeof Browser != 'undefined') Browser.init();
  
      var handled = false;
      preloadPlugins.forEach((plugin) => {
        if (handled) return;
        if (plugin['canHandle'](fullname)) {
          plugin['handle'](byteArray, fullname, finish, onerror);
          handled = true;
        }
      });
      return handled;
    };
  var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
      // TODO we should allow people to just pass in a complete filename instead
      // of parent and name being that we just join them anyways
      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
      var dep = getUniqueRunDependency(`cp ${fullname}`); // might have several active requests for the same fullname
      function processData(byteArray) {
        function finish(byteArray) {
          preFinish?.();
          if (!dontCreateFile) {
            FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
          }
          onload?.();
          removeRunDependency(dep);
        }
        if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
          onerror?.();
          removeRunDependency(dep);
        })) {
          return;
        }
        finish(byteArray);
      }
      addRunDependency(dep);
      if (typeof url == 'string') {
        asyncLoad(url, processData, onerror);
      } else {
        processData(url);
      }
    };
  
  var FS_modeStringToFlags = (str) => {
      var flagModes = {
        'r': 0,
        'r+': 2,
        'w': 512 | 64 | 1,
        'w+': 512 | 64 | 2,
        'a': 1024 | 64 | 1,
        'a+': 1024 | 64 | 2,
      };
      var flags = flagModes[str];
      if (typeof flags == 'undefined') {
        throw new Error(`Unknown file open mode: ${str}`);
      }
      return flags;
    };
  
  var FS_getMode = (canRead, canWrite) => {
      var mode = 0;
      if (canRead) mode |= 292 | 73;
      if (canWrite) mode |= 146;
      return mode;
    };
  
  
  
  
  
  
  var strError = (errno) => {
      return UTF8ToString(_strerror(errno));
    };
  
  var ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };
  var FS = {
  root:null,
  mounts:[],
  devices:{
  },
  streams:[],
  nextInode:1,
  nameTable:null,
  currentPath:"/",
  initialized:false,
  ignorePermissions:true,
  ErrnoError:class extends Error {
        name = 'ErrnoError';
        // We set the `name` property to be able to identify `FS.ErrnoError`
        // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
        // - when using PROXYFS, an error can come from an underlying FS
        // as different FS objects have their own FS.ErrnoError each,
        // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
        // we'll use the reliable test `err.name == "ErrnoError"` instead
        constructor(errno) {
          super(runtimeInitialized ? strError(errno) : '');
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
        }
      },
  genericErrors:{
  },
  filesystems:null,
  syncFSRequests:0,
  readFiles:{
  },
  FSStream:class {
        shared = {};
        get object() {
          return this.node;
        }
        set object(val) {
          this.node = val;
        }
        get isRead() {
          return (this.flags & 2097155) !== 1;
        }
        get isWrite() {
          return (this.flags & 2097155) !== 0;
        }
        get isAppend() {
          return (this.flags & 1024);
        }
        get flags() {
          return this.shared.flags;
        }
        set flags(val) {
          this.shared.flags = val;
        }
        get position() {
          return this.shared.position;
        }
        set position(val) {
          this.shared.position = val;
        }
      },
  FSNode:class {
        node_ops = {};
        stream_ops = {};
        readMode = 292 | 73;
        writeMode = 146;
        mounted = null;
        constructor(parent, name, mode, rdev) {
          if (!parent) {
            parent = this;  // root node sets parent to itself
          }
          this.parent = parent;
          this.mount = parent.mount;
          this.id = FS.nextInode++;
          this.name = name;
          this.mode = mode;
          this.rdev = rdev;
        }
        get read() {
          return (this.mode & this.readMode) === this.readMode;
        }
        set read(val) {
          val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
        }
        get write() {
          return (this.mode & this.writeMode) === this.writeMode;
        }
        set write(val) {
          val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
        }
        get isFolder() {
          return FS.isDir(this.mode);
        }
        get isDevice() {
          return FS.isChrdev(this.mode);
        }
      },
  lookupPath(path, opts = {}) {
        path = PATH_FS.resolve(path);
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        opts = Object.assign(defaults, opts)
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the absolute path
        var parts = path.split('/').filter((p) => !!p);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },
  getPath(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? `${mount}/${path}` : mount + path;
          }
          path = path ? `${node.name}/${path}` : node.name;
          node = node.parent;
        }
      },
  hashName(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },
  hashAddNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },
  hashRemoveNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },
  lookupNode(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },
  createNode(parent, name, mode, rdev) {
        assert(typeof parent == 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },
  destroyNode(node) {
        FS.hashRemoveNode(node);
      },
  isRoot(node) {
        return node === node.parent;
      },
  isMountpoint(node) {
        return !!node.mounted;
      },
  isFile(mode) {
        return (mode & 61440) === 32768;
      },
  isDir(mode) {
        return (mode & 61440) === 16384;
      },
  isLink(mode) {
        return (mode & 61440) === 40960;
      },
  isChrdev(mode) {
        return (mode & 61440) === 8192;
      },
  isBlkdev(mode) {
        return (mode & 61440) === 24576;
      },
  isFIFO(mode) {
        return (mode & 61440) === 4096;
      },
  isSocket(mode) {
        return (mode & 49152) === 49152;
      },
  flagsToPermissionString(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },
  nodePermissions(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },
  mayLookup(dir) {
        if (!FS.isDir(dir.mode)) return 54;
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },
  mayCreate(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },
  mayDelete(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },
  mayOpen(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },
  MAX_OPEN_FDS:4096,
  nextfd() {
        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },
  getStreamChecked(fd) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        return stream;
      },
  getStream:(fd) => FS.streams[fd],
  createStream(stream, fd = -1) {
        assert(fd >= -1);
  
        // clone it, so we can return an instance of FSStream
        stream = Object.assign(new FS.FSStream(), stream);
        if (fd == -1) {
          fd = FS.nextfd();
        }
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },
  closeStream(fd) {
        FS.streams[fd] = null;
      },
  dupStream(origStream, fd = -1) {
        var stream = FS.createStream(origStream, fd);
        stream.stream_ops?.dup?.(stream);
        return stream;
      },
  chrdev_stream_ops:{
  open(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          stream.stream_ops.open?.(stream);
        },
  llseek() {
          throw new FS.ErrnoError(70);
        },
  },
  major:(dev) => ((dev) >> 8),
  minor:(dev) => ((dev) & 0xff),
  makedev:(ma, mi) => ((ma) << 8 | (mi)),
  registerDevice(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },
  getDevice:(dev) => FS.devices[dev],
  getMounts(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push(...m.mounts);
        }
  
        return mounts;
      },
  syncfs(populate, callback) {
        if (typeof populate == 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },
  mount(type, opts, mountpoint) {
        if (typeof type == 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type,
          opts,
          mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },
  unmount(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },
  lookup(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },
  mknod(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },
  create(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },
  mkdir(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },
  mkdirTree(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },
  mkdev(path, mode, dev) {
        if (typeof dev == 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },
  symlink(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },
  rename(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existent directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
          // update old node (we do this here to avoid each backend 
          // needing to)
          old_node.parent = new_dir;
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },
  rmdir(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },
  readdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },
  unlink(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },
  readlink(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },
  stat(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },
  lstat(path) {
        return FS.stat(path, true);
      },
  chmod(path, mode, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },
  lchmod(path, mode) {
        FS.chmod(path, mode, true);
      },
  fchmod(fd, mode) {
        var stream = FS.getStreamChecked(fd);
        FS.chmod(stream.node, mode);
      },
  chown(path, uid, gid, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },
  lchown(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },
  fchown(fd, uid, gid) {
        var stream = FS.getStreamChecked(fd);
        FS.chown(stream.node, uid, gid);
      },
  truncate(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },
  ftruncate(fd, len) {
        var stream = FS.getStreamChecked(fd);
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },
  utime(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },
  open(path, flags, mode) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;
        if ((flags & 64)) {
          mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path == 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512) && !created) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        });
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },
  close(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },
  isClosed(stream) {
        return stream.fd === null;
      },
  llseek(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },
  read(stream, buffer, offset, length, position) {
        assert(offset >= 0);
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },
  write(stream, buffer, offset, length, position, canOwn) {
        assert(offset >= 0);
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },
  allocate(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },
  mmap(stream, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        if (!length) {
          throw new FS.ErrnoError(28);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },
  msync(stream, buffer, offset, length, mmapFlags) {
        assert(offset >= 0);
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },
  ioctl(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },
  readFile(path, opts = {}) {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error(`Invalid encoding type "${opts.encoding}"`);
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },
  writeFile(path, data, opts = {}) {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },
  cwd:() => FS.currentPath,
  chdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },
  createDefaultDirectories() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },
  createDefaultDevices() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        // use a buffer to avoid overhead of individual crypto calls per byte
        var randomBuffer = new Uint8Array(1024), randomLeft = 0;
        var randomByte = () => {
          if (randomLeft === 0) {
            randomLeft = randomFill(randomBuffer).byteLength;
          }
          return randomBuffer[--randomLeft];
        };
        FS.createDevice('/dev', 'random', randomByte);
        FS.createDevice('/dev', 'urandom', randomByte);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },
  createSpecialDirectories() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount() {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup(parent, name) {
                var fd = +name;
                var stream = FS.getStreamChecked(fd);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: () => stream.path },
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },
  createStandardStreams(input, output, error) {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (input) {
          FS.createDevice('/dev', 'stdin', input);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (output) {
          FS.createDevice('/dev', 'stdout', null, output);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (error) {
          FS.createDevice('/dev', 'stderr', null, error);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, `invalid handle for stdin (${stdin.fd})`);
        assert(stdout.fd === 1, `invalid handle for stdout (${stdout.fd})`);
        assert(stderr.fd === 2, `invalid handle for stderr (${stderr.fd})`);
      },
  staticInit() {
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach((code) => {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },
  init(input, output, error) {
        assert(!FS.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.initialized = true;
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input ??= Module['stdin'];
        output ??= Module['stdout'];
        error ??= Module['stderr'];
  
        FS.createStandardStreams(input, output, error);
      },
  quit() {
        FS.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        _fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },
  findObject(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },
  analyzePath(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },
  createPath(parent, path, canRead, canWrite) {
        parent = typeof parent == 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },
  createFile(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(canRead, canWrite);
        return FS.create(path, mode);
      },
  createDataFile(parent, name, data, canRead, canWrite, canOwn) {
        var path = name;
        if (parent) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS_getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
      },
  createDevice(parent, name, input, output) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(!!input, !!output);
        FS.createDevice.major ??= 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open(stream) {
            stream.seekable = false;
          },
          close(stream) {
            // flush any pending line data
            if (output?.buffer?.length) {
              output(10);
            }
          },
          read(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },
  forceLoadFile(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest != 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else { // Command-line.
          try {
            obj.contents = readBinary(obj.url);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
      },
  createLazyFile(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array).
        // Actual getting is abstracted away for eventual reuse.
        class LazyUint8Array {
          lengthKnown = false;
          chunks = []; // Loaded chunks. Index is the chunk number
          get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = (idx / this.chunkSize)|0;
            return this.getter(chunkNum)[chunkOffset];
          }
          setDataGetter(getter) {
            this.getter = getter;
          }
          cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (from, to) => {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
              }
              return intArrayFromString(xhr.responseText || '', true);
            };
            var lazyArray = this;
            lazyArray.setDataGetter((chunkNum) => {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
              return lazyArray.chunks[chunkNum];
            });
  
            if (usesGzip || !datalength) {
              // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
              chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          }
          get length() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._length;
          }
          get chunkSize() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._chunkSize;
          }
        }
  
        if (typeof XMLHttpRequest != 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = (...args) => {
            FS.forceLoadFile(node);
            return fn(...args);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        // use a custom read function
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position)
        };
        // use a custom mmap function
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },
  absolutePath() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },
  createFolder() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },
  createLink() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },
  joinPath() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },
  mmapAlloc() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },
  standardizePath() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      },
  };
  
  var SYSCALLS = {
  DEFAULT_POLLMASK:5,
  calculateAt(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },
  doStat(func, path, buf) {
        var stat = func(path);
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = stat.mode;
        HEAPU32[(((buf)+(8))>>2)] = stat.nlink;
        HEAP32[(((buf)+(12))>>2)] = stat.uid;
        HEAP32[(((buf)+(16))>>2)] = stat.gid;
        HEAP32[(((buf)+(20))>>2)] = stat.rdev;
        (tempI64 = [stat.size>>>0,(tempDouble = stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(24))>>2)] = tempI64[0],HEAP32[(((buf)+(28))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(32))>>2)] = 4096;
        HEAP32[(((buf)+(36))>>2)] = stat.blocks;
        var atime = stat.atime.getTime();
        var mtime = stat.mtime.getTime();
        var ctime = stat.ctime.getTime();
        (tempI64 = [Math.floor(atime / 1000)>>>0,(tempDouble = Math.floor(atime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(48))>>2)] = (atime % 1000) * 1000 * 1000;
        (tempI64 = [Math.floor(mtime / 1000)>>>0,(tempDouble = Math.floor(mtime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(64))>>2)] = (mtime % 1000) * 1000 * 1000;
        (tempI64 = [Math.floor(ctime / 1000)>>>0,(tempDouble = Math.floor(ctime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(80))>>2)] = (ctime % 1000) * 1000 * 1000;
        (tempI64 = [stat.ino>>>0,(tempDouble = stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);
        return 0;
      },
  doMsync(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          // MAP_PRIVATE calls need not to be synced back to underlying fs
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },
  getStreamFromFD(fd) {
        var stream = FS.getStreamChecked(fd);
        return stream;
      },
  varargs:undefined,
  getStr(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },
  };
  function _fd_close(fd) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  var doReadv = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.read(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break; // nothing more to read
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_read(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doReadv(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  
  var convertI32PairToI53Checked = (lo, hi) => {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    };
  function _fd_seek(fd,offset_low, offset_high,whence,newOffset) {
    var offset = convertI32PairToI53Checked(offset_low, offset_high);
  
    
  try {
  
      if (isNaN(offset)) return 61;
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble = stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  ;
  }

  /** @param {number=} offset */
  var doWritev = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.write(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) {
          // No more space to write.
          break;
        }
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_write(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doWritev(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  function _random_get(buffer, size) {
  try {
  
      randomFill(HEAPU8.subarray(buffer, buffer + size));
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }
embind_init_charCodes();
BindingError = Module['BindingError'] = class BindingError extends Error { constructor(message) { super(message); this.name = 'BindingError'; }};
InternalError = Module['InternalError'] = class InternalError extends Error { constructor(message) { super(message); this.name = 'InternalError'; }};
init_ClassHandle();
init_RegisteredPointer();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;

  FS.createPreloadedFile = FS_createPreloadedFile;
  FS.staticInit();
  // Set module methods based on EXPORTED_RUNTIME_METHODS
  ;
function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var wasmImports = {
  /** @export */
  __assert_fail: ___assert_fail,
  /** @export */
  __cxa_throw: ___cxa_throw,
  /** @export */
  _abort_js: __abort_js,
  /** @export */
  _embind_register_bigint: __embind_register_bigint,
  /** @export */
  _embind_register_bool: __embind_register_bool,
  /** @export */
  _embind_register_class: __embind_register_class,
  /** @export */
  _embind_register_class_constructor: __embind_register_class_constructor,
  /** @export */
  _embind_register_class_function: __embind_register_class_function,
  /** @export */
  _embind_register_emval: __embind_register_emval,
  /** @export */
  _embind_register_float: __embind_register_float,
  /** @export */
  _embind_register_function: __embind_register_function,
  /** @export */
  _embind_register_integer: __embind_register_integer,
  /** @export */
  _embind_register_memory_view: __embind_register_memory_view,
  /** @export */
  _embind_register_optional: __embind_register_optional,
  /** @export */
  _embind_register_std_string: __embind_register_std_string,
  /** @export */
  _embind_register_std_wstring: __embind_register_std_wstring,
  /** @export */
  _embind_register_void: __embind_register_void,
  /** @export */
  _emscripten_memcpy_js: __emscripten_memcpy_js,
  /** @export */
  _emval_decref: __emval_decref,
  /** @export */
  _emval_take_value: __emval_take_value,
  /** @export */
  _tzset_js: __tzset_js,
  /** @export */
  emscripten_resize_heap: _emscripten_resize_heap,
  /** @export */
  environ_get: _environ_get,
  /** @export */
  environ_sizes_get: _environ_sizes_get,
  /** @export */
  fd_close: _fd_close,
  /** @export */
  fd_read: _fd_read,
  /** @export */
  fd_seek: _fd_seek,
  /** @export */
  fd_write: _fd_write,
  /** @export */
  random_get: _random_get
};
var wasmExports = createWasm();
var ___wasm_call_ctors = createExportWrapper('__wasm_call_ctors', 0);
var ___getTypeName = createExportWrapper('__getTypeName', 1);
var _fflush = createExportWrapper('fflush', 1);
var _malloc = createExportWrapper('malloc', 1);
var _strerror = createExportWrapper('strerror', 1);
var _free = createExportWrapper('free', 1);
var _emscripten_stack_init = () => (_emscripten_stack_init = wasmExports['emscripten_stack_init'])();
var _emscripten_stack_get_free = () => (_emscripten_stack_get_free = wasmExports['emscripten_stack_get_free'])();
var _emscripten_stack_get_base = () => (_emscripten_stack_get_base = wasmExports['emscripten_stack_get_base'])();
var _emscripten_stack_get_end = () => (_emscripten_stack_get_end = wasmExports['emscripten_stack_get_end'])();
var __emscripten_stack_restore = (a0) => (__emscripten_stack_restore = wasmExports['_emscripten_stack_restore'])(a0);
var __emscripten_stack_alloc = (a0) => (__emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc'])(a0);
var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports['emscripten_stack_get_current'])();
var dynCall_viijii = Module['dynCall_viijii'] = createExportWrapper('dynCall_viijii', 7);
var dynCall_jiji = Module['dynCall_jiji'] = createExportWrapper('dynCall_jiji', 5);
var dynCall_iiiiij = Module['dynCall_iiiiij'] = createExportWrapper('dynCall_iiiiij', 7);
var dynCall_iiiiijj = Module['dynCall_iiiiijj'] = createExportWrapper('dynCall_iiiiijj', 9);
var dynCall_iiiiiijj = Module['dynCall_iiiiiijj'] = createExportWrapper('dynCall_iiiiiijj', 10);


// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

var missingLibrarySymbols = [
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertU32PairToI53',
  'stackAlloc',
  'getTempRet0',
  'setTempRet0',
  'exitJS',
  'growMemory',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'emscriptenLog',
  'readEmAsmArgs',
  'jstoi_q',
  'listenOnce',
  'autoResumeAudioContext',
  'handleException',
  'keepRuntimeAlive',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'asmjsMangle',
  'HandleAllocator',
  'getNativeTypeSize',
  'STACK_SIZE',
  'STACK_ALIGN',
  'POINTER_SIZE',
  'ASSERTIONS',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'getEmptyTableSlot',
  'updateTableMap',
  'getFunctionAddress',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'intArrayToString',
  'AsciiToString',
  'stringToNewUTF8',
  'stringToUTF8OnStack',
  'writeArrayToMemory',
  'registerKeyEventCallback',
  'maybeCStringToJsString',
  'findEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'jsStackTrace',
  'getCallstack',
  'convertPCtoSourceLocation',
  'checkWasiClock',
  'wasiRightsToMuslOFlags',
  'wasiOFlagsToMuslOFlags',
  'createDyncallWrapper',
  'safeSetTimeout',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'registerPostMainLoop',
  'registerPreMainLoop',
  'getPromise',
  'makePromise',
  'idsToPromises',
  'makePromiseCallback',
  'findMatchingCatch',
  'Browser_asyncPrepareDataCounter',
  'safeRequestAnimationFrame',
  'isLeapYear',
  'ydayFromDate',
  'arraySum',
  'addDays',
  'getSocketFromFD',
  'getSocketAddress',
  'FS_unlink',
  'FS_mkdirTree',
  '_setNetworkCallback',
  'heapObjectForWebGLType',
  'toTypedArrayIndex',
  'webgl_enable_ANGLE_instanced_arrays',
  'webgl_enable_OES_vertex_array_object',
  'webgl_enable_WEBGL_draw_buffers',
  'webgl_enable_WEBGL_multi_draw',
  'webgl_enable_EXT_polygon_offset_clamp',
  'webgl_enable_EXT_clip_control',
  'webgl_enable_WEBGL_polygon_mode',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'colorChannelsInGlTextureFormat',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  '__glGetActiveAttribOrUniform',
  'writeGLArray',
  'registerWebGlEventCallback',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
  'writeStringToMemory',
  'writeAsciiToMemory',
  'setErrNo',
  'demangle',
  'stackTrace',
  'getFunctionArgsName',
  'createJsInvokerSignature',
  'registerInheritedInstance',
  'unregisterInheritedInstance',
  'getInheritedInstanceCount',
  'getLiveInheritedInstances',
  'enumReadValueFromPointer',
  'setDelayFunction',
  'validateThis',
  'getStringOrSymbol',
  'emval_get_global',
  'emval_returnValue',
  'emval_lookupTypes',
  'emval_addMethodCaller',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)

var unexportedSymbols = [
  'run',
  'addOnPreRun',
  'addOnInit',
  'addOnPreMain',
  'addOnExit',
  'addOnPostRun',
  'addRunDependency',
  'removeRunDependency',
  'out',
  'err',
  'callMain',
  'abort',
  'wasmMemory',
  'wasmExports',
  'writeStackCookie',
  'checkStackCookie',
  'convertI32PairToI53Checked',
  'stackSave',
  'stackRestore',
  'ptrToString',
  'zeroMemory',
  'getHeapMax',
  'abortOnCannotGrowMemory',
  'ENV',
  'ERRNO_CODES',
  'strError',
  'DNS',
  'Protocols',
  'Sockets',
  'timers',
  'warnOnce',
  'readEmAsmArgsArray',
  'jstoi_s',
  'getExecutableName',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'wasmTable',
  'noExitRuntime',
  'freeTableIndexes',
  'functionsInTableMap',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'UTF8Decoder',
  'UTF8ArrayToString',
  'UTF8ToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'intArrayFromString',
  'stringToAscii',
  'UTF16Decoder',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'JSEvents',
  'specialHTMLTargets',
  'findCanvasEventTarget',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'UNWIND_CACHE',
  'ExitStatus',
  'getEnvStrings',
  'doReadv',
  'doWritev',
  'initRandomFill',
  'randomFill',
  'promiseMap',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'ExceptionInfo',
  'Browser',
  'getPreloadedImageData__data',
  'wget',
  'MONTH_DAYS_REGULAR',
  'MONTH_DAYS_LEAP',
  'MONTH_DAYS_REGULAR_CUMULATIVE',
  'MONTH_DAYS_LEAP_CUMULATIVE',
  'SYSCALLS',
  'preloadPlugins',
  'FS_createPreloadedFile',
  'FS_modeStringToFlags',
  'FS_getMode',
  'FS_stdin_getChar_buffer',
  'FS_stdin_getChar',
  'FS_createPath',
  'FS_createDevice',
  'FS_readFile',
  'FS',
  'FS_createDataFile',
  'FS_createLazyFile',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'miniTempWebGLIntBuffers',
  'GL',
  'AL',
  'GLUT',
  'EGL',
  'GLEW',
  'IDBStore',
  'SDL',
  'SDL_gfx',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'print',
  'printErr',
  'InternalError',
  'BindingError',
  'throwInternalError',
  'throwBindingError',
  'registeredTypes',
  'awaitingDependencies',
  'typeDependencies',
  'tupleRegistrations',
  'structRegistrations',
  'sharedRegisterType',
  'whenDependentTypesAreResolved',
  'embind_charCodes',
  'embind_init_charCodes',
  'readLatin1String',
  'getTypeName',
  'getFunctionName',
  'heap32VectorToArray',
  'requireRegisteredType',
  'usesDestructorStack',
  'checkArgCount',
  'getRequiredArgCount',
  'createJsInvoker',
  'UnboundTypeError',
  'PureVirtualError',
  'GenericWireTypeSize',
  'EmValType',
  'EmValOptionalType',
  'throwUnboundTypeError',
  'ensureOverloadTable',
  'exposePublicSymbol',
  'replacePublicSymbol',
  'extendError',
  'createNamedFunction',
  'embindRepr',
  'registeredInstances',
  'getBasestPointer',
  'getInheritedInstance',
  'registeredPointers',
  'registerType',
  'integerReadValueFromPointer',
  'floatReadValueFromPointer',
  'readPointer',
  'runDestructors',
  'newFunc',
  'craftInvokerFunction',
  'embind__requireFunction',
  'genericPointerToWireType',
  'constNoSmartPtrRawPointerToWireType',
  'nonConstNoSmartPtrRawPointerToWireType',
  'init_RegisteredPointer',
  'RegisteredPointer',
  'RegisteredPointer_fromWireType',
  'runDestructor',
  'releaseClassHandle',
  'finalizationRegistry',
  'detachFinalizer_deps',
  'detachFinalizer',
  'attachFinalizer',
  'makeClassHandle',
  'init_ClassHandle',
  'ClassHandle',
  'throwInstanceAlreadyDeleted',
  'deletionQueue',
  'flushPendingDeletes',
  'delayFunction',
  'RegisteredClass',
  'shallowCopyInternalPointer',
  'downcastPointer',
  'upcastPointer',
  'char_0',
  'char_9',
  'makeLegalFunctionName',
  'emval_freelist',
  'emval_handles',
  'emval_symbols',
  'init_emval',
  'count_emval_handles',
  'Emval',
  'emval_methodCallers',
  'reflectConstruct',
];
unexportedSymbols.forEach(unexportedRuntimeSymbol);



var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run() {

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    Module['onRuntimeInitialized']?.();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(() => {
      setTimeout(() => Module['setStatus'](''), 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach((name) => {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty?.output?.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();

// end include: postamble.js

