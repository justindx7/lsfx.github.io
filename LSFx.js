// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof WorkerGlobalScope != 'undefined') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.startsWith('blob:')) {
    scriptDirectory = '';
  } else {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/')+1);
  }

  if (!(typeof window == 'object' || typeof WorkerGlobalScope != 'undefined')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  {
// include: web_or_worker_shell_read.js
readAsync = async (url) => {
    assert(!isFileURI(url), "readAsync does not work with file:// URLs");
    var response = await fetch(url, { credentials: 'same-origin' });
    if (response.ok) {
      return response.arrayBuffer();
    }
    throw new Error(response.status + ' : ' + response.url);
  };
// end include: web_or_worker_shell_read.js
  }
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.error.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('asm', 'wasmExports');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var FETCHFS = 'FETCHFS is no longer included by default; build with -lfetchfs.js';
var ICASEFS = 'ICASEFS is no longer included by default; build with -licasefs.js';
var JSFILEFS = 'JSFILEFS is no longer included by default; build with -ljsfilefs.js';
var OPFS = 'OPFS is no longer included by default; build with -lopfs.js';

var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_WORKER, 'worker environment detected but not enabled at build time.  Add `worker` to `-sENVIRONMENT` to enable.');

assert(!ENVIRONMENT_IS_NODE, 'node environment detected but not enabled at build time.  Add `node` to `-sENVIRONMENT` to enable.');

assert(!ENVIRONMENT_IS_SHELL, 'shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.');

// end include: shell.js

// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
    return uint8Array;
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 65536, "");
  base64DecodeToExistingUint8Array(bufferView, 95480, "BQAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHQAAAB4AAACwdwEAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+HQBAGCeAQAJAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAFMAAAAAAAAAHgAAALiJAQAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdAAAAVQAAAMiNAQAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA/////woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgdgEAJW0vJWQvJXkAAAAIJUg6JU06JVMAAAAI");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_memory_copy(dest, source, size) {
    // TODO: traps on invalid things
    bufferView.copyWithin(dest, source, source + size);
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
  function wasm2js_memory_fill(dest, value, size) {
    dest = dest >>> 0;
    size = size >>> 0;
    if (dest + size > bufferView.length) throw "trap: invalid memory.fill";
    bufferView.fill(value, dest, dest + size);
  }
      
function asmFunc(imports) {
 var buffer = new ArrayBuffer(16908288);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var fimport$0 = env.__assert_fail;
 var fimport$1 = env.__cxa_throw;
 var fimport$2 = env._embind_register_void;
 var fimport$3 = env._embind_register_bool;
 var fimport$4 = env._embind_register_integer;
 var fimport$5 = env._embind_register_float;
 var fimport$6 = env._embind_register_std_string;
 var fimport$7 = env._embind_register_std_wstring;
 var fimport$8 = env._embind_register_emval;
 var fimport$9 = env._embind_register_memory_view;
 var fimport$10 = env._embind_register_class;
 var fimport$11 = env._embind_register_function;
 var fimport$12 = env._embind_register_optional;
 var fimport$13 = env._embind_register_class_constructor;
 var fimport$14 = env._embind_register_class_function;
 var fimport$15 = env._emval_take_value;
 var fimport$16 = env._emval_decref;
 var fimport$17 = env._abort_js;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var fimport$18 = wasi_snapshot_preview1.fd_close;
 var fimport$19 = wasi_snapshot_preview1.fd_write;
 var fimport$20 = env.emscripten_resize_heap;
 var fimport$21 = wasi_snapshot_preview1.fd_read;
 var fimport$22 = wasi_snapshot_preview1.environ_sizes_get;
 var fimport$23 = wasi_snapshot_preview1.environ_get;
 var fimport$24 = env._tzset_js;
 var fimport$25 = wasi_snapshot_preview1.random_get;
 var fimport$26 = env._embind_register_bigint;
 var fimport$27 = wasi_snapshot_preview1.fd_seek;
 var global$0 = 65536;
 var global$1 = 0;
 var global$2 = 0;
 var global$3 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $2710();
  $1389();
  $1425();
  $4();
  $936();
  $975();
 }
 
 function $1($0_1) {
  $0_1 = $0_1 | 0;
  return $986(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[(0 + 95952 | 0) >> 2] | 0;
  HEAP32[(0 + 95952 | 0) >> 2] = $0_1;
 }
 
 function $3() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  fimport$2(94756 | 0, 66316 | 0);
  fimport$3(94780 | 0, 66024 | 0, 1 | 0, 0 | 0);
  fimport$4(94792 | 0, 65867 | 0, 1 | 0, -128 | 0, 127 | 0);
  fimport$4(94816 | 0, 65860 | 0, 1 | 0, -128 | 0, 127 | 0);
  fimport$4(94804 | 0, 65858 | 0, 1 | 0, 0 | 0, 255 | 0);
  fimport$4(94828 | 0, 65735 | 0, 2 | 0, -32768 | 0, 32767 | 0);
  fimport$4(94840 | 0, 65726 | 0, 2 | 0, 0 | 0, 65535 | 0);
  fimport$4(94852 | 0, 65750 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  fimport$4(94864 | 0, 65741 | 0, 4 | 0, 0 | 0, -1 | 0);
  fimport$4(94876 | 0, 66160 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  fimport$4(94888 | 0, 66151 | 0, 4 | 0, 0 | 0, -1 | 0);
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$1 = 2147483647;
  $2727(94900 | 0, 65777 | 0, 8 | 0, 0 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  $2727(94912 | 0, 65776 | 0, 8 | 0, 0 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0);
  fimport$5(94924 | 0, 65766 | 0, 4 | 0);
  fimport$5(94936 | 0, 66283 | 0, 8 | 0);
  fimport$6(67316 | 0, 66191 | 0);
  fimport$7(67388 | 0, 4 | 0, 66165 | 0);
  fimport$7(67460 | 0, 2 | 0, 66203 | 0);
  fimport$7(67536 | 0, 4 | 0, 66218 | 0);
  fimport$8(67612 | 0);
  fimport$9(67640 | 0, 0 | 0, 66957 | 0);
  fimport$9(67680 | 0, 0 | 0, 67026 | 0);
  fimport$9(67720 | 0, 1 | 0, 66987 | 0);
  fimport$9(67760 | 0, 2 | 0, 66522 | 0);
  fimport$9(67800 | 0, 3 | 0, 66553 | 0);
  fimport$9(67840 | 0, 4 | 0, 66593 | 0);
  fimport$9(67880 | 0, 5 | 0, 66622 | 0);
  fimport$9(67920 | 0, 4 | 0, 67063 | 0);
  fimport$9(67960 | 0, 5 | 0, 67093 | 0);
  fimport$9(67680 | 0, 0 | 0, 66724 | 0);
  fimport$9(67720 | 0, 1 | 0, 66691 | 0);
  fimport$9(67760 | 0, 2 | 0, 66790 | 0);
  fimport$9(67800 | 0, 3 | 0, 66756 | 0);
  fimport$9(67840 | 0, 4 | 0, 66924 | 0);
  fimport$9(67880 | 0, 5 | 0, 66890 | 0);
  fimport$9(68e3 | 0, 8 | 0, 66857 | 0);
  fimport$9(68040 | 0, 9 | 0, 66823 | 0);
  fimport$9(68080 | 0, 6 | 0, 66660 | 0);
  fimport$9(68120 | 0, 7 | 0, 67132 | 0);
 }
 
 function $4() {
  HEAP32[(0 + 95956 | 0) >> 2] = 1;
  HEAP32[(0 + 95960 | 0) >> 2] = 0;
  $3();
  HEAP32[(0 + 95960 | 0) >> 2] = HEAP32[(0 + 95952 | 0) >> 2] | 0;
  HEAP32[(0 + 95952 | 0) >> 2] = 95956;
 }
 
 function $5($0_1, $1_1, $2_1, $3_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  $3_1 = +$3_1;
  var $6_1 = 0, $18_1 = 0.0, $63_1 = 0.0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAPF64[($6_1 + 40 | 0) >> 3] = $0_1;
  HEAPF64[($6_1 + 32 | 0) >> 3] = $1_1;
  HEAPF64[($6_1 + 24 | 0) >> 3] = $2_1;
  HEAPF64[($6_1 + 16 | 0) >> 3] = $3_1;
  HEAPF64[($6_1 + 8 | 0) >> 3] = +$955(+(+HEAPF64[($6_1 + 40 | 0) >> 3]), +(+HEAPF64[($6_1 + 16 | 0) >> 3]));
  $18_1 = +HEAPF64[($6_1 + 8 | 0) >> 3] * (+HEAPF64[($6_1 + 24 | 0) >> 3] - +HEAPF64[($6_1 + 32 | 0) >> 3]) + +HEAPF64[($6_1 + 32 | 0) >> 3];
  global$0 = $6_1 + 48 | 0;
  return +$18_1;
 }
 
 function $6($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $24_1 = 0, $51_1 = 0, $52_1 = 0, $60_1 = 0, $67_1 = 0, $76_1 = 0, $82_1 = 0, $87_1 = 0, $100_1 = 0, $108_1 = 0, $115_1 = 0, $124_1 = 0, $132_1 = 0, $139_1 = 0, $156_1 = 0, $164_1 = 0, $171_1 = 0, $180_1 = 0, $188_1 = 0, $195_1 = 0, $13_1 = 0, $18_1 = 0, $23_1 = 0, $28_1 = 0, $33_1 = 0, $38_1 = 0, $43_1 = 0, $569_1 = 0, $585_1 = 0, $589_1 = 0, $619_1 = 0, $632_1 = 0, $636_1 = 0, $687_1 = 0, $703_1 = 0, $707_1 = 0, $743_1 = 0, $759_1 = 0, $763_1 = 0, $817_1 = 0, $833_1 = 0, $837_1 = 0, $873_1 = 0, $889_1 = 0, $893_1 = 0, $261_1 = 0, $268_1 = 0, $275_1 = 0, $282_1 = 0, $421_1 = Math_fround(0);
  $11_1 = global$0 - 8512 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 8508 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 8504 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 8500 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 8496 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 8492 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 8488 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 8484 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 8480 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 8476 | 0) >> 2] = $8_1;
  i64toi32_i32$0 = 1088909312;
  i64toi32_i32$1 = $11_1;
  HEAP32[($11_1 + 8440 | 0) >> 2] = 0;
  HEAP32[($11_1 + 8444 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($11_1 + 8436 | 0) >> 2] = HEAP32[($11_1 + 8504 | 0) >> 2] | 0;
  $13_1 = HEAP32[($11_1 + 8500 | 0) >> 2] | 0;
  $14_1 = 0;
  HEAP32[($7($11_1 + 8448 | 0 | 0, $14_1 | 0) | 0) >> 2] = $13_1;
  $18_1 = HEAP32[($11_1 + 8496 | 0) >> 2] | 0;
  HEAP32[($7($11_1 + 8448 | 0 | 0, 1 | 0) | 0) >> 2] = $18_1;
  $23_1 = HEAP32[($11_1 + 8492 | 0) >> 2] | 0;
  $24_1 = 2;
  HEAP32[($7($11_1 + 8448 | 0 | 0, $24_1 | 0) | 0) >> 2] = $23_1;
  $28_1 = HEAP32[($11_1 + 8488 | 0) >> 2] | 0;
  HEAP32[($7($11_1 + 8448 | 0 | 0, 3 | 0) | 0) >> 2] = $28_1;
  $33_1 = HEAP32[($11_1 + 8484 | 0) >> 2] | 0;
  HEAP32[($7($11_1 + 8448 | 0 | 0, 4 | 0) | 0) >> 2] = $33_1;
  $38_1 = HEAP32[($11_1 + 8480 | 0) >> 2] | 0;
  HEAP32[($7($11_1 + 8448 | 0 | 0, 5 | 0) | 0) >> 2] = $38_1;
  $43_1 = HEAP32[($11_1 + 8476 | 0) >> 2] | 0;
  HEAP32[($7($11_1 + 8448 | 0 | 0, 6 | 0) | 0) >> 2] = $43_1;
  HEAP32[($11_1 + 8432 | 0) >> 2] = (HEAP32[($11_1 + 8436 | 0) >> 2] | 0) + -1 | 0;
  HEAP8[($11_1 + 8431 | 0) >> 0] = $14_1;
  $8($0_1 | 0) | 0;
  $51_1 = HEAP32[($11_1 + 8432 | 0) >> 2] | 0;
  block3 : {
   block2 : {
    switch ($51_1 | 0) {
    case 0:
     $52_1 = 24;
     HEAP32[(($11_1 + 5736 | 0) + $52_1 | 0) >> 2] = HEAP32[(($11_1 + 8448 | 0) + $52_1 | 0) >> 2] | 0;
     $60_1 = 16;
     i64toi32_i32$2 = ($11_1 + 8448 | 0) + $60_1 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $569_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($11_1 + 5736 | 0) + $60_1 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $569_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $67_1 = 8;
     i64toi32_i32$2 = ($11_1 + 8448 | 0) + $67_1 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $585_1 = i64toi32_i32$1;
     i64toi32_i32$1 = ($11_1 + 5736 | 0) + $67_1 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $585_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = HEAP32[($11_1 + 8448 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($11_1 + 8452 | 0) >> 2] | 0;
     $589_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $11_1;
     HEAP32[($11_1 + 5736 | 0) >> 2] = $589_1;
     HEAP32[($11_1 + 5740 | 0) >> 2] = i64toi32_i32$1;
     $76_1 = 24;
     HEAP32[($11_1 + $76_1 | 0) >> 2] = HEAP32[(($11_1 + 5736 | 0) + $76_1 | 0) >> 2] | 0;
     $82_1 = 16;
     i64toi32_i32$2 = ($11_1 + 5736 | 0) + $82_1 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $619_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $11_1 + $82_1 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $619_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $87_1 = 8;
     i64toi32_i32$2 = ($11_1 + 5736 | 0) + $87_1 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $632_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $11_1 + $87_1 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $632_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$1 = HEAP32[($11_1 + 5736 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($11_1 + 5740 | 0) >> 2] | 0;
     $636_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $11_1;
     HEAP32[$11_1 >> 2] = $636_1;
     HEAP32[($11_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $9($11_1 + 5768 | 0 | 0, +(48.0e3), $11_1 | 0) | 0;
     $10($11_1 + 5768 | 0 | 0, $0_1 | 0);
     $11($11_1 + 5768 | 0 | 0) | 0;
     break block3;
    case 1:
     $100_1 = 24;
     HEAP32[(($11_1 + 3040 | 0) + $100_1 | 0) >> 2] = HEAP32[(($11_1 + 8448 | 0) + $100_1 | 0) >> 2] | 0;
     $108_1 = 16;
     i64toi32_i32$2 = ($11_1 + 8448 | 0) + $108_1 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $687_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($11_1 + 3040 | 0) + $108_1 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $687_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $115_1 = 8;
     i64toi32_i32$2 = ($11_1 + 8448 | 0) + $115_1 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $703_1 = i64toi32_i32$1;
     i64toi32_i32$1 = ($11_1 + 3040 | 0) + $115_1 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $703_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = HEAP32[($11_1 + 8448 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($11_1 + 8452 | 0) >> 2] | 0;
     $707_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $11_1;
     HEAP32[($11_1 + 3040 | 0) >> 2] = $707_1;
     HEAP32[($11_1 + 3044 | 0) >> 2] = i64toi32_i32$1;
     $124_1 = 24;
     HEAP32[(($11_1 + 32 | 0) + $124_1 | 0) >> 2] = HEAP32[(($11_1 + 3040 | 0) + $124_1 | 0) >> 2] | 0;
     $132_1 = 16;
     i64toi32_i32$2 = ($11_1 + 3040 | 0) + $132_1 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $743_1 = i64toi32_i32$1;
     i64toi32_i32$1 = ($11_1 + 32 | 0) + $132_1 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $743_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $139_1 = 8;
     i64toi32_i32$2 = ($11_1 + 3040 | 0) + $139_1 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $759_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($11_1 + 32 | 0) + $139_1 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $759_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$1 = HEAP32[($11_1 + 3040 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($11_1 + 3044 | 0) >> 2] | 0;
     $763_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $11_1;
     HEAP32[($11_1 + 32 | 0) >> 2] = $763_1;
     HEAP32[($11_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     $12($11_1 + 3072 | 0 | 0, +(48.0e3), $11_1 + 32 | 0 | 0) | 0;
     $13($11_1 + 3072 | 0 | 0, $0_1 | 0);
     $14($11_1 + 3072 | 0 | 0) | 0;
     break block3;
    case 2:
     break block2;
    default:
     break block3;
    };
   }
   $156_1 = 24;
   HEAP32[(($11_1 + 280 | 0) + $156_1 | 0) >> 2] = HEAP32[(($11_1 + 8448 | 0) + $156_1 | 0) >> 2] | 0;
   $164_1 = 16;
   i64toi32_i32$2 = ($11_1 + 8448 | 0) + $164_1 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $817_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($11_1 + 280 | 0) + $164_1 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $817_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $171_1 = 8;
   i64toi32_i32$2 = ($11_1 + 8448 | 0) + $171_1 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $833_1 = i64toi32_i32$1;
   i64toi32_i32$1 = ($11_1 + 280 | 0) + $171_1 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $833_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$0 = HEAP32[($11_1 + 8448 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($11_1 + 8452 | 0) >> 2] | 0;
   $837_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $11_1;
   HEAP32[($11_1 + 280 | 0) >> 2] = $837_1;
   HEAP32[($11_1 + 284 | 0) >> 2] = i64toi32_i32$1;
   $180_1 = 24;
   HEAP32[(($11_1 + 64 | 0) + $180_1 | 0) >> 2] = HEAP32[(($11_1 + 280 | 0) + $180_1 | 0) >> 2] | 0;
   $188_1 = 16;
   i64toi32_i32$2 = ($11_1 + 280 | 0) + $188_1 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $873_1 = i64toi32_i32$1;
   i64toi32_i32$1 = ($11_1 + 64 | 0) + $188_1 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $873_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $195_1 = 8;
   i64toi32_i32$2 = ($11_1 + 280 | 0) + $195_1 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $889_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($11_1 + 64 | 0) + $195_1 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $889_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$1 = HEAP32[($11_1 + 280 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($11_1 + 284 | 0) >> 2] | 0;
   $893_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $11_1;
   HEAP32[($11_1 + 64 | 0) >> 2] = $893_1;
   HEAP32[($11_1 + 68 | 0) >> 2] = i64toi32_i32$0;
   $15($11_1 + 312 | 0 | 0, +(48.0e3), $11_1 + 64 | 0 | 0) | 0;
   $16($11_1 + 312 | 0 | 0, $0_1 | 0);
   $17($11_1 + 312 | 0 | 0) | 0;
  }
  $18($11_1 + 268 | 0 | 0) | 0;
  $19($11_1 + 268 | 0 | 0, HEAP32[($11_1 + 8480 | 0) >> 2] | 0 | 0);
  HEAP32[($11_1 + 264 | 0) >> 2] = 0;
  block4 : {
   label : while (1) {
    if (!((HEAP32[($11_1 + 264 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 8480 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block4
    }
    HEAP32[($11_1 + 260 | 0) >> 2] = 512;
    $20($11_1 + 268 | 0 | 0, $11_1 + 8440 | 0 | 0, $11_1 + 260 | 0 | 0) | 0;
    HEAP32[($11_1 + 264 | 0) >> 2] = (HEAP32[($11_1 + 264 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  HEAPF32[($11_1 + 256 | 0) >> 2] = Math_fround(Math_fround(HEAP32[($11_1 + 8476 | 0) >> 2] | 0 | 0) / Math_fround(100.0));
  HEAP32[($11_1 + 252 | 0) >> 2] = $11_1 + 268 | 0;
  HEAP32[($11_1 + 248 | 0) >> 2] = $21(HEAP32[($11_1 + 252 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($11_1 + 244 | 0) >> 2] = $22(HEAP32[($11_1 + 252 | 0) >> 2] | 0 | 0) | 0;
  block5 : {
   label1 : while (1) {
    if (!((($23($11_1 + 248 | 0 | 0, $11_1 + 244 | 0 | 0) | 0) ^ -1 | 0) & 1 | 0)) {
     break block5
    }
    HEAP32[($11_1 + 240 | 0) >> 2] = $24($11_1 + 248 | 0 | 0) | 0;
    $261_1 = HEAP32[($11_1 + 240 | 0) >> 2] | 0;
    HEAPF32[($11_1 + 224 | 0) >> 2] = Math_fround(Math_fround(47.79999923706055) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 228 | 0) >> 2] = Math_fround(Math_fround(282.0) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 232 | 0) >> 2] = Math_fround(-40.79999923706055);
    HEAPF32[($11_1 + 236 | 0) >> 2] = Math_fround(4.170000076293945);
    HEAPF32[($11_1 + 208 | 0) >> 2] = Math_fround(Math_fround(47.79999923706055) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 212 | 0) >> 2] = Math_fround(Math_fround(282.0) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 216 | 0) >> 2] = Math_fround(-33.79999923706055);
    HEAPF32[($11_1 + 220 | 0) >> 2] = Math_fround(66.69999694824219);
    $25($261_1 | 0, $11_1 + 224 | 0 | 0, $11_1 + 208 | 0 | 0);
    $268_1 = HEAP32[($11_1 + 240 | 0) >> 2] | 0;
    HEAPF32[($11_1 + 192 | 0) >> 2] = Math_fround(Math_fround(22.399999618530273) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 196 | 0) >> 2] = Math_fround(Math_fround(282.0) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 200 | 0) >> 2] = Math_fround(-41.79999923706055);
    HEAPF32[($11_1 + 204 | 0) >> 2] = Math_fround(4.170000076293945);
    HEAPF32[($11_1 + 176 | 0) >> 2] = Math_fround(Math_fround(22.399999618530273) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 180 | 0) >> 2] = Math_fround(Math_fround(282.0) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 184 | 0) >> 2] = Math_fround(-30.200000762939453);
    HEAPF32[($11_1 + 188 | 0) >> 2] = Math_fround(66.69999694824219);
    $26($268_1 | 0, $11_1 + 192 | 0 | 0, $11_1 + 176 | 0 | 0);
    $275_1 = HEAP32[($11_1 + 240 | 0) >> 2] | 0;
    HEAPF32[($11_1 + 160 | 0) >> 2] = Math_fround(Math_fround(13.5) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 164 | 0) >> 2] = Math_fround(Math_fround(132.0) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 168 | 0) >> 2] = Math_fround(-40.79999923706055);
    HEAPF32[($11_1 + 172 | 0) >> 2] = Math_fround(4.170000076293945);
    HEAPF32[($11_1 + 144 | 0) >> 2] = Math_fround(Math_fround(13.5) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 148 | 0) >> 2] = Math_fround(Math_fround(132.0) * Math_fround(HEAPF32[($11_1 + 256 | 0) >> 2]));
    HEAPF32[($11_1 + 152 | 0) >> 2] = Math_fround(-35.5);
    HEAPF32[($11_1 + 156 | 0) >> 2] = Math_fround(100.0);
    $27($275_1 | 0, $11_1 + 160 | 0 | 0, $11_1 + 144 | 0 | 0);
    $282_1 = HEAP32[($11_1 + 240 | 0) >> 2] | 0;
    HEAPF32[($11_1 + 120 | 0) >> 2] = Math_fround(5.199999809265137);
    HEAPF32[($11_1 + 124 | 0) >> 2] = Math_fround(5.199999809265137);
    HEAPF32[($11_1 + 128 | 0) >> 2] = Math_fround(5.199999809265137);
    HEAPF32[($11_1 + 132 | 0) >> 2] = Math_fround(10.300000190734863);
    HEAPF32[($11_1 + 136 | 0) >> 2] = Math_fround(5.699999809265137);
    HEAPF32[($11_1 + 140 | 0) >> 2] = Math_fround(10.300000190734863);
    $28($282_1 | 0, $11_1 + 120 | 0 | 0);
    $29($11_1 + 248 | 0 | 0) | 0;
    continue label1;
   };
  }
  HEAP32[($11_1 + 116 | 0) >> 2] = 0;
  block6 : {
   label3 : while (1) {
    if (!((HEAP32[($11_1 + 116 | 0) >> 2] | 0) >>> 0 < ($30($0_1 | 0) | 0) >>> 0 & 1 | 0)) {
     break block6
    }
    HEAPF32[($11_1 + 112 | 0) >> 2] = Math_fround(HEAPF32[($31($0_1 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAP32[($11_1 + 108 | 0) >> 2] = $11_1 + 268 | 0;
    HEAP32[($11_1 + 104 | 0) >> 2] = $21(HEAP32[($11_1 + 108 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($11_1 + 100 | 0) >> 2] = $22(HEAP32[($11_1 + 108 | 0) >> 2] | 0 | 0) | 0;
    block7 : {
     label2 : while (1) {
      if (!((($23($11_1 + 104 | 0 | 0, $11_1 + 100 | 0 | 0) | 0) ^ -1 | 0) & 1 | 0)) {
       break block7
      }
      HEAP32[($11_1 + 96 | 0) >> 2] = $24($11_1 + 104 | 0 | 0) | 0;
      HEAPF32[($11_1 + 112 | 0) >> 2] = Math_fround($32(HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($11_1 + 112 | 0) >> 2]))));
      $29($11_1 + 104 | 0 | 0) | 0;
      continue label2;
     };
    }
    $421_1 = Math_fround(HEAPF32[($11_1 + 112 | 0) >> 2]);
    HEAPF32[($31($0_1 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0) | 0) >> 2] = $421_1;
    HEAP32[($11_1 + 116 | 0) >> 2] = (HEAP32[($11_1 + 116 | 0) >> 2] | 0) + 1 | 0;
    continue label3;
   };
  }
  HEAP8[($11_1 + 8431 | 0) >> 0] = 1 & 1 | 0;
  $33($11_1 + 268 | 0 | 0) | 0;
  block8 : {
   if ((HEAPU8[($11_1 + 8431 | 0) >> 0] | 0) & 1 | 0) {
    break block8
   }
   $34($0_1 | 0) | 0;
  }
  global$0 = $11_1 + 8512 | 0;
  return;
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $29_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $53_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $35($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $9($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $18_1 = 0, $22_1 = 0, $207_1 = 0, $654_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 104 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 96 | 0) >> 3] = $1_1;
  $6_1 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
  HEAP32[($5_1 + 108 | 0) >> 2] = $6_1;
  $36($6_1 | 0) | 0;
  $37($6_1 + 4 | 0 | 0, $2599($6_1 | 0) | 0 | 0) | 0;
  $38($6_1 + 2504 | 0 | 0) | 0;
  $39($6_1 + 2508 | 0 | 0, 30 | 0, 60 | 0) | 0;
  $38($6_1 + 2516 | 0 | 0) | 0;
  $18_1 = 0;
  HEAP32[($6_1 + 2520 | 0) >> 2] = $18_1;
  HEAP32[($6_1 + 2524 | 0) >> 2] = $18_1;
  HEAP32[($6_1 + 2528 | 0) >> 2] = $18_1;
  HEAPF64[($6_1 + 2536 | 0) >> 3] = +HEAPF64[($5_1 + 96 | 0) >> 3];
  $40($6_1 + 2544 | 0 | 0) | 0;
  $22_1 = $6_1 + 2592 | 0;
  $41($22_1 | 0, 512 | 0) | 0;
  $42($22_1 | 0, +(+HEAPF64[($5_1 + 96 | 0) >> 3]));
  $43($22_1 | 0, +(+Math_fround(HEAPF32[($6_1 + 2524 | 0) >> 2])));
  HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($7($2_1 | 0, 0 | 0) | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($5_1 + 84 | 0) >> 2] = 500;
    HEAP32[($5_1 + 80 | 0) >> 2] = 800;
    HEAP32[($5_1 + 88 | 0) >> 2] = $44($5_1 + 84 | 0 | 0, $5_1 + 80 | 0 | 0) | 0;
    $45($6_1 + 2504 | 0 | 0, $5_1 + 88 | 0 | 0) | 0;
    $46($5_1 + 88 | 0 | 0) | 0;
    break block1;
   }
   block3 : {
    block2 : {
     if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block2
     }
     HEAP32[($5_1 + 72 | 0) >> 2] = 200;
     HEAP32[($5_1 + 68 | 0) >> 2] = 500;
     HEAP32[($5_1 + 76 | 0) >> 2] = $44($5_1 + 72 | 0 | 0, $5_1 + 68 | 0 | 0) | 0;
     $45($6_1 + 2504 | 0 | 0, $5_1 + 76 | 0 | 0) | 0;
     $46($5_1 + 76 | 0 | 0) | 0;
     break block3;
    }
    HEAP32[($5_1 + 60 | 0) >> 2] = 100;
    HEAP32[($5_1 + 56 | 0) >> 2] = 200;
    HEAP32[($5_1 + 64 | 0) >> 2] = $44($5_1 + 60 | 0 | 0, $5_1 + 56 | 0 | 0) | 0;
    $45($6_1 + 2504 | 0 | 0, $5_1 + 64 | 0 | 0) | 0;
    $46($5_1 + 64 | 0 | 0) | 0;
   }
  }
  HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($7($2_1 | 0, 1 | 0) | 0) >> 2] | 0;
  block5 : {
   block4 : {
    if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block4
    }
    HEAP32[($5_1 + 48 | 0) >> 2] = 6e3;
    HEAP32[($5_1 + 44 | 0) >> 2] = 8e3;
    HEAP32[($5_1 + 52 | 0) >> 2] = $44($5_1 + 48 | 0 | 0, $5_1 + 44 | 0 | 0) | 0;
    $45($6_1 + 2516 | 0 | 0, $5_1 + 52 | 0 | 0) | 0;
    $46($5_1 + 52 | 0 | 0) | 0;
    break block5;
   }
   block7 : {
    block6 : {
     if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block6
     }
     HEAP32[($5_1 + 36 | 0) >> 2] = 1e3;
     HEAP32[($5_1 + 32 | 0) >> 2] = 5e3;
     HEAP32[($5_1 + 40 | 0) >> 2] = $44($5_1 + 36 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
     $45($6_1 + 2516 | 0 | 0, $5_1 + 40 | 0 | 0) | 0;
     $46($5_1 + 40 | 0 | 0) | 0;
     break block7;
    }
    HEAP32[($5_1 + 24 | 0) >> 2] = 500;
    HEAP32[($5_1 + 20 | 0) >> 2] = 1e3;
    HEAP32[($5_1 + 28 | 0) >> 2] = $44($5_1 + 24 | 0 | 0, $5_1 + 20 | 0 | 0) | 0;
    $45($6_1 + 2516 | 0 | 0, $5_1 + 28 | 0 | 0) | 0;
    $46($5_1 + 28 | 0 | 0) | 0;
   }
  }
  $47($5_1 + 16 | 0 | 0) | 0;
  HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($7($2_1 | 0, 2 | 0) | 0) >> 2] | 0;
  block9 : {
   block8 : {
    if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block8
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $48() | 0;
    $49($5_1 + 16 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
    $50($5_1 + 12 | 0 | 0) | 0;
    break block9;
   }
   block11 : {
    block10 : {
     if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block10
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = $51() | 0;
     $52($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
     $53($5_1 + 8 | 0 | 0) | 0;
     break block11;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $54() | 0;
    $55($5_1 + 16 | 0 | 0, $5_1 + 4 | 0 | 0) | 0;
    $56($5_1 + 4 | 0 | 0) | 0;
   }
  }
  $58($6_1 + 2592 | 0 | 0, $57($5_1 + 16 | 0 | 0) | 0 | 0);
  $59($5_1 + 16 | 0 | 0) | 0;
  $207_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
  global$0 = $5_1 + 112 | 0;
  return $207_1 | 0;
 }
 
 function $10($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $72_1 = Math_fround(0), $98_1 = 0.0, $202_1 = 0, $44_1 = 0, $118_1 = 0, $127_1 = 0, $29_1 = 0, $80_1 = Math_fround(0), $81_1 = Math_fround(0);
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  i64toi32_i32$2 = $60($5_1 + 2516 | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $118_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 48 | 0) >> 2] = $118_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $60($5_1 + 2504 | 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $127_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $127_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  $13_1 = $5_1 + 4 | 0;
  HEAPF32[($5_1 + 2524 | 0) >> 2] = Math_fround(($61($4_1 + 48 | 0 | 0, $13_1 | 0) | 0) >>> 0);
  HEAPF32[($5_1 + 2528 | 0) >> 2] = Math_fround(($61($5_1 + 2508 | 0 | 0, $13_1 | 0) | 0) >>> 0);
  HEAPF32[($5_1 + 2520 | 0) >> 2] = Math_fround(Math_fround(($61($4_1 + 40 | 0 | 0, $13_1 | 0) | 0) >>> 0) / Math_fround(1.0e3));
  $72_1 = Math_fround(0.0);
  $62($4_1 + 24 | 0 | 0, Math_fround($72_1), Math_fround(Math_fround(HEAPF32[($5_1 + 2520 | 0) >> 2])), Math_fround($72_1), Math_fround($72_1)) | 0;
  $63($5_1 + 2544 | 0 | 0, $4_1 + 24 | 0 | 0);
  $29_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
  $98_1 = +HEAPF64[($5_1 + 2536 | 0) >> 3] * +Math_fround(HEAPF32[($5_1 + 2520 | 0) >> 2]);
  if ($98_1 < 4294967295.0 & $98_1 >= 0.0 | 0) {
   $202_1 = ~~$98_1 >>> 0
  } else {
   $202_1 = 0
  }
  $64($29_1 | 0, $202_1 | 0);
  $65($5_1 + 2544 | 0 | 0);
  HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($30(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break block
    }
    HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround($66($5_1 + 2544 | 0 | 0));
    HEAPF64[$4_1 >> 3] = +$5(+(+Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), +(+Math_fround(HEAPF32[($5_1 + 2528 | 0) >> 2])), +(+Math_fround(HEAPF32[($5_1 + 2524 | 0) >> 2])), +(6.0));
    $44_1 = $5_1 + 2592 | 0;
    $43($44_1 | 0, +(+HEAPF64[$4_1 >> 3]));
    $80_1 = Math_fround(+$67($44_1 | 0) * +Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]));
    HEAPF32[($31(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] = $80_1;
    $81_1 = Math_fround(HEAPF32[($31(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) + $81_1);
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  block1 : {
   if (Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0) {
    break block1
   }
   fimport$0(67183 | 0, 66079 | 0, 68 | 0, 66263 | 0);
   wasm2js_trap();
  }
  global$0 = $4_1 + 64 | 0;
  return;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $44_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $68($4_1 + 2592 | 0 | 0) | 0;
  $46($4_1 + 2516 | 0 | 0) | 0;
  $46($4_1 + 2504 | 0 | 0) | 0;
  $2598($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $12($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $24_1 = 0, $20_1 = 0, $271_1 = 0, $846_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 136 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 128 | 0) >> 3] = $1_1;
  $6_1 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
  HEAP32[($5_1 + 140 | 0) >> 2] = $6_1;
  $36($6_1 | 0) | 0;
  $37($6_1 + 4 | 0 | 0, $2599($6_1 | 0) | 0 | 0) | 0;
  $38($6_1 + 2504 | 0 | 0) | 0;
  $38($6_1 + 2508 | 0 | 0) | 0;
  $39($6_1 + 2512 | 0 | 0, 20 | 0, 60 | 0) | 0;
  $38($6_1 + 2520 | 0 | 0) | 0;
  $20_1 = 0;
  HEAP32[($6_1 + 2524 | 0) >> 2] = $20_1;
  HEAP32[($6_1 + 2528 | 0) >> 2] = $20_1;
  HEAPF64[($6_1 + 2536 | 0) >> 3] = +HEAPF64[($5_1 + 128 | 0) >> 3];
  $40($6_1 + 2544 | 0 | 0) | 0;
  $24_1 = $6_1 + 2592 | 0;
  $41($24_1 | 0, 512 | 0) | 0;
  $69($6_1 + 2656 | 0 | 0) | 0;
  $42($24_1 | 0, +(+HEAPF64[($5_1 + 128 | 0) >> 3]));
  $43($24_1 | 0, +(+Math_fround(HEAPF32[($6_1 + 2528 | 0) >> 2])));
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 0 | 0) | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($5_1 + 116 | 0) >> 2] = 95;
    HEAP32[($5_1 + 112 | 0) >> 2] = 135;
    HEAP32[($5_1 + 120 | 0) >> 2] = $44($5_1 + 116 | 0 | 0, $5_1 + 112 | 0 | 0) | 0;
    $45($6_1 + 2504 | 0 | 0, $5_1 + 120 | 0 | 0) | 0;
    $46($5_1 + 120 | 0 | 0) | 0;
    break block1;
   }
   block3 : {
    block2 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block2
     }
     HEAP32[($5_1 + 104 | 0) >> 2] = 65;
     HEAP32[($5_1 + 100 | 0) >> 2] = 95;
     HEAP32[($5_1 + 108 | 0) >> 2] = $44($5_1 + 104 | 0 | 0, $5_1 + 100 | 0 | 0) | 0;
     $45($6_1 + 2504 | 0 | 0, $5_1 + 108 | 0 | 0) | 0;
     $46($5_1 + 108 | 0 | 0) | 0;
     break block3;
    }
    HEAP32[($5_1 + 92 | 0) >> 2] = 30;
    HEAP32[($5_1 + 88 | 0) >> 2] = 65;
    HEAP32[($5_1 + 96 | 0) >> 2] = $44($5_1 + 92 | 0 | 0, $5_1 + 88 | 0 | 0) | 0;
    $45($6_1 + 2504 | 0 | 0, $5_1 + 96 | 0 | 0) | 0;
    $46($5_1 + 96 | 0 | 0) | 0;
   }
  }
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 1 | 0) | 0) >> 2] | 0;
  block5 : {
   block4 : {
    if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block4
    }
    HEAP32[($5_1 + 80 | 0) >> 2] = 500;
    HEAP32[($5_1 + 76 | 0) >> 2] = 800;
    HEAP32[($5_1 + 84 | 0) >> 2] = $44($5_1 + 80 | 0 | 0, $5_1 + 76 | 0 | 0) | 0;
    $45($6_1 + 2508 | 0 | 0, $5_1 + 84 | 0 | 0) | 0;
    $46($5_1 + 84 | 0 | 0) | 0;
    break block5;
   }
   block7 : {
    block6 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block6
     }
     HEAP32[($5_1 + 68 | 0) >> 2] = 200;
     HEAP32[($5_1 + 64 | 0) >> 2] = 500;
     HEAP32[($5_1 + 72 | 0) >> 2] = $44($5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0) | 0;
     $45($6_1 + 2508 | 0 | 0, $5_1 + 72 | 0 | 0) | 0;
     $46($5_1 + 72 | 0 | 0) | 0;
     break block7;
    }
    HEAP32[($5_1 + 56 | 0) >> 2] = 100;
    HEAP32[($5_1 + 52 | 0) >> 2] = 200;
    HEAP32[($5_1 + 60 | 0) >> 2] = $44($5_1 + 56 | 0 | 0, $5_1 + 52 | 0 | 0) | 0;
    $45($6_1 + 2508 | 0 | 0, $5_1 + 60 | 0 | 0) | 0;
    $46($5_1 + 60 | 0 | 0) | 0;
   }
  }
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 2 | 0) | 0) >> 2] | 0;
  block9 : {
   block8 : {
    if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block8
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = 6e3;
    HEAP32[($5_1 + 40 | 0) >> 2] = 8e3;
    HEAP32[($5_1 + 48 | 0) >> 2] = $44($5_1 + 44 | 0 | 0, $5_1 + 40 | 0 | 0) | 0;
    $45($6_1 + 2520 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
    $46($5_1 + 48 | 0 | 0) | 0;
    break block9;
   }
   block11 : {
    block10 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block10
     }
     HEAP32[($5_1 + 32 | 0) >> 2] = 1e3;
     HEAP32[($5_1 + 28 | 0) >> 2] = 5e3;
     HEAP32[($5_1 + 36 | 0) >> 2] = $44($5_1 + 32 | 0 | 0, $5_1 + 28 | 0 | 0) | 0;
     $45($6_1 + 2520 | 0 | 0, $5_1 + 36 | 0 | 0) | 0;
     $46($5_1 + 36 | 0 | 0) | 0;
     break block11;
    }
    HEAP32[($5_1 + 20 | 0) >> 2] = 500;
    HEAP32[($5_1 + 16 | 0) >> 2] = 1e3;
    HEAP32[($5_1 + 24 | 0) >> 2] = $44($5_1 + 20 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    $45($6_1 + 2520 | 0 | 0, $5_1 + 24 | 0 | 0) | 0;
    $46($5_1 + 24 | 0 | 0) | 0;
   }
  }
  $47($5_1 + 12 | 0 | 0) | 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 3 | 0) | 0) >> 2] | 0;
  block13 : {
   block12 : {
    if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block12
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $48() | 0;
    $49($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
    $50($5_1 + 8 | 0 | 0) | 0;
    break block13;
   }
   block15 : {
    block14 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block14
     }
     HEAP32[($5_1 + 4 | 0) >> 2] = $51() | 0;
     $52($5_1 + 12 | 0 | 0, $5_1 + 4 | 0 | 0) | 0;
     $53($5_1 + 4 | 0 | 0) | 0;
     break block15;
    }
    HEAP32[$5_1 >> 2] = $54() | 0;
    $55($5_1 + 12 | 0 | 0, $5_1 | 0) | 0;
    $56($5_1 | 0) | 0;
   }
  }
  $58($6_1 + 2592 | 0 | 0, $57($5_1 + 12 | 0 | 0) | 0 | 0);
  $59($5_1 + 12 | 0 | 0) | 0;
  $271_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
  global$0 = $5_1 + 144 | 0;
  return $271_1 | 0;
 }
 
 function $13($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $35_1 = 0, $37_1 = 0, $16_1 = 0, $105_1 = 0.0, $69_1 = Math_fround(0), $80_1 = Math_fround(0), $282_1 = 0, $56_1 = 0, $125_1 = 0, $134_1 = 0, $143_1 = 0, $42_1 = 0, $92_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
  i64toi32_i32$2 = $60($5_1 + 2520 | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $125_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 64 | 0) >> 2] = $125_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $60($5_1 + 2504 | 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $134_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $134_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $60($5_1 + 2508 | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 48 | 0) >> 2] = $143_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = i64toi32_i32$1;
  $16_1 = $5_1 + 4 | 0;
  $69_1 = Math_fround(1.0e3);
  HEAPF32[($4_1 + 44 | 0) >> 2] = Math_fround(Math_fround(($61($4_1 + 56 | 0 | 0, $16_1 | 0) | 0) >>> 0) / $69_1);
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(Math_fround(($61($4_1 + 48 | 0 | 0, $16_1 | 0) | 0) >>> 0) / $69_1);
  HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]));
  HEAPF32[($5_1 + 2524 | 0) >> 2] = Math_fround(($61($4_1 + 64 | 0 | 0, $16_1 | 0) | 0) >>> 0);
  HEAPF32[($5_1 + 2528 | 0) >> 2] = Math_fround(($61($5_1 + 2512 | 0 | 0, $16_1 | 0) | 0) >>> 0);
  $80_1 = Math_fround(0.0);
  $62($4_1 + 20 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2])), Math_fround($80_1), Math_fround($80_1)) | 0;
  $63($5_1 + 2544 | 0 | 0, $4_1 + 20 | 0 | 0);
  $35_1 = 103044;
  $37_1 = 2;
  $71($1123($35_1 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]))) | 0 | 0, $37_1 | 0) | 0;
  $71($1123($35_1 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]))) | 0 | 0, $37_1 | 0) | 0;
  $71($1123($35_1 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]))) | 0 | 0, $37_1 | 0) | 0;
  $71($1123($35_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 2524 | 0) >> 2]))) | 0 | 0, $37_1 | 0) | 0;
  $71($1123($35_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 2528 | 0) >> 2]))) | 0 | 0, $37_1 | 0) | 0;
  $42_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
  $105_1 = +HEAPF64[($5_1 + 2536 | 0) >> 3] * +Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
  if ($105_1 < 4294967295.0 & $105_1 >= 0.0 | 0) {
   $282_1 = ~~$105_1 >>> 0
  } else {
   $282_1 = 0
  }
  $64($42_1 | 0, $282_1 | 0);
  $65($5_1 + 2544 | 0 | 0);
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($30(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break block
    }
    HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround($66($5_1 + 2544 | 0 | 0));
    HEAPF64[$4_1 >> 3] = +$5(+(+Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), +(+Math_fround(HEAPF32[($5_1 + 2528 | 0) >> 2])), +(+Math_fround(HEAPF32[($5_1 + 2524 | 0) >> 2])), +(6.0));
    $56_1 = $5_1 + 2592 | 0;
    $43($56_1 | 0, +(+HEAPF64[$4_1 >> 3]));
    $92_1 = Math_fround(+$67($56_1 | 0) * +Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]));
    HEAPF32[($31(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] = $92_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  global$0 = $4_1 + 80 | 0;
  return;
 }
 
 function $14($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $51_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $68($4_1 + 2592 | 0 | 0) | 0;
  $46($4_1 + 2520 | 0 | 0) | 0;
  $46($4_1 + 2508 | 0 | 0) | 0;
  $46($4_1 + 2504 | 0 | 0) | 0;
  $2598($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $15($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $18_1 = 0, $30_1 = 0, $235_1 = 0, i64toi32_i32$0 = 0, $258_1 = 0, $871_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 136 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 128 | 0) >> 3] = $1_1;
  $6_1 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
  HEAP32[($5_1 + 140 | 0) >> 2] = $6_1;
  $36($6_1 | 0) | 0;
  $37($6_1 + 4 | 0 | 0, $2599($6_1 | 0) | 0 | 0) | 0;
  $38($6_1 + 2504 | 0 | 0) | 0;
  $39($6_1 + 2508 | 0 | 0, 10 | 0, 20 | 0) | 0;
  $38($6_1 + 2516 | 0 | 0) | 0;
  $18_1 = 0;
  HEAP32[($6_1 + 2520 | 0) >> 2] = $18_1;
  HEAP32[($6_1 + 2524 | 0) >> 2] = $18_1;
  HEAP32[($6_1 + 2528 | 0) >> 2] = $18_1;
  HEAPF64[($6_1 + 2536 | 0) >> 3] = +HEAPF64[($5_1 + 128 | 0) >> 3];
  HEAP32[($6_1 + 2544 | 0) >> 2] = $18_1;
  HEAP32[($6_1 + 2548 | 0) >> 2] = $18_1;
  i64toi32_i32$0 = 1058682594;
  HEAP32[($6_1 + 2552 | 0) >> 2] = -350469331;
  HEAP32[($6_1 + 2556 | 0) >> 2] = i64toi32_i32$0;
  $8($6_1 + 2560 | 0 | 0) | 0;
  $8($6_1 + 2572 | 0 | 0) | 0;
  $8($6_1 + 2584 | 0 | 0) | 0;
  $72($6_1 + 2596 | 0 | 0) | 0;
  $40($6_1 + 2608 | 0 | 0) | 0;
  $30_1 = $6_1 + 2656 | 0;
  $41($30_1 | 0, 512 | 0) | 0;
  $73($6_1 + 2720 | 0 | 0) | 0;
  $42($30_1 | 0, +(+HEAPF64[($5_1 + 128 | 0) >> 3]));
  $43($30_1 | 0, +(+Math_fround(HEAPF32[($6_1 + 2524 | 0) >> 2])));
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 0 | 0) | 0) >> 2] | 0;
  HEAP32[($6_1 + 2544 | 0) >> 2] = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 1 | 0) | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($5_1 + 116 | 0) >> 2] = 100;
    HEAP32[($5_1 + 112 | 0) >> 2] = 300;
    HEAP32[($5_1 + 120 | 0) >> 2] = $44($5_1 + 116 | 0 | 0, $5_1 + 112 | 0 | 0) | 0;
    $45($6_1 + 2504 | 0 | 0, $5_1 + 120 | 0 | 0) | 0;
    $46($5_1 + 120 | 0 | 0) | 0;
    break block1;
   }
   block3 : {
    block2 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block2
     }
     HEAP32[($5_1 + 104 | 0) >> 2] = 50;
     HEAP32[($5_1 + 100 | 0) >> 2] = 100;
     HEAP32[($5_1 + 108 | 0) >> 2] = $44($5_1 + 104 | 0 | 0, $5_1 + 100 | 0 | 0) | 0;
     $45($6_1 + 2504 | 0 | 0, $5_1 + 108 | 0 | 0) | 0;
     $46($5_1 + 108 | 0 | 0) | 0;
     break block3;
    }
    HEAP32[($5_1 + 92 | 0) >> 2] = 30;
    HEAP32[($5_1 + 88 | 0) >> 2] = 50;
    HEAP32[($5_1 + 96 | 0) >> 2] = $44($5_1 + 92 | 0 | 0, $5_1 + 88 | 0 | 0) | 0;
    $45($6_1 + 2504 | 0 | 0, $5_1 + 96 | 0 | 0) | 0;
    $46($5_1 + 96 | 0 | 0) | 0;
   }
  }
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 2 | 0) | 0) >> 2] | 0;
  block5 : {
   block4 : {
    if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block4
    }
    HEAP32[($5_1 + 80 | 0) >> 2] = 6e3;
    HEAP32[($5_1 + 76 | 0) >> 2] = 8e3;
    HEAP32[($5_1 + 84 | 0) >> 2] = $44($5_1 + 80 | 0 | 0, $5_1 + 76 | 0 | 0) | 0;
    $45($6_1 + 2516 | 0 | 0, $5_1 + 84 | 0 | 0) | 0;
    $46($5_1 + 84 | 0 | 0) | 0;
    break block5;
   }
   block7 : {
    block6 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block6
     }
     HEAP32[($5_1 + 68 | 0) >> 2] = 2e3;
     HEAP32[($5_1 + 64 | 0) >> 2] = 5e3;
     HEAP32[($5_1 + 72 | 0) >> 2] = $44($5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0) | 0;
     $45($6_1 + 2516 | 0 | 0, $5_1 + 72 | 0 | 0) | 0;
     $46($5_1 + 72 | 0 | 0) | 0;
     break block7;
    }
    HEAP32[($5_1 + 56 | 0) >> 2] = 500;
    HEAP32[($5_1 + 52 | 0) >> 2] = 2e3;
    HEAP32[($5_1 + 60 | 0) >> 2] = $44($5_1 + 56 | 0 | 0, $5_1 + 52 | 0 | 0) | 0;
    $45($6_1 + 2516 | 0 | 0, $5_1 + 60 | 0 | 0) | 0;
    $46($5_1 + 60 | 0 | 0) | 0;
   }
  }
  $47($5_1 + 48 | 0 | 0) | 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 3 | 0) | 0) >> 2] | 0;
  block9 : {
   block8 : {
    if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block8
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = $48() | 0;
    $49($5_1 + 48 | 0 | 0, $5_1 + 44 | 0 | 0) | 0;
    $50($5_1 + 44 | 0 | 0) | 0;
    break block9;
   }
   block11 : {
    block10 : {
     if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block10
     }
     HEAP32[($5_1 + 40 | 0) >> 2] = $51() | 0;
     $52($5_1 + 48 | 0 | 0, $5_1 + 40 | 0 | 0) | 0;
     $53($5_1 + 40 | 0 | 0) | 0;
     break block11;
    }
    HEAP32[($5_1 + 36 | 0) >> 2] = $54() | 0;
    $55($5_1 + 48 | 0 | 0, $5_1 + 36 | 0 | 0) | 0;
    $56($5_1 + 36 | 0 | 0) | 0;
   }
  }
  $58($6_1 + 2656 | 0 | 0, $57($5_1 + 48 | 0 | 0) | 0 | 0);
  $71($74(103044 | 0, 67191 | 0) | 0 | 0, 2 | 0) | 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = HEAP32[($7($2_1 | 0, 4 | 0) | 0) >> 2] | 0;
  HEAPF64[($5_1 + 24 | 0) >> 3] = +$75(+(+(HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) / 100.0), +(0.0), +(50.0));
  HEAP32[($5_1 + 16 | 0) >> 2] = 100;
  HEAP32[($5_1 + 12 | 0) >> 2] = -100;
  HEAP32[($5_1 + 20 | 0) >> 2] = $76($5_1 + 16 | 0 | 0, $5_1 + 12 | 0 | 0, $5_1 + 24 | 0 | 0) | 0;
  $235_1 = $6_1 + 2720 | 0;
  $77($235_1 | 0, $5_1 + 20 | 0 | 0) | 0;
  $78($5_1 + 20 | 0 | 0) | 0;
  $64($6_1 + 2572 | 0 | 0, HEAP32[($6_1 + 2544 | 0) >> 2] | 0 | 0);
  $64($6_1 + 2584 | 0 | 0, HEAP32[($6_1 + 2544 | 0) >> 2] | 0 | 0);
  $64($6_1 + 2560 | 0 | 0, HEAP32[($6_1 + 2544 | 0) >> 2] | 0 | 0);
  $79($6_1 + 2596 | 0 | 0, HEAP32[($6_1 + 2544 | 0) >> 2] | 0 | 0);
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround($81($80($235_1 | 0) | 0 | 0) | 0 | 0) / Math_fround(100.0));
  HEAPF64[($6_1 + 2552 | 0) >> 3] = +$75(+(+Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])), +(+(0 | 0)), +(.0001));
  $59($5_1 + 48 | 0 | 0) | 0;
  $258_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
  global$0 = $5_1 + 144 | 0;
  return $258_1 | 0;
 }
 
 function $16($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $191_1 = 0.0, $137_1 = Math_fround(0), $192_1 = 0.0, $120_1 = Math_fround(0), $150_1 = 0.0, $124_1 = Math_fround(0), $155_1 = 0.0, $42_1 = 0, $444_1 = 0, $94_1 = 0, $618_1 = 0, $212_1 = 0, $221_1 = 0, $123_1 = Math_fround(0), $127_1 = Math_fround(0), $129_1 = Math_fround(0), $130_1 = Math_fround(0), $166_1 = 0.0, $51_1 = 0, $143_1 = Math_fround(0), $95_1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 88 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
  i64toi32_i32$2 = $60($5_1 + 2516 | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $212_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 80 | 0) >> 2] = $212_1;
  HEAP32[($4_1 + 84 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $60($5_1 + 2504 | 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $221_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $221_1;
  HEAP32[($4_1 + 76 | 0) >> 2] = i64toi32_i32$0;
  $13_1 = $5_1 + 4 | 0;
  HEAPF32[($5_1 + 2524 | 0) >> 2] = Math_fround(($61($4_1 + 80 | 0 | 0, $13_1 | 0) | 0) >>> 0);
  HEAPF64[($4_1 + 64 | 0) >> 3] = +Math_fround(HEAPF32[($5_1 + 2524 | 0) >> 2]) * .5;
  HEAPF32[($5_1 + 2528 | 0) >> 2] = Math_fround(($61($5_1 + 2508 | 0 | 0, $13_1 | 0) | 0) >>> 0);
  HEAPF32[($5_1 + 2520 | 0) >> 2] = Math_fround(Math_fround(($61($4_1 + 72 | 0 | 0, $13_1 | 0) | 0) >>> 0) / Math_fround(1.0e3));
  HEAPF64[($4_1 + 56 | 0) >> 3] = +Math_fround(HEAPF32[($5_1 + 2520 | 0) >> 2]) * .25;
  HEAP32[($4_1 + 52 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 52 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 2544 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(Math_fround($81($80($5_1 + 2720 | 0 | 0) | 0 | 0) | 0 | 0) / Math_fround(100.0));
    $120_1 = Math_fround(HEAPF32[($5_1 + 2524 | 0) >> 2]);
    $150_1 = +$120_1;
    $123_1 = Math_fround($150_1 + +$75(+(+Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])), +(+Math_fround(-$120_1)), +$150_1));
    HEAPF32[($31($5_1 + 2572 | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $123_1;
    $124_1 = Math_fround(HEAPF32[($5_1 + 2528 | 0) >> 2]);
    $155_1 = +$124_1;
    $127_1 = Math_fround($155_1 + +$75(+(+Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])), +(+Math_fround(-$124_1)), +$155_1));
    HEAPF32[($31($5_1 + 2584 | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $127_1;
    $129_1 = Math_fround(+Math_fround(HEAPF32[($5_1 + 2520 | 0) >> 2]) + +HEAPF64[($5_1 + 2552 | 0) >> 3]);
    $42_1 = $5_1 + 2560 | 0;
    HEAPF32[($31($42_1 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $129_1;
    $130_1 = Math_fround(HEAPF32[($31($42_1 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($5_1 + 2548 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 2548 | 0) >> 2]) + $130_1);
    $166_1 = +$75(+(+Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])), +(+(0 | 0)), +(.0001));
    HEAPF64[($5_1 + 2552 | 0) >> 3] = +HEAPF64[($5_1 + 2552 | 0) >> 3] + $166_1;
    HEAP32[($4_1 + 52 | 0) >> 2] = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  $51_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
  $191_1 = +HEAPF64[($5_1 + 2536 | 0) >> 3] * +Math_fround(HEAPF32[($5_1 + 2548 | 0) >> 2]);
  if ($191_1 < 4294967295.0 & $191_1 >= 0.0 | 0) {
   $444_1 = ~~$191_1 >>> 0
  } else {
   $444_1 = 0
  }
  $64($51_1 | 0, $444_1 | 0);
  HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  block1 : {
   label2 : while (1) {
    if (!((HEAP32[($4_1 + 44 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 2544 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block1
    }
    HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($5_1 + 2536 | 0) >> 3] * +Math_fround(HEAPF32[($31($5_1 + 2560 | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    $137_1 = Math_fround(0 | 0);
    $62($4_1 + 16 | 0 | 0, Math_fround($137_1), Math_fround(Math_fround(HEAPF32[($31($5_1 + 2560 | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2])), Math_fround($137_1), Math_fround($137_1)) | 0;
    $63($5_1 + 2608 | 0 | 0, $4_1 + 16 | 0 | 0);
    $65($5_1 + 2608 | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    block2 : {
     label1 : while (1) {
      if (!(+((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) < +HEAPF64[($4_1 + 32 | 0) >> 3] & 1 | 0)) {
       break block2
      }
      HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($66($5_1 + 2608 | 0 | 0));
      HEAPF64[$4_1 >> 3] = +$5(+(+Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])), +(+Math_fround(HEAPF32[($31($5_1 + 2584 | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2])), +(+Math_fround(HEAPF32[($31($5_1 + 2572 | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2])), +(6.0));
      $94_1 = $5_1 + 2656 | 0;
      $43($94_1 | 0, +(+HEAPF64[$4_1 >> 3]));
      $143_1 = Math_fround(+$67($94_1 | 0) * +Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
      $95_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
      $192_1 = +((HEAP32[($4_1 + 44 | 0) >> 2] | 0) >>> 0) * +HEAPF64[($4_1 + 32 | 0) >> 3] + +((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0);
      if ($192_1 < 4294967295.0 & $192_1 >= 0.0 | 0) {
       $618_1 = ~~$192_1 >>> 0
      } else {
       $618_1 = 0
      }
      HEAPF32[($31($95_1 | 0, $618_1 | 0) | 0) >> 2] = $143_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label1;
     };
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label2;
   };
  }
  global$0 = $4_1 + 96 | 0;
  return;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $79_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $78($4_1 + 2720 | 0 | 0) | 0;
  $68($4_1 + 2656 | 0 | 0) | 0;
  $82($4_1 + 2596 | 0 | 0) | 0;
  $34($4_1 + 2584 | 0 | 0) | 0;
  $34($4_1 + 2572 | 0 | 0) | 0;
  $34($4_1 + 2560 | 0 | 0) | 0;
  $46($4_1 + 2516 | 0 | 0) | 0;
  $46($4_1 + 2504 | 0 | 0) | 0;
  $2598($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $53_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $83($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  block : {
   if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 > ($84($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break block
   }
   block1 : {
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 > ($85($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
     break block1
    }
    $86($5_1 | 0);
    wasm2js_trap();
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $87($5_1 | 0) | 0;
   $89($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $88($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   $90($5_1 | 0, $4_1 | 0);
   $91($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $20($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $25_1 = 0, $97_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 < (HEAP32[($92($6_1 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $93($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 60 | 0;
    break block1;
   }
   HEAP32[$5_1 >> 2] = $94($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  $25_1 = (HEAP32[$5_1 >> 2] | 0) + -60 | 0;
  global$0 = $5_1 + 16 | 0;
  return $25_1 | 0;
 }
 
 function $21($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $95($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $22($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $95($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $23($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($96(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == ($96(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $25($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $25_1 = 0, $26_1 = 0, $82_1 = 0, $86_1 = 0, $134_1 = 0, $138_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  $8_1 = 8;
  i64toi32_i32$2 = $7_1 + $8_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 16 | 0) + $8_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $86_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $98($97($6_1 + 12 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2])));
  $99($97($6_1 + 12 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2])));
  $100($97($6_1 + 12 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])));
  $101($97($6_1 + 12 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2])));
  $25_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  $26_1 = 8;
  i64toi32_i32$2 = $25_1 + $26_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $134_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $26_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $134_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $25_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $138_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[$5_1 >> 2] = $138_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $103($102($6_1 + 24 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[$5_1 >> 2])));
  $104($102($6_1 + 24 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
  $105($102($6_1 + 24 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  $106($102($6_1 + 24 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])));
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $26($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $25_1 = 0, $26_1 = 0, $82_1 = 0, $86_1 = 0, $134_1 = 0, $138_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  $8_1 = 8;
  i64toi32_i32$2 = $7_1 + $8_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 16 | 0) + $8_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $86_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $98($97($6_1 + 16 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2])));
  $99($97($6_1 + 16 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2])));
  $100($97($6_1 + 16 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])));
  $101($97($6_1 + 16 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2])));
  $25_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  $26_1 = 8;
  i64toi32_i32$2 = $25_1 + $26_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $134_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $26_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $134_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $25_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $138_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[$5_1 >> 2] = $138_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $103($102($6_1 + 28 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[$5_1 >> 2])));
  $104($102($6_1 + 28 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
  $105($102($6_1 + 28 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  $106($102($6_1 + 28 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])));
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $27($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $25_1 = 0, $26_1 = 0, $82_1 = 0, $86_1 = 0, $134_1 = 0, $138_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  $8_1 = 8;
  i64toi32_i32$2 = $7_1 + $8_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 16 | 0) + $8_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $86_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $98($97($6_1 + 20 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2])));
  $99($97($6_1 + 20 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2])));
  $100($97($6_1 + 20 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])));
  $101($97($6_1 + 20 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2])));
  $25_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  $26_1 = 8;
  i64toi32_i32$2 = $25_1 + $26_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $134_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $26_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $134_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $25_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $138_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[$5_1 >> 2] = $138_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $103($102($6_1 + 32 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[$5_1 >> 2])));
  $104($102($6_1 + 32 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
  $105($102($6_1 + 32 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  $106($102($6_1 + 32 | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])));
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $28($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $52_1 = 0, $62_1 = 0, $66_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $7_1 = 16;
  i64toi32_i32$2 = $6_1 + $7_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + $7_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $10_1 = 8;
  i64toi32_i32$2 = $6_1 + $10_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $62_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + $10_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $62_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $66_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[$4_1 >> 2] = $66_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAPF32[($5_1 + 36 | 0) >> 2] = Math_fround($107(Math_fround(Math_fround(HEAPF32[$4_1 >> 2]))));
  HEAPF32[($5_1 + 40 | 0) >> 2] = Math_fround($107(Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]))));
  HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround($107(Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround($107(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]))));
  HEAPF32[($5_1 + 52 | 0) >> 2] = Math_fround($107(Math_fround(Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]))));
  HEAPF32[($5_1 + 56 | 0) >> 2] = Math_fround($107(Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]))));
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 60 | 0;
  return $4_1 | 0;
 }
 
 function $30($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $31($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function $32($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0, $59_1 = Math_fround(0), $298_1 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
  HEAPF64[($4_1 + 24 | 0) >> 3] = +$109($108($5_1 | 0, 0 | 0) | 0 | 0, +(+Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])));
  HEAPF64[($4_1 + 16 | 0) >> 3] = +$109($108($5_1 | 0, 2 | 0) | 0 | 0, +(+$109($108($5_1 | 0, 1 | 0) | 0 | 0, +(+Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])))));
  HEAPF64[($4_1 + 8 | 0) >> 3] = +$109($108($5_1 | 0, 3 | 0) | 0 | 0, +(+Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])));
  HEAPF64[($4_1 + 24 | 0) >> 3] = +Math_fround($110($97($5_1 + 12 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 24 | 0) >> 3] * +Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2])))));
  HEAPF64[($4_1 + 24 | 0) >> 3] = +Math_fround(Math_fround($111($102($5_1 + 24 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 24 | 0) >> 3])))) * Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]));
  HEAPF64[($4_1 + 16 | 0) >> 3] = +Math_fround($110($97($5_1 + 16 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 16 | 0) >> 3] * +Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2])))));
  HEAPF64[($4_1 + 16 | 0) >> 3] = +Math_fround(Math_fround($111($102($5_1 + 28 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 16 | 0) >> 3])))) * Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]));
  HEAPF64[($4_1 + 8 | 0) >> 3] = +Math_fround($110($97($5_1 + 20 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 8 | 0) >> 3] * +Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2])))));
  HEAPF64[($4_1 + 8 | 0) >> 3] = +Math_fround(Math_fround($111($102($5_1 + 32 | 0 | 0) | 0 | 0, Math_fround(Math_fround(+HEAPF64[($4_1 + 8 | 0) >> 3])))) * Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]));
  $59_1 = Math_fround(+HEAPF64[($4_1 + 24 | 0) >> 3] - +HEAPF64[($4_1 + 16 | 0) >> 3] + +HEAPF64[($4_1 + 8 | 0) >> 3]);
  global$0 = $4_1 + 48 | 0;
  return Math_fround($59_1);
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $112($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $113($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $34($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $114($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $115($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $35($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $120($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $121($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $36($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $36_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $124($3_1 | 0, 66007 | 0) | 0;
  $2597($4_1 | 0, $3_1 | 0) | 0;
  $2610($3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $37($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $29_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $125($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $38($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $126($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $39($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $37_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $127($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $59_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  $128($4_1 + 4 | 0 | 0) | 0;
  HEAPF64[($4_1 + 24 | 0) >> 3] = 44100.0;
  HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 44 | 0) >> 2] = Math_fround(0 | 0);
  $129($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $73_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF64[$5_1 >> 3] = 3.141592653589793;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $130($5_1 + 12 | 0 | 0) | 0;
  HEAPF64[($5_1 + 24 | 0) >> 3] = 41.0e3;
  HEAPF64[($5_1 + 32 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 40 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 48 | 0) >> 3] = +(0 | 0);
  HEAP32[($5_1 + 56 | 0) >> 2] = 0;
  $131($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $42($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 3] = +HEAPF64[$4_1 >> 3];
  return;
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  block : {
   if (!(($132(+(+HEAPF64[$4_1 >> 3]), +(+HEAPF64[($5_1 + 48 | 0) >> 3]), +(.01)) | 0) & 1 | 0)) {
    break block
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[$4_1 >> 3];
   HEAPF64[($5_1 + 40 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3] * +((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0) / +HEAPF64[($5_1 + 24 | 0) >> 3];
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $44($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $14_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = $2583(8 | 0) | 0;
  $39($6_1 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $133($4_1 + 12 | 0 | 0, $6_1 | 0) | 0;
  $14_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $45($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $39_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $135($5_1 | 0, $134(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $136(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $137($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $46($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $135($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $47($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $138($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $48() {
  var $2_1 = 0, $4_1 = 0, $9_1 = 0, $37_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $2583(4 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $69($4_1 | 0) | 0;
  $139($2_1 + 12 | 0 | 0, $4_1 | 0) | 0;
  $9_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $49($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $50_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $141($5_1 | 0, $140(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $143($4_1 + 7 | 0 | 0, $142(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $144($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $145($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $51() {
  var $2_1 = 0, $4_1 = 0, $9_1 = 0, $37_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $2583(4 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $146($4_1 | 0) | 0;
  $147($2_1 + 12 | 0 | 0, $4_1 | 0) | 0;
  $9_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $52($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $50_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $141($5_1 | 0, $148(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $150($4_1 + 7 | 0 | 0, $149(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $144($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $151($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $54() {
  var $2_1 = 0, $4_1 = 0, $9_1 = 0, $37_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $2583(4 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $152($4_1 | 0) | 0;
  $153($2_1 + 12 | 0 | 0, $4_1 | 0) | 0;
  $9_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $50_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $141($5_1 | 0, $154(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $156($4_1 + 7 | 0 | 0, $155(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $144($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $157($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $57($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($159(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $58($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $13_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $158($4_1 + 16 | 0 | 0, (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  $13_1 = HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  FUNCTION_TABLE[$13_1 | 0]($6_1, $4_1 + 8 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $141($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $60($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($304(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $61($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $7_1 = $305($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $62($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0, $46_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAPF32[$8_1 >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
  return $8_1 | 0;
 }
 
 function $63($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = $5_1 + 4 | 0;
  i64toi32_i32$2 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $8_1;
  HEAP32[i64toi32_i32$0 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $9_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $9_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $45_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $8_1 + $9_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $45_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $129($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $30($5_1 | 0) | 0;
  block1 : {
   block : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $306($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0);
    break block1;
   }
   block2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block2
    }
    $307($5_1 | 0, (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $65($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!(Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[$4_1 >> 2] = 1;
    break block1;
   }
   block3 : {
    block2 : {
     if (!(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
      break block2
     }
     HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(1.0);
     HEAP32[$4_1 >> 2] = 2;
     break block3;
    }
    HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
    HEAP32[$4_1 >> 2] = 3;
   }
  }
  return;
 }
 
 function $66($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $40_1 = Math_fround(0), $145_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  block6 : {
   block5 : {
    block4 : {
     switch ($5_1 | 0) {
     case 0:
      HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
      break block6;
     case 1:
      HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]));
      block7 : {
       if (!(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) >= Math_fround(1.0) & 1 | 0)) {
        break block7
       }
       HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(1.0);
       $171($4_1 | 0);
      }
      break block5;
     case 2:
      HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]));
      block8 : {
       if (!(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) <= Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) & 1 | 0)) {
        break block8
       }
       HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
       $171($4_1 | 0);
      }
      break block5;
     case 3:
      HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
      break block5;
     case 4:
      break block4;
     default:
      break block5;
     };
    }
    HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]));
    block9 : {
     if (!(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) <= Math_fround(0 | 0) & 1 | 0)) {
      break block9
     }
     $171($4_1 | 0);
    }
   }
   HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
  }
  $40_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
  global$0 = $3_1 + 16 | 0;
  return Math_fround($40_1);
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $12_1 = 0.0, i64toi32_i32$1 = 0, $19_1 = 0.0, $75_1 = 0.0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $158($3_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $12_1 = +HEAPF64[($4_1 + 32 | 0) >> 3];
  i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAPF64[($3_1 + 16 | 0) >> 3] = +$308($3_1 | 0, +$12_1);
  HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($4_1 + 32 | 0) >> 3] + +HEAPF64[($4_1 + 40 | 0) >> 3];
  +$309(+(+HEAPF64[($4_1 + 32 | 0) >> 3]), +(+((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0)));
  $19_1 = +HEAPF64[($3_1 + 16 | 0) >> 3];
  global$0 = $3_1 + 32 | 0;
  return +$19_1;
 }
 
 function $68($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $28_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $385($4_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $69($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $31_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $266($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 68160 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $70($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $12_1 = 0, $16_1 = 0, $20_1 = 0, $73_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $12_1 = 24;
  $16_1 = 24;
  $1128(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, (($389($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, (10 << $12_1 | 0) >> $12_1 | 0 | 0) | 0) << $16_1 | 0) >> $16_1 | 0 | 0) | 0;
  $1087(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $20_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $20_1 | 0;
 }
 
 function $71($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0](HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $72($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $53_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $392($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $393($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $74($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $38_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $394(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $161(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $75($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $41_1 = 0.0;
  $5_1 = global$0 - 32 | 0;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $2_1;
  return +((+HEAPF64[($5_1 + 8 | 0) >> 3] - +HEAPF64[($5_1 + 16 | 0) >> 3]) * +HEAPF64[($5_1 + 24 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3]);
 }
 
 function $76($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $21_1 = 0.0, $53_1 = 0, $9_1 = 0, $11_1 = 0, $17_1 = 0, $74_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  $7_1 = $2583(2524 | 0) | 0;
  $9_1 = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  $11_1 = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  $21_1 = +HEAPF64[(HEAP32[$5_1 >> 2] | 0) >> 3];
  if (Math_abs($21_1) < 2147483647.0) {
   $53_1 = ~~$21_1
  } else {
   $53_1 = -2147483648
  }
  $395($7_1 | 0, $9_1 | 0, $11_1 | 0, $53_1 | 0) | 0;
  $396($5_1 + 12 | 0 | 0, $7_1 | 0) | 0;
  $17_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $17_1 | 0;
 }
 
 function $77($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $39_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $398($5_1 | 0, $397(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $399(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $400($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $398($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $79($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $401($5_1 | 0) | 0;
  block1 : {
   block : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $402($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0);
    break block1;
   }
   block2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block2
    }
    $403($5_1 | 0, (HEAP32[$5_1 >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 48) | 0 | 0);
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $80($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($404(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $81($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $31_1 = 0, $118_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[($4_1 + 2512 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 2516 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    if (!((HEAP32[($4_1 + 2512 | 0) >> 2] | 0 | 0) > (HEAP32[($4_1 + 2520 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 2512 | 0) >> 2] | 0) + ($61($4_1 + 2504 | 0 | 0, $4_1 + 4 | 0 | 0) | 0) | 0;
    HEAP32[($4_1 + 2512 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    break block1;
   }
   block2 : {
    if (!((HEAP32[($4_1 + 2512 | 0) >> 2] | 0 | 0) > (HEAP32[($4_1 + 2516 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 2516 | 0) >> 2] | 0;
    break block1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 2520 | 0) >> 2] | 0;
  }
  $31_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $82($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $502($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $503($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $83($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $505($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $506($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($509($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (60 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $511($510(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $220() | 0;
  $15_1 = HEAP32[($221($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $86($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $222(65799 | 0);
  wasm2js_trap();
 }
 
 function $87($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $512((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $88($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (60 | 0) | 0 | 0;
 }
 
 function $89($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0, $124_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $513($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  block1 : {
   block : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break block
    }
    HEAP32[$7_1 >> 2] = 0;
    break block1;
   }
   $515($6_1 | 0, $514($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, 60) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 60) | 0;
  HEAP32[($516($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $90($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $517($5_1 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(0 - (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) / (60 | 0) | 0) | 0, 60) | 0;
  $519($87($5_1 | 0) | 0 | 0, $518(HEAP32[$5_1 >> 2] | 0 | 0) | 0 | 0, $518(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $518(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  $520($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $520($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $520($92($5_1 | 0) | 0 | 0, $516(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $521($5_1 | 0, $88($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $91($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $522($4_1 | 0);
  block : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $524($514($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $523($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $92($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $542((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $93($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $625($5_1 + 8 | 0 | 0, $6_1 | 0, 1 | 0) | 0;
  $626($87($6_1 | 0) | 0 | 0, $518(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 60 | 0;
  $627($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $94($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $28_1 = 0, $112_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $87($6_1 | 0) | 0;
  $89($5_1 + 12 | 0 | 0, $628($6_1 | 0, ($88($6_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $88($6_1 | 0) | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  $626(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0, $518(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 60 | 0;
  $90($6_1 | 0, $5_1 + 12 | 0 | 0);
  $28_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $91($5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 48 | 0;
  return $28_1 | 0;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $37_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $761($4_1 + 12 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $97($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($762(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $98($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $763(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $99($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $764(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $100($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $765(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $101($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $766(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($767(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $103($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $763(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $104($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $764(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $765(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $106($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $766(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $107($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0), $24_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($770(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 120) | 0 | 0;
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $5_1 = 0, $49_1 = 0.0, $57_1 = 0.0, $58_1 = 0.0, $188_1 = 0.0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 92 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 80 | 0) >> 3] = $1_1;
  $5_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
  $706($4_1 + 24 | 0 | 0, $5_1 | 0, 5 | 0);
  HEAPF64[($4_1 + 16 | 0) >> 3] = +HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($773($5_1 + 104 | 0 | 0, 0 | 0) | 0) >> 3];
  HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 72 | 0) >> 3] + +HEAPF64[($4_1 + 64 | 0) >> 3] * +HEAPF64[($4_1 + 16 | 0) >> 3];
  $49_1 = +HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 32 | 0) >> 3] + +HEAPF64[($4_1 + 16 | 0) >> 3] * -+HEAPF64[($4_1 + 48 | 0) >> 3] + +HEAPF64[($773($5_1 + 104 | 0 | 0, 1 | 0) | 0) >> 3];
  HEAPF64[($773($5_1 + 104 | 0 | 0, 0 | 0) | 0) >> 3] = $49_1;
  $57_1 = +HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 40 | 0) >> 3] + +HEAPF64[($4_1 + 16 | 0) >> 3] * -+HEAPF64[($4_1 + 56 | 0) >> 3];
  HEAPF64[($773($5_1 + 104 | 0 | 0, 1 | 0) | 0) >> 3] = $57_1;
  $58_1 = +HEAPF64[($4_1 + 8 | 0) >> 3];
  global$0 = $4_1 + 96 | 0;
  return +$58_1;
 }
 
 function $110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $10_1 = Math_fround(0), $33_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $10_1 = Math_fround($732(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($10_1);
 }
 
 function $111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $10_1 = Math_fround(0), $33_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $10_1 = Math_fround($759(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($10_1);
 }
 
 function $112($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $113($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $774(HEAP32[$4_1 >> 2] | 0 | 0);
   $517(HEAP32[$4_1 >> 2] | 0 | 0);
   $524($87(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $84(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $114($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $115($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $776(HEAP32[$4_1 >> 2] | 0 | 0);
   $350(HEAP32[$4_1 >> 2] | 0 | 0);
   $356($327(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $343(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $116() {
  $117(95964 | 0) | 0;
  return;
 }
 
 function $117($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $119($4_1 | 0, 3 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $118() {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $777(65674 | 0);
  $778(66263 | 0, 4 | 0);
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $37_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0]();
  $2($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $121($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $122($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $123($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $160($5_1 | 0, $4_1 + 7 | 0 | 0, $4_1 + 6 | 0 | 0) | 0;
  $2613($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $161(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $125($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) & -1 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 1;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < 624 >>> 0 & 1 | 0)) {
     break block
    }
    $32_1 = Math_imul((HEAP32[($5_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0) ^ ($167(HEAP32[($5_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0) | 0, 1812433253);
    HEAP32[($5_1 + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = ($32_1 + (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) & -1 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  HEAP32[($5_1 + 2496 | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $126($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $31_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $168($6_1 | 0) | 0;
  $169($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $127($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $30_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $26_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$4_1 >> 2] = Math_fround(.10000000149011612);
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(.10000000149011612);
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(.10000000149011612);
  return $4_1 | 0;
 }
 
 function $129($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[($3_1 + 11 | 0) >> 0] = 0;
  HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($170($3_1 + 11 | 0 | 0, Math_fround(Math_fround(1.0)), Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2])), +(+HEAPF64[($4_1 + 24 | 0) >> 3])));
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($170($3_1 + 11 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])), +(+HEAPF64[($4_1 + 24 | 0) >> 3])));
  HEAPF32[($4_1 + 44 | 0) >> 2] = Math_fround($170($3_1 + 11 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2])), +(+HEAPF64[($4_1 + 24 | 0) >> 3])));
  block3 : {
   block1 : {
    block : {
     if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break block
     }
     if (Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]) <= Math_fround(0 | 0) & 1 | 0) {
      break block1
     }
    }
    block2 : {
     if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break block2
     }
     if (Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]) <= Math_fround(0 | 0) & 1 | 0) {
      break block1
     }
     if (Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) <= Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) & 1 | 0) {
      break block1
     }
    }
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
     break block3
    }
    if (!(Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]) <= Math_fround(0 | 0) & 1 | 0)) {
     break block3
    }
   }
   $171($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $130($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $53_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $173($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $131($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $174($5_1 | 0) | 0;
  block1 : {
   block : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $175($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0);
    break block1;
   }
   block2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block2
    }
    $176($5_1 | 0, (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $132($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $8_1 = 0, $49_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $2_1;
  $8_1 = +$257(+(+HEAPF64[($5_1 + 24 | 0) >> 3] - +HEAPF64[($5_1 + 16 | 0) >> 3])) > +HEAPF64[($5_1 + 8 | 0) >> 3] & 1 | 0;
  global$0 = $5_1 + 32 | 0;
  return $8_1 | 0;
 }
 
 function $133($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $258($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $134($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($260($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($260($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($260($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($260($5_1 | 0) | 0) >> 2] = $8_1;
  block : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $261($137($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $136($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $137(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $137($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $262(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $138($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $31_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $264($6_1 | 0) | 0;
  $265($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $267($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($275($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($275($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($273($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($273($5_1 | 0) | 0) >> 2] = $8_1;
  block : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $274($144($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $276(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $277(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($275($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($275($5_1 | 0) | 0) >> 2] = $8_1;
  block : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $281($276($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $146($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $31_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $266($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 68240 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $147($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $282($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $148($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($286($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($286($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $149($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $287(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $151($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($286($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($286($5_1 | 0) | 0) >> 2] = $8_1;
  block : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $290($287($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $152($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $31_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $266($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 68284 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $153($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $291($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $154($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($295($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($295($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $296(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $157($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($295($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($295($5_1 | 0) | 0) >> 2] = $8_1;
  block : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $299($296($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $44_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $300(68326 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $301(68327 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $159($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $303(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $160($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $31_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $162($6_1 | 0) | 0;
  $163($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $164(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $165($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $987(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $166($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $166($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $167($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 30 | 0 | 0;
 }
 
 function $168($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $170($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = +$3_1;
  var $6_1 = 0, $16_1 = Math_fround(0), $70_1 = Math_fround(0);
  $6_1 = global$0 - 32 | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF64[($6_1 + 8 | 0) >> 3] = $3_1;
  block1 : {
   block : {
    if (!(Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
     break block
    }
    $16_1 = Math_fround(+Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) / (+Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) * +HEAPF64[($6_1 + 8 | 0) >> 3]));
    break block1;
   }
   $16_1 = Math_fround(-1.0);
  }
  return Math_fround($16_1);
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[$4_1 >> 2] = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0 ? 2 : 3;
    break block1;
   }
   block2 : {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break block2
    }
    HEAP32[$4_1 >> 2] = 3;
    break block1;
   }
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
    break block1
   }
   $172($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[$4_1 >> 2] = 0;
  return;
 }
 
 function $173($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $177($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $178($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $174($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0 | 0;
 }
 
 function $175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((((HEAP32[($181($5_1 | 0) | 0) >> 2] | 0) - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) >> 3 | 0) >>> 0 >= (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $182($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    break block1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $183($5_1 | 0) | 0;
   $185($4_1 | 0, $184($5_1 | 0, ($174($5_1 | 0) | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $174($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   $186($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   $187($5_1 | 0, $4_1 | 0);
   $188($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $176($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $174($5_1 | 0) | 0;
  $189($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $190($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $179($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $180($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $180($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $181($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $191((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $182($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $192($4_1 + 12 | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $194($183($5_1 | 0) | 0 | 0, $193(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    $22_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $22_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $22_1;
    continue label;
   };
  }
  $195($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $183($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $196((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0, $115_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $197($5_1 | 0) | 0;
  block : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $198($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $199($5_1 | 0) | 0;
  block2 : {
   block1 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break block1
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break block2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($200($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $185($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0, $124_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $201($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  block1 : {
   block : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break block
    }
    HEAP32[$7_1 >> 2] = 0;
    break block1;
   }
   $203($6_1 | 0, $202($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($204($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $205($4_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $194($202($5_1 | 0) | 0 | 0, $193(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0;
    continue label;
   };
  }
  $206($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $207($5_1 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((0 - (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) - (HEAP32[$5_1 >> 2] | 0) | 0) >> 3 | 0) | 0) << 3 | 0) | 0;
  $208($183($5_1 | 0) | 0 | 0, $193(HEAP32[$5_1 >> 2] | 0 | 0) | 0 | 0, $193(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $193(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  $209($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $209($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $209($181($5_1 | 0) | 0 | 0, $204(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $210($5_1 | 0, $174($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $211($4_1 | 0);
  block : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $213($202($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $212($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $12_1 = $183($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -8 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $249($12_1 | 0, $193($15_1 | 0) | 0 | 0);
    continue label;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $214(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $192($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $53_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
  return $6_1 | 0;
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $194($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $215(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $196($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $217(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $219($218(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $220() | 0;
  $15_1 = HEAP32[($221($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $198($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $222(65799 | 0);
  wasm2js_trap();
 }
 
 function $199($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($223($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $200($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $224(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $201($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $44_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $177($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $235($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $237((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $203($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $236(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $204($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $238((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $205($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $53_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $206($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $207($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $208($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $15_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  $8_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  $15_1 = (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) - (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0) >> 3 | 0) << 3 | 0;
  block : {
   if (!$15_1) {
    break block
   }
   wasm2js_memory_copy($7_1, $8_1, $15_1);
  }
  return;
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $210($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $245($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $212($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($247($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $213($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $246(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $214($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $215($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $216(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF64[$5_1 >> 3] = +(0 | 0);
  return $5_1 | 0;
 }
 
 function $217($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $218($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $227((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $219($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = ($226() | 0) >>> 3 | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $220() {
  var $3_1 = 0;
  return $228() | 0 | 0;
 }
 
 function $221($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $225(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $222($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2651(8 | 0) | 0;
  $232($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  fimport$1($5_1 | 0, 95420 | 0, 5 | 0);
  wasm2js_trap();
 }
 
 function $223($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $233((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $57_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!(($229($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break block1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $57_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!(($229($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break block1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $226() {
  var $3_1 = 0;
  return $230() | 0 | 0;
 }
 
 function $227($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $231(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $228() {
  var $2_1 = 0;
  return 2147483647 | 0;
 }
 
 function $229($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $38_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function $230() {
  var $2_1 = 0;
  return -1 | 0;
 }
 
 function $231($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $232($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $38_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $2603($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 95400 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $233($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $234(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $234($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $235($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  block : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($219(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $239();
   wasm2js_trap();
  }
  $15_1 = $240((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $237($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $244((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $214(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $239() {
  var $1_1 = 0;
  $1_1 = $2651(4 | 0) | 0;
  $2696($1_1 | 0) | 0;
  fimport$1($1_1 | 0, 95312 | 0, 6 | 0);
  wasm2js_trap();
 }
 
 function $240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $62_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!(($241(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $242(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
    break block1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $243(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $241($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 > 8 >>> 0 & 1 | 0 | 0;
 }
 
 function $242($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $2589(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2583(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $244($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $245($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $248(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $246($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $251(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $247($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $256((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $11_1 = $202($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -8 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $249($11_1 | 0, $193($14_1 | 0) | 0 | 0);
    continue label;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $250(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $250($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $251($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  block1 : {
   block : {
    if (!(($241(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $252(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
    break block1;
   }
   $253(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $252($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $254(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $255(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $254($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $2594(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $2587(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $234(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $257($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0, $17_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
  return +Math_abs(+HEAPF64[($3_1 + 8 | 0) >> 3]);
 }
 
 function $258($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $259($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $169($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $259($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $260($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $263(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $261($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break block
   }
   $2587($5_1 | 0, 8 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $264($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $265($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $266($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 68228 + 8 | 0;
  return $4_1 | 0;
 }
 
 function $267($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $271($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $272($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $268($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $28_1 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $269($1_1 | 0) | 0;
  HEAPF64[($4_1 + 16 | 0) >> 3] = 3.141592653589793;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    HEAPF64[$4_1 >> 3] = +((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) / +((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0);
    $28_1 = +$982(+(6.283185307179586 * +HEAPF64[$4_1 >> 3]));
    HEAPF64[($270($1_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 3] = $28_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $269($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0;
 }
 
 function $271($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $272($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $273($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $278(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break block
   }
   $2587($5_1 | 0, 4 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $275($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $279(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $276($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $280(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $277($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $278($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $279($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $280($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $281($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break block
   }
   $2587($5_1 | 0, 4 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $282($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $284($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $285($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $31_1 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $269($1_1 | 0) | 0;
  HEAPF64[($4_1 + 16 | 0) >> 3] = 3.141592653589793;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    HEAPF64[$4_1 >> 3] = +((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) / +((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0);
    $31_1 = .6366197723675814 * +$939(+(+$982(+(6.283185307179586 * +HEAPF64[$4_1 >> 3]))));
    HEAPF64[($270($1_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 3] = $31_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $285($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $286($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $288(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $287($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $289(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $288($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $289($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $290($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break block
   }
   $2587($5_1 | 0, 4 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $291($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $293($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $294($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $30_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $269($1_1 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $30_1 = +((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0) < +((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0) * .5 & 1 | 0 ? -1.0 : 1.0;
    HEAPF64[($270($1_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 3] = $30_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $293($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $294($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $295($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $297(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $296($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $298(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $297($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $298($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break block
   }
   $2587($5_1 | 0, 4 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $27_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $302(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $301($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $27_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $174(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $302($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $193(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $304($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $310(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $305($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $65_1 = 0, $218_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 92 | 0) >> 2] = (($311(HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) | 0) - ($312(HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) | 0) | 0) + 1 | 0;
  block1 : {
   block : {
    if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($5_1 + 108 | 0) >> 2] = $312(HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) | 0;
    break block1;
   }
   HEAP32[($5_1 + 88 | 0) >> 2] = 32;
   block2 : {
    if (HEAP32[($5_1 + 92 | 0) >> 2] | 0) {
     break block2
    }
    $313($5_1 + 52 | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, 32 | 0) | 0;
    HEAP32[($5_1 + 108 | 0) >> 2] = $314($5_1 + 52 | 0 | 0) | 0;
    break block1;
   }
   HEAP32[($5_1 + 48 | 0) >> 2] = (32 - ($315(HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) | 0) | 0) - 1 | 0;
   block3 : {
    if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0) & (($316() | 0) >>> (32 - (HEAP32[($5_1 + 48 | 0) >> 2] | 0) | 0) | 0) | 0)) {
     break block3
    }
    HEAP32[($5_1 + 48 | 0) >> 2] = (HEAP32[($5_1 + 48 | 0) >> 2] | 0) + 1 | 0;
   }
   $313($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) | 0;
   label : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $314($5_1 + 12 | 0 | 0) | 0;
    if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($5_1 + 92 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
     continue label
    }
    break label;
   };
   HEAP32[($5_1 + 108 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ($312(HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) | 0) | 0;
  }
  $65_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
  global$0 = $5_1 + 112 | 0;
  return $65_1 | 0;
 }
 
 function $306($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((((HEAP32[($325($5_1 | 0) | 0) >> 2] | 0) - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 >= (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $326($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    break block1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $327($5_1 | 0) | 0;
   $329($4_1 | 0, $328($5_1 | 0, ($30($5_1 | 0) | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $30($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   $330($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   $331($5_1 | 0, $4_1 | 0);
   $332($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $30($5_1 | 0) | 0;
  $333($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $334($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $43_1 = 0.0, $65_1 = 0, $42_1 = 0.0, $150_1 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 24 | 0) >> 3] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $269($0_1 | 0) | 0;
  $43_1 = Math_trunc(+HEAPF64[($4_1 + 24 | 0) >> 3]);
  if (Math_abs($43_1) < 2147483647.0) {
   $65_1 = ~~$43_1
  } else {
   $65_1 = -2147483648
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = $65_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 24 | 0) >> 3] - Math_floor(+HEAPF64[($4_1 + 24 | 0) >> 3]);
  $42_1 = +$381(+(+HEAPF64[($4_1 + 8 | 0) >> 3]), +(+HEAPF64[($270($0_1 | 0, $380((HEAP32[($4_1 + 16 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 3]), +(+HEAPF64[($270($0_1 | 0, $380(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 3]), +(+HEAPF64[($270($0_1 | 0, $380((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 3]), +(+HEAPF64[($270($0_1 | 0, $380((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 2 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 3]));
  global$0 = $4_1 + 32 | 0;
  return +$42_1;
 }
 
 function $309($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0, $16_1 = 0.0, $22_1 = 0.0, $77_1 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $0_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $1_1;
  block1 : {
   block : {
    if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] >= +(0 | 0) & 1 | 0)) {
     break block
    }
    HEAPF64[($4_1 + 24 | 0) >> 3] = +$948(+(+HEAPF64[($4_1 + 16 | 0) >> 3]), +(+HEAPF64[($4_1 + 8 | 0) >> 3]));
    break block1;
   }
   $16_1 = +HEAPF64[($4_1 + 8 | 0) >> 3];
   HEAPF64[($4_1 + 24 | 0) >> 3] = +$948(+($16_1 - +$948(+-+HEAPF64[($4_1 + 16 | 0) >> 3], +$16_1)), +$16_1);
  }
  $22_1 = +HEAPF64[($4_1 + 24 | 0) >> 3];
  global$0 = $4_1 + 32 | 0;
  return +$22_1;
 }
 
 function $310($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $312($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $313($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = 0, $80_1 = 0, $95_1 = 0, $309_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 5 | 0) + (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & 31 | 0 | 0) != (0 | 0) & 1 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) / ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) >>> 0) | 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  block : {
   if (!((0 - (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) >>> 0 > (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) >>> 0) / ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) >>> 0) | 0) >>> 0 & 1 | 0)) {
    break block
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($6_1 + 8 | 0) >> 2] = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) / ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) >>> 0) | 0;
   block2 : {
    block1 : {
     if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 32 >>> 0 & 1 | 0)) {
      break block1
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = (0 >>> (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0) << (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0;
     break block2;
    }
    HEAP32[($6_1 + 20 | 0) >> 2] = 0;
   }
  }
  HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) - (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) % ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) >>> 0) | 0) | 0;
  block4 : {
   block3 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 31 >>> 0 & 1 | 0)) {
     break block3
    }
    HEAP32[($6_1 + 24 | 0) >> 2] = (0 >>> ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0) | 0) << ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0) | 0;
    break block4;
   }
   HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  }
  block6 : {
   block5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break block5
    }
    $80_1 = -1 >>> (32 - (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0) | 0;
    break block6;
   }
   $80_1 = 0;
  }
  HEAP32[($6_1 + 28 | 0) >> 2] = $80_1;
  block8 : {
   block7 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 31 >>> 0 & 1 | 0)) {
     break block7
    }
    $95_1 = -1 >>> (32 - ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0) | 0) | 0;
    break block8;
   }
   $95_1 = -1;
  }
  HEAP32[($6_1 + 32 | 0) >> 2] = $95_1;
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $314($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $317(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ($4_1 ? Math_clz32($4_1) : 32) | 0;
 }
 
 function $316() {
  var $3_1 = 0;
  return $318() | 0 | 0;
 }
 
 function $317($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $34_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $8_1 = ($319(HEAP32[$4_1 >> 2] | 0 | 0) | 0) & (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $318() {
  var $2_1 = 0;
  return -1 | 0;
 }
 
 function $319($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $38_1 = 0, $67_1 = 0, $73_1 = 0, $79_1 = 0, $258_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = (((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) + 1 | 0) >>> 0) % (624 >>> 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = 2147483647;
  HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + ((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) & -2147483648 | 0 | ((HEAP32[($4_1 + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) & 2147483647 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = (((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) + 397 | 0) >>> 0) % (624 >>> 0) | 0;
  $38_1 = (HEAP32[($4_1 + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) ^ ($320(HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) | 0;
  HEAP32[($4_1 + ((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $38_1 ^ Math_imul((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & 1 | 0, -1727483681) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + ((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) ^ (($321(HEAP32[($4_1 + ((HEAP32[($4_1 + 2496 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0) & -1 | 0) | 0;
  HEAP32[($4_1 + 2496 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  $67_1 = ($322(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & -1658038656 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) ^ $67_1 | 0;
  $73_1 = ($323(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & -272236544 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) ^ $73_1 | 0;
  $79_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) ^ ($324(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0;
  global$0 = $3_1 + 32 | 0;
  return $79_1 | 0;
 }
 
 function $320($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 1 | 0 | 0;
 }
 
 function $321($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 11 | 0 | 0;
 }
 
 function $322($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 7 | 0) & -1 | 0 | 0;
 }
 
 function $323($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 15 | 0) & -1 | 0 | 0;
 }
 
 function $324($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 18 | 0 | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $335((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $326($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $336($4_1 + 12 | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $338($327($5_1 | 0) | 0 | 0, $337(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    $22_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $22_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $22_1;
    continue label;
   };
  }
  $339($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $327($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $340((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $328($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0, $115_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $341($5_1 | 0) | 0;
  block : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $342($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $343($5_1 | 0) | 0;
  block2 : {
   block1 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break block1
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break block2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($200($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $329($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0, $124_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $344($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  block1 : {
   block : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break block
    }
    HEAP32[$7_1 >> 2] = 0;
    break block1;
   }
   $346($6_1 | 0, $345($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($347($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $348($4_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $338($345($5_1 | 0) | 0 | 0, $337(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    continue label;
   };
  }
  $349($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $350($5_1 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((0 - (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) - (HEAP32[$5_1 >> 2] | 0) | 0) >> 2 | 0) | 0) << 2 | 0) | 0;
  $351($327($5_1 | 0) | 0 | 0, $337(HEAP32[$5_1 >> 2] | 0 | 0) | 0 | 0, $337(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $337(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  $352($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $352($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $352($325($5_1 | 0) | 0 | 0, $347(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $353($5_1 | 0, $30($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $354($4_1 | 0);
  block : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $356($345($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $355($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $333($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $12_1 = $327($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $377($12_1 | 0, $337($15_1 | 0) | 0 | 0);
    continue label;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $334($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $335($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $357(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $336($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $53_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  return $6_1 | 0;
 }
 
 function $337($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $358(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $339($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $340($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $360(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $341($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $362($361(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $220() | 0;
  $15_1 = HEAP32[($221($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $222(65799 | 0);
  wasm2js_trap();
 }
 
 function $343($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($363($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $344($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $44_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $120($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $368($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $345($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $370((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $346($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $369(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $347($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $371((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $348($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $53_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $350($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $351($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $15_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  $8_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  $15_1 = (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) - (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0) >> 2 | 0) << 2 | 0;
  block : {
   if (!$15_1) {
    break block
   }
   wasm2js_memory_copy($7_1, $8_1, $15_1);
  }
  return;
 }
 
 function $352($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $354($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $373($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $355($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($375($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $356($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $374(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $357($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $358($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $359(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$5_1 >> 2] = Math_fround(0 | 0);
  return $5_1 | 0;
 }
 
 function $360($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $364((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $362($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = ($226() | 0) >>> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $366((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $365(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $365($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $366($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $367(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $368($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $369($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  block : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($362(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $239();
   wasm2js_trap();
  }
  $15_1 = $240((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $372((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $371($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $357(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $373($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $376(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $374($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $251(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $379((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $11_1 = $345($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $377($11_1 | 0, $337($14_1 | 0) | 0 | 0);
    continue label;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $378(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $378($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $367(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $380($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $28_1 = 0.0, $62_1 = 0, $29_1 = 0.0, $94_1 = 0, $20_1 = 0, $105_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break block
    }
    $28_1 = +$382(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
    if (Math_abs($28_1) < 2147483647.0) {
     $62_1 = ~~$28_1
    } else {
     $62_1 = -2147483648
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $62_1;
    break block1;
   }
   $29_1 = +$383(+(+(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) - +$382(0 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0)), HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   if (Math_abs($29_1) < 2147483647.0) {
    $94_1 = ~~$29_1
   } else {
    $94_1 = -2147483648
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $94_1;
  }
  $20_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $20_1 | 0;
 }
 
 function $381($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  $3_1 = +$3_1;
  $4_1 = +$4_1;
  var $7_1 = 0, $14_1 = 0.0, $23_1 = 0.0, $183_1 = 0.0;
  $7_1 = global$0 - 64 | 0;
  HEAPF64[($7_1 + 56 | 0) >> 3] = $0_1;
  HEAPF64[($7_1 + 48 | 0) >> 3] = $1_1;
  HEAPF64[($7_1 + 40 | 0) >> 3] = $2_1;
  HEAPF64[($7_1 + 32 | 0) >> 3] = $3_1;
  HEAPF64[($7_1 + 24 | 0) >> 3] = $4_1;
  HEAPF64[($7_1 + 16 | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] * +HEAPF64[($7_1 + 56 | 0) >> 3];
  HEAPF64[($7_1 + 8 | 0) >> 3] = +HEAPF64[($7_1 + 16 | 0) >> 3] * +HEAPF64[($7_1 + 56 | 0) >> 3];
  $14_1 = +HEAPF64[($7_1 + 40 | 0) >> 3];
  $23_1 = +HEAPF64[($7_1 + 48 | 0) >> 3];
  return +(.5 * ((+HEAPF64[($7_1 + 32 | 0) >> 3] * -3.0 + (+HEAPF64[($7_1 + 40 | 0) >> 3] * 3.0 + -+HEAPF64[($7_1 + 48 | 0) >> 3]) + +HEAPF64[($7_1 + 24 | 0) >> 3]) * +HEAPF64[($7_1 + 8 | 0) >> 3] + ((+HEAPF64[($7_1 + 32 | 0) >> 3] * 4.0 + ($23_1 + $23_1 + -(5.0 * +HEAPF64[($7_1 + 40 | 0) >> 3])) - +HEAPF64[($7_1 + 24 | 0) >> 3]) * +HEAPF64[($7_1 + 16 | 0) >> 3] + ($14_1 + $14_1 + (-+HEAPF64[($7_1 + 48 | 0) >> 3] + +HEAPF64[($7_1 + 32 | 0) >> 3]) * +HEAPF64[($7_1 + 56 | 0) >> 3]))));
 }
 
 function $382($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0.0, $37_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = +$384(+(+(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0)), +(+(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0)));
  global$0 = $4_1 + 16 | 0;
  return +$11_1;
 }
 
 function $383($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0.0, $34_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $10_1 = +$384(+(+HEAPF64[($4_1 + 8 | 0) >> 3]), +(+(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0)));
  global$0 = $4_1 + 16 | 0;
  return +$10_1;
 }
 
 function $384($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0, $9_1 = 0.0, $31_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $9_1 = +$948(+(+HEAPF64[($4_1 + 8 | 0) >> 3]), +(+HEAPF64[$4_1 >> 3]));
  global$0 = $4_1 + 16 | 0;
  return +$9_1;
 }
 
 function $385($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $386($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $387($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $387($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $388(HEAP32[$4_1 >> 2] | 0 | 0);
   $207(HEAP32[$4_1 >> 2] | 0 | 0);
   $213($183(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $199(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $388($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $189($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $389($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $21_1 = 0, $17_1 = 0, $77_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $1293($4_1 + 4 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $14_1 = 24;
  $17_1 = $391($390($4_1 + 4 | 0 | 0) | 0 | 0, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $14_1 | 0) >> $14_1 | 0 | 0) | 0;
  $1503($4_1 + 4 | 0 | 0) | 0;
  $21_1 = 24;
  global$0 = $4_1 + 16 | 0;
  return ($17_1 << $21_1 | 0) >> $21_1 | 0 | 0;
 }
 
 function $390($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $26_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $1508(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 104528 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $391($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $56_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = 24;
  $13_1 = 24;
  $15_1 = ((FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($5_1, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0) | 0) << $13_1 | 0) >> $13_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $392($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $405($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $406($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $393($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $31_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $409($6_1 | 0) | 0;
  $410($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $394($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0, $37_1 = 0, $43_1 = 0, $49_1 = 0, $57_1 = 0, $67_1 = 0, $20_1 = 0, $42_1 = 0, $48_1 = 0, $55_1 = 0, $77_1 = 0, $247_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $1113($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  block : {
   if (!(($411($5_1 + 12 | 0 | 0) | 0) & 1 | 0)) {
    break block
   }
   $412($5_1 + 4 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   $20_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   $21_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   block2 : {
    block1 : {
     if (!((($413($21_1 + (HEAP32[((HEAP32[$21_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 176 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break block1
     }
     $37_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0;
     break block2;
    }
    $37_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   }
   $42_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0;
   $43_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   $48_1 = $43_1 + (HEAP32[((HEAP32[$43_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $49_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   $55_1 = $414($49_1 + (HEAP32[((HEAP32[$49_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $57_1 = 24;
   HEAP32[($5_1 + 8 | 0) >> 2] = $415(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $20_1 | 0, $37_1 | 0, $42_1 | 0, $48_1 | 0, ($55_1 << $57_1 | 0) >> $57_1 | 0 | 0) | 0;
   block3 : {
    if (!(($416($5_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break block3
    }
    $67_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    $417($67_1 + (HEAP32[((HEAP32[$67_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
   }
  }
  $1114($5_1 + 12 | 0 | 0) | 0;
  $77_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $77_1 | 0;
 }
 
 function $395($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $86_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $36($7_1 | 0) | 0;
  $37($7_1 + 4 | 0 | 0, $2599($7_1 | 0) | 0 | 0) | 0;
  $39($7_1 + 2504 | 0 | 0, Math_imul(HEAP32[$6_1 >> 2] | 0, -1) | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 2512 | 0) >> 2] = 0;
  HEAP32[($7_1 + 2516 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[($7_1 + 2520 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($7_1 + 2512 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $439($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $397($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($441($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($441($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $398($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($441($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($441($5_1 | 0) | 0) >> 2] = $8_1;
  block : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $442($400($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $399($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $400(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $443(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $401($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (48 | 0) | 0 | 0;
 }
 
 function $402($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((((HEAP32[($446($5_1 | 0) | 0) >> 2] | 0) - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0 | 0) / (48 | 0) | 0) >>> 0 >= (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $447($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    break block1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $448($5_1 | 0) | 0;
   $450($4_1 | 0, $449($5_1 | 0, ($401($5_1 | 0) | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $401($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   $451($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   $452($5_1 | 0, $4_1 | 0);
   $453($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $403($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $401($5_1 | 0) | 0;
  $454($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $455($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $404($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $501(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $405($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $406($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $407($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $407($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $408($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $409($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $410($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $411($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $412($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $47_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $423($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $414($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $15_1 = 0, $23_1 = 0, $25_1 = 0, $83_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block : {
   if (($424($4_1 + 76 | 0 | 0) | 0) & 1 | 0) {
    break block
   }
   $11_1 = 24;
   $15_1 = 24;
   $425($4_1 + 76 | 0 | 0, (($389($4_1 | 0, (32 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) << $15_1 | 0) >> $15_1 | 0 | 0) | 0;
  }
  $23_1 = 24;
  $25_1 = (($426($4_1 + 76 | 0 | 0) | 0) << $23_1 | 0) >> $23_1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $25_1 | 0;
 }
 
 function $415($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $57_1 = 0, $99_1 = 0, $347_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 39 | 0) >> 0] = $5_1;
  block1 : {
   block : {
    if (!((HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
    break block1;
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) - (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0;
   HEAP32[($8_1 + 28 | 0) >> 2] = $418(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   block3 : {
    block2 : {
     if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block2
     }
     HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0;
     break block3;
    }
    HEAP32[($8_1 + 28 | 0) >> 2] = 0;
   }
   HEAP32[($8_1 + 24 | 0) >> 2] = (HEAP32[($8_1 + 48 | 0) >> 2] | 0) - (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0;
   block4 : {
    if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break block4
    }
    block5 : {
     if (!(($419(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block5
     }
     HEAP32[($8_1 + 56 | 0) >> 2] = 0;
     HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
     break block1;
    }
   }
   block6 : {
    if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break block6
    }
    $57_1 = 24;
    $420($8_1 + 12 | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, ((HEAPU8[($8_1 + 39 | 0) >> 0] | 0) << $57_1 | 0) >> $57_1 | 0 | 0) | 0;
    block8 : {
     block7 : {
      if (!(($419(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $421($8_1 + 12 | 0 | 0) | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break block7
      }
      HEAP32[($8_1 + 56 | 0) >> 2] = 0;
      HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = 1;
      break block8;
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = 0;
    }
    $2610($8_1 + 12 | 0 | 0) | 0;
    block9 : {
     switch (HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) {
     case 1:
      break block1;
     default:
      break block9;
     };
    }
   }
   HEAP32[($8_1 + 24 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) - (HEAP32[($8_1 + 48 | 0) >> 2] | 0) | 0;
   block10 : {
    if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break block10
    }
    block11 : {
     if (!(($419(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block11
     }
     HEAP32[($8_1 + 56 | 0) >> 2] = 0;
     HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
     break block1;
    }
   }
   $422(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
  }
  $99_1 = HEAP32[($8_1 + 60 | 0) >> 2] | 0;
  global$0 = $8_1 + 64 | 0;
  return $99_1 | 0;
 }
 
 function $416($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0 | 0;
 }
 
 function $417($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $427(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $418($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $419($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $11_1 = 0, $45_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $420($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0, $63_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $160($6_1 | 0, $5_1 + 6 | 0 | 0, $5_1 + 5 | 0 | 0) | 0;
  $15_1 = 24;
  $2618($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, ((HEAPU8[($5_1 + 7 | 0) >> 0] | 0) << $15_1 | 0) >> $15_1 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $421($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $429($428(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $422($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $423($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $438(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $424($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $425($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $6_1 = 0, $4_1 = 0, $7_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP8[($5_1 + 4 | 0) >> 0] = 1;
  $6_1 = $5_1;
  $7_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP8[$6_1 >> 0] = $7_1;
  HEAP8[($6_1 + 1 | 0) >> 0] = $7_1 >>> 8 | 0;
  HEAP8[($6_1 + 2 | 0) >> 0] = $7_1 >>> 16 | 0;
  HEAP8[($6_1 + 3 | 0) >> 0] = $7_1 >>> 24 | 0;
  return $6_1 | 0;
 }
 
 function $426($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0;
 }
 
 function $427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1295($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $428($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $42_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!(($430($4_1 | 0) | 0) & 1 | 0)) {
     break block
    }
    $9_1 = $431($4_1 | 0) | 0;
    break block1;
   }
   $9_1 = $432($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0, $52_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($433(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($434(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $435($434(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $433($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $436(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $437(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $435($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $436($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $437($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $438($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $439($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $440($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $410($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $440($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $441($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $444(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break block
   }
   $445($5_1 | 0) | 0;
   $2587($5_1 | 0, 2524 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $443($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $444($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $445($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $2598($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $446($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $456((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $447($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $457($4_1 + 12 | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $459($448($5_1 | 0) | 0 | 0, $458(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    $22_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 48 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $22_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $22_1;
    continue label;
   };
  }
  $460($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $448($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $461((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $449($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0, $115_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $462($5_1 | 0) | 0;
  block : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $463($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $464($5_1 | 0) | 0;
  block2 : {
   block1 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break block1
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break block2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($200($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $450($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0, $124_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $465($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  block1 : {
   block : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break block
    }
    HEAP32[$7_1 >> 2] = 0;
    break block1;
   }
   $467($6_1 | 0, $466($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, 48) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 48) | 0;
  HEAP32[($468($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $451($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $469($4_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $459($466($5_1 | 0) | 0 | 0, $458(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 48 | 0;
    continue label;
   };
  }
  $470($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $452($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $471($5_1 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(0 - (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) / (48 | 0) | 0) | 0, 48) | 0;
  $472($448($5_1 | 0) | 0 | 0, $458(HEAP32[$5_1 >> 2] | 0 | 0) | 0 | 0, $458(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $458(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  $473($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $473($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $473($446($5_1 | 0) | 0 | 0, $468(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $474($5_1 | 0, $401($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $453($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $475($4_1 | 0);
  block : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $477($466($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $476($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $454($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $12_1 = $448($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -48 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $498($12_1 | 0, $458($15_1 | 0) | 0 | 0);
    continue label;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $455($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $456($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $478(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $457($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $53_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 48) | 0;
  return $6_1 | 0;
 }
 
 function $458($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $459($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $479(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $460($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $461($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $481(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $462($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $483($482(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $220() | 0;
  $15_1 = HEAP32[($221($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $463($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $222(65799 | 0);
  wasm2js_trap();
 }
 
 function $464($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($484($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (48 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $465($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $44_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $405($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $489($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $466($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $491((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $467($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $490(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $468($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $492((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $469($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $53_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 48) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $470($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $471($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $472($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $15_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  $8_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  $15_1 = Math_imul(((HEAP32[($6_1 + 4 | 0) >> 2] | 0) - (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0 | 0) / (48 | 0) | 0, 48);
  block : {
   if (!$15_1) {
    break block
   }
   wasm2js_memory_copy($7_1, $8_1, $15_1);
  }
  return;
 }
 
 function $473($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $474($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $494($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $476($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($496($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (48 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $477($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $495(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $478($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $479($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $480(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $480($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $28_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $40($5_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $481($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $482($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $485((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $483($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = (($226() | 0) >>> 0) / (48 >>> 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $484($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $487((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $485($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $486(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $486($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $487($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $488(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $488($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $490($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  block : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($483(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $239();
   wasm2js_trap();
  }
  $15_1 = $240(Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 48) | 0, 8 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $491($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $493((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $492($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $478(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $493($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $494($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $497(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $495($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $251(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 48) | 0, 8 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $496($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $500((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $11_1 = $466($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -48 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $498($11_1 | 0, $458($14_1 | 0) | 0 | 0);
    continue label;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $498($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $499(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $499($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $500($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $488(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $501($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $503($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $504(HEAP32[$4_1 >> 2] | 0 | 0);
   $471(HEAP32[$4_1 >> 2] | 0 | 0);
   $477($448(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $464(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $504($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $454($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $505($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $506($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $507($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $507($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $508($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $508($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $509($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $525((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $510($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $527((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $511($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = (($226() | 0) >>> 0) / (60 >>> 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $512($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $529(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $513($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $44_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $505($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $530($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $514($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $532((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $515($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $531(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $516($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $533((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $517($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $518($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $519($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
  $536($6_1 + 16 | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, $6_1 + 44 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  $20_1 = 8;
  HEAP32[($6_1 + $20_1 | 0) >> 2] = HEAP32[(($6_1 + 16 | 0) + $20_1 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $537($6_1 + 28 | 0 | 0, $6_1 | 0);
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $538(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 60 | 0;
    HEAP32[($6_1 + 48 | 0) >> 2] = (HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 60 | 0;
    continue label;
   };
  }
  $539($6_1 + 28 | 0 | 0);
  $540(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
  $541($6_1 + 28 | 0 | 0) | 0;
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $520($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $521($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $522($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $620($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $523($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($622($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (60 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $524($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $621(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $525($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $526(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $526($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $527($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $528(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $528($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $529($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $530($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $531($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  block : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($511(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $239();
   wasm2js_trap();
  }
  $15_1 = $240(Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 60) | 0, 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $532($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $534((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $533($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $535(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $535($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $536($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $38_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  return $7_1 | 0;
 }
 
 function $537($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $11_1 = 0, $44_1 = 0, $61_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  $5_1 = 8;
  HEAP32[(($4_1 + 16 | 0) + $5_1 | 0) >> 2] = HEAP32[($1_1 + $5_1 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $44_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = 8;
  HEAP32[($4_1 + $11_1 | 0) >> 2] = HEAP32[(($4_1 + 16 | 0) + $11_1 | 0) >> 2] | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $61_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[$4_1 >> 2] = $61_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $543($0_1 | 0, $4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $538($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $544(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $539($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
  return;
 }
 
 function $540($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  block : {
   label : while (1) {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $545(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $518(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 60 | 0;
    continue label;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $541($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $36_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  block : {
   if ((HEAPU8[($4_1 + 12 | 0) >> 0] | 0) & 1 | 0) {
    break block
   }
   $546($4_1 | 0);
  }
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $542($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $535(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $543($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $37_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $6_1 = 8;
  HEAP32[($5_1 + $6_1 | 0) >> 2] = HEAP32[($1_1 + $6_1 | 0) >> 2] | 0;
  HEAP8[($5_1 + 12 | 0) >> 0] = 0;
  return $5_1 | 0;
 }
 
 function $544($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $547(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $545($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $579(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $546($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  $608($3_1 + 8 | 0 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $608($3_1 + 4 | 0 | 0, HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $609($5_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $35_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $548($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $548($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $38_1 = 0, $41_1 = 0, $42_1 = 0, $45_1 = 0, $146_1 = 0, $156_1 = 0, $166_1 = 0, $172_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $549($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $550($5_1 + 12 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  $550($5_1 + 16 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0;
  $550($5_1 + 20 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0 | 0) | 0;
  $551($5_1 + 24 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 24 | 0 | 0) | 0;
  $551($5_1 + 28 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 28 | 0 | 0) | 0;
  $551($5_1 + 32 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 32 | 0 | 0) | 0;
  $38_1 = $5_1 + 36 | 0;
  $41_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 36 | 0;
  i64toi32_i32$2 = $41_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $146_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $38_1;
  HEAP32[i64toi32_i32$0 >> 2] = $146_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $42_1 = 16;
  i64toi32_i32$2 = i64toi32_i32$2 + $42_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $156_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $38_1 + $42_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $156_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $45_1 = 8;
  i64toi32_i32$2 = $41_1 + $45_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $166_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $38_1 + $45_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $166_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $549($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0, $106_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $553($5_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, $552(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $22_1 = HEAP32[($554(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($554($5_1 | 0) | 0) >> 2] = $22_1;
  HEAP32[($554(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = 0;
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $550($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $49_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $555(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $557($5_1 | 0, $4_1 + 4 | 0 | 0, $556(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $551($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $49_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $558(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $560($5_1 | 0, $4_1 + 4 | 0 | 0, $559(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $552($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $561((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $553($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $39_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $562($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $563($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $554($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $564((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $555($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($567($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($567($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $556($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $568(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $557($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $39_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $569($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $570($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $558($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($573($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($573($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $559($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $574(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $560($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $39_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $575($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $576($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $561($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $565(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $562($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $563($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $566(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $565($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $566($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $567($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $571(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $572(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $570($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $571($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $572($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $573($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $577(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $574($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $578(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $575($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $576($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $577($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $578($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $580(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $580($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $65_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $581($4_1 + 32 | 0 | 0) | 0;
  $581($4_1 + 28 | 0 | 0) | 0;
  $581($4_1 + 24 | 0 | 0) | 0;
  $582($4_1 + 20 | 0 | 0) | 0;
  $582($4_1 + 16 | 0 | 0) | 0;
  $582($4_1 + 12 | 0 | 0) | 0;
  $583($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $581($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $584($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $582($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $585($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $583($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $586($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $587($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $584($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($573($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($573($5_1 | 0) | 0) >> 2] = $8_1;
  block : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $588($574($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($567($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($567($5_1 | 0) | 0) >> 2] = $8_1;
  block : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $593($568($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $586($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $587($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $596(HEAP32[$4_1 >> 2] | 0 | 0);
   $597(HEAP32[$4_1 >> 2] | 0 | 0);
   $599($552(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $598(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $588($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break block
   }
   $589($5_1 | 0) | 0;
   $2587($5_1 | 0, 84 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $589($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $590($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $590($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $591($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $591($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $36_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 68328 + 8 | 0;
  $592($4_1 + 16 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $592($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $34($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $593($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break block
   }
   $594($5_1 | 0) | 0;
   $2587($5_1 | 0, 84 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $595($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $595($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $591($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $596($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $600($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $598($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($602($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (120 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $599($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $601(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $600($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $12_1 = $552($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -120 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $604($12_1 | 0, $603($15_1 | 0) | 0 | 0);
    continue label;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $601($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $251(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 120) | 0, 8 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $606((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $603($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $604($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $605(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $605($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $606($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $607(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $607($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $608($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $609($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $0_1;
  block : {
   label : while (1) {
    if (!(($610($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    $545(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $611($5_1 + 12 | 0 | 0) | 0 | 0);
    $612($5_1 + 12 | 0 | 0) | 0;
    continue label;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $610($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($613(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) != ($613(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $611($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $614(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $612($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + -60 | 0;
  return $4_1 | 0;
 }
 
 function $613($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $614($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $518($615(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $615($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $616(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $616($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $617($4_1 + 12 | 0 | 0, 0 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  $11_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $617($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $618(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $619(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $619($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 60) | 0;
  return;
 }
 
 function $620($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $623(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $621($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $251(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 60) | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $622($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $624((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $11_1 = $514($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -60 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $545($11_1 | 0, $518($14_1 | 0) | 0 | 0);
    continue label;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $624($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $526(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $625($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $53_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 60) | 0;
  return $6_1 | 0;
 }
 
 function $626($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $629(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $627($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $628($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0, $115_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $85($5_1 | 0) | 0;
  block : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $86($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $84($5_1 | 0) | 0;
  block2 : {
   block1 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break block1
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break block2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($200($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $629($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0, $38_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = $630(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $630($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $51_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $631($7_1 | 0, Math_fround(Math_fround(+HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3])), HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $631($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $32_1 = 0, $42_1 = 0, $52_1 = 0, $62_1 = 0, $157_1 = 0, $506_1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 264 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 260 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 256 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 264 | 0) >> 2] | 0;
  HEAP32[($5_1 + 268 | 0) >> 2] = $6_1;
  $632($6_1 | 0) | 0;
  $633($6_1 + 12 | 0 | 0) | 0;
  $633($6_1 + 16 | 0 | 0) | 0;
  $633($6_1 + 20 | 0 | 0) | 0;
  $634($6_1 + 24 | 0 | 0) | 0;
  $634($6_1 + 28 | 0 | 0) | 0;
  $634($6_1 + 32 | 0 | 0) | 0;
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 44 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 48 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 52 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 56 | 0) >> 2] = Math_fround(1.0);
  HEAP32[($5_1 + 252 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($5_1 + 252 | 0) >> 2] | 0) >>> 0 < 4 >>> 0 & 1 | 0)) {
     break block
    }
    $635($6_1 | 0, $5_1 + 260 | 0 | 0) | 0;
    HEAP32[($5_1 + 252 | 0) >> 2] = (HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  $32_1 = $108($6_1 | 0, 0 | 0) | 0;
  $636($5_1 + 192 | 0 | 0, $108($6_1 | 0, 0 | 0) | 0 | 0, +(88.3));
  $637($32_1 | 0, $5_1 + 192 | 0 | 0);
  $42_1 = $108($6_1 | 0, 1 | 0) | 0;
  $638($5_1 + 136 | 0 | 0, $108($6_1 | 0, 0 | 0) | 0 | 0, +(88.3));
  $637($42_1 | 0, $5_1 + 136 | 0 | 0);
  $52_1 = $108($6_1 | 0, 2 | 0) | 0;
  $636($5_1 + 80 | 0 | 0, $108($6_1 | 0, 0 | 0) | 0 | 0, +(2500.0));
  $637($52_1 | 0, $5_1 + 80 | 0 | 0);
  $62_1 = $108($6_1 | 0, 3 | 0) | 0;
  $638($5_1 + 24 | 0 | 0, $108($6_1 | 0, 0 | 0) | 0 | 0, +(2500.0));
  $637($62_1 | 0, $5_1 + 24 | 0 | 0);
  HEAP32[($5_1 + 20 | 0) >> 2] = $639($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $640($6_1 + 12 | 0 | 0, $5_1 + 20 | 0 | 0) | 0;
  $582($5_1 + 20 | 0 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $639($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $640($6_1 + 16 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
  $582($5_1 + 16 | 0 | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $639($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $640($6_1 + 20 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $582($5_1 + 12 | 0 | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $641($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $642($6_1 + 24 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
  $581($5_1 + 8 | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $641($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $642($6_1 + 28 | 0 | 0, $5_1 + 4 | 0 | 0) | 0;
  $581($5_1 + 4 | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = $641($5_1 + 260 | 0 | 0, $5_1 + 256 | 0 | 0) | 0;
  $642($6_1 + 32 | 0 | 0, $5_1 | 0) | 0;
  $581($5_1 | 0) | 0;
  $157_1 = HEAP32[($5_1 + 268 | 0) >> 2] | 0;
  global$0 = $5_1 + 272 | 0;
  return $157_1 | 0;
 }
 
 function $632($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $53_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $643($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $644($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $634($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $645($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $635($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0, $86_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($554($5_1 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $646($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 120 | 0;
    break block1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $647($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $22_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -120 | 0;
  global$0 = $4_1 + 16 | 0;
  return $22_1 | 0;
 }
 
 function $636($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $6_1 = 0, $54_1 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($5_1 + 32 | 0) >> 3] / +HEAPF64[($6_1 + 56 | 0) >> 3];
  HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($5_1 + 32 | 0) >> 3];
  HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] / +$989(+(+HEAPF64[($5_1 + 24 | 0) >> 3]));
  HEAPF64[$5_1 >> 3] = 2.0 * +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + (+HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3]);
  HEAPF64[$0_1 >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 8 | 0) >> 3] = 2.0 * (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] / +HEAPF64[$5_1 >> 3]);
  HEAPF64[($0_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] / +HEAPF64[$5_1 >> 3];
  $54_1 = +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3];
  HEAPF64[($0_1 + 24 | 0) >> 3] = (2.0 * (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3]) - ($54_1 + $54_1)) / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 32 | 0) >> 3] = (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + (-2.0 * +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3])) / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 40 | 0) >> 3] = 1.0;
  HEAPF64[($0_1 + 48 | 0) >> 3] = +(0 | 0);
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $637($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $12_1 = 0, $17_1 = 0, $22_1 = 0, $27_1 = 0, $32_1 = 0, $37_1 = 0, $44_1 = 0, $51_1 = 0, $58_1 = 0, $65_1 = 0, $72_1 = 0, $5_1 = 0, $123_1 = 0, $136_1 = 0, $149_1 = 0, $162_1 = 0, $175_1 = 0, $188_1 = 0, $192_1 = 0, $208_1 = 0, $224_1 = 0, $240_1 = 0, $256_1 = 0, $272_1 = 0, $288_1 = 0, $292_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 120 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
  $7_1 = 48;
  i64toi32_i32$2 = $6_1 + $7_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $7_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $12_1 = 40;
  i64toi32_i32$2 = $6_1 + $12_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $136_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $136_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = 32;
  i64toi32_i32$2 = $6_1 + $17_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $149_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $17_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $149_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $22_1 = 24;
  i64toi32_i32$2 = $6_1 + $22_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $162_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $22_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $162_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $27_1 = 16;
  i64toi32_i32$2 = $6_1 + $27_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $175_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $27_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $175_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $32_1 = 8;
  i64toi32_i32$2 = $6_1 + $32_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $188_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $32_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $188_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $192_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $192_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  $37_1 = 48;
  i64toi32_i32$2 = (i64toi32_i32$0 + 64 | 0) + $37_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $208_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $37_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $208_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $44_1 = 40;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $44_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $224_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $44_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $224_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $51_1 = 32;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $51_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $240_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $51_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $240_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $58_1 = 24;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $58_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $256_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $58_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $256_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $65_1 = 16;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $65_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $272_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $65_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $272_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $72_1 = 8;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $72_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $288_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $72_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $288_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $292_1 = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $292_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $648($5_1 | 0, i64toi32_i32$1 + 8 | 0 | 0, 5 | 0);
  global$0 = i64toi32_i32$1 + 128 | 0;
  return;
 }
 
 function $638($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $6_1 = 0, $54_1 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($5_1 + 32 | 0) >> 3] / +HEAPF64[($6_1 + 56 | 0) >> 3];
  HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($5_1 + 32 | 0) >> 3];
  HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] / +$989(+(+HEAPF64[($5_1 + 24 | 0) >> 3]));
  HEAPF64[$5_1 >> 3] = 2.0 * +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + (+HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3]);
  HEAPF64[$0_1 >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3] / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 8 | 0) >> 3] = -2.0 * (+HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3]) / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3] / +HEAPF64[$5_1 >> 3];
  $54_1 = +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3];
  HEAPF64[($0_1 + 24 | 0) >> 3] = (2.0 * (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3]) - ($54_1 + $54_1)) / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 32 | 0) >> 3] = (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + (-2.0 * +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] + +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3])) / +HEAPF64[$5_1 >> 3];
  HEAPF64[($0_1 + 40 | 0) >> 3] = 1.0;
  HEAPF64[($0_1 + 48 | 0) >> 3] = +(0 | 0);
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $639($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $13_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = $2583(84 | 0) | 0;
  $649($6_1 | 0, Math_fround(Math_fround(HEAPF32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2])), HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $650($4_1 + 12 | 0 | 0, $6_1 | 0) | 0;
  $13_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $640($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $39_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $585($5_1 | 0, $555(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $556(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $568($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $641($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $13_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = $2583(84 | 0) | 0;
  $651($6_1 | 0, Math_fround(Math_fround(HEAPF32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2])), HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $652($4_1 + 12 | 0 | 0, $6_1 | 0) | 0;
  $13_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $642($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $39_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $584($5_1 | 0, $558(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $559(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $574($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $643($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $562($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $653($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $644($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $31_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $656($6_1 | 0) | 0;
  $657($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $645($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $31_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $658($6_1 | 0) | 0;
  $659($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $660($4_1 + 12 | 0 | 0, $5_1 | 0, 1 | 0) | 0;
  $661($552($5_1 | 0) | 0 | 0, $603(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 120 | 0;
  $662($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $647($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0, $90_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $552($5_1 | 0) | 0;
  $665($4_1 | 0, $664($5_1 | 0, ($663($5_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $663($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $661(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $603(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 120 | 0;
  $666($5_1 | 0, $4_1 | 0);
  $22_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $667($4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return $22_1 | 0;
 }
 
 function $648($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $17_1 = 0, $22_1 = 0, $27_1 = 0, $32_1 = 0, $38_1 = 0, $45_1 = 0, $52_1 = 0, $59_1 = 0, $66_1 = 0, $73_1 = 0, $6_1 = 0, $121_1 = 0, $134_1 = 0, $147_1 = 0, $160_1 = 0, $173_1 = 0, $186_1 = 0, $190_1 = 0, $37_1 = 0, $208_1 = 0, $224_1 = 0, $240_1 = 0, $256_1 = 0, $272_1 = 0, $288_1 = 0, $292_1 = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 120 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
  $7_1 = 48;
  i64toi32_i32$2 = $1_1 + $7_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $121_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 64 | 0) + $7_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $121_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $12_1 = 40;
  i64toi32_i32$2 = $1_1 + $12_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $134_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 64 | 0) + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $134_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = 32;
  i64toi32_i32$2 = $1_1 + $17_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $147_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 64 | 0) + $17_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $147_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $22_1 = 24;
  i64toi32_i32$2 = $1_1 + $22_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $160_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 64 | 0) + $22_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $160_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $27_1 = 16;
  i64toi32_i32$2 = $1_1 + $27_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $173_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 64 | 0) + $27_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $173_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $32_1 = 8;
  i64toi32_i32$2 = $1_1 + $32_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $186_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 64 | 0) + $32_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $186_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $190_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $190_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  $37_1 = HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] | 0;
  $38_1 = 48;
  i64toi32_i32$2 = (i64toi32_i32$0 + 64 | 0) + $38_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $208_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 8 | 0) + $38_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $208_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $45_1 = 40;
  i64toi32_i32$2 = ($5_1 + 64 | 0) + $45_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $224_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 8 | 0) + $45_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $224_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $52_1 = 32;
  i64toi32_i32$2 = ($5_1 + 64 | 0) + $52_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $240_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 8 | 0) + $52_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $240_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $59_1 = 24;
  i64toi32_i32$2 = ($5_1 + 64 | 0) + $59_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $256_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 8 | 0) + $59_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $256_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $66_1 = 16;
  i64toi32_i32$2 = ($5_1 + 64 | 0) + $66_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $272_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5_1 + 8 | 0) + $66_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $272_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $73_1 = 8;
  i64toi32_i32$2 = ($5_1 + 64 | 0) + $73_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $288_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 8 | 0) + $73_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $288_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $292_1 = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $292_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $707($6_1 | 0, i64toi32_i32$1 + 8 | 0 | 0, $37_1 | 0);
  global$0 = i64toi32_i32$1 + 128 | 0;
  return;
 }
 
 function $649($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $39_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $724($6_1 | 0) | 0;
  HEAPF32[($6_1 + 80 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  $725($6_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $650($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $726($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $651($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $39_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $757($6_1 | 0) | 0;
  HEAPF32[($6_1 + 80 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  $725($6_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $652($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $758($5_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $653($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $654($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $654($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $655($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $655($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $656($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $657($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $658($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $660($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $53_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 120) | 0;
  return $6_1 | 0;
 }
 
 function $661($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $668(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $662($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $663($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (120 | 0) | 0 | 0;
 }
 
 function $664($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0, $115_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $675($5_1 | 0) | 0;
  block : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $676($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $598($5_1 | 0) | 0;
  block2 : {
   block1 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break block1
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break block2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($200($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $665($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0, $124_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $677($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  block1 : {
   block : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break block
    }
    HEAP32[$7_1 >> 2] = 0;
    break block1;
   }
   $679($6_1 | 0, $678($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, 120) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 120) | 0;
  HEAP32[($680($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $597($5_1 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(0 - (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) / (120 | 0) | 0) | 0, 120) | 0;
  $681($552($5_1 | 0) | 0 | 0, $603(HEAP32[$5_1 >> 2] | 0 | 0) | 0 | 0, $603(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $603(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  $682($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $682($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $682($554($5_1 | 0) | 0 | 0, $680(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $683($5_1 | 0, $663($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $667($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $684($4_1 | 0);
  block : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $599($678($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $685($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $668($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $669(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $669($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $670($6_1 | 0, +(+Math_fround(HEAPF32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2]))) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $670($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $22_1 = 0, $4_1 = 0, $91_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  $22_1 = 0;
  i64toi32_i32$1 = $5_1;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $671($5_1 | 0) | 0;
  HEAPF64[($5_1 + 56 | 0) >> 3] = +HEAPF64[$4_1 >> 3];
  HEAPF64[($5_1 + 64 | 0) >> 3] = 3.141592653589793;
  HEAPF64[($5_1 + 104 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 112 | 0) >> 3] = +(0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $671($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $672($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $672($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $63_1 = 0, $4_1 = 0, $17_1 = 0, $24_1 = 0, $31_1 = 0, $38_1 = 0, $45_1 = 0, $52_1 = 0, $127_1 = 0, $143_1 = 0, $159_1 = 0, $175_1 = 0, $191_1 = 0, $207_1 = 0, $211_1 = 0, $223_1 = 0;
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 124 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  $63_1 = 0;
  i64toi32_i32$1 = $3_1 + 112 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 104 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 96 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 88 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 80 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 72 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = 48;
  i64toi32_i32$2 = (i64toi32_i32$1 + 64 | 0) + $17_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $127_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 8 | 0) + $17_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $127_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $24_1 = 40;
  i64toi32_i32$2 = ($3_1 + 64 | 0) + $24_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 8 | 0) + $24_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $143_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $31_1 = 32;
  i64toi32_i32$2 = ($3_1 + 64 | 0) + $31_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $159_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 8 | 0) + $31_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $159_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $38_1 = 24;
  i64toi32_i32$2 = ($3_1 + 64 | 0) + $38_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $175_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 8 | 0) + $38_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $175_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $45_1 = 16;
  i64toi32_i32$2 = ($3_1 + 64 | 0) + $45_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $191_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 8 | 0) + $45_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $191_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $52_1 = 8;
  i64toi32_i32$2 = ($3_1 + 64 | 0) + $52_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $207_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 8 | 0) + $52_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $207_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
  $211_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $211_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  $673($4_1 | 0, i64toi32_i32$0 + 8 | 0 | 0) | 0;
  global$0 = i64toi32_i32$0 + 128 | 0;
  return $4_1 | 0;
 }
 
 function $673($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $11_1 = 0, $16_1 = 0, $21_1 = 0, $26_1 = 0, $31_1 = 0, $36_1 = 0, $43_1 = 0, $50_1 = 0, $57_1 = 0, $64_1 = 0, $71_1 = 0, $117_1 = 0, $130_1 = 0, $143_1 = 0, $156_1 = 0, $169_1 = 0, $182_1 = 0, $186_1 = 0, $202_1 = 0, $218_1 = 0, $234_1 = 0, $250_1 = 0, $266_1 = 0, $282_1 = 0, $286_1 = 0, $298_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 124 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  $6_1 = 48;
  i64toi32_i32$2 = $1_1 + $6_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $117_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $6_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $117_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = 40;
  i64toi32_i32$2 = $1_1 + $11_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $130_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $11_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $130_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $16_1 = 32;
  i64toi32_i32$2 = $1_1 + $16_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $16_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $143_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $21_1 = 24;
  i64toi32_i32$2 = $1_1 + $21_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $156_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $21_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $156_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $26_1 = 16;
  i64toi32_i32$2 = $1_1 + $26_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $169_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 64 | 0) + $26_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $169_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $31_1 = 8;
  i64toi32_i32$2 = $1_1 + $31_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $182_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 64 | 0) + $31_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $182_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $186_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $186_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  $36_1 = 48;
  i64toi32_i32$2 = (i64toi32_i32$0 + 64 | 0) + $36_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $202_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $36_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $202_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $43_1 = 40;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $43_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $218_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $43_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $218_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $50_1 = 32;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $50_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $234_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $50_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $234_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $57_1 = 24;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $57_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $250_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $57_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $250_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $64_1 = 16;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $64_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $266_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $64_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $266_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $71_1 = 8;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $71_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $282_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $71_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $282_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $286_1 = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $286_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $674($5_1 | 0, i64toi32_i32$1 + 8 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 128 | 0;
  return $5_1 | 0;
 }
 
 function $674($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $9_1 = 0, $12_1 = 0, $15_1 = 0, $18_1 = 0, $21_1 = 0, $42_1 = 0, $52_1 = 0, $62_1 = 0, $72_1 = 0, $82_1 = 0, $92_1 = 0, $102_1 = 0, $104_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $42_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $6_1 = 48;
  i64toi32_i32$2 = i64toi32_i32$2 + $6_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $6_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $9_1 = 40;
  i64toi32_i32$2 = $1_1 + $9_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $62_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $9_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $62_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $12_1 = 32;
  i64toi32_i32$2 = $1_1 + $12_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $72_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $72_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $15_1 = 24;
  i64toi32_i32$2 = $1_1 + $15_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $15_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $18_1 = 16;
  i64toi32_i32$2 = $1_1 + $18_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $92_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $18_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $92_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $21_1 = 8;
  i64toi32_i32$2 = $1_1 + $21_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $102_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $21_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $102_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return $5_1 | 0;
 }
 
 function $675($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $687($686(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $220() | 0;
  $15_1 = HEAP32[($221($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $676($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $222(65799 | 0);
  wasm2js_trap();
 }
 
 function $677($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $44_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $562($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $690($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $678($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $692((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $679($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $691(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $680($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $693((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $681($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
  $695($6_1 + 16 | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, $6_1 + 44 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  $20_1 = 8;
  HEAP32[($6_1 + $20_1 | 0) >> 2] = HEAP32[(($6_1 + 16 | 0) + $20_1 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $696($6_1 + 28 | 0 | 0, $6_1 | 0);
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $697(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 120 | 0;
    HEAP32[($6_1 + 48 | 0) >> 2] = (HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 120 | 0;
    continue label;
   };
  }
  $698($6_1 + 28 | 0 | 0);
  $699(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
  $700($6_1 + 28 | 0 | 0) | 0;
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $683($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $684($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $720($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($721($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (120 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $686($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $688((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $687($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = (($226() | 0) >>> 0) / (120 >>> 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $688($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $689(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $689($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $690($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $691($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  block : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($687(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $239();
   wasm2js_trap();
  }
  $15_1 = $240(Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 120) | 0, 8 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $692($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $694((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $693($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $566(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $694($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $695($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $38_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  return $7_1 | 0;
 }
 
 function $696($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $11_1 = 0, $44_1 = 0, $61_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  $5_1 = 8;
  HEAP32[(($4_1 + 16 | 0) + $5_1 | 0) >> 2] = HEAP32[($1_1 + $5_1 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $44_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = 8;
  HEAP32[($4_1 + $11_1 | 0) >> 2] = HEAP32[(($4_1 + 16 | 0) + $11_1 | 0) >> 2] | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $61_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[$4_1 >> 2] = $61_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $701($0_1 | 0, $4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $697($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $702(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $698($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
  return;
 }
 
 function $699($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  block : {
   label : while (1) {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $604(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $603(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 120 | 0;
    continue label;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $700($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $36_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  block : {
   if ((HEAPU8[($4_1 + 12 | 0) >> 0] | 0) & 1 | 0) {
    break block
   }
   $703($4_1 | 0);
  }
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $701($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $37_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $6_1 = 8;
  HEAP32[($5_1 + $6_1 | 0) >> 2] = HEAP32[($1_1 + $6_1 | 0) >> 2] | 0;
  HEAP8[($5_1 + 12 | 0) >> 0] = 0;
  return $5_1 | 0;
 }
 
 function $702($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $704(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $703($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  $709($3_1 + 8 | 0 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $709($3_1 + 4 | 0 | 0, HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $710($5_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $704($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $35_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $705($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $705($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $81_1 = 0, $25_1 = 0, $26_1 = 0, $34_1 = 0, $41_1 = 0, $48_1 = 0, $55_1 = 0, $62_1 = 0, $69_1 = 0, $167_1 = 0, $177_1 = 0, $202_1 = 0, $218_1 = 0, $234_1 = 0, $250_1 = 0, $266_1 = 0, $282_1 = 0, $286_1 = 0, $298_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 120 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  $81_1 = 0;
  i64toi32_i32$1 = $5_1;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $671($5_1 | 0) | 0;
  HEAPF64[($5_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 120 | 0) >> 2] | 0) + 56 | 0) >> 3];
  HEAPF64[($5_1 + 64 | 0) >> 3] = 3.141592653589793;
  HEAPF64[($5_1 + 104 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 112 | 0) >> 3] = +(0 | 0);
  $25_1 = $5_1 + 104 | 0;
  i64toi32_i32$2 = (HEAP32[($4_1 + 120 | 0) >> 2] | 0) + 104 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $167_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $25_1;
  HEAP32[i64toi32_i32$0 >> 2] = $167_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $26_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $26_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $177_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $25_1 + $26_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $177_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $706($4_1 + 64 | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, 5 | 0);
  $34_1 = 48;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $34_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $202_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $34_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $202_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $41_1 = 40;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $41_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $218_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $41_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $218_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $48_1 = 32;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $48_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $234_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $48_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $234_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $55_1 = 24;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $55_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $250_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $55_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $250_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $62_1 = 16;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $62_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $266_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $62_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $266_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $69_1 = 8;
  i64toi32_i32$2 = ($4_1 + 64 | 0) + $69_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $282_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 8 | 0) + $69_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $282_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
  $286_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $286_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  $648($5_1 | 0, i64toi32_i32$0 + 8 | 0 | 0, 5 | 0);
  global$0 = i64toi32_i32$0 + 128 | 0;
  return $5_1 | 0;
 }
 
 function $706($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $708($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $707($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $8_1 = 0, $11_1 = 0, $14_1 = 0, $17_1 = 0, $20_1 = 0, $23_1 = 0, $6_1 = 0, $7_1 = 0, $59_1 = 0, $69_1 = 0, $79_1 = 0, $89_1 = 0, $99_1 = 0, $109_1 = 0, $113_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
  $8_1 = 48;
  i64toi32_i32$2 = $1_1 + $8_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $59_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $8_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $59_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = 40;
  i64toi32_i32$2 = $1_1 + $11_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $69_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $11_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $69_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $14_1 = 32;
  i64toi32_i32$2 = $1_1 + $14_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $79_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $14_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $79_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $17_1 = 24;
  i64toi32_i32$2 = $1_1 + $17_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $89_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $17_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $89_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $20_1 = 16;
  i64toi32_i32$2 = $1_1 + $20_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $99_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $20_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $99_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $23_1 = 8;
  i64toi32_i32$2 = $1_1 + $23_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $109_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $23_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $109_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1044(56 | 0, $6_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0);
  global$0 = i64toi32_i32$0 + 64 | 0;
  return;
 }
 
 function $708($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $10_1 = 0, $13_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, $25_1 = 0, $58_1 = 0, $68_1 = 0, $78_1 = 0, $88_1 = 0, $98_1 = 0, $108_1 = 0, $118_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $2_1;
  $1043(56 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, $5_1 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $58_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $58_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $10_1 = 48;
  i64toi32_i32$2 = $5_1 + $10_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $68_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $10_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $68_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $13_1 = 40;
  i64toi32_i32$2 = $5_1 + $13_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $78_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + $13_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $78_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $16_1 = 32;
  i64toi32_i32$2 = $5_1 + $16_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $88_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $16_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $19_1 = 24;
  i64toi32_i32$2 = $5_1 + $19_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $98_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + $19_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $98_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $22_1 = 16;
  i64toi32_i32$2 = $5_1 + $22_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $108_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $22_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $108_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $25_1 = 8;
  i64toi32_i32$2 = $5_1 + $25_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $118_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + $25_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $118_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $709($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $710($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $0_1;
  block : {
   label : while (1) {
    if (!(($711($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    $604(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $712($5_1 + 12 | 0 | 0) | 0 | 0);
    $713($5_1 + 12 | 0 | 0) | 0;
    continue label;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $711($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($714(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) != ($714(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $712($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $715(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $713($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + -120 | 0;
  return $4_1 | 0;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $715($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $603($716(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $716($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $717(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $717($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $718($4_1 + 12 | 0 | 0, 0 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  $11_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $718($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $618(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $719(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $719($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 120) | 0;
  return;
 }
 
 function $720($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $722(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $723((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $722($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $11_1 = $678($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -120 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $604($11_1 | 0, $603($14_1 | 0) | 0 | 0);
    continue label;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $723($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $607(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $724($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $31_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $727($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 68356 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $725($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $728($5_1 + 16 | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 60 | 0) >> 2])));
  $729($5_1 | 0);
  $730($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $726($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $756($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $657($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $727($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $55_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 68328 + 8 | 0;
  $731($4_1 + 16 | 0 | 0) | 0;
  HEAPF32[($4_1 + 60 | 0) >> 2] = Math_fround(44100.0);
  HEAPF32[($4_1 + 64 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 68 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($4_1 + 72 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($4_1 + 76 | 0) >> 2] = Math_fround(100.0);
  $729($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $728($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(+Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]) * -2.0 * 1.0e3 / +Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
  $737($5_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2])));
  $738($5_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])));
  $64($5_1 | 0, 1 | 0);
  $746($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $729($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(+$955(+(10.0), +(+Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]) / 20.0)));
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]));
  $737($4_1 + 16 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2])));
  $738($4_1 + 16 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2])));
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $730($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $746((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $731($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $9_1 = 0, $61_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8($4_1 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 1194083328;
  HEAP32[($4_1 + 16 | 0) >> 2] = -1106155405;
  HEAP32[($4_1 + 20 | 0) >> 2] = 1065353216;
  HEAP32[($4_1 + 24 | 0) >> 2] = 1120403456;
  $9_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $9_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = $9_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $9_1;
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(+$937(+(-1.0)));
  $737($4_1 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2])));
  $738($4_1 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2])));
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $732($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0, $58_1 = Math_fround(0), $185_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround($733($6_1 + 16 | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]))));
  HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(9.999999974752427e-07);
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($734($5_1 + 32 | 0 | 0, $5_1 + 28 | 0 | 0) | 0) >> 2]);
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(1.0);
  block : {
   if (!(Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]) < Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) & 1 | 0)) {
    break block
   }
   HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(0 | 0);
   HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) - Math_fround(1.0));
   HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($734($5_1 + 16 | 0 | 0, $5_1 + 12 | 0 | 0) | 0) >> 2]);
   HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround($735(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) / Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))));
   HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(40.0);
   HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($736($5_1 + 24 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2]);
  }
  $58_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]));
  global$0 = $5_1 + 48 | 0;
  return Math_fround($58_1);
 }
 
 function $733($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0, $36_1 = Math_fround(0), $39_1 = Math_fround(0), $46_1 = Math_fround(0), $50_1 = Math_fround(0), $175_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block
    }
    HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]));
    break block1;
   }
   HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($741(Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]))));
  }
  block3 : {
   block2 : {
    if (!(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) > Math_fround(HEAPF32[($31($6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break block2
    }
    $36_1 = Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2]);
    break block3;
   }
   $36_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
  }
  HEAPF32[($5_1 + 12 | 0) >> 2] = $36_1;
  $39_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($31($6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]))) + $39_1);
  $46_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  HEAPF32[($31($6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] = $46_1;
  block5 : {
   block4 : {
    if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block4
    }
    HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround($742(Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))));
    break block5;
   }
   HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  }
  $50_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
  global$0 = $5_1 + 32 | 0;
  return Math_fround($50_1);
 }
 
 function $734($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $743(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $735($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $9_1 = Math_fround(0), $31_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = Math_fround($965(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $736($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $744(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $737($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround($739($5_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $738($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround($739($5_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $739($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $15_1 = Math_fround(0), $5_1 = 0, $61_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) < Math_fround(1.0000000474974513e-03) & 1 | 0)) {
     break block
    }
    $15_1 = Math_fround(0 | 0);
    break block1;
   }
   $15_1 = Math_fround($740(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) / Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])))));
  }
  global$0 = $4_1 + 16 | 0;
  return Math_fround($15_1);
 }
 
 function $740($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0), $24_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($945(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $741($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $17_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
 }
 
 function $742($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $17_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(Math_sqrt(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
 }
 
 function $743($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $57_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!(($745($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break block1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $744($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $57_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!(($745($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break block1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $745($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $38_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return Math_fround(HEAPF32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2]) < Math_fround(HEAPF32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2]) & 1 | 0 | 0;
 }
 
 function $746($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $747(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(0 | 0)));
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $747($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $748(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $749(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  block : {
   label : while (1) {
    if (!((($750($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0) | 0) ^ -1 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = $751($4_1 + 16 | 0 | 0) | 0;
    HEAPF32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
    $752($4_1 + 16 | 0 | 0) | 0;
    continue label;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $748($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $753($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $749($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $753($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $750($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($754(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == ($754(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $752($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
  return $4_1 | 0;
 }
 
 function $753($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $37_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $755($4_1 + 12 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $754($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $755($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $756($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $757($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $31_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $727($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 68388 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $758($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $760($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $659($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $759($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0, $20_1 = Math_fround(0), $31_1 = Math_fround(0), $102_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($733($6_1 + 16 | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))));
  block1 : {
   block : {
    if (!(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) < Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) & 1 | 0)) {
     break block
    }
    $20_1 = Math_fround(1.0);
    break block1;
   }
   $20_1 = Math_fround($735(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) - Math_fround(1.0)))));
  }
  HEAPF32[($5_1 + 12 | 0) >> 2] = $20_1;
  $31_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]));
  global$0 = $5_1 + 32 | 0;
  return Math_fround($31_1);
 }
 
 function $760($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $762($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $768(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $763($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 72 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $729($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $764($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 76 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $729($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $765($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 64 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $729($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $766($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 68 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $729($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $767($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $769(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $768($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $769($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $770($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $8_1 = Math_fround(0), $37_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = Math_fround(+$771(10 | 0, +(+Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) / 20.0)));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($8_1);
 }
 
 function $771($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $10_1 = 0.0, $34_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $10_1 = +$772(+(+(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0)), +(+HEAPF64[$4_1 >> 3]));
  global$0 = $4_1 + 16 | 0;
  return +$10_1;
 }
 
 function $772($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0, $9_1 = 0.0, $31_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $9_1 = +$955(+(+HEAPF64[($4_1 + 8 | 0) >> 3]), +(+HEAPF64[$4_1 >> 3]));
  global$0 = $4_1 + 16 | 0;
  return +$9_1;
 }
 
 function $773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $29_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0;
 }
 
 function $774($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $775($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $775($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $12_1 = $87($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -60 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $545($12_1 | 0, $518($15_1 | 0) | 0 | 0);
    continue label;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $776($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $333($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $8_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $23_1 = 0, $24_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $36_1 = 0, $38_1 = 0, $198_1 = 0, $40_1 = 0, $41_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $226_1 = 0, $49_1 = 0, $243_1 = 0, $51_1 = 0, $52_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $271_1 = 0, $58_1 = 0, $285_1 = 0, $60_1 = 0, $61_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $313_1 = 0, $71_1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
  $779();
  $4_1 = 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 72 | 0) >> 2] = 7;
  HEAP32[($3_1 + 68 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 64 | 0) >> 2] = 8;
  HEAP32[($3_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 56 | 0) >> 2] = 9;
  $8_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
  HEAP32[($3_1 + 104 | 0) >> 2] = $3_1 + 55 | 0;
  HEAP32[($3_1 + 100 | 0) >> 2] = $8_1;
  $782();
  HEAP32[($3_1 + 96 | 0) >> 2] = 10;
  HEAP32[($3_1 + 92 | 0) >> 2] = $784() | 0;
  HEAP32[($3_1 + 88 | 0) >> 2] = $785() | 0;
  HEAP32[($3_1 + 84 | 0) >> 2] = 11;
  $15_1 = $787() | 0;
  $16_1 = $788() | 0;
  $17_1 = $789() | 0;
  $18_1 = $790() | 0;
  HEAP32[($3_1 + 232 | 0) >> 2] = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  $20_1 = $791() | 0;
  $21_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  HEAP32[($3_1 + 240 | 0) >> 2] = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
  $23_1 = $792() | 0;
  $24_1 = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
  HEAP32[($3_1 + 236 | 0) >> 2] = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
  $26_1 = $792() | 0;
  $27_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
  $28_1 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
  HEAP32[($3_1 + 244 | 0) >> 2] = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
  fimport$10($15_1 | 0, $16_1 | 0, $17_1 | 0, $18_1 | 0, $20_1 | 0, $21_1 | 0, $23_1 | 0, $24_1 | 0, $26_1 | 0, $27_1 | 0, $28_1 | 0, $793() | 0 | 0, HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 108 | 0) >> 2] = $3_1 + 55 | 0;
  HEAP32[($3_1 + 252 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
  HEAP32[($3_1 + 248 | 0) >> 2] = 12;
  $36_1 = HEAP32[($3_1 + 252 | 0) >> 2] | 0;
  $795(HEAP32[($3_1 + 248 | 0) >> 2] | 0 | 0);
  $38_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
  HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $38_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
  $198_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 112 | 0) >> 2] = $198_1;
  HEAP32[($3_1 + 116 | 0) >> 2] = i64toi32_i32$1;
  $40_1 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
  $41_1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
  HEAP32[($3_1 + 140 | 0) >> 2] = $36_1;
  HEAP32[($3_1 + 136 | 0) >> 2] = 66038;
  HEAP32[($3_1 + 132 | 0) >> 2] = $41_1;
  HEAP32[($3_1 + 128 | 0) >> 2] = $40_1;
  $43_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
  $44_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
  $45_1 = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
  HEAP32[($3_1 + 124 | 0) >> 2] = HEAP32[($3_1 + 132 | 0) >> 2] | 0;
  HEAP32[($3_1 + 120 | 0) >> 2] = $45_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
  $226_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $226_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $796($44_1 | 0, $3_1 + 8 | 0 | 0);
  $49_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = $49_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  $243_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 144 | 0) >> 2] = $243_1;
  HEAP32[($3_1 + 148 | 0) >> 2] = i64toi32_i32$1;
  $51_1 = HEAP32[($3_1 + 144 | 0) >> 2] | 0;
  $52_1 = HEAP32[($3_1 + 148 | 0) >> 2] | 0;
  HEAP32[($3_1 + 172 | 0) >> 2] = $43_1;
  HEAP32[($3_1 + 168 | 0) >> 2] = 66247;
  HEAP32[($3_1 + 164 | 0) >> 2] = $52_1;
  HEAP32[($3_1 + 160 | 0) >> 2] = $51_1;
  $54_1 = HEAP32[($3_1 + 172 | 0) >> 2] | 0;
  $55_1 = HEAP32[($3_1 + 168 | 0) >> 2] | 0;
  $56_1 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
  HEAP32[($3_1 + 156 | 0) >> 2] = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
  HEAP32[($3_1 + 152 | 0) >> 2] = $56_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
  $271_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = $271_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $797($55_1 | 0, $3_1 | 0);
  $58_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
  HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $58_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
  $285_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 176 | 0) >> 2] = $285_1;
  HEAP32[($3_1 + 180 | 0) >> 2] = i64toi32_i32$1;
  $60_1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
  $61_1 = HEAP32[($3_1 + 180 | 0) >> 2] | 0;
  HEAP32[($3_1 + 204 | 0) >> 2] = $54_1;
  HEAP32[($3_1 + 200 | 0) >> 2] = 66249;
  HEAP32[($3_1 + 196 | 0) >> 2] = $61_1;
  HEAP32[($3_1 + 192 | 0) >> 2] = $60_1;
  $63_1 = HEAP32[($3_1 + 204 | 0) >> 2] | 0;
  $64_1 = HEAP32[($3_1 + 200 | 0) >> 2] | 0;
  $65_1 = HEAP32[($3_1 + 192 | 0) >> 2] | 0;
  HEAP32[($3_1 + 188 | 0) >> 2] = HEAP32[($3_1 + 196 | 0) >> 2] | 0;
  HEAP32[($3_1 + 184 | 0) >> 2] = $65_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 184 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 188 | 0) >> 2] | 0;
  $313_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $313_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $798($64_1 | 0, $3_1 + 16 | 0 | 0);
  HEAP32[($3_1 + 216 | 0) >> 2] = $63_1;
  HEAP32[($3_1 + 212 | 0) >> 2] = 65758;
  HEAP32[($3_1 + 208 | 0) >> 2] = 13;
  $71_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
  $800(HEAP32[($3_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 208 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 228 | 0) >> 2] = $71_1;
  HEAP32[($3_1 + 224 | 0) >> 2] = 65754;
  HEAP32[($3_1 + 220 | 0) >> 2] = 14;
  $802(HEAP32[($3_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 220 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 256 | 0;
  return;
 }
 
 function $778($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $19_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 15;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $10_1 = $804($4_1 + 19 | 0 | 0) | 0;
  $14_1 = $805($4_1 + 19 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $19_1 = 0;
  fimport$11($6_1 | 0, $10_1 | 0, $14_1 | 0, $806() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $19_1 & 1 | 0 | 0, $19_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $779() {
  block1 : {
   block : {
    if (!((HEAPU8[(0 + 95972 | 0) >> 0] | 0) & 1 | 0)) {
     break block
    }
    break block1;
   }
   HEAP8[(0 + 95972 | 0) >> 0] = 1;
   fimport$12($807() | 0 | 0, $808() | 0 | 0);
  }
  return;
 }
 
 function $780($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($325($5_1 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $809($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0;
    break block1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $810($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $781($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $30($6_1 | 0) | 0;
  block1 : {
   block : {
    if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $811($6_1 | 0, (HEAP32[($5_1 + 8 | 0) >> 2] | 0) - (HEAP32[$5_1 >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
    break block1;
   }
   block2 : {
    if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 > (HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block2
    }
    $307($6_1 | 0, (HEAP32[$6_1 >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
   }
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $782() {
  
 }
 
 function $783($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $822(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $784() {
  var $2_1 = 0;
  return 0 | 0;
 }
 
 function $785() {
  var $2_1 = 0;
  return 0 | 0;
 }
 
 function $786($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break block
   }
   $34($4_1 | 0) | 0;
   $2587($4_1 | 0, 12 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $787() {
  var $3_1 = 0;
  return $823() | 0 | 0;
 }
 
 function $788() {
  var $3_1 = 0;
  return $824() | 0 | 0;
 }
 
 function $789() {
  var $3_1 = 0;
  return $825() | 0 | 0;
 }
 
 function $790() {
  var $2_1 = 0;
  return 0 | 0;
 }
 
 function $791() {
  var $2_1 = 0;
  return 69074 | 0;
 }
 
 function $792() {
  var $2_1 = 0;
  return 69077 | 0;
 }
 
 function $793() {
  var $2_1 = 0;
  return 69079 | 0;
 }
 
 function $794() {
  var $1_1 = 0, $7_1 = 0;
  $1_1 = $2583(12 | 0) | 0;
  $8($1_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $795($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[$3_1 >> 2] = 16;
  $5_1 = $787() | 0;
  $9_1 = $827($3_1 + 7 | 0 | 0) | 0;
  $13_1 = $828($3_1 + 7 | 0 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
  fimport$13($5_1 | 0, $9_1 | 0, $13_1 | 0, $791() | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $796($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 17;
  $8_1 = $787() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $832($4_1 + 11 | 0 | 0) | 0;
  $17_1 = $833($4_1 + 11 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $26_1 = 0;
  fimport$14($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $834() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $835($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0, $26_1 & 1 | 0 | 0, $26_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $797($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 18;
  $8_1 = $787() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $840($4_1 + 11 | 0 | 0) | 0;
  $17_1 = $841($4_1 + 11 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $26_1 = 0;
  fimport$14($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $842() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $843($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0, $26_1 & 1 | 0 | 0, $26_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $798($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 19;
  $8_1 = $787() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $847($4_1 + 11 | 0 | 0) | 0;
  $17_1 = $848($4_1 + 11 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $26_1 = 0;
  fimport$14($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $849() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $850($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0, $26_1 & 1 | 0 | 0, $26_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $799($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  block1 : {
   block : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < ($30(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $813($0_1 | 0, $812(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
    break block1;
   }
   $814($0_1 | 0) | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $800($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $24_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 20;
  $6_1 = $787() | 0;
  $7_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $11_1 = $855($4_1 + 19 | 0 | 0) | 0;
  $15_1 = $856($4_1 + 19 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $24_1 = 0;
  fimport$14($6_1 | 0, $7_1 | 0, $11_1 | 0, $15_1 | 0, $857() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $858($4_1 + 20 | 0 | 0) | 0 | 0, 0 | 0, $24_1 & 1 | 0 | 0, $24_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $801($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $15_1 = Math_fround(0), $48_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $15_1 = Math_fround(HEAPF32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2]);
  HEAPF32[($31(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = $15_1;
  global$0 = $5_1 + 16 | 0;
  return 1 & 1 | 0 | 0;
 }
 
 function $802($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $24_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 21;
  $6_1 = $787() | 0;
  $7_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $11_1 = $896($4_1 + 19 | 0 | 0) | 0;
  $15_1 = $897($4_1 + 19 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $24_1 = 0;
  fimport$14($6_1 | 0, $7_1 | 0, $11_1 | 0, $15_1 | 0, $898() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $899($4_1 + 20 | 0 | 0) | 0 | 0, 0 | 0, $24_1 & 1 | 0 | 0, $24_1 & 1 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $803($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $12_1 = 0, $35_1 = 0, $129_1 = 0;
  $11_1 = global$0 - 64 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 28 | 0) >> 2] = $8_1;
  $12_1 = HEAP32[($11_1 + 60 | 0) >> 2] | 0;
  FUNCTION_TABLE[$12_1 | 0]($11_1 + 16 | 0, $902(HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0) | 0, $902(HEAP32[($11_1 + 52 | 0) >> 2] | 0 | 0) | 0, $902(HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0) | 0, $902(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) | 0, $902(HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0) | 0, $902(HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0, $902(HEAP32[($11_1 + 32 | 0) >> 2] | 0 | 0) | 0, $902(HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) | 0);
  $35_1 = $903($11_1 + 16 | 0 | 0) | 0;
  $34($11_1 + 16 | 0 | 0) | 0;
  global$0 = $11_1 + 64 | 0;
  return $35_1 | 0;
 }
 
 function $804($0_1) {
  $0_1 = $0_1 | 0;
  var $12_1 = 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 9 | 0;
 }
 
 function $805($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $904() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $806() {
  var $2_1 = 0;
  return 69252 | 0;
 }
 
 function $807() {
  var $3_1 = 0;
  return $815() | 0 | 0;
 }
 
 function $808() {
  var $3_1 = 0;
  return $816() | 0 | 0;
 }
 
 function $809($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $336($4_1 + 12 | 0 | 0, $5_1 | 0, 1 | 0) | 0;
  $817($327($5_1 | 0) | 0 | 0, $337(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 4 | 0;
  $339($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $810($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0, $90_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $327($5_1 | 0) | 0;
  $329($4_1 | 0, $328($5_1 | 0, ($30($5_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $30($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $817(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $337(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0;
  $331($5_1 | 0, $4_1 | 0);
  $22_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $332($4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return $22_1 | 0;
 }
 
 function $811($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((((HEAP32[($325($6_1 | 0) | 0) >> 2] | 0) - (HEAP32[($6_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 >= (HEAP32[($5_1 + 40 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $820($6_1 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
    break block1;
   }
   HEAP32[($5_1 + 32 | 0) >> 2] = $327($6_1 | 0) | 0;
   $329($5_1 + 12 | 0 | 0, $328($6_1 | 0, ($30($6_1 | 0) | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $30($6_1 | 0) | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   $821($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
   $331($6_1 | 0, $5_1 + 12 | 0 | 0);
   $332($5_1 + 12 | 0 | 0) | 0;
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $812($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function $813($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $883($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $814($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $884($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $815() {
  var $2_1 = 0;
  return 68424 | 0;
 }
 
 function $816() {
  var $2_1 = 0;
  return 94924 | 0;
 }
 
 function $817($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $818(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $818($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $819(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $819($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$6_1 >> 2] = Math_fround(HEAPF32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2]);
  return $6_1 | 0;
 }
 
 function $820($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $24_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $336($5_1 + 8 | 0 | 0, $6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $817($327($6_1 | 0) | 0 | 0, $337(HEAP32[$5_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    $24_1 = (HEAP32[$5_1 >> 2] | 0) + 4 | 0;
    HEAP32[$5_1 >> 2] = $24_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $24_1;
    continue label;
   };
  }
  $339($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $821($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $348($5_1 + 8 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $817($345($6_1 | 0) | 0 | 0, $337(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0;
    continue label;
   };
  }
  $349($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $822($0_1) {
  $0_1 = $0_1 | 0;
  var $12_1 = 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 68920 | 0;
 }
 
 function $823() {
  var $2_1 = 0;
  return 68920 | 0;
 }
 
 function $824() {
  var $2_1 = 0;
  return 68964 | 0;
 }
 
 function $825() {
  var $2_1 = 0;
  return 69020 | 0;
 }
 
 function $826($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $829(FUNCTION_TABLE[HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0]() | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $827($0_1) {
  $0_1 = $0_1 | 0;
  var $12_1 = 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1 | 0;
 }
 
 function $828($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $830() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $829($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $830() {
  var $2_1 = 0;
  return 69084 | 0;
 }
 
 function $831($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $13_1 = 0, $19_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  $7_1 = $836(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
  $10_1 = HEAP32[$8_1 >> 2] | 0;
  $13_1 = $7_1 + ($9_1 >> 1 | 0) | 0;
  block1 : {
   block : {
    if (!($9_1 & 1 | 0)) {
     break block
    }
    $19_1 = HEAP32[((HEAP32[$13_1 >> 2] | 0) + $10_1 | 0) >> 2] | 0;
    break block1;
   }
   $19_1 = $10_1;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($837(Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]))));
  FUNCTION_TABLE[$19_1 | 0]($13_1, $5_1);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $832($0_1) {
  $0_1 = $0_1 | 0;
  var $12_1 = 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $838() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $834() {
  var $2_1 = 0;
  return 69100 | 0;
 }
 
 function $835($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $40_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2583(8 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $836($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $837($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $14_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
 }
 
 function $838() {
  var $2_1 = 0;
  return 69088 | 0;
 }
 
 function $839($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $14_1 = 0, $20_1 = 0, $8_1 = 0, $23_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 16 | 0) >> 2] = $3_1;
  $8_1 = $836(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $10_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
  $11_1 = HEAP32[$9_1 >> 2] | 0;
  $14_1 = $8_1 + ($10_1 >> 1 | 0) | 0;
  block1 : {
   block : {
    if (!($10_1 & 1 | 0)) {
     break block
    }
    $20_1 = HEAP32[((HEAP32[$14_1 >> 2] | 0) + $11_1 | 0) >> 2] | 0;
    break block1;
   }
   $20_1 = $11_1;
  }
  $23_1 = $844(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround($837(Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]))));
  FUNCTION_TABLE[$20_1 | 0]($14_1, $23_1, $6_1 + 12 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $840($0_1) {
  $0_1 = $0_1 | 0;
  var $12_1 = 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $841($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $845() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $842() {
  var $2_1 = 0;
  return 69136 | 0;
 }
 
 function $843($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $40_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2583(8 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $844($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $845() {
  var $2_1 = 0;
  return 69120 | 0;
 }
 
 function $846($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $18_1 = 0, $6_1 = 0, $24_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $851(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  $9_1 = HEAP32[$7_1 >> 2] | 0;
  $12_1 = $6_1 + ($8_1 >> 1 | 0) | 0;
  block1 : {
   block : {
    if (!($8_1 & 1 | 0)) {
     break block
    }
    $18_1 = HEAP32[((HEAP32[$12_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0;
    break block1;
   }
   $18_1 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = FUNCTION_TABLE[$18_1 | 0]($12_1) | 0;
  $24_1 = $852($4_1 + 4 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $24_1 | 0;
 }
 
 function $847($0_1) {
  $0_1 = $0_1 | 0;
  var $12_1 = 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $848($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $853() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $849() {
  var $2_1 = 0;
  return 69152 | 0;
 }
 
 function $850($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $40_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2583(8 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $851($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $852($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $853() {
  var $2_1 = 0;
  return 69144 | 0;
 }
 
 function $854($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $61_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $7_1 = HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  FUNCTION_TABLE[$7_1 | 0]($5_1 + 12 | 0, $859(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0, $844(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0);
  i64toi32_i32$1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $15_1 = $860($5_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $15_1 | 0;
 }
 
 function $855($0_1) {
  $0_1 = $0_1 | 0;
  var $12_1 = 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $856($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $861() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $857() {
  var $2_1 = 0;
  return 69168 | 0;
 }
 
 function $858($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0, $35_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2583(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $859($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $860($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $28_1 = 0, $92_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    if (!(($862($0_1 | 0) | 0) & 1 | 0)) {
     break block
    }
    $864($3_1 + 16 | 0 | 0, $863($0_1 | 0) | 0 | 0) | 0;
    HEAP32[($3_1 + 28 | 0) >> 2] = $865($3_1 + 16 | 0 | 0) | 0;
    $866($3_1 + 16 | 0 | 0) | 0;
    break block1;
   }
   $867($3_1 + 4 | 0 | 0);
   HEAP32[($3_1 + 28 | 0) >> 2] = $865($3_1 + 4 | 0 | 0) | 0;
   $866($3_1 + 4 | 0 | 0) | 0;
  }
  $28_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $28_1 | 0;
 }
 
 function $861() {
  var $2_1 = 0;
  return 69156 | 0;
 }
 
 function $862($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = ($868(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $863($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $870(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $46_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $871($4_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $874($5_1 | 0, fimport$15($872() | 0 | 0, $873($4_1 | 0) | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $865($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = $869(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $866($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $43_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  block : {
   if (!(($875($4_1 | 0) | 0) & 1 | 0)) {
    break block
   }
   fimport$16($876($4_1 | 0) | 0 | 0);
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  }
  $10_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $867($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $874($0_1 | 0, 2 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $868($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $869($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $32_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $876($4_1 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $870($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $871($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $58_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $877($5_1 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $4_1 + 12 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
  $879(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($878(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0))));
  $880(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $872() {
  var $3_1 = 0;
  return $881() | 0 | 0;
 }
 
 function $873($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $882(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $874($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $33_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $971() | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $875($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 > 8 >>> 0 & 1 | 0 | 0;
 }
 
 function $876($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $877($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $878($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2]));
 }
 
 function $879($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 8 | 0;
  return;
 }
 
 function $880($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $881() {
  var $2_1 = 0;
  return 94924 | 0;
 }
 
 function $882($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $883($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $885($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $884($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $890($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $885($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $886($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $886($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $887($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $887($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $888($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $888($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $889($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $889($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $28_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2]);
  HEAP8[($5_1 + 4 | 0) >> 0] = 1;
  return $5_1 | 0;
 }
 
 function $890($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $891($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $891($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $892($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $892($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $893($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $893($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $894($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $894($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[$4_1 >> 0] = 0;
  HEAP8[($4_1 + 4 | 0) >> 0] = 0;
  return $4_1 | 0;
 }
 
 function $895($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $21_1 = 0, $79_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 16 | 0) >> 2] = $3_1;
  $8_1 = HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  $10_1 = $859(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $12_1 = $844(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround($837(Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]))));
  $21_1 = ($900((FUNCTION_TABLE[$8_1 | 0]($10_1, $12_1, $6_1 + 12 | 0) | 0) & 1 | 0 | 0) | 0) & 1 | 0;
  global$0 = $6_1 + 32 | 0;
  return $21_1 | 0;
 }
 
 function $896($0_1) {
  $0_1 = $0_1 | 0;
  var $12_1 = 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $897($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $901() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $898() {
  var $2_1 = 0;
  return 69200 | 0;
 }
 
 function $899($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0, $35_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2583(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $900($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 14 | 0) >> 0] = $0_1;
  return (HEAPU8[($3_1 + 14 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $901() {
  var $2_1 = 0;
  return 69184 | 0;
 }
 
 function $902($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $903($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $28_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = $2583(12 | 0) | 0;
  $905($5_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $904() {
  var $2_1 = 0;
  return 69216 | 0;
 }
 
 function $905($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $85_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $906($361(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $907($5_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, $4_1 + 3 | 0 | 0) | 0;
  $908($5_1 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, $30(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $906($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $907($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $39_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $120($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $909($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $908($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $114($6_1 + 4 | 0 | 0, $7_1 | 0) | 0;
  $910($6_1 + 8 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0);
  block : {
   if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break block
   }
   $911($7_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
   $912($7_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  }
  $913($6_1 + 8 | 0 | 0);
  $914($6_1 + 8 | 0 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $909($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $910($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $915($0_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $911($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  block : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($341($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $342($5_1 | 0);
   wasm2js_trap();
  }
  $346($4_1 | 0, $327($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  $20_1 = (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($325($5_1 | 0) | 0) >> 2] = $20_1;
  $353($5_1 | 0, 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $912($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $336($6_1 + 4 | 0 | 0, $7_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $916($327($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $339($6_1 + 4 | 0 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $913($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] = 1;
  return;
 }
 
 function $914($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $36_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  block : {
   if ((HEAPU8[($4_1 + 4 | 0) >> 0] | 0) & 1 | 0) {
    break block
   }
   $115($4_1 | 0);
  }
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $915($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP8[($5_1 + 4 | 0) >> 0] = 0;
  return $5_1 | 0;
 }
 
 function $916($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $20_1 = 0, $76_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $917($6_1 + 8 | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 4 | 0) >> 2] = $919(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $918(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $20_1 = $920(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $20_1 | 0;
 }
 
 function $917($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $921($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $918($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $923(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $919($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $10_1 = 0, $41_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $10_1 = $922(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $920($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $924(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $921($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $918(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = $918(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $925($0_1 | 0, $5_1 + 4 | 0 | 0, $5_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $922($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $47_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $926($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  $12_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $12_1 | 0;
 }
 
 function $923($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $337(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $924($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $51_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $14_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) - ($337(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) | 0) >> 2 | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $925($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $36_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $926($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
  $927($0_1 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $927($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $3_1;
  $917($6_1 + 28 | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0);
  $928($6_1 + 20 | 0 | 0, $6_1 + 19 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, $918(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[($6_1 + 12 | 0) >> 2] = $929(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $920(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $930($0_1 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0);
  global$0 = $6_1 + 48 | 0;
  return;
 }
 
 function $928($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[$7_1 >> 2] = $4_1;
  $931($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$7_1 >> 2] | 0 | 0);
  global$0 = $7_1 + 16 | 0;
  return;
 }
 
 function $929($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $932(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $930($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $925($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $931($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) - (HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0) >> 2 | 0;
  $933(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  $934($0_1 | 0, $6_1 + 24 | 0 | 0, $6_1 + 12 | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $932($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $920(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $933($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $20_1 = 0, $12_1 = 0, $13_1 = 0, $71_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  block : {
   if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break block
   }
   $12_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $13_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   $20_1 = (((HEAP32[$5_1 >> 2] | 0) - 1 | 0) << 2 | 0) + 4 | 0;
   block1 : {
    if (!$20_1) {
     break block1
    }
    wasm2js_memory_copy($12_1, $13_1, $20_1);
   }
  }
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $934($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $935($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $935($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $36_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $936() {
  $116();
  return;
 }
 
 function $937($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0.0, $1$hi = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $65_1 = 0.0;
  block : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $12_1 & 2147483647 | 0;
   if ($2_1 >>> 0 < 1072693248 >>> 0) {
    break block
   }
   block1 : {
    i64toi32_i32$1 = $1$hi;
    if ($2_1 + -1072693248 | 0 | $1_1 | 0) {
     break block1
    }
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $13_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $14_1 = 0
      } else {
       $14_1 = 1
      }
      $15_1 = $14_1;
     } else {
      $15_1 = 0
     }
     $13_1 = $15_1;
    }
    return +($13_1 ? 0.0 : 3.141592653589793);
   }
   return +(0.0 / ($0_1 - $0_1));
  }
  block3 : {
   block2 : {
    if ($2_1 >>> 0 > 1071644671 >>> 0) {
     break block2
    }
    $3_1 = 1.5707963267948966;
    if ($2_1 >>> 0 < 1012924417 >>> 0) {
     break block3
    }
    return +(6.123233995736766e-17 - $0_1 * +$938(+($0_1 * $0_1)) - $0_1 + 1.5707963267948966);
   }
   block4 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break block4
    }
    $0_1 = ($0_1 + 1.0) * .5;
    $3_1 = +$983(+$0_1);
    $0_1 = 1.5707963267948966 - ($3_1 + ($3_1 * +$938(+$0_1) + -6.123233995736766e-17));
    return +($0_1 + $0_1);
   }
   $3_1 = (1.0 - $0_1) * .5;
   $4_1 = +$983(+$3_1);
   $65_1 = $4_1 * +$938(+$3_1);
   wasm2js_scratch_store_f64(+$4_1);
   i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $0_1 = $65_1 + ($3_1 - $0_1 * $0_1) / ($4_1 + $0_1) + $0_1;
   $3_1 = $0_1 + $0_1;
  }
  return +$3_1;
 }
 
 function $938($0_1) {
  $0_1 = +$0_1;
  return +($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / ($0_1 * ($0_1 * ($0_1 * ($0_1 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0));
 }
 
 function $939($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0.0, $1_1 = 0, $3_1 = 0.0, $1$hi = 0, $15_1 = 0, $4_1 = 0.0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $71_1 = 0.0, $89_1 = 0.0, $90_1 = 0.0;
  block : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $15_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $15_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $15_1 & 2147483647 | 0;
   if ($2_1 >>> 0 < 1072693248 >>> 0) {
    break block
   }
   block1 : {
    i64toi32_i32$1 = $1$hi;
    if ($2_1 + -1072693248 | 0 | $1_1 | 0) {
     break block1
    }
    return +($0_1 * 1.5707963267948966 + 7.52316384526264e-37);
   }
   return +(0.0 / ($0_1 - $0_1));
  }
  block3 : {
   block2 : {
    if ($2_1 >>> 0 > 1071644671 >>> 0) {
     break block2
    }
    if (($2_1 + -1048576 | 0) >>> 0 < 1044381696 >>> 0) {
     break block3
    }
    return +($0_1 * +$940(+($0_1 * $0_1)) + $0_1);
   }
   $3_1 = (1.0 - +$947(+$0_1)) * .5;
   $0_1 = +$983(+$3_1);
   $4_1 = +$940(+$3_1);
   block5 : {
    block4 : {
     if ($2_1 >>> 0 < 1072640819 >>> 0) {
      break block4
     }
     $0_1 = $0_1 * $4_1 + $0_1;
     $0_1 = 1.5707963267948966 - ($0_1 + $0_1 + -6.123233995736766e-17);
     break block5;
    }
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
    $5_1 = +wasm2js_scratch_load_f64();
    $71_1 = ($0_1 + $0_1) * $4_1;
    $0_1 = ($3_1 - $5_1 * $5_1) / ($0_1 + $5_1);
    $0_1 = .7853981633974483 - ($5_1 + $5_1) - ($71_1 - (6.123233995736766e-17 - ($0_1 + $0_1))) + .7853981633974483;
   }
   $89_1 = -$0_1;
   $90_1 = $0_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
    $16_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17_1 = 0
     } else {
      $17_1 = 1
     }
     $18_1 = $17_1;
    } else {
     $18_1 = 0
    }
    $16_1 = $18_1;
   }
   $0_1 = $16_1 ? $89_1 : $90_1;
  }
  return +$0_1;
 }
 
 function $940($0_1) {
  $0_1 = +$0_1;
  return +($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / ($0_1 * ($0_1 * ($0_1 * ($0_1 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0));
 }
 
 function $941($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  return Math_fround(Math_fround($1_1 * Math_fround($942(Math_fround($0_1 ? Math_fround(-$1_1) : $1_1)))));
 }
 
 function $942($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF32[($1_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]));
 }
 
 function $943($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround($941($0_1 | 0, Math_fround(Math_fround(1584563250285286751870879.0e5)))));
 }
 
 function $944($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround($941($0_1 | 0, Math_fround(Math_fround(2.524354896707238e-29)))));
 }
 
 function $945($0_1) {
  $0_1 = Math_fround($0_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3_1 = 0.0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $1_1 = 0, $2_1 = Math_fround(0), $4_1 = 0.0, $5_1 = 0.0, $6_1 = 0, $18_1 = 0, $55_1 = 0.0, $6$hi = 0, $59$hi = 0, $65_1 = 0, $65$hi = 0;
  block1 : {
   block : {
    $1_1 = ($946(Math_fround($0_1)) | 0) & 2047 | 0;
    if ($1_1 >>> 0 < ($946(Math_fround(Math_fround(88.0))) | 0) >>> 0) {
     break block
    }
    $2_1 = Math_fround(0.0);
    if ($0_1 == Math_fround(-Infinity)) {
     break block1
    }
    block2 : {
     if ($1_1 >>> 0 < ($946(Math_fround(Math_fround(Infinity))) | 0) >>> 0) {
      break block2
     }
     return Math_fround(Math_fround($0_1 + $0_1));
    }
    block3 : {
     if (!($0_1 > Math_fround(88.72283172607422))) {
      break block3
     }
     return Math_fround(Math_fround($943(0 | 0)));
    }
    if (!($0_1 < Math_fround(-103.97207641601562))) {
     break block
    }
    return Math_fround(Math_fround($944(0 | 0)));
   }
   $3_1 = +HEAPF64[(0 + 69560 | 0) >> 3] * +$0_1;
   $4_1 = +HEAPF64[(0 + 69552 | 0) >> 3];
   $5_1 = $3_1 + $4_1;
   $3_1 = $3_1 - ($5_1 - $4_1);
   $55_1 = (+HEAPF64[(0 + 69568 | 0) >> 3] * $3_1 + +HEAPF64[(0 + 69576 | 0) >> 3]) * ($3_1 * $3_1) + (+HEAPF64[(0 + 69584 | 0) >> 3] * $3_1 + 1.0);
   wasm2js_scratch_store_f64(+$5_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $6_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 47;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $18_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $59$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$0 = (($6_1 & 31 | 0) << 3 | 0) + 69264 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $65_1 = i64toi32_i32$1;
   $65$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $59$hi;
   i64toi32_i32$0 = $18_1;
   i64toi32_i32$1 = $65$hi;
   i64toi32_i32$3 = $65_1;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
   $2_1 = Math_fround($55_1 * +wasm2js_scratch_load_f64());
  }
  return Math_fround($2_1);
 }
 
 function $946($0_1) {
  $0_1 = Math_fround($0_1);
  return (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) >>> 20 | 0 | 0;
 }
 
 function $947($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $948($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $3_1 = 0, $3$hi = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $2$hi = 0, $7_1 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$6 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $62$hi = 0, $81$hi = 0, $133_1 = 0, $133$hi = 0, $136$hi = 0, $141$hi = 0;
  block1 : {
   block : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $3_1 = $25_1;
    $3$hi = i64toi32_i32$1;
    if (!($3_1 | i64toi32_i32$1 | 0)) {
     break block
    }
    i64toi32_i32$1 = $949(+$1_1) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    i64toi32_i32$0 = 2146435072;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break block
    }
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 52;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $26_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $26_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $26_1 & 2047 | 0;
    if (($6_1 | 0) != (2047 | 0)) {
     break block1
    }
   }
   $1_1 = $0_1 * $1_1;
   return +($1_1 / $1_1);
  }
  block2 : {
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $27_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $27_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $5_1 = $27_1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$0 = $3_1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
    break block2
   }
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = $3_1;
   return +((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) | 0 ? $0_1 * 0.0 : $0_1);
  }
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $28_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $28_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $7_1 = $28_1 & 2047 | 0;
  block5 : {
   block3 : {
    if ($6_1) {
     break block3
    }
    $6_1 = 0;
    block4 : {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 12;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $29_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $29_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $3_1 = $29_1;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
      $30_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $31_1 = 0
       } else {
        $31_1 = 1
       }
       $32_1 = $31_1;
      } else {
       $32_1 = 0
      }
      $30_1 = $32_1;
     }
     if ($30_1) {
      break block4
     }
     label : while (1) {
      $6_1 = $6_1 + -1 | 0;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $33_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $33_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $3_1 = $33_1;
      $3$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$3 | 0)) {
       $34_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$0 >>> 0) {
         $35_1 = 0
        } else {
         $35_1 = 1
        }
        $36_1 = $35_1;
       } else {
        $36_1 = 0
       }
       $34_1 = $36_1;
      }
      if ($34_1) {
       continue label
      }
      break label;
     };
    }
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = 0;
    $62$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = $62$hi;
    i64toi32_i32$3 = 1 - $6_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $37_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $37_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $3_1 = $37_1;
    $3$hi = i64toi32_i32$2;
    break block5;
   }
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 1048576;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $3$hi = i64toi32_i32$1;
  }
  block8 : {
   block6 : {
    if ($7_1) {
     break block6
    }
    $7_1 = 0;
    block7 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 12;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $38_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $38_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $5_1 = $38_1;
     $5$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
      $39_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $40_1 = 0
       } else {
        $40_1 = 1
       }
       $41_1 = $40_1;
      } else {
       $41_1 = 0
      }
      $39_1 = $41_1;
     }
     if ($39_1) {
      break block7
     }
     label1 : while (1) {
      $7_1 = $7_1 + -1 | 0;
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $42_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $42_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $5_1 = $42_1;
      $5$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$3 | 0)) {
       $43_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$0 >>> 0) {
         $44_1 = 0
        } else {
         $44_1 = 1
        }
        $45_1 = $44_1;
       } else {
        $45_1 = 0
       }
       $43_1 = $45_1;
      }
      if ($43_1) {
       continue label1
      }
      break label1;
     };
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = 0;
    $81$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = $81$hi;
    i64toi32_i32$3 = 1 - $7_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $46_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $46_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $2_1 = $46_1;
    $2$hi = i64toi32_i32$2;
    break block8;
   }
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 1048576;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
  }
  block9 : {
   if (($6_1 | 0) <= ($7_1 | 0)) {
    break block9
   }
   label2 : while (1) {
    block10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     $5_1 = i64toi32_i32$4;
     $5$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
      $47_1 = 1
     } else {
      if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $48_1 = 0
       } else {
        $48_1 = 1
       }
       $49_1 = $48_1;
      } else {
       $49_1 = 0
      }
      $47_1 = $49_1;
     }
     if ($47_1) {
      break block10
     }
     i64toi32_i32$1 = $5$hi;
     $3_1 = $5_1;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break block10
     }
     return +($0_1 * 0.0);
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     $50_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
     $50_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    }
    $3_1 = $50_1;
    $3$hi = i64toi32_i32$1;
    $6_1 = $6_1 + -1 | 0;
    if (($6_1 | 0) > ($7_1 | 0)) {
     continue label2
    }
    break label2;
   };
   $6_1 = $7_1;
  }
  block11 : {
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
   $5_1 = i64toi32_i32$2;
   $5$hi = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
    $51_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0) {
      $52_1 = 0
     } else {
      $52_1 = 1
     }
     $53_1 = $52_1;
    } else {
     $53_1 = 0
    }
    $51_1 = $53_1;
   }
   if ($51_1) {
    break block11
   }
   i64toi32_i32$1 = $5$hi;
   $3_1 = $5_1;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break block11
   }
   return +($0_1 * 0.0);
  }
  block13 : {
   block12 : {
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 1048575;
    i64toi32_i32$4 = -1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
     break block12
    }
    i64toi32_i32$3 = i64toi32_i32$5;
    $5_1 = $3_1;
    $5$hi = i64toi32_i32$3;
    break block13;
   }
   label3 : while (1) {
    $6_1 = $6_1 + -1 | 0;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$5 = 524288;
    i64toi32_i32$1 = 0;
    $7_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $54_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $54_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $5_1 = $54_1;
    $5$hi = i64toi32_i32$3;
    $3_1 = $5_1;
    $3$hi = i64toi32_i32$3;
    if ($7_1) {
     continue label3
    }
    break label3;
   };
  }
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$4 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$5 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $3_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
  $3$hi = i64toi32_i32$1;
  block15 : {
   block14 : {
    if (($6_1 | 0) < (1 | 0)) {
     break block14
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = -1048576;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $133_1 = i64toi32_i32$0;
    $133$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 52;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $55_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $55_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $136$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $133$hi;
    i64toi32_i32$2 = $133_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$5 = $55_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$1;
    break block15;
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$1 = 0;
   $141$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$2 = $141$hi;
   i64toi32_i32$5 = 1 - $6_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $56_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $56_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $5_1 = $56_1;
   $5$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$3 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$5 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $949($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $950($0_1) {
  $0_1 = +$0_1;
  $0_1 = $0_1 - $0_1;
  return +($0_1 / $0_1);
 }
 
 function $951($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  return +($1_1 * +$952(+($0_1 ? -$1_1 : $1_1)));
 }
 
 function $952($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($1_1 + 8 | 0) >> 3]);
 }
 
 function $953($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$951($0_1 | 0, +(3105036184601417870297958.0e207)));
 }
 
 function $954($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$951($0_1 | 0, +(1.2882297539194267e-231)));
 }
 
 function $955($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $11_1 = 0.0, $9_1 = 0, i64toi32_i32$4 = 0, $9$hi = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $24_1 = 0, $10_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $12_1 = 0.0, $10$hi = 0, $55_1 = 0.0, $57_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $956(+$0_1) | 0;
  $4_1 = $956(+$1_1) | 0;
  $5_1 = $4_1 & 2047 | 0;
  $6_1 = $5_1 + -1086 | 0;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $8$hi = i64toi32_i32$0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $9_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $9$hi = i64toi32_i32$0;
  block3 : {
   block1 : {
    block : {
     if (($3_1 + -2047 | 0) >>> 0 < -2046 >>> 0) {
      break block
     }
     $7_1 = 0;
     if ($6_1 >>> 0 > -129 >>> 0) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$0 = $8$hi;
     if (!($957($8_1 | 0, i64toi32_i32$0 | 0) | 0)) {
      break block2
     }
     $11_1 = 1.0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = 1072693248;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break block3
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $24_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $24_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $10_1 = $24_1;
     $10$hi = i64toi32_i32$0;
     if (!($10_1 | i64toi32_i32$0 | 0)) {
      break block3
     }
     block5 : {
      block4 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 1;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $25_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $9_1 = $25_1;
       $9$hi = i64toi32_i32$3;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$2 = -2097152;
       i64toi32_i32$1 = 0;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
        break block4
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = -2097152;
       i64toi32_i32$2 = 1;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
        break block5
       }
      }
      $11_1 = $0_1 + $1_1;
      break block3;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$0 = 2145386496;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break block3
     }
     $55_1 = $1_1 * $1_1;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$1 = 2145386496;
     i64toi32_i32$0 = 0;
     $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$0 = $8_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     $11_1 = $57_1 ^ $26_1 | 0 ? 0.0 : $55_1;
     break block3;
    }
    block6 : {
     i64toi32_i32$0 = $9$hi;
     if (!($957($9_1 | 0, i64toi32_i32$0 | 0) | 0)) {
      break block6
     }
     $11_1 = $0_1 * $0_1;
     block7 : {
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $29_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $30_1 = 0
        } else {
         $30_1 = 1
        }
        $31_1 = $30_1;
       } else {
        $31_1 = 0
       }
       $29_1 = $31_1;
      }
      if ($29_1) {
       break block7
      }
      i64toi32_i32$1 = $8$hi;
      $11_1 = ($958($8_1 | 0, i64toi32_i32$1 | 0) | 0 | 0) == (1 | 0) ? -$11_1 : $11_1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $32_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $33_1 = 0
       } else {
        $33_1 = 1
       }
       $34_1 = $33_1;
      } else {
       $34_1 = 0
      }
      $32_1 = $34_1;
     }
     if ($32_1) {
      break block3
     }
     $11_1 = +$959(+(1.0 / $11_1));
     break block3;
    }
    $7_1 = 0;
    block8 : {
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
      $35_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $36_1 = 0
       } else {
        $36_1 = 1
       }
       $37_1 = $36_1;
      } else {
       $37_1 = 0
      }
      $35_1 = $37_1;
     }
     if ($35_1) {
      break block8
     }
     block9 : {
      i64toi32_i32$3 = $8$hi;
      $7_1 = $958($8_1 | 0, i64toi32_i32$3 | 0) | 0;
      if ($7_1) {
       break block9
      }
      $11_1 = +$950(+$0_1);
      break block3;
     }
     $3_1 = $3_1 & 2047 | 0;
     wasm2js_scratch_store_f64(+$0_1);
     i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $9_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $9$hi = i64toi32_i32$2;
     $7_1 = (($7_1 | 0) == (1 | 0)) << 18 | 0;
    }
    block10 : {
     if ($6_1 >>> 0 > -129 >>> 0) {
      break block10
     }
     $11_1 = 1.0;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$0 = 1072693248;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break block3
     }
     block11 : {
      if ($5_1 >>> 0 > 957 >>> 0) {
       break block11
      }
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$2 = 1072693248;
      i64toi32_i32$0 = 0;
      $11_1 = (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0 ? $1_1 : -$1_1) + 1.0;
      break block3;
     }
     block12 : {
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$0 = $9_1;
      i64toi32_i32$3 = 1072693248;
      i64toi32_i32$2 = 0;
      if (($4_1 >>> 0 > 2047 >>> 0 | 0) == (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0 | 0)) {
       break block12
      }
      $11_1 = +$953(0 | 0);
      break block3;
     }
     $11_1 = +$954(0 | 0);
     break block3;
    }
    if ($3_1) {
     break block1
    }
    wasm2js_scratch_store_f64(+($0_1 * 4503599627370496.0));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = -54525952;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -134217728;
   i64toi32_i32$0 = $8$hi & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $11_1 = +wasm2js_scratch_load_f64();
   i64toi32_i32$0 = $9$hi;
   $12_1 = +$960($9_1 | 0, i64toi32_i32$0 | 0, $2_1 + 8 | 0 | 0);
   wasm2js_scratch_store_f64(+$12_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -134217728;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $11_1 = +$961(+($11_1 * $0_1), +(($1_1 - $11_1) * $0_1 + $1_1 * (+HEAPF64[($2_1 + 8 | 0) >> 3] + ($12_1 - $0_1))), $7_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return +$11_1;
 }
 
 function $956($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $6_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $6_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return $6_1 | 0;
 }
 
 function $957($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $8_1 = 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  i64toi32_i32$0 = $8_1;
  i64toi32_i32$2 = 2097152;
  i64toi32_i32$3 = 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 2097152;
  i64toi32_i32$3 = 1;
  return i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0 | 0;
 }
 
 function $958($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, $14_1 = 0, $15_1 = 0, $3_1 = 0, $3$hi = 0, $14$hi = 0, $17$hi = 0;
  $1_1 = 0;
  block : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $14_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $14_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $14_1 & 2047 | 0;
   if ($2_1 >>> 0 < 1023 >>> 0) {
    break block
   }
   $1_1 = 2;
   if ($2_1 >>> 0 > 1075 >>> 0) {
    break block
   }
   $1_1 = 0;
   i64toi32_i32$1 = 0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = 1075 - $2_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $15_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $15_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $3_1 = $15_1;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $17$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break block
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $1_1 = !(i64toi32_i32$3 & i64toi32_i32$2 | 0 | i64toi32_i32$1 | 0) ? 2 : 1;
  }
  return $1_1 | 0;
 }
 
 function $959($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($1_1 + 8 | 0) >> 3]);
 }
 
 function $960($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0.0, $6_1 = 0.0, i64toi32_i32$4 = 0, $5_1 = 0.0, $7_1 = 0.0, $9_1 = 0, $2_1 = 0, $2$hi = 0, $27_1 = 0, $29_1 = 0, $8_1 = 0.0, $10_1 = 0, $19_1 = 0.0, $28_1 = 0.0, $31_1 = 0, $31$hi = 0, $61_1 = 0.0, $85_1 = 0.0, $93_1 = 0.0, $123_1 = 0.0;
  $10_1 = $1_1;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = -1072076117;
  i64toi32_i32$3 = 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $2_1 = i64toi32_i32$4;
  $2$hi = i64toi32_i32$5;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $27_1 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
   $27_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $3_1 = +($27_1 | 0);
  $19_1 = $3_1 * +HEAPF64[(0 + 71760 | 0) >> 3];
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$5 = $2_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 45;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $29_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $9_1 = ($29_1 & 127 | 0) << 5 | 0;
  $28_1 = $19_1 + +HEAPF64[($9_1 + 71848 | 0) >> 3];
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = -1048576;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
  $31_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $31$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = $31$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
  $0_1 = i64toi32_i32$1;
  $0$hi = i64toi32_i32$4;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$5 = -1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $4_1 = +wasm2js_scratch_load_f64();
  $5_1 = +HEAPF64[($9_1 + 71824 | 0) >> 3];
  $6_1 = $4_1 * $5_1 + -1.0;
  i64toi32_i32$5 = $0$hi;
  wasm2js_scratch_store_i32(0 | 0, $0_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $5_1 = (+wasm2js_scratch_load_f64() - $4_1) * $5_1;
  $4_1 = $6_1 + $5_1;
  $3_1 = $3_1 * +HEAPF64[(0 + 71752 | 0) >> 3] + +HEAPF64[($9_1 + 71840 | 0) >> 3];
  $61_1 = $3_1;
  $3_1 = $4_1 + $3_1;
  $7_1 = +HEAPF64[(0 + 71768 | 0) >> 3];
  $8_1 = $4_1 * $7_1;
  $7_1 = $6_1 * $7_1;
  $6_1 = $6_1 * $7_1;
  $85_1 = $6_1;
  $6_1 = $3_1 + $6_1;
  $93_1 = $28_1 + ($4_1 + ($61_1 - $3_1)) + $5_1 * ($8_1 + $7_1) + ($85_1 + ($3_1 - $6_1));
  $3_1 = $4_1 * $8_1;
  $4_1 = $93_1 + $4_1 * $3_1 * ($3_1 * ($3_1 * ($4_1 * +HEAPF64[(0 + 71816 | 0) >> 3] + +HEAPF64[(0 + 71808 | 0) >> 3]) + ($4_1 * +HEAPF64[(0 + 71800 | 0) >> 3] + +HEAPF64[(0 + 71792 | 0) >> 3])) + ($4_1 * +HEAPF64[(0 + 71784 | 0) >> 3] + +HEAPF64[(0 + 71776 | 0) >> 3]));
  $123_1 = $4_1;
  $4_1 = $6_1 + $4_1;
  HEAPF64[$10_1 >> 3] = $123_1 + ($6_1 - $4_1);
  return +$4_1;
 }
 
 function $961($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0.0, $7$hi = 0, $7_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $6_1 = 0.0, $26_1 = 0, $8$hi = 0, $72_1 = 0.0, $79_1 = 0.0, $95_1 = 0, $95$hi = 0, $98$hi = 0, $100$hi = 0, $8_1 = 0;
  block : {
   $3_1 = ($956(+$0_1) | 0) & 2047 | 0;
   $4_1 = $956(+(5.551115123125783e-17)) | 0;
   if (($3_1 - $4_1 | 0) >>> 0 < (($956(+(512.0)) | 0) - $4_1 | 0) >>> 0) {
    break block
   }
   block1 : {
    if ($3_1 >>> 0 >= $4_1 >>> 0) {
     break block1
    }
    $0_1 = $0_1 + 1.0;
    return +($2_1 ? -$0_1 : $0_1);
   }
   $4_1 = $3_1 >>> 0 < ($956(+(1024.0)) | 0) >>> 0;
   $3_1 = 0;
   if ($4_1) {
    break block
   }
   block2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
     $23_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $24_1 = 0
      } else {
       $24_1 = 1
      }
      $25_1 = $24_1;
     } else {
      $25_1 = 0
     }
     $23_1 = $25_1;
    }
    if ($23_1) {
     break block2
    }
    return +(+$954($2_1 | 0));
   }
   return +(+$953($2_1 | 0));
  }
  $5_1 = +HEAPF64[(0 + 69600 | 0) >> 3];
  $6_1 = $0_1 * +HEAPF64[(0 + 69592 | 0) >> 3] + $5_1;
  $5_1 = $6_1 - $5_1;
  $0_1 = $1_1 + ($5_1 * +HEAPF64[(0 + 69616 | 0) >> 3] + ($5_1 * +HEAPF64[(0 + 69608 | 0) >> 3] + $0_1));
  $1_1 = $0_1 * $0_1;
  $72_1 = $1_1 * $1_1 * ($0_1 * +HEAPF64[(0 + 69648 | 0) >> 3] + +HEAPF64[(0 + 69640 | 0) >> 3]);
  $79_1 = $1_1 * ($0_1 * +HEAPF64[(0 + 69632 | 0) >> 3] + +HEAPF64[(0 + 69624 | 0) >> 3]);
  wasm2js_scratch_store_f64(+$6_1);
  i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $7$hi = i64toi32_i32$2;
  $4_1 = ($7_1 << 4 | 0) & 2032 | 0;
  $0_1 = $72_1 + ($79_1 + (+HEAPF64[($4_1 + 69704 | 0) >> 3] + $0_1));
  i64toi32_i32$3 = $4_1 + 69712 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
  $95_1 = i64toi32_i32$2;
  $95$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = 0;
  $98$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$2 = $98$hi;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = 45;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $26_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $100$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $95$hi;
  i64toi32_i32$5 = $95_1;
  i64toi32_i32$0 = $100$hi;
  i64toi32_i32$1 = $26_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $8_1 = i64toi32_i32$2;
  $8$hi = i64toi32_i32$4;
  block3 : {
   if ($3_1) {
    break block3
   }
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$5 = $7$hi;
   return +(+$962(+$0_1, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, $7_1 | 0, i64toi32_i32$5 | 0));
  }
  i64toi32_i32$5 = $8$hi;
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $1_1 = +wasm2js_scratch_load_f64();
  return +($1_1 * $0_1 + $1_1);
 }
 
 function $962($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0, $6_1 = 0.0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  block : {
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break block
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = -1058013184;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
   $3_1 = +wasm2js_scratch_load_f64();
   return +(($3_1 * $0_1 + $3_1) * 5486124068793688683255936.0e279);
  }
  block1 : {
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$3 = 1071644672;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$4;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
   $3_1 = +wasm2js_scratch_load_f64();
   $4_1 = $3_1 * $0_1;
   $0_1 = $4_1 + $3_1;
   if (!(+$947(+$0_1) < 1.0)) {
    break block1
   }
   $963(+(+$959(+(2.2250738585072014e-308)) * 2.2250738585072014e-308));
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$0 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$2 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $5_1 = $0_1 < 0.0 ? -1.0 : 1.0;
   $6_1 = $0_1 + $5_1;
   $0_1 = $6_1 + ($4_1 + ($3_1 - $0_1) + ($0_1 + ($5_1 - $6_1))) - $5_1;
   $0_1 = (wasm2js_f64$0 = +wasm2js_scratch_load_f64(), wasm2js_f64$1 = $0_1, wasm2js_i32$0 = $0_1 == 0.0, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
  }
  return +($0_1 * 2.2250738585072014e-308);
 }
 
 function $963($0_1) {
  $0_1 = +$0_1;
  HEAPF64[((global$0 - 16 | 0) + 8 | 0) >> 3] = $0_1;
 }
 
 function $964($0_1) {
  $0_1 = Math_fround($0_1);
  $0_1 = Math_fround($0_1 - $0_1);
  return Math_fround(Math_fround($0_1 / $0_1));
 }
 
 function $965($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $3_1 = 0, $6_1 = Math_fround(0), $2_1 = 0, $5_1 = 0, $7_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0;
  $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
  $3_1 = $966($2_1 | 0) | 0;
  block4 : {
   block2 : {
    block3 : {
     block1 : {
      block : {
       $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
       if (($4_1 + -2139095040 | 0) >>> 0 < -2130706432 >>> 0) {
        break block
       }
       $5_1 = 0;
       if ($3_1) {
        break block1
       }
       break block2;
      }
      if (!$3_1) {
       break block3
      }
     }
     $6_1 = Math_fround(1.0);
     if (($4_1 | 0) == (1065353216 | 0)) {
      break block4
     }
     $3_1 = $2_1 << 1 | 0;
     if (!$3_1) {
      break block4
     }
     block6 : {
      block5 : {
       $4_1 = $4_1 << 1 | 0;
       if ($4_1 >>> 0 > -16777216 >>> 0) {
        break block5
       }
       if ($3_1 >>> 0 < -16777215 >>> 0) {
        break block6
       }
      }
      return Math_fround(Math_fround($0_1 + $1_1));
     }
     if (($4_1 | 0) == (2130706432 | 0)) {
      break block4
     }
     return Math_fround($4_1 >>> 0 < 2130706432 >>> 0 ^ ($2_1 | 0) < (0 | 0) | 0 ? Math_fround(0.0) : Math_fround($1_1 * $1_1));
    }
    block7 : {
     if (!($966($4_1 | 0) | 0)) {
      break block7
     }
     $6_1 = Math_fround($0_1 * $0_1);
     block8 : {
      if (($4_1 | 0) > (-1 | 0)) {
       break block8
      }
      $6_1 = ($967($2_1 | 0) | 0 | 0) == (1 | 0) ? Math_fround(-$6_1) : $6_1;
     }
     if (($2_1 | 0) > (-1 | 0)) {
      break block4
     }
     return Math_fround(Math_fround($968(Math_fround(Math_fround(Math_fround(1.0) / $6_1)))));
    }
    $5_1 = 0;
    block9 : {
     if (($4_1 | 0) > (-1 | 0)) {
      break block9
     }
     block10 : {
      $3_1 = $967($2_1 | 0) | 0;
      if ($3_1) {
       break block10
      }
      return Math_fround(Math_fround($964(Math_fround($0_1))));
     }
     $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & 2147483647 | 0;
     $5_1 = (($3_1 | 0) == (1 | 0)) << 16 | 0;
    }
    if ($4_1 >>> 0 > 8388607 >>> 0) {
     break block2
    }
    $4_1 = ((wasm2js_scratch_store_f32(Math_fround($0_1 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) & 2147483647 | 0) + -192937984 | 0;
   }
   block11 : {
    $7_1 = +$969($4_1 | 0) * +$1_1;
    wasm2js_scratch_store_f64(+$7_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147450880;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 1079967744;
    i64toi32_i32$3 = 1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
     break block11
    }
    block12 : {
     if (!($7_1 > 127.99999995700433)) {
      break block12
     }
     return Math_fround(Math_fround($943($5_1 | 0)));
    }
    if (!($7_1 <= -150.0)) {
     break block11
    }
    return Math_fround(Math_fround($944($5_1 | 0)));
   }
   $6_1 = Math_fround($970(+$7_1, $5_1 | 0));
  }
  return Math_fround($6_1);
 }
 
 function $966($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 << 1 | 0) + 16777216 | 0) >>> 0 < 16777217 >>> 0 | 0;
 }
 
 function $967($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  block : {
   $2_1 = ($0_1 >>> 23 | 0) & 255 | 0;
   if ($2_1 >>> 0 < 127 >>> 0) {
    break block
   }
   $1_1 = 2;
   if ($2_1 >>> 0 > 150 >>> 0) {
    break block
   }
   $1_1 = 0;
   $2_1 = 1 << (150 - $2_1 | 0) | 0;
   if (($2_1 + -1 | 0) & $0_1 | 0) {
    break block
   }
   $1_1 = $2_1 & $0_1 | 0 ? 1 : 2;
  }
  return $1_1 | 0;
 }
 
 function $968($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF32[($1_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]));
 }
 
 function $969($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0.0, $1_1 = 0, $3_1 = 0.0, $12_1 = 0.0;
  $1_1 = $0_1 + -1060306944 | 0;
  $12_1 = +(wasm2js_scratch_store_i32(2, $0_1 - ($1_1 & -8388608 | 0) | 0), wasm2js_scratch_load_f32());
  $0_1 = ($1_1 >>> 15 | 0) & 240 | 0;
  $2_1 = $12_1 * +HEAPF64[($0_1 + 75920 | 0) >> 3] + -1.0;
  $3_1 = $2_1 * $2_1;
  return +((+HEAPF64[(0 + 76176 | 0) >> 3] * $2_1 + +HEAPF64[(0 + 76184 | 0) >> 3]) * ($3_1 * $3_1) + ((+HEAPF64[(0 + 76192 | 0) >> 3] * $2_1 + +HEAPF64[(0 + 76200 | 0) >> 3]) * $3_1 + (+HEAPF64[(0 + 76208 | 0) >> 3] * $2_1 + (+HEAPF64[($0_1 + 75928 | 0) >> 3] + +($1_1 >> 23 | 0 | 0)))));
 }
 
 function $970($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $2_1 = 0.0, $3_1 = 0.0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $27_1 = 0.0, $32$hi = 0, $34$hi = 0, $40_1 = 0, $40$hi = 0;
  $2_1 = +HEAPF64[(0 + 69520 | 0) >> 3];
  $3_1 = $0_1 + $2_1;
  $0_1 = $0_1 - ($3_1 - $2_1);
  $27_1 = (+HEAPF64[(0 + 69528 | 0) >> 3] * $0_1 + +HEAPF64[(0 + 69536 | 0) >> 3]) * ($0_1 * $0_1) + (+HEAPF64[(0 + 69544 | 0) >> 3] * $0_1 + 1.0);
  wasm2js_scratch_store_f64(+$3_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $32$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = $32$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
   $17_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
  }
  $34$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$5 = (($4_1 & 31 | 0) << 3 | 0) + 69264 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
  $40_1 = i64toi32_i32$2;
  $40$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $34$hi;
  i64toi32_i32$5 = $17_1;
  i64toi32_i32$2 = $40$hi;
  i64toi32_i32$3 = $40_1;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
  return Math_fround(Math_fround($27_1 * +wasm2js_scratch_load_f64()));
 }
 
 function $971() {
  return $974() | 0 | 0;
 }
 
 function $972() {
  return 42 | 0;
 }
 
 function $973() {
  return $972() | 0 | 0;
 }
 
 function $974() {
  return 96032 | 0;
 }
 
 function $975() {
  HEAP32[(0 + 96128 | 0) >> 2] = 96008;
  HEAP32[(0 + 96056 | 0) >> 2] = $973() | 0;
 }
 
 function $976($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0;
  $3_1 = $0_1 * $0_1;
  $4_1 = $3_1 * ($3_1 * $3_1) * ($3_1 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3_1 * ($3_1 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $5_1 = $0_1 * $3_1;
  block : {
   if ($2_1) {
    break block
   }
   return +($5_1 * ($3_1 * $4_1 + -.16666666666666632) + $0_1);
  }
  return +($0_1 - ($3_1 * ($1_1 * .5 - $5_1 * $4_1) - $1_1 + $5_1 * .16666666666666632));
 }
 
 function $977($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  block2 : {
   block : {
    if (($1_1 | 0) < (1024 | 0)) {
     break block
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    block1 : {
     if ($1_1 >>> 0 >= 2047 >>> 0) {
      break block1
     }
     $1_1 = $1_1 + -1023 | 0;
     break block2;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = ($1_1 >>> 0 < 3069 >>> 0 ? $1_1 : 3069) + -2046 | 0;
    break block2;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break block2
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   block3 : {
    if ($1_1 >>> 0 <= -1992 >>> 0) {
     break block3
    }
    $1_1 = $1_1 + 969 | 0;
    break block2;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = ($1_1 >>> 0 > -2960 >>> 0 ? $1_1 : -2960) + 1938 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $978($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $979($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $20_1 = 0.0, $11_1 = 0, $6_1 = 0, $5_1 = 0, $13_1 = 0, $21_1 = 0.0, $9_1 = 0, $10_1 = 0, $19_1 = 0, $12_1 = 0, $8_1 = 0, $22_1 = 0.0, $14_1 = 0, $7_1 = 0, $16_1 = 0, $23_1 = 0.0, $152_1 = 0, $24_1 = 0.0, $164_1 = 0, $196_1 = 0, $18_1 = 0, $26_1 = 0.0, $402_1 = 0, $27_1 = 0.0, $414_1 = 0, $425_1 = 0, $15_1 = 0, $17_1 = 0, $144_1 = 0, $189_1 = 0.0, $210_1 = 0, $213_1 = 0, $394_1 = 0, $525_1 = 0.0, $563_1 = 0.0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $6_1 = ($2_1 + -3 | 0 | 0) / (24 | 0) | 0;
  $7_1 = ($6_1 | 0) > (0 | 0) ? $6_1 : 0;
  $8_1 = Math_imul($7_1, -24) + $2_1 | 0;
  block : {
   $9_1 = HEAP32[(($4_1 << 2 | 0) + 76224 | 0) >> 2] | 0;
   $10_1 = $3_1 + -1 | 0;
   if (($9_1 + $10_1 | 0 | 0) < (0 | 0)) {
    break block
   }
   $11_1 = $9_1 + $3_1 | 0;
   $2_1 = $7_1 - $10_1 | 0;
   $6_1 = 0;
   label : while (1) {
    block2 : {
     block1 : {
      if (($2_1 | 0) >= (0 | 0)) {
       break block1
      }
      $20_1 = 0.0;
      break block2;
     }
     $20_1 = +(HEAP32[(($2_1 << 2 | 0) + 76240 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = $20_1;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($11_1 | 0)) {
     continue label
    }
    break label;
   };
  }
  $12_1 = $8_1 + -24 | 0;
  $11_1 = 0;
  $13_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
  $14_1 = ($3_1 | 0) < (1 | 0);
  label2 : while (1) {
   block4 : {
    block3 : {
     if (!$14_1) {
      break block3
     }
     $20_1 = 0.0;
     break block4;
    }
    $6_1 = $11_1 + $10_1 | 0;
    $2_1 = 0;
    $20_1 = 0.0;
    label1 : while (1) {
     $20_1 = +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3] + $20_1;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label1
     }
     break label1;
    };
   }
   HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $20_1;
   $2_1 = ($11_1 | 0) == ($13_1 | 0);
   $11_1 = $11_1 + 1 | 0;
   if (!$2_1) {
    continue label2
   }
   break label2;
  };
  $15_1 = 47 - $8_1 | 0;
  $16_1 = 48 - $8_1 | 0;
  $17_1 = $8_1 + -25 | 0;
  $11_1 = $9_1;
  block21 : {
   label10 : while (1) {
    $20_1 = +HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3];
    $2_1 = 0;
    $6_1 = $11_1;
    block5 : {
     if (($11_1 | 0) < (1 | 0)) {
      break block5
     }
     label3 : while (1) {
      $144_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
      $23_1 = $20_1 * 5.9604644775390625e-08;
      if (Math_abs($23_1) < 2147483647.0) {
       $152_1 = ~~$23_1
      } else {
       $152_1 = -2147483648
      }
      $21_1 = +($152_1 | 0);
      $24_1 = $21_1 * -16777216.0 + $20_1;
      if (Math_abs($24_1) < 2147483647.0) {
       $164_1 = ~~$24_1
      } else {
       $164_1 = -2147483648
      }
      HEAP32[$144_1 >> 2] = $164_1;
      $6_1 = $6_1 + -1 | 0;
      $20_1 = +HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] + $21_1;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($11_1 | 0)) {
       continue label3
      }
      break label3;
     };
    }
    $20_1 = +$977(+$20_1, $12_1 | 0);
    $20_1 = $20_1 + +$978(+($20_1 * .125)) * -8.0;
    $189_1 = $20_1;
    if (Math_abs($20_1) < 2147483647.0) {
     $196_1 = ~~$20_1
    } else {
     $196_1 = -2147483648
    }
    $10_1 = $196_1;
    $20_1 = $189_1 - +($10_1 | 0);
    block9 : {
     block10 : {
      block8 : {
       block7 : {
        block6 : {
         $18_1 = ($12_1 | 0) < (1 | 0);
         if ($18_1) {
          break block6
         }
         $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
         $210_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         $213_1 = $2_1;
         $2_1 = $2_1 >> $16_1 | 0;
         $6_1 = $213_1 - ($2_1 << $16_1 | 0) | 0;
         HEAP32[$210_1 >> 2] = $6_1;
         $19_1 = $6_1 >> $15_1 | 0;
         $10_1 = $2_1 + $10_1 | 0;
         break block7;
        }
        if ($12_1) {
         break block8
        }
        $19_1 = (HEAP32[((($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($19_1 | 0) < (1 | 0)) {
        break block9
       }
       break block10;
      }
      $19_1 = 2;
      if ($20_1 >= .5) {
       break block10
      }
      $19_1 = 0;
      break block9;
     }
     $2_1 = 0;
     $13_1 = 0;
     $6_1 = 1;
     block11 : {
      if (($11_1 | 0) < (1 | 0)) {
       break block11
      }
      label4 : while (1) {
       $14_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
       $6_1 = HEAP32[$14_1 >> 2] | 0;
       block15 : {
        block14 : {
         block13 : {
          block12 : {
           if (!$13_1) {
            break block12
           }
           $13_1 = 16777215;
           break block13;
          }
          if (!$6_1) {
           break block14
          }
          $13_1 = 16777216;
         }
         HEAP32[$14_1 >> 2] = $13_1 - $6_1 | 0;
         $13_1 = 1;
         $6_1 = 0;
         break block15;
        }
        $13_1 = 0;
        $6_1 = 1;
       }
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label4
       }
       break label4;
      };
     }
     block16 : {
      if ($18_1) {
       break block16
      }
      $2_1 = 8388607;
      block17 : {
       switch ($17_1 | 0) {
       case 1:
        $2_1 = 4194303;
        break;
       case 0:
        break block17;
       default:
        break block16;
       };
      }
      $13_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$13_1 >> 2] = (HEAP32[$13_1 >> 2] | 0) & $2_1 | 0;
     }
     $10_1 = $10_1 + 1 | 0;
     if (($19_1 | 0) != (2 | 0)) {
      break block9
     }
     $20_1 = 1.0 - $20_1;
     $19_1 = 2;
     if ($6_1) {
      break block9
     }
     $20_1 = $20_1 - +$977(+(1.0), $12_1 | 0);
    }
    block19 : {
     if ($20_1 != 0.0) {
      break block19
     }
     $6_1 = 0;
     $2_1 = $11_1;
     block20 : {
      if (($2_1 | 0) <= ($9_1 | 0)) {
       break block20
      }
      label5 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       $6_1 = HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | $6_1 | 0;
       if (($2_1 | 0) > ($9_1 | 0)) {
        continue label5
       }
       break label5;
      };
      if (!$6_1) {
       break block20
      }
      label6 : while (1) {
       $12_1 = $12_1 + -24 | 0;
       $11_1 = $11_1 + -1 | 0;
       if (!(HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0)) {
        continue label6
       }
       break block21;
      };
     }
     $2_1 = 1;
     label7 : while (1) {
      $6_1 = $2_1;
      $2_1 = $2_1 + 1 | 0;
      if (!(HEAP32[(($5_1 + 480 | 0) + (($9_1 - $6_1 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label7
      }
      break label7;
     };
     $13_1 = $6_1 + $11_1 | 0;
     label9 : while (1) {
      $6_1 = $11_1 + $3_1 | 0;
      $11_1 = $11_1 + 1 | 0;
      HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11_1 + $7_1 | 0) << 2 | 0) + 76240 | 0) >> 2] | 0 | 0);
      $2_1 = 0;
      $20_1 = 0.0;
      block22 : {
       if (($3_1 | 0) < (1 | 0)) {
        break block22
       }
       label8 : while (1) {
        $20_1 = +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3] + $20_1;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         continue label8
        }
        break label8;
       };
      }
      HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $20_1;
      if (($11_1 | 0) < ($13_1 | 0)) {
       continue label9
      }
      break label9;
     };
     $11_1 = $13_1;
     continue label10;
    }
    break label10;
   };
   block24 : {
    block23 : {
     $20_1 = +$977(+$20_1, 24 - $8_1 | 0 | 0);
     if (!($20_1 >= 16777216.0)) {
      break block23
     }
     $394_1 = ($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0;
     $26_1 = $20_1 * 5.9604644775390625e-08;
     if (Math_abs($26_1) < 2147483647.0) {
      $402_1 = ~~$26_1
     } else {
      $402_1 = -2147483648
     }
     $2_1 = $402_1;
     $27_1 = +($2_1 | 0) * -16777216.0 + $20_1;
     if (Math_abs($27_1) < 2147483647.0) {
      $414_1 = ~~$27_1
     } else {
      $414_1 = -2147483648
     }
     HEAP32[$394_1 >> 2] = $414_1;
     $11_1 = $11_1 + 1 | 0;
     $12_1 = $8_1;
     break block24;
    }
    if (Math_abs($20_1) < 2147483647.0) {
     $425_1 = ~~$20_1
    } else {
     $425_1 = -2147483648
    }
    $2_1 = $425_1;
   }
   HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
  $20_1 = +$977(+(1.0), $12_1 | 0);
  block25 : {
   if (($11_1 | 0) < (0 | 0)) {
    break block25
   }
   $3_1 = $11_1;
   label11 : while (1) {
    $2_1 = $3_1;
    HEAPF64[($5_1 + ($2_1 << 3 | 0) | 0) >> 3] = $20_1 * +(HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $3_1 = $2_1 + -1 | 0;
    $20_1 = $20_1 * 5.9604644775390625e-08;
    if ($2_1) {
     continue label11
    }
    break label11;
   };
   $6_1 = $11_1;
   label13 : while (1) {
    $20_1 = 0.0;
    $2_1 = 0;
    block26 : {
     $13_1 = $11_1 - $6_1 | 0;
     $0_1 = ($9_1 | 0) < ($13_1 | 0) ? $9_1 : $13_1;
     if (($0_1 | 0) < (0 | 0)) {
      break block26
     }
     label12 : while (1) {
      $20_1 = +HEAPF64[(($2_1 << 3 | 0) + 79008 | 0) >> 3] * +HEAPF64[($5_1 + (($2_1 + $6_1 | 0) << 3 | 0) | 0) >> 3] + $20_1;
      $3_1 = ($2_1 | 0) != ($0_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label12
      }
      break label12;
     };
    }
    HEAPF64[(($5_1 + 160 | 0) + ($13_1 << 3 | 0) | 0) >> 3] = $20_1;
    $2_1 = ($6_1 | 0) > (0 | 0);
    $6_1 = $6_1 + -1 | 0;
    if ($2_1) {
     continue label13
    }
    break label13;
   };
  }
  block30 : {
   block32 : {
    block28 : {
     switch ($4_1 | 0) {
     case 3:
      $22_1 = 0.0;
      block31 : {
       if (($11_1 | 0) < (1 | 0)) {
        break block31
       }
       $20_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label14 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $21_1 = +HEAPF64[$6_1 >> 3];
        $525_1 = $21_1;
        $21_1 = $21_1 + $20_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $20_1 + ($525_1 - $21_1);
        HEAPF64[$6_1 >> 3] = $21_1;
        $6_1 = $2_1 >>> 0 > 1 >>> 0;
        $20_1 = $21_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label14
        }
        break label14;
       };
       if (($11_1 | 0) == (1 | 0)) {
        break block31
       }
       $20_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label15 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $21_1 = +HEAPF64[$6_1 >> 3];
        $563_1 = $21_1;
        $21_1 = $21_1 + $20_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $20_1 + ($563_1 - $21_1);
        HEAPF64[$6_1 >> 3] = $21_1;
        $6_1 = $2_1 >>> 0 > 2 >>> 0;
        $20_1 = $21_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label15
        }
        break label15;
       };
       $22_1 = 0.0;
       label16 : while (1) {
        $22_1 = $22_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (2 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label16
        }
        break label16;
       };
      }
      $20_1 = +HEAPF64[($5_1 + 160 | 0) >> 3];
      if ($19_1) {
       break block32
      }
      HEAPF64[$1_1 >> 3] = $20_1;
      $20_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
      HEAPF64[($1_1 + 16 | 0) >> 3] = $22_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $20_1;
      break block30;
     case 0:
      $20_1 = 0.0;
      block33 : {
       if (($11_1 | 0) < (0 | 0)) {
        break block33
       }
       label17 : while (1) {
        $2_1 = $11_1;
        $11_1 = $2_1 + -1 | 0;
        $20_1 = $20_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
        if ($2_1) {
         continue label17
        }
        break label17;
       };
      }
      HEAPF64[$1_1 >> 3] = $19_1 ? -$20_1 : $20_1;
      break block30;
     case 1:
     case 2:
      break block28;
     default:
      break block30;
     };
    }
    $20_1 = 0.0;
    block34 : {
     if (($11_1 | 0) < (0 | 0)) {
      break block34
     }
     $3_1 = $11_1;
     label18 : while (1) {
      $2_1 = $3_1;
      $3_1 = $2_1 + -1 | 0;
      $20_1 = $20_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      if ($2_1) {
       continue label18
      }
      break label18;
     };
    }
    HEAPF64[$1_1 >> 3] = $19_1 ? -$20_1 : $20_1;
    $20_1 = +HEAPF64[($5_1 + 160 | 0) >> 3] - $20_1;
    $2_1 = 1;
    block35 : {
     if (($11_1 | 0) < (1 | 0)) {
      break block35
     }
     label19 : while (1) {
      $20_1 = $20_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) != ($11_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label19
      }
      break label19;
     };
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $19_1 ? -$20_1 : $20_1;
    break block30;
   }
   HEAPF64[$1_1 >> 3] = -$20_1;
   $20_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
   HEAPF64[($1_1 + 16 | 0) >> 3] = -$22_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = -$20_1;
  }
  global$0 = $5_1 + 560 | 0;
  return $10_1 & 7 | 0 | 0;
 }
 
 function $980($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $9_1 = 0.0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $10_1 = 0.0, $2_1 = 0, $4_1 = 0, $11_1 = 0.0, $12_1 = 0.0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $148_1 = 0, $37_1 = 0, $38_1 = 0, $276_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $192_1 = 0, $218_1 = 0, $6_1 = 0, $269_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  block4 : {
   block10 : {
    block1 : {
     block : {
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $8_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $24_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $24_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3_1 = $24_1;
      $4_1 = $3_1 & 2147483647 | 0;
      if ($4_1 >>> 0 > 1074752122 >>> 0) {
       break block
      }
      if (($3_1 & 1048575 | 0 | 0) == (598523 | 0)) {
       break block1
      }
      block2 : {
       if ($4_1 >>> 0 > 1073928572 >>> 0) {
        break block2
       }
       block3 : {
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$0 = $8_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $25_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $26_1 = 0
          } else {
           $26_1 = 1
          }
          $27_1 = $26_1;
         } else {
          $27_1 = 0
         }
         $25_1 = $27_1;
        }
        if ($25_1) {
         break block3
        }
        $0_1 = $0_1 + -1.5707963267341256;
        $9_1 = $0_1 + -6.077100506506192e-11;
        HEAPF64[$1_1 >> 3] = $9_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -6.077100506506192e-11;
        $3_1 = 1;
        break block4;
       }
       $0_1 = $0_1 + 1.5707963267341256;
       $9_1 = $0_1 + 6.077100506506192e-11;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 6.077100506506192e-11;
       $3_1 = -1;
       break block4;
      }
      block5 : {
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$3 = $8_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $28_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $29_1 = 0
         } else {
          $29_1 = 1
         }
         $30_1 = $29_1;
        } else {
         $30_1 = 0
        }
        $28_1 = $30_1;
       }
       if ($28_1) {
        break block5
       }
       $0_1 = $0_1 + -3.1415926534682512;
       $9_1 = $0_1 + -1.2154201013012384e-10;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -1.2154201013012384e-10;
       $3_1 = 2;
       break block4;
      }
      $0_1 = $0_1 + 3.1415926534682512;
      $9_1 = $0_1 + 1.2154201013012384e-10;
      HEAPF64[$1_1 >> 3] = $9_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 1.2154201013012384e-10;
      $3_1 = -2;
      break block4;
     }
     block6 : {
      if ($4_1 >>> 0 > 1075594811 >>> 0) {
       break block6
      }
      block7 : {
       if ($4_1 >>> 0 > 1075183036 >>> 0) {
        break block7
       }
       if (($4_1 | 0) == (1074977148 | 0)) {
        break block1
       }
       block8 : {
        i64toi32_i32$3 = $8$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $31_1 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $32_1 = 0
          } else {
           $32_1 = 1
          }
          $33_1 = $32_1;
         } else {
          $33_1 = 0
         }
         $31_1 = $33_1;
        }
        if ($31_1) {
         break block8
        }
        $0_1 = $0_1 + -4.712388980202377;
        $9_1 = $0_1 + -1.8231301519518578e-10;
        HEAPF64[$1_1 >> 3] = $9_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -1.8231301519518578e-10;
        $3_1 = 3;
        break block4;
       }
       $0_1 = $0_1 + 4.712388980202377;
       $9_1 = $0_1 + 1.8231301519518578e-10;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 1.8231301519518578e-10;
       $3_1 = -3;
       break block4;
      }
      if (($4_1 | 0) == (1075388923 | 0)) {
       break block1
      }
      block9 : {
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $34_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $35_1 = 0
         } else {
          $35_1 = 1
         }
         $36_1 = $35_1;
        } else {
         $36_1 = 0
        }
        $34_1 = $36_1;
       }
       if ($34_1) {
        break block9
       }
       $0_1 = $0_1 + -6.2831853069365025;
       $9_1 = $0_1 + -2.430840202602477e-10;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -2.430840202602477e-10;
       $3_1 = 4;
       break block4;
      }
      $0_1 = $0_1 + 6.2831853069365025;
      $9_1 = $0_1 + 2.430840202602477e-10;
      HEAPF64[$1_1 >> 3] = $9_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 2.430840202602477e-10;
      $3_1 = -4;
      break block4;
     }
     if ($4_1 >>> 0 > 1094263290 >>> 0) {
      break block10
     }
    }
    $10_1 = $0_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    if (Math_abs($10_1) < 2147483647.0) {
     $148_1 = ~~$10_1
    } else {
     $148_1 = -2147483648
    }
    $3_1 = $148_1;
    block12 : {
     block11 : {
      $9_1 = $0_1 + $10_1 * -1.5707963267341256;
      $11_1 = $10_1 * 6.077100506506192e-11;
      $12_1 = $9_1 - $11_1;
      if (!($12_1 < -.7853981633974483)) {
       break block11
      }
      $3_1 = $3_1 + -1 | 0;
      $10_1 = $10_1 + -1.0;
      $11_1 = $10_1 * 6.077100506506192e-11;
      $9_1 = $0_1 + $10_1 * -1.5707963267341256;
      break block12;
     }
     if (!($12_1 > .7853981633974483)) {
      break block12
     }
     $3_1 = $3_1 + 1 | 0;
     $10_1 = $10_1 + 1.0;
     $11_1 = $10_1 * 6.077100506506192e-11;
     $9_1 = $0_1 + $10_1 * -1.5707963267341256;
    }
    $0_1 = $9_1 - $11_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    block13 : {
     $5_1 = $4_1 >>> 20 | 0;
     $192_1 = $5_1;
     wasm2js_scratch_store_f64(+$0_1);
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 52;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $37_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     if (($192_1 - ($37_1 & 2047 | 0) | 0 | 0) < (17 | 0)) {
      break block13
     }
     $0_1 = $10_1 * 6.077100506303966e-11;
     $12_1 = $9_1 - $0_1;
     $11_1 = $10_1 * 2.0222662487959506e-21 - ($9_1 - $12_1 - $0_1);
     $0_1 = $12_1 - $11_1;
     HEAPF64[$1_1 >> 3] = $0_1;
     block14 : {
      $218_1 = $5_1;
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $38_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($218_1 - ($38_1 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break block14
      }
      $9_1 = $12_1;
      break block13;
     }
     $0_1 = $10_1 * 2.0222662487111665e-21;
     $9_1 = $12_1 - $0_1;
     $11_1 = $10_1 * 8.4784276603689e-32 - ($12_1 - $9_1 - $0_1);
     $0_1 = $9_1 - $11_1;
     HEAPF64[$1_1 >> 3] = $0_1;
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $9_1 - $0_1 - $11_1;
    break block4;
   }
   block15 : {
    if ($4_1 >>> 0 < 2146435072 >>> 0) {
     break block15
    }
    $0_1 = $0_1 - $0_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
    $3_1 = 0;
    break block4;
   }
   $6_1 = $2_1 + 16 | 0 | 8 | 0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $3_1 = $2_1 + 16 | 0;
   $5_1 = 1;
   label : while (1) {
    $269_1 = $3_1;
    if (Math_abs($0_1) < 2147483647.0) {
     $276_1 = ~~$0_1
    } else {
     $276_1 = -2147483648
    }
    $9_1 = +($276_1 | 0);
    HEAPF64[$269_1 >> 3] = $9_1;
    $0_1 = ($0_1 - $9_1) * 16777216.0;
    $7_1 = $5_1 & 1 | 0;
    $5_1 = 0;
    $3_1 = $6_1;
    if ($7_1) {
     continue label
    }
    break label;
   };
   HEAPF64[($2_1 + 32 | 0) >> 3] = $0_1;
   $3_1 = 2;
   label1 : while (1) {
    $5_1 = $3_1;
    $3_1 = $3_1 + -1 | 0;
    if (+HEAPF64[(($2_1 + 16 | 0) + ($5_1 << 3 | 0) | 0) >> 3] == 0.0) {
     continue label1
    }
    break label1;
   };
   $3_1 = $979($2_1 + 16 | 0 | 0, $2_1 | 0, ($4_1 >>> 20 | 0) + -1046 | 0 | 0, $5_1 + 1 | 0 | 0, 1 | 0) | 0;
   $0_1 = +HEAPF64[$2_1 >> 3];
   block16 : {
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $39_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $40_1 = 0
      } else {
       $40_1 = 1
      }
      $41_1 = $40_1;
     } else {
      $41_1 = 0
     }
     $39_1 = $41_1;
    }
    if ($39_1) {
     break block16
    }
    HEAPF64[$1_1 >> 3] = -$0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = -+HEAPF64[($2_1 + 8 | 0) >> 3];
    $3_1 = 0 - $3_1 | 0;
    break block4;
   }
   HEAPF64[$1_1 >> 3] = $0_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = +HEAPF64[($2_1 + 8 | 0) >> 3];
  }
  global$0 = $2_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $981($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $2_1 = 0.0, $3_1 = 0.0, $4_1 = 0.0, $16_1 = 0.0;
  $2_1 = $0_1 * $0_1;
  $3_1 = $2_1 * .5;
  $4_1 = 1.0 - $3_1;
  $16_1 = 1.0 - $4_1 - $3_1;
  $3_1 = $2_1 * $2_1;
  return +($4_1 + ($16_1 + ($2_1 * ($2_1 * ($2_1 * ($2_1 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3_1 * $3_1 * ($2_1 * ($2_1 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0_1 * $1_1)));
 }
 
 function $982($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $3_1 = 0.0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  block1 : {
   block : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $9_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break block
    }
    if ($2_1 >>> 0 < 1045430272 >>> 0) {
     break block1
    }
    $0_1 = +$976(+$0_1, +(0.0), 0 | 0);
    break block1;
   }
   block2 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break block2
    }
    $0_1 = $0_1 - $0_1;
    break block1;
   }
   $2_1 = $980(+$0_1, $1_1 | 0) | 0;
   $0_1 = +HEAPF64[($1_1 + 8 | 0) >> 3];
   $3_1 = +HEAPF64[$1_1 >> 3];
   block6 : {
    switch ($2_1 & 3 | 0 | 0) {
    default:
     $0_1 = +$976(+$3_1, +$0_1, 1 | 0);
     break block1;
    case 1:
     $0_1 = +$981(+$3_1, +$0_1);
     break block1;
    case 2:
     $0_1 = -+$976(+$3_1, +$0_1, 1 | 0);
     break block1;
    case 3:
     break block6;
    };
   }
   $0_1 = -+$981(+$3_1, +$0_1);
  }
  global$0 = $1_1 + 16 | 0;
  return +$0_1;
 }
 
 function $983($0_1) {
  $0_1 = +$0_1;
  return +Math_sqrt($0_1);
 }
 
 function $984($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  if ($2_1) {
   wasm2js_memory_copy($0_1, $1_1, $2_1)
  }
  return $0_1 | 0;
 }
 
 function $985($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  block : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break block
   }
   return $984($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  block6 : {
   block1 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break block1
    }
    block3 : {
     block2 : {
      if ($0_1 & 3 | 0) {
       break block2
      }
      $2_1 = $0_1;
      break block3;
     }
     block4 : {
      if ($2_1) {
       break block4
      }
      $2_1 = $0_1;
      break block3;
     }
     $2_1 = $0_1;
     label : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break block3
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label
      }
      break label;
     };
    }
    $4_1 = $3_1 & -4 | 0;
    block5 : {
     if ($3_1 >>> 0 < 64 >>> 0) {
      break block5
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break block5
     }
     label1 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label1
      }
      break label1;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break block6
    }
    label2 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label2
     }
     break block6;
    };
   }
   block7 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break block7
    }
    $2_1 = $0_1;
    break block6;
   }
   block8 : {
    $4_1 = $3_1 + -4 | 0;
    if ($0_1 >>> 0 <= $4_1 >>> 0) {
     break block8
    }
    $2_1 = $0_1;
    break block6;
   }
   $2_1 = $0_1;
   label3 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label3
    }
    break label3;
   };
  }
  block9 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break block9
   }
   label4 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label4
    }
    break label4;
   };
  }
  return $0_1 | 0;
 }
 
 function $986($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  block : {
   $1_1 = ($987($0_1 | 0) | 0) + 1 | 0;
   $2_1 = $1032($1_1 | 0) | 0;
   if ($2_1) {
    break block
   }
   return 0 | 0;
  }
  return $985($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $987($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  block2 : {
   block : {
    if (!($1_1 & 3 | 0)) {
     break block
    }
    block1 : {
     if (HEAPU8[$1_1 >> 0] | 0) {
      break block1
     }
     return $1_1 - $1_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break block
     }
     if (HEAPU8[$1_1 >> 0] | 0) {
      continue label
     }
     break block2;
    };
   }
   label1 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
     continue label1
    }
    break label1;
   };
   label2 : while (1) {
    $1_1 = $2_1;
    $2_1 = $1_1 + 1 | 0;
    if (HEAPU8[$1_1 >> 0] | 0) {
     continue label2
    }
    break label2;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $988($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $8_1 = 0.0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6_1 = 0.0, $3_1 = 0, $4_1 = 0, $20_1 = 0, $22_1 = 0, $23_1 = 0, $5_1 = 0, $7_1 = 0.0, $3$hi = 0, $18_1 = 0.0, $19_1 = 0.0, $21_1 = 0.0, $115_1 = 0.0;
  block1 : {
   block : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = 2147483640;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 1072010279;
    i64toi32_i32$3 = 1;
    $4_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    if (!$4_1) {
     break block
    }
    break block1;
   }
   $18_1 = .7853981633974483 - Math_abs($0_1);
   $19_1 = $1_1;
   $21_1 = -$1_1;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $20_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
      $22_1 = 0
     } else {
      $22_1 = 1
     }
     $23_1 = $22_1;
    } else {
     $23_1 = 0
    }
    $20_1 = $23_1;
   }
   $5_1 = $20_1;
   $0_1 = $18_1 + (3.061616997868383e-17 - ($5_1 ? $19_1 : $21_1));
   $1_1 = 0.0;
  }
  $6_1 = $0_1 * $0_1;
  $7_1 = $0_1 * $6_1;
  $8_1 = $6_1 * $6_1;
  $6_1 = $7_1 * .3333333333333341 + ($6_1 * ($7_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * -1.8558637485527546e-05 + 7.817944429395571e-05) + 5.880412408202641e-04) + 3.5920791075913124e-03) + .021869488294859542) + .13333333333320124 + $6_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * 2.590730518636337e-05 + 7.140724913826082e-05) + 2.464631348184699e-04) + 1.4562094543252903e-03) + .0088632398235993) + .05396825397622605)) + $1_1) + $1_1);
  $8_1 = $0_1 + $6_1;
  block2 : {
   if ($4_1) {
    break block2
   }
   $1_1 = +(1 - ($2_1 << 1 | 0) | 0 | 0);
   $8_1 = $0_1 + ($6_1 - $8_1 * $8_1 / ($8_1 + $1_1));
   $8_1 = $1_1 - ($8_1 + $8_1);
   return +($5_1 & 1 | 0 ? $8_1 : -$8_1);
  }
  block3 : {
   if (!$2_1) {
    break block3
   }
   $1_1 = -1.0 / $8_1;
   $115_1 = $1_1;
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $1_1 = +wasm2js_scratch_load_f64();
   wasm2js_scratch_store_f64(+$8_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $8_1 = +wasm2js_scratch_load_f64();
   $8_1 = $115_1 * ($1_1 * ($6_1 - ($8_1 - $0_1)) + ($1_1 * $8_1 + 1.0)) + $1_1;
  }
  return +$8_1;
 }
 
 function $989($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  block1 : {
   block : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $8_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break block
    }
    if ($2_1 >>> 0 < 1044381696 >>> 0) {
     break block1
    }
    $0_1 = +$988(+$0_1, +(0.0), 0 | 0);
    break block1;
   }
   block2 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break block2
    }
    $0_1 = $0_1 - $0_1;
    break block1;
   }
   $2_1 = $980(+$0_1, $1_1 | 0) | 0;
   $0_1 = +$988(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), $2_1 & 1 | 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return +$0_1;
 }
 
 function $990() {
  return 96164 | 0;
 }
 
 function $991() {
  fimport$17();
  wasm2js_trap();
 }
 
 function $992($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if ($0_1) {
    break block
   }
   return 0 | 0;
  }
  HEAP32[($990() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $993($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $994($0_1) {
  $0_1 = $0_1 | 0;
  return $992(fimport$18($993(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $995($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $4_1 = $3_1 + 16 | 0;
  $7_1 = 2;
  block5 : {
   block4 : {
    block2 : {
     block1 : {
      block : {
       if (!($992(fimport$19(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        break block
       }
       $5_1 = $4_1;
       break block1;
      }
      label : while (1) {
       $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break block2
       }
       block3 : {
        if (($1_1 | 0) > (-1 | 0)) {
         break block3
        }
        $5_1 = $4_1;
        break block4;
       }
       $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       $9_1 = $1_1 >>> 0 > $8_1 >>> 0;
       $5_1 = $4_1 + ($9_1 << 3 | 0) | 0;
       $8_1 = $1_1 - ($9_1 ? $8_1 : 0) | 0;
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + $8_1 | 0;
       $4_1 = $4_1 + ($9_1 ? 12 : 4) | 0;
       HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $1_1 | 0;
       $4_1 = $5_1;
       $7_1 = $7_1 - $9_1 | 0;
       if (!($992(fimport$19(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $4_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label
       }
       break label;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break block4
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $1_1 = $2_1;
    break block5;
   }
   $1_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break block5
   }
   $1_1 = $2_1 - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $996($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $992($2728($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $2_1 ? -1 : $1_1;
  i64toi32_i32$2 = $2_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $997($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $996(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $998($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $999($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1000($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $1001($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1002($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1003($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $1004($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1005($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $1006($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1007($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1008() {
  $1006(96176 | 0);
  return 96180 | 0;
 }
 
 function $1009() {
  $1007(96176 | 0);
 }
 
 function $1010($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  block : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break block
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $1011($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  block2 : {
   block1 : {
    block : {
     if (!($0_1 & 3 | 0)) {
      break block
     }
     if (!$2_1) {
      break block
     }
     $4_1 = $1_1 & 255 | 0;
     label : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break block1
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break block
      }
      if ($2_1) {
       continue label
      }
      break label;
     };
    }
    if (!$3_1) {
     break block2
    }
    block3 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
      break block3
     }
     if ($2_1 >>> 0 < 4 >>> 0) {
      break block3
     }
     $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
     label1 : while (1) {
      $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
      if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
       break block1
      }
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label1
      }
      break label1;
     };
    }
    if (!$2_1) {
     break block2
    }
   }
   $3_1 = $1_1 & 255 | 0;
   label2 : while (1) {
    block4 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break block4
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label2
    }
    break label2;
   };
  }
  return 0 | 0;
 }
 
 function $1012($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1011($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
  return ($2_1 ? $2_1 - $0_1 | 0 : $1_1) | 0;
 }
 
 function $1013($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  block1 : {
   block : {
    if (!$0_1) {
     break block
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break block1
    }
    block3 : {
     block2 : {
      if (HEAP32[(HEAP32[(($974() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
       break block2
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break block1
      }
      HEAP32[($990() | 0) >> 2] = 25;
      break block3;
     }
     block4 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break block4
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     block6 : {
      block5 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break block5
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break block6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     block7 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break block7
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($990() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $1014($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($0_1) {
    break block
   }
   return 0 | 0;
  }
  return $1013($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1015($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  block : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break block
   }
   block1 : {
    if ($3_1) {
     break block1
    }
    block3 : {
     block2 : {
      if ($0_1 != 0.0) {
       break block2
      }
      $3_1 = 0;
      break block3;
     }
     $0_1 = +$1015(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $1016($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  block1 : {
   block : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break block
    }
    $4_1 = 0;
    if ($1010($2_1 | 0) | 0) {
     break block1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   block2 : {
    $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if ($1_1 >>> 0 <= ($3_1 - $4_1 | 0) >>> 0) {
     break block2
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   block5 : {
    block3 : {
     if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break block3
     }
     if (!$1_1) {
      break block3
     }
     $3_1 = $1_1;
     block4 : {
      label : while (1) {
       $5_1 = $0_1 + $3_1 | 0;
       if ((HEAPU8[($5_1 + -1 | 0) >> 0] | 0 | 0) == (10 | 0)) {
        break block4
       }
       $3_1 = $3_1 + -1 | 0;
       if (!$3_1) {
        break block3
       }
       continue label;
      };
     }
     $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      break block1
     }
     $1_1 = $1_1 - $3_1 | 0;
     $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     break block5;
    }
    $5_1 = $0_1;
    $3_1 = 0;
   }
   $985($4_1 | 0, $5_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $1017($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  block1 : {
   block : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break block
    }
    $0_1 = $1016($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break block1;
   }
   $5_1 = $998($3_1 | 0) | 0;
   $0_1 = $1016($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break block1
   }
   $999($3_1 | 0);
  }
  block2 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break block2
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $1018($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  block : {
   if (!$2_1) {
    break block
   }
   HEAP8[$0_1 >> 0] = $1_1;
   $3_1 = $0_1 + $2_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break block
   }
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break block
   }
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break block
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break block
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break block
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break block
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label
    }
    break label;
   };
  }
  return $0_1 | 0;
 }
 
 function $1019($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  block : {
   if (!40) {
    break block
   }
   wasm2js_memory_fill($5_1 + 160 | 0, 0, 40);
  }
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  block2 : {
   block1 : {
    if (($1020(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break block1
    }
    $4_1 = -1;
    break block2;
   }
   block4 : {
    block3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break block3
     }
     $6_1 = 1;
     break block4;
    }
    $6_1 = !($998($0_1 | 0) | 0);
   }
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $7_1 & -33 | 0;
   block8 : {
    block7 : {
     block6 : {
      block5 : {
       if (HEAP32[($0_1 + 48 | 0) >> 2] | 0) {
        break block5
       }
       HEAP32[($0_1 + 48 | 0) >> 2] = 80;
       HEAP32[($0_1 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
       break block6;
      }
      $8_1 = 0;
      if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
       break block7
      }
     }
     $2_1 = -1;
     if ($1010($0_1 | 0) | 0) {
      break block8
     }
    }
    $2_1 = $1020($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   }
   $4_1 = $7_1 & 32 | 0;
   block9 : {
    if (!$8_1) {
     break block9
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = $3_1 ? $2_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $4_1 | 0;
   $4_1 = $3_1 & 32 | 0 ? -1 : $2_1;
   if ($6_1) {
    break block2
   }
   $999($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $4_1 | 0;
 }
 
 function $1020($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $15_1 = 0, $20_1 = 0, $17_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $11_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, $18_1 = 0, i64toi32_i32$5 = 0, $25_1 = 0, $25$hi = 0, $9_1 = 0, $24_1 = 0, $10_1 = 0, i64toi32_i32$3 = 0, $21_1 = 0, $23_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $8_1 = 0, $267_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 39 | 0;
  $9_1 = $7_1 + 40 | 0;
  $10_1 = 0;
  $11_1 = 0;
  block68 : {
   block32 : {
    block26 : {
     block : {
      label4 : while (1) {
       $12_1 = 0;
       label1 : while (1) {
        $13_1 = $1_1;
        if (($12_1 | 0) > ($11_1 ^ 2147483647 | 0 | 0)) {
         break block
        }
        $11_1 = $12_1 + $11_1 | 0;
        $12_1 = $1_1;
        block31 : {
         block34 : {
          block47 : {
           block60 : {
            block15 : {
             block1 : {
              $14_1 = HEAPU8[$12_1 >> 0] | 0;
              if (!$14_1) {
               break block1
              }
              label7 : while (1) {
               block4 : {
                block3 : {
                 block2 : {
                  $14_1 = $14_1 & 255 | 0;
                  if ($14_1) {
                   break block2
                  }
                  $1_1 = $12_1;
                  break block3;
                 }
                 if (($14_1 | 0) != (37 | 0)) {
                  break block4
                 }
                 $14_1 = $12_1;
                 label : while (1) {
                  block5 : {
                   if ((HEAPU8[($14_1 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                    break block5
                   }
                   $1_1 = $14_1;
                   break block3;
                  }
                  $12_1 = $12_1 + 1 | 0;
                  $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
                  $1_1 = $14_1 + 2 | 0;
                  $14_1 = $1_1;
                  if (($15_1 | 0) == (37 | 0)) {
                   continue label
                  }
                  break label;
                 };
                }
                $12_1 = $12_1 - $13_1 | 0;
                $14_1 = $11_1 ^ 2147483647 | 0;
                if (($12_1 | 0) > ($14_1 | 0)) {
                 break block
                }
                block6 : {
                 if (!$0_1) {
                  break block6
                 }
                 $1021($0_1 | 0, $13_1 | 0, $12_1 | 0);
                }
                if ($12_1) {
                 continue label1
                }
                HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                $12_1 = $1_1 + 1 | 0;
                $16_1 = -1;
                block7 : {
                 $15_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                 if ($15_1 >>> 0 > 9 >>> 0) {
                  break block7
                 }
                 if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                  break block7
                 }
                 $12_1 = $1_1 + 3 | 0;
                 $10_1 = 1;
                 $16_1 = $15_1;
                }
                HEAP32[($7_1 + 60 | 0) >> 2] = $12_1;
                $17_1 = 0;
                block9 : {
                 block8 : {
                  $18_1 = HEAP8[$12_1 >> 0] | 0;
                  $1_1 = $18_1 + -32 | 0;
                  if ($1_1 >>> 0 <= 31 >>> 0) {
                   break block8
                  }
                  $15_1 = $12_1;
                  break block9;
                 }
                 $17_1 = 0;
                 $15_1 = $12_1;
                 $1_1 = 1 << $1_1 | 0;
                 if (!($1_1 & 75913 | 0)) {
                  break block9
                 }
                 label2 : while (1) {
                  $15_1 = $12_1 + 1 | 0;
                  HEAP32[($7_1 + 60 | 0) >> 2] = $15_1;
                  $17_1 = $1_1 | $17_1 | 0;
                  $18_1 = HEAP8[($12_1 + 1 | 0) >> 0] | 0;
                  $1_1 = $18_1 + -32 | 0;
                  if ($1_1 >>> 0 >= 32 >>> 0) {
                   break block9
                  }
                  $12_1 = $15_1;
                  $1_1 = 1 << $1_1 | 0;
                  if ($1_1 & 75913 | 0) {
                   continue label2
                  }
                  break label2;
                 };
                }
                block17 : {
                 block10 : {
                  if (($18_1 | 0) != (42 | 0)) {
                   break block10
                  }
                  block14 : {
                   block11 : {
                    $12_1 = (HEAP8[($15_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                    if ($12_1 >>> 0 > 9 >>> 0) {
                     break block11
                    }
                    if ((HEAPU8[($15_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                     break block11
                    }
                    block13 : {
                     block12 : {
                      if ($0_1) {
                       break block12
                      }
                      HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] = 10;
                      $19_1 = 0;
                      break block13;
                     }
                     $19_1 = HEAP32[($3_1 + ($12_1 << 3 | 0) | 0) >> 2] | 0;
                    }
                    $1_1 = $15_1 + 3 | 0;
                    $10_1 = 1;
                    break block14;
                   }
                   if ($10_1) {
                    break block15
                   }
                   $1_1 = $15_1 + 1 | 0;
                   block16 : {
                    if ($0_1) {
                     break block16
                    }
                    HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                    $10_1 = 0;
                    $19_1 = 0;
                    break block17;
                   }
                   $12_1 = HEAP32[$2_1 >> 2] | 0;
                   HEAP32[$2_1 >> 2] = $12_1 + 4 | 0;
                   $19_1 = HEAP32[$12_1 >> 2] | 0;
                   $10_1 = 0;
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                  if (($19_1 | 0) > (-1 | 0)) {
                   break block17
                  }
                  $19_1 = 0 - $19_1 | 0;
                  $17_1 = $17_1 | 8192 | 0;
                  break block17;
                 }
                 $19_1 = $1022($7_1 + 60 | 0 | 0) | 0;
                 if (($19_1 | 0) < (0 | 0)) {
                  break block
                 }
                 $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
                }
                $12_1 = 0;
                $20_1 = -1;
                block19 : {
                 block18 : {
                  if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (46 | 0)) {
                   break block18
                  }
                  $21_1 = 0;
                  break block19;
                 }
                 block20 : {
                  if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                   break block20
                  }
                  block24 : {
                   block21 : {
                    $15_1 = (HEAP8[($1_1 + 2 | 0) >> 0] | 0) + -48 | 0;
                    if ($15_1 >>> 0 > 9 >>> 0) {
                     break block21
                    }
                    if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                     break block21
                    }
                    block23 : {
                     block22 : {
                      if ($0_1) {
                       break block22
                      }
                      HEAP32[($4_1 + ($15_1 << 2 | 0) | 0) >> 2] = 10;
                      $20_1 = 0;
                      break block23;
                     }
                     $20_1 = HEAP32[($3_1 + ($15_1 << 3 | 0) | 0) >> 2] | 0;
                    }
                    $1_1 = $1_1 + 4 | 0;
                    break block24;
                   }
                   if ($10_1) {
                    break block15
                   }
                   $1_1 = $1_1 + 2 | 0;
                   block25 : {
                    if ($0_1) {
                     break block25
                    }
                    $20_1 = 0;
                    break block24;
                   }
                   $15_1 = HEAP32[$2_1 >> 2] | 0;
                   HEAP32[$2_1 >> 2] = $15_1 + 4 | 0;
                   $20_1 = HEAP32[$15_1 >> 2] | 0;
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                  $21_1 = ($20_1 | 0) > (-1 | 0);
                  break block19;
                 }
                 HEAP32[($7_1 + 60 | 0) >> 2] = $1_1 + 1 | 0;
                 $21_1 = 1;
                 $20_1 = $1022($7_1 + 60 | 0 | 0) | 0;
                 $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
                }
                label3 : while (1) {
                 $15_1 = $12_1;
                 $22_1 = 28;
                 $18_1 = $1_1;
                 $12_1 = HEAP8[$1_1 >> 0] | 0;
                 if (($12_1 + -123 | 0) >>> 0 < -58 >>> 0) {
                  break block26
                 }
                 $1_1 = $1_1 + 1 | 0;
                 $12_1 = HEAPU8[(($12_1 + Math_imul($15_1, 58) | 0) + 79023 | 0) >> 0] | 0;
                 if ((($12_1 + -1 | 0) & 255 | 0) >>> 0 < 8 >>> 0) {
                  continue label3
                 }
                 break label3;
                };
                HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                block30 : {
                 block27 : {
                  if (($12_1 | 0) == (27 | 0)) {
                   break block27
                  }
                  if (!$12_1) {
                   break block26
                  }
                  block28 : {
                   if (($16_1 | 0) < (0 | 0)) {
                    break block28
                   }
                   block29 : {
                    if ($0_1) {
                     break block29
                    }
                    HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $12_1;
                    continue label4;
                   }
                   i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                   $267_1 = i64toi32_i32$0;
                   i64toi32_i32$0 = $7_1;
                   HEAP32[($7_1 + 48 | 0) >> 2] = $267_1;
                   HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$1;
                   break block30;
                  }
                  if (!$0_1) {
                   break block31
                  }
                  $1023($7_1 + 48 | 0 | 0, $12_1 | 0, $2_1 | 0, $6_1 | 0);
                  break block30;
                 }
                 if (($16_1 | 0) > (-1 | 0)) {
                  break block26
                 }
                 $12_1 = 0;
                 if (!$0_1) {
                  continue label1
                 }
                }
                if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                 break block32
                }
                $23_1 = $17_1 & -65537 | 0;
                $17_1 = $17_1 & 8192 | 0 ? $23_1 : $17_1;
                $16_1 = 0;
                $24_1 = 65637;
                $22_1 = $9_1;
                block35 : {
                 block65 : {
                  block64 : {
                   block62 : {
                    block46 : {
                     block44 : {
                      block41 : {
                       block36 : {
                        block56 : {
                         block48 : {
                          block37 : {
                           block39 : {
                            block33 : {
                             block40 : {
                              block38 : {
                               block42 : {
                                block43 : {
                                 $18_1 = HEAPU8[$18_1 >> 0] | 0;
                                 $12_1 = $18_1 << 24 >> 24;
                                 $12_1 = $15_1 ? (($18_1 & 15 | 0 | 0) == (3 | 0) ? $12_1 & -45 | 0 : $12_1) : $12_1;
                                 switch ($12_1 + -88 | 0 | 0) {
                                 case 0:
                                 case 32:
                                  break block33;
                                 case 1:
                                 case 2:
                                 case 3:
                                 case 4:
                                 case 5:
                                 case 6:
                                 case 7:
                                 case 8:
                                 case 10:
                                 case 16:
                                 case 18:
                                 case 19:
                                 case 20:
                                 case 21:
                                 case 25:
                                 case 26:
                                 case 28:
                                 case 30:
                                 case 31:
                                  break block34;
                                 case 9:
                                 case 13:
                                 case 14:
                                 case 15:
                                  break block35;
                                 case 11:
                                  break block36;
                                 case 12:
                                 case 17:
                                  break block37;
                                 case 22:
                                  break block38;
                                 case 23:
                                  break block39;
                                 case 24:
                                  break block40;
                                 case 27:
                                  break block41;
                                 case 29:
                                  break block42;
                                 default:
                                  break block43;
                                 };
                                }
                                $22_1 = $9_1;
                                block45 : {
                                 switch ($12_1 + -65 | 0 | 0) {
                                 case 1:
                                 case 3:
                                  break block34;
                                 case 0:
                                 case 4:
                                 case 5:
                                 case 6:
                                  break block35;
                                 case 2:
                                  break block44;
                                 default:
                                  break block45;
                                 };
                                }
                                if (($12_1 | 0) == (83 | 0)) {
                                 break block46
                                }
                                break block47;
                               }
                               $16_1 = 0;
                               $24_1 = 65637;
                               i64toi32_i32$2 = $7_1;
                               i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                               i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                               $25_1 = i64toi32_i32$1;
                               $25$hi = i64toi32_i32$0;
                               break block48;
                              }
                              $12_1 = 0;
                              block55 : {
                               switch ($15_1 | 0) {
                               case 0:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label1;
                               case 1:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label1;
                               case 2:
                                i64toi32_i32$1 = $11_1;
                                i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                                i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                                HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                continue label1;
                               case 3:
                                HEAP16[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 1] = $11_1;
                                continue label1;
                               case 4:
                                HEAP8[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 0] = $11_1;
                                continue label1;
                               case 6:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label1;
                               case 7:
                                break block55;
                               default:
                                continue label1;
                               };
                              }
                              i64toi32_i32$1 = $11_1;
                              i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                              i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                              HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                              continue label1;
                             }
                             $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                             $17_1 = $17_1 | 8 | 0;
                             $12_1 = 120;
                            }
                            $16_1 = 0;
                            $24_1 = 65637;
                            i64toi32_i32$2 = $7_1;
                            i64toi32_i32$0 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                            $25_1 = i64toi32_i32$0;
                            $25$hi = i64toi32_i32$1;
                            $13_1 = $1024(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $12_1 & 32 | 0 | 0) | 0;
                            if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
                             break block56
                            }
                            if (!($17_1 & 8 | 0)) {
                             break block56
                            }
                            $24_1 = ($12_1 >>> 4 | 0) + 65637 | 0;
                            $16_1 = 2;
                            break block56;
                           }
                           $16_1 = 0;
                           $24_1 = 65637;
                           i64toi32_i32$2 = $7_1;
                           i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                           i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                           $25_1 = i64toi32_i32$1;
                           $25$hi = i64toi32_i32$0;
                           $13_1 = $1025(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $9_1 | 0) | 0;
                           if (!($17_1 & 8 | 0)) {
                            break block56
                           }
                           $12_1 = $9_1 - $13_1 | 0;
                           $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1 + 1 | 0;
                           break block56;
                          }
                          block57 : {
                           i64toi32_i32$2 = $7_1;
                           i64toi32_i32$0 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                           i64toi32_i32$1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                           $25_1 = i64toi32_i32$0;
                           $25$hi = i64toi32_i32$1;
                           i64toi32_i32$2 = i64toi32_i32$0;
                           i64toi32_i32$0 = -1;
                           i64toi32_i32$3 = -1;
                           if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
                            $33_1 = 1
                           } else {
                            if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
                             if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                              $34_1 = 0
                             } else {
                              $34_1 = 1
                             }
                             $35_1 = $34_1;
                            } else {
                             $35_1 = 0
                            }
                            $33_1 = $35_1;
                           }
                           if ($33_1) {
                            break block57
                           }
                           i64toi32_i32$2 = $25$hi;
                           i64toi32_i32$2 = 0;
                           i64toi32_i32$3 = 0;
                           i64toi32_i32$1 = $25$hi;
                           i64toi32_i32$0 = $25_1;
                           i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
                           i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                           $25_1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                           $25$hi = i64toi32_i32$5;
                           i64toi32_i32$3 = $7_1;
                           HEAP32[($7_1 + 48 | 0) >> 2] = $25_1;
                           HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$5;
                           $16_1 = 1;
                           $24_1 = 65637;
                           break block48;
                          }
                          block58 : {
                           if (!($17_1 & 2048 | 0)) {
                            break block58
                           }
                           $16_1 = 1;
                           $24_1 = 65638;
                           break block48;
                          }
                          $16_1 = $17_1 & 1 | 0;
                          $24_1 = $16_1 ? 65639 : 65637;
                         }
                         i64toi32_i32$5 = $25$hi;
                         $13_1 = $1026($25_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                        }
                        if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                         break block
                        }
                        $17_1 = $21_1 ? $17_1 & -65537 | 0 : $17_1;
                        block59 : {
                         i64toi32_i32$5 = $25$hi;
                         i64toi32_i32$2 = $25_1;
                         i64toi32_i32$3 = 0;
                         i64toi32_i32$0 = 0;
                         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
                          break block59
                         }
                         if ($20_1) {
                          break block59
                         }
                         $13_1 = $9_1;
                         $22_1 = $13_1;
                         $20_1 = 0;
                         break block34;
                        }
                        i64toi32_i32$2 = $25$hi;
                        $12_1 = ($9_1 - $13_1 | 0) + !($25_1 | i64toi32_i32$2 | 0) | 0;
                        $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1;
                        break block47;
                       }
                       $12_1 = HEAPU8[($7_1 + 48 | 0) >> 0] | 0;
                       break block60;
                      }
                      $12_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                      $13_1 = $12_1 ? $12_1 : 67231;
                      $12_1 = $1012($13_1 | 0, ($20_1 >>> 0 < 2147483647 >>> 0 ? $20_1 : 2147483647) | 0) | 0;
                      $22_1 = $13_1 + $12_1 | 0;
                      block61 : {
                       if (($20_1 | 0) <= (-1 | 0)) {
                        break block61
                       }
                       $17_1 = $23_1;
                       $20_1 = $12_1;
                       break block34;
                      }
                      $17_1 = $23_1;
                      $20_1 = $12_1;
                      if (HEAPU8[$22_1 >> 0] | 0) {
                       break block
                      }
                      break block34;
                     }
                     i64toi32_i32$0 = $7_1;
                     i64toi32_i32$2 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                     i64toi32_i32$5 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                     $25_1 = i64toi32_i32$2;
                     $25$hi = i64toi32_i32$5;
                     if (!!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
                      break block62
                     }
                     $12_1 = 0;
                     break block60;
                    }
                    block63 : {
                     if (!$20_1) {
                      break block63
                     }
                     $14_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                     break block64;
                    }
                    $12_1 = 0;
                    $1027($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $17_1 | 0);
                    break block65;
                   }
                   HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                   i64toi32_i32$5 = $25$hi;
                   HEAP32[($7_1 + 8 | 0) >> 2] = $25_1;
                   HEAP32[($7_1 + 48 | 0) >> 2] = $7_1 + 8 | 0;
                   $14_1 = $7_1 + 8 | 0;
                   $20_1 = -1;
                  }
                  $12_1 = 0;
                  block66 : {
                   label5 : while (1) {
                    $15_1 = HEAP32[$14_1 >> 2] | 0;
                    if (!$15_1) {
                     break block66
                    }
                    $15_1 = $1014($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                    if (($15_1 | 0) < (0 | 0)) {
                     break block32
                    }
                    if ($15_1 >>> 0 > ($20_1 - $12_1 | 0) >>> 0) {
                     break block66
                    }
                    $14_1 = $14_1 + 4 | 0;
                    $12_1 = $15_1 + $12_1 | 0;
                    if ($12_1 >>> 0 < $20_1 >>> 0) {
                     continue label5
                    }
                    break label5;
                   };
                  }
                  $22_1 = 61;
                  if (($12_1 | 0) < (0 | 0)) {
                   break block26
                  }
                  $1027($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 | 0);
                  block67 : {
                   if ($12_1) {
                    break block67
                   }
                   $12_1 = 0;
                   break block65;
                  }
                  $15_1 = 0;
                  $14_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                  label6 : while (1) {
                   $13_1 = HEAP32[$14_1 >> 2] | 0;
                   if (!$13_1) {
                    break block65
                   }
                   $13_1 = $1014($7_1 + 4 | 0 | 0, $13_1 | 0) | 0;
                   $15_1 = $13_1 + $15_1 | 0;
                   if ($15_1 >>> 0 > $12_1 >>> 0) {
                    break block65
                   }
                   $1021($0_1 | 0, $7_1 + 4 | 0 | 0, $13_1 | 0);
                   $14_1 = $14_1 + 4 | 0;
                   if ($15_1 >>> 0 < $12_1 >>> 0) {
                    continue label6
                   }
                   break label6;
                  };
                 }
                 $1027($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 ^ 8192 | 0 | 0);
                 $12_1 = ($19_1 | 0) > ($12_1 | 0) ? $19_1 : $12_1;
                 continue label1;
                }
                if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                 break block
                }
                $22_1 = 61;
                $12_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 48 | 0) >> 3], $19_1, $20_1, $17_1, $12_1) | 0;
                if (($12_1 | 0) >= (0 | 0)) {
                 continue label1
                }
                break block26;
               }
               $14_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
               $12_1 = $12_1 + 1 | 0;
               continue label7;
              };
             }
             if ($0_1) {
              break block68
             }
             if (!$10_1) {
              break block31
             }
             $12_1 = 1;
             block69 : {
              label8 : while (1) {
               $14_1 = HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
               if (!$14_1) {
                break block69
               }
               $1023($3_1 + ($12_1 << 3 | 0) | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
               $11_1 = 1;
               $12_1 = $12_1 + 1 | 0;
               if (($12_1 | 0) != (10 | 0)) {
                continue label8
               }
               break block68;
              };
             }
             block70 : {
              if ($12_1 >>> 0 < 10 >>> 0) {
               break block70
              }
              $11_1 = 1;
              break block68;
             }
             label9 : while (1) {
              if (HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0) {
               break block15
              }
              $11_1 = 1;
              $12_1 = $12_1 + 1 | 0;
              if (($12_1 | 0) == (10 | 0)) {
               break block68
              }
              continue label9;
             };
            }
            $22_1 = 28;
            break block26;
           }
           HEAP8[($7_1 + 39 | 0) >> 0] = $12_1;
           $20_1 = 1;
           $13_1 = $8_1;
           $22_1 = $9_1;
           $17_1 = $23_1;
           break block34;
          }
          $22_1 = $9_1;
         }
         $1_1 = $22_1 - $13_1 | 0;
         $18_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1;
         if (($18_1 | 0) > ($16_1 ^ 2147483647 | 0 | 0)) {
          break block
         }
         $22_1 = 61;
         $15_1 = $16_1 + $18_1 | 0;
         $12_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1;
         if (($12_1 | 0) > ($14_1 | 0)) {
          break block26
         }
         $1027($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 | 0);
         $1021($0_1 | 0, $24_1 | 0, $16_1 | 0);
         $1027($0_1 | 0, 48 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 65536 | 0 | 0);
         $1027($0_1 | 0, 48 | 0, $18_1 | 0, $1_1 | 0, 0 | 0);
         $1021($0_1 | 0, $13_1 | 0, $1_1 | 0);
         $1027($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 8192 | 0 | 0);
         $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
         continue label1;
        }
        break label1;
       };
       break label4;
      };
      $11_1 = 0;
      break block68;
     }
     $22_1 = 61;
    }
    HEAP32[($990() | 0) >> 2] = $22_1;
   }
   $11_1 = -1;
  }
  global$0 = $7_1 + 64 | 0;
  return $11_1 | 0;
 }
 
 function $1021($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break block
   }
   $1016($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $1022($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = 0;
  block : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = (HEAP8[$2_1 >> 0] | 0) + -48 | 0;
   if ($3_1 >>> 0 <= 9 >>> 0) {
    break block
   }
   return 0 | 0;
  }
  label : while (1) {
   $4_1 = -1;
   block1 : {
    if ($1_1 >>> 0 > 214748364 >>> 0) {
     break block1
    }
    $1_1 = Math_imul($1_1, 10);
    $4_1 = $3_1 >>> 0 > ($1_1 ^ 2147483647 | 0) >>> 0 ? -1 : $3_1 + $1_1 | 0;
   }
   $3_1 = $2_1 + 1 | 0;
   HEAP32[$0_1 >> 2] = $3_1;
   $5_1 = HEAP8[($2_1 + 1 | 0) >> 0] | 0;
   $1_1 = $4_1;
   $2_1 = $3_1;
   $3_1 = $5_1 + -48 | 0;
   if ($3_1 >>> 0 < 10 >>> 0) {
    continue label
   }
   break label;
  };
  return $1_1 | 0;
 }
 
 function $1023($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0, $29_1 = 0, $37_1 = 0, $45_1 = 0, $55_1 = 0, $63_1 = 0, $71_1 = 0, $79_1 = 0, $87_1 = 0, $97_1 = 0, $105_1 = 0, $115_1 = 0, $125_1 = 0, $133_1 = 0, $141_1 = 0;
  block18 : {
   switch ($1_1 + -9 | 0 | 0) {
   case 0:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   case 1:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $21_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $29_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $37_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $45_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $55_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $55_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $87_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $97_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $97_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $115_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $115_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $125_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $125_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $133_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $141_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
    break;
   default:
    break block18;
   };
  }
 }
 
 function $1024($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  block : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break block
   }
   label : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 79552 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label
    }
    break label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1025($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  block : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break block
   }
   label : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label
    }
    break label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1026($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  block1 : {
   block : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break block
    }
    i64toi32_i32$2 = i64toi32_i32$0;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break block1;
   }
   label : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label
    }
    break label;
   };
  }
  block2 : {
   i64toi32_i32$2 = $2$hi;
   if (!($2_1 | i64toi32_i32$2 | 0)) {
    break block2
   }
   $3_1 = $2_1;
   label1 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label1
    }
    break label1;
   };
  }
  return $1_1 | 0;
 }
 
 function $1027($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  block : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break block
   }
   if ($4_1 & 73728 | 0) {
    break block
   }
   $3_1 = $2_1 - $3_1 | 0;
   $2_1 = $3_1 >>> 0 < 256 >>> 0;
   $1018($5_1 | 0, $1_1 | 0, ($2_1 ? $3_1 : 256) | 0) | 0;
   block1 : {
    if ($2_1) {
     break block1
    }
    label : while (1) {
     $1021($0_1 | 0, $5_1 | 0, 256 | 0);
     $3_1 = $3_1 + -256 | 0;
     if ($3_1 >>> 0 > 255 >>> 0) {
      continue label
     }
     break label;
    };
   }
   $1021($0_1 | 0, $5_1 | 0, $3_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $1028($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1019($0_1 | 0, $1_1 | 0, $2_1 | 0, 31 | 0, 32 | 0) | 0 | 0;
 }
 
 function $1029($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $11_1 = 0, $18_1 = 0, $19_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $6_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $22_1 = 0, i64toi32_i32$2 = 0, $23_1 = 0, $20_1 = 0, $17_1 = 0, $8_1 = 0, $27_1 = 0.0, $13_1 = 0, $24_1 = 0, $14_1 = 0, $16_1 = 0, $24$hi = 0, $9_1 = 0, $21_1 = 0, $7_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $142_1 = 0, $25$hi = 0, $51_1 = 0, $900_1 = 0, $133_1 = 0, $25_1 = 0, $172_1 = 0, $174$hi = 0, $176$hi = 0, $178_1 = 0, $178$hi = 0, $26$hi = 0, $184_1 = 0, $184$hi = 0, $392_1 = 0.0, $893_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  block1 : {
   block : {
    i64toi32_i32$0 = $1031(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $48_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $49_1 = 0
      } else {
       $49_1 = 1
      }
      $50_1 = $49_1;
     } else {
      $50_1 = 0
     }
     $48_1 = $50_1;
    }
    if ($48_1) {
     break block
    }
    $8_1 = 1;
    $9_1 = 65647;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $1031(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break block1;
   }
   block2 : {
    if (!($4_1 & 2048 | 0)) {
     break block2
    }
    $8_1 = 1;
    $9_1 = 65650;
    break block1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 65653 : 65648;
   $7_1 = !$8_1;
  }
  block4 : {
   block3 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block3
    }
    $10_1 = $8_1 + 3 | 0;
    $1027($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $1021($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $1021($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 65999 : 66446) : $11_1 ? 66233 : 66480) | 0, 3 | 0);
    $1027($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($2_1 | 0) > ($10_1 | 0) ? $2_1 : $10_1;
    break block4;
   }
   $13_1 = $6_1 + 16 | 0;
   block7 : {
    block8 : {
     block6 : {
      block5 : {
       $1_1 = +$1015(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break block5
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $14_1 = $5_1 | 32 | 0;
       if (($14_1 | 0) != (97 | 0)) {
        break block6
       }
       break block7;
      }
      $14_1 = $5_1 | 32 | 0;
      if (($14_1 | 0) == (97 | 0)) {
       break block7
      }
      $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $16_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break block8;
     }
     $16_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $16_1;
     $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $17_1 = ($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 0 : 288) | 0;
    $11_1 = $17_1;
    label : while (1) {
     $133_1 = $11_1;
     if ($1_1 < 4294967295.0 & $1_1 >= 0.0 | 0) {
      $142_1 = ~~$1_1 >>> 0
     } else {
      $142_1 = 0
     }
     $10_1 = $142_1;
     HEAP32[$133_1 >> 2] = $10_1;
     $11_1 = $11_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label
     }
     break label;
    };
    block10 : {
     block9 : {
      if (($16_1 | 0) >= (1 | 0)) {
       break block9
      }
      $18_1 = $16_1;
      $10_1 = $11_1;
      $19_1 = $17_1;
      break block10;
     }
     $19_1 = $17_1;
     $18_1 = $16_1;
     label3 : while (1) {
      $18_1 = $18_1 >>> 0 < 29 >>> 0 ? $18_1 : 29;
      block11 : {
       $10_1 = $11_1 + -4 | 0;
       if ($10_1 >>> 0 < $19_1 >>> 0) {
        break block11
       }
       i64toi32_i32$1 = 0;
       $25_1 = $18_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label1 : while (1) {
        $172_1 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $174$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $174$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $51_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $51_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $176$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $178_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $178$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $176$hi;
        i64toi32_i32$1 = $51_1;
        i64toi32_i32$2 = $178$hi;
        i64toi32_i32$3 = $178_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $26$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $184_1 = i64toi32_i32$1;
        $184$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $26$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $184$hi;
        i64toi32_i32$3 = $184_1;
        i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$172_1 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $19_1 >>> 0) {
         continue label1
        }
        break label1;
       };
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 1e9;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
        break block11
       }
       $19_1 = $19_1 + -4 | 0;
       i64toi32_i32$5 = $24$hi;
       HEAP32[$19_1 >> 2] = $24_1;
      }
      block12 : {
       label2 : while (1) {
        $10_1 = $11_1;
        if ($10_1 >>> 0 <= $19_1 >>> 0) {
         break block12
        }
        $11_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$11_1 >> 2] | 0)) {
         continue label2
        }
        break label2;
       };
      }
      $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $18_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
      $11_1 = $10_1;
      if (($18_1 | 0) > (0 | 0)) {
       continue label3
      }
      break label3;
     };
    }
    block13 : {
     if (($18_1 | 0) > (-1 | 0)) {
      break block13
     }
     $20_1 = ((($15_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $21_1 = ($14_1 | 0) == (102 | 0);
     label5 : while (1) {
      $11_1 = 0 - $18_1 | 0;
      $12_1 = $11_1 >>> 0 < 9 >>> 0 ? $11_1 : 9;
      block15 : {
       block14 : {
        if ($19_1 >>> 0 < $10_1 >>> 0) {
         break block14
        }
        $11_1 = !(HEAP32[$19_1 >> 2] | 0) << 2 | 0;
        break block15;
       }
       $22_1 = 1e9 >>> $12_1 | 0;
       $23_1 = (-1 << $12_1 | 0) ^ -1 | 0;
       $18_1 = 0;
       $11_1 = $19_1;
       label4 : while (1) {
        $3_1 = HEAP32[$11_1 >> 2] | 0;
        HEAP32[$11_1 >> 2] = ($3_1 >>> $12_1 | 0) + $18_1 | 0;
        $18_1 = Math_imul($3_1 & $23_1 | 0, $22_1);
        $11_1 = $11_1 + 4 | 0;
        if ($11_1 >>> 0 < $10_1 >>> 0) {
         continue label4
        }
        break label4;
       };
       $11_1 = !(HEAP32[$19_1 >> 2] | 0) << 2 | 0;
       if (!$18_1) {
        break block15
       }
       HEAP32[$10_1 >> 2] = $18_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $12_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
      $19_1 = $19_1 + $11_1 | 0;
      $11_1 = $21_1 ? $17_1 : $19_1;
      $10_1 = (($10_1 - $11_1 | 0) >> 2 | 0 | 0) > ($20_1 | 0) ? $11_1 + ($20_1 << 2 | 0) | 0 : $10_1;
      if (($18_1 | 0) < (0 | 0)) {
       continue label5
      }
      break label5;
     };
    }
    $18_1 = 0;
    block16 : {
     if ($19_1 >>> 0 >= $10_1 >>> 0) {
      break block16
     }
     $18_1 = Math_imul(($17_1 - $19_1 | 0) >> 2 | 0, 9);
     $11_1 = 10;
     $3_1 = HEAP32[$19_1 >> 2] | 0;
     if ($3_1 >>> 0 < 10 >>> 0) {
      break block16
     }
     label6 : while (1) {
      $18_1 = $18_1 + 1 | 0;
      $11_1 = Math_imul($11_1, 10);
      if ($3_1 >>> 0 >= $11_1 >>> 0) {
       continue label6
      }
      break label6;
     };
    }
    block17 : {
     $11_1 = ($15_1 - (($14_1 | 0) == (102 | 0) ? 0 : $18_1) | 0) - (($15_1 | 0) != (0 | 0) & ($14_1 | 0) == (103 | 0) | 0) | 0;
     if (($11_1 | 0) >= (Math_imul(($10_1 - $17_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break block17
     }
     $3_1 = $11_1 + 9216 | 0;
     $22_1 = ($3_1 | 0) / (9 | 0) | 0;
     $12_1 = (($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? -4092 : -3804) | 0) + ($22_1 << 2 | 0) | 0;
     $11_1 = 10;
     block18 : {
      $3_1 = $3_1 - Math_imul($22_1, 9) | 0;
      if (($3_1 | 0) > (7 | 0)) {
       break block18
      }
      label7 : while (1) {
       $11_1 = Math_imul($11_1, 10);
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) != (8 | 0)) {
        continue label7
       }
       break label7;
      };
     }
     $23_1 = $12_1 + 4 | 0;
     block20 : {
      block19 : {
       $3_1 = HEAP32[$12_1 >> 2] | 0;
       $20_1 = ($3_1 >>> 0) / ($11_1 >>> 0) | 0;
       $22_1 = $3_1 - Math_imul($20_1, $11_1) | 0;
       if ($22_1) {
        break block19
       }
       if (($23_1 | 0) == ($10_1 | 0)) {
        break block20
       }
      }
      block22 : {
       block21 : {
        if ($20_1 & 1 | 0) {
         break block21
        }
        $1_1 = 9007199254740992.0;
        if (($11_1 | 0) != (1e9 | 0)) {
         break block22
        }
        if ($12_1 >>> 0 <= $19_1 >>> 0) {
         break block22
        }
        if (!((HEAPU8[($12_1 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break block22
        }
       }
       $1_1 = 9007199254740994.0;
      }
      $392_1 = ($23_1 | 0) == ($10_1 | 0) ? 1.0 : 1.5;
      $23_1 = $11_1 >>> 1 | 0;
      $27_1 = $22_1 >>> 0 < $23_1 >>> 0 ? .5 : ($22_1 | 0) == ($23_1 | 0) ? $392_1 : 1.5;
      block23 : {
       if ($7_1) {
        break block23
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break block23
       }
       $27_1 = -$27_1;
       $1_1 = -$1_1;
      }
      $3_1 = $3_1 - $22_1 | 0;
      HEAP32[$12_1 >> 2] = $3_1;
      if ($1_1 + $27_1 == $1_1) {
       break block20
      }
      $11_1 = $3_1 + $11_1 | 0;
      HEAP32[$12_1 >> 2] = $11_1;
      block24 : {
       if ($11_1 >>> 0 < 1e9 >>> 0) {
        break block24
       }
       label8 : while (1) {
        HEAP32[$12_1 >> 2] = 0;
        block25 : {
         $12_1 = $12_1 + -4 | 0;
         if ($12_1 >>> 0 >= $19_1 >>> 0) {
          break block25
         }
         $19_1 = $19_1 + -4 | 0;
         HEAP32[$19_1 >> 2] = 0;
        }
        $11_1 = (HEAP32[$12_1 >> 2] | 0) + 1 | 0;
        HEAP32[$12_1 >> 2] = $11_1;
        if ($11_1 >>> 0 > 999999999 >>> 0) {
         continue label8
        }
        break label8;
       };
      }
      $18_1 = Math_imul(($17_1 - $19_1 | 0) >> 2 | 0, 9);
      $11_1 = 10;
      $3_1 = HEAP32[$19_1 >> 2] | 0;
      if ($3_1 >>> 0 < 10 >>> 0) {
       break block20
      }
      label9 : while (1) {
       $18_1 = $18_1 + 1 | 0;
       $11_1 = Math_imul($11_1, 10);
       if ($3_1 >>> 0 >= $11_1 >>> 0) {
        continue label9
       }
       break label9;
      };
     }
     $11_1 = $12_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $11_1 >>> 0 ? $11_1 : $10_1;
    }
    block26 : {
     label10 : while (1) {
      $11_1 = $10_1;
      $3_1 = $10_1 >>> 0 <= $19_1 >>> 0;
      if ($3_1) {
       break block26
      }
      $10_1 = $10_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label10
      }
      break label10;
     };
    }
    block28 : {
     block27 : {
      if (($14_1 | 0) == (103 | 0)) {
       break block27
      }
      $22_1 = $4_1 & 8 | 0;
      break block28;
     }
     $10_1 = $15_1 ? $15_1 : 1;
     $12_1 = ($10_1 | 0) > ($18_1 | 0) & ($18_1 | 0) > (-5 | 0) | 0;
     $15_1 = ($12_1 ? $18_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($12_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break block28
     }
     $10_1 = -9;
     block29 : {
      if ($3_1) {
       break block29
      }
      $12_1 = HEAP32[($11_1 + -4 | 0) >> 2] | 0;
      if (!$12_1) {
       break block29
      }
      $3_1 = 10;
      $10_1 = 0;
      if (($12_1 >>> 0) % (10 >>> 0) | 0) {
       break block29
      }
      label11 : while (1) {
       $22_1 = $10_1;
       $10_1 = $10_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if (!(($12_1 >>> 0) % ($3_1 >>> 0) | 0)) {
        continue label11
       }
       break label11;
      };
      $10_1 = $22_1 ^ -1 | 0;
     }
     $3_1 = Math_imul(($11_1 - $17_1 | 0) >> 2 | 0, 9);
     block30 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break block30
      }
      $22_1 = 0;
      $10_1 = ($3_1 + $10_1 | 0) + -9 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
      break block28;
     }
     $22_1 = 0;
     $10_1 = (($18_1 + $3_1 | 0) + $10_1 | 0) + -9 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
    }
    $12_1 = -1;
    $23_1 = $15_1 | $22_1 | 0;
    if (($15_1 | 0) > (($23_1 ? 2147483645 : 2147483646) | 0)) {
     break block4
    }
    $3_1 = ($15_1 + (($23_1 | 0) != (0 | 0)) | 0) + 1 | 0;
    block32 : {
     block31 : {
      $21_1 = $5_1 & -33 | 0;
      if (($21_1 | 0) != (70 | 0)) {
       break block31
      }
      if (($18_1 | 0) > ($3_1 ^ 2147483647 | 0 | 0)) {
       break block4
      }
      $10_1 = ($18_1 | 0) > (0 | 0) ? $18_1 : 0;
      break block32;
     }
     block33 : {
      $10_1 = $18_1 >> 31 | 0;
      i64toi32_i32$5 = 0;
      $10_1 = $1026(($18_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$5 | 0, $13_1 | 0) | 0;
      if (($13_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break block33
      }
      label12 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($13_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label12
       }
       break label12;
      };
     }
     $20_1 = $10_1 + -2 | 0;
     HEAP8[$20_1 >> 0] = $5_1;
     $12_1 = -1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $13_1 - $20_1 | 0;
     if (($10_1 | 0) > ($3_1 ^ 2147483647 | 0 | 0)) {
      break block4
     }
    }
    $12_1 = -1;
    $10_1 = $10_1 + $3_1 | 0;
    if (($10_1 | 0) > ($8_1 ^ 2147483647 | 0 | 0)) {
     break block4
    }
    $5_1 = $10_1 + $8_1 | 0;
    $1027($0_1 | 0, 32 | 0, $2_1 | 0, $5_1 | 0, $4_1 | 0);
    $1021($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $1027($0_1 | 0, 48 | 0, $2_1 | 0, $5_1 | 0, $4_1 ^ 65536 | 0 | 0);
    block45 : {
     block40 : {
      block38 : {
       block34 : {
        if (($21_1 | 0) != (70 | 0)) {
         break block34
        }
        $18_1 = $6_1 + 16 | 0 | 9 | 0;
        $3_1 = $19_1 >>> 0 > $17_1 >>> 0 ? $17_1 : $19_1;
        $19_1 = $3_1;
        label14 : while (1) {
         i64toi32_i32$3 = $19_1;
         i64toi32_i32$5 = HEAP32[$19_1 >> 2] | 0;
         i64toi32_i32$4 = 0;
         $10_1 = $1026(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $18_1 | 0) | 0;
         block36 : {
          block35 : {
           if (($19_1 | 0) == ($3_1 | 0)) {
            break block35
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break block36
           }
           label13 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label13
            }
            break block36;
           };
          }
          if (($10_1 | 0) != ($18_1 | 0)) {
           break block36
          }
          $10_1 = $10_1 + -1 | 0;
          HEAP8[$10_1 >> 0] = 48;
         }
         $1021($0_1 | 0, $10_1 | 0, $18_1 - $10_1 | 0 | 0);
         $19_1 = $19_1 + 4 | 0;
         if ($19_1 >>> 0 <= $17_1 >>> 0) {
          continue label14
         }
         break label14;
        };
        block37 : {
         if (!$23_1) {
          break block37
         }
         $1021($0_1 | 0, 67227 | 0, 1 | 0);
        }
        if ($19_1 >>> 0 >= $11_1 >>> 0) {
         break block38
        }
        if (($15_1 | 0) < (1 | 0)) {
         break block38
        }
        label16 : while (1) {
         block39 : {
          i64toi32_i32$3 = $19_1;
          i64toi32_i32$4 = HEAP32[$19_1 >> 2] | 0;
          i64toi32_i32$5 = 0;
          $10_1 = $1026(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $18_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break block39
          }
          label15 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label15
           }
           break label15;
          };
         }
         $1021($0_1 | 0, $10_1 | 0, (($15_1 | 0) < (9 | 0) ? $15_1 : 9) | 0);
         $10_1 = $15_1 + -9 | 0;
         $19_1 = $19_1 + 4 | 0;
         if ($19_1 >>> 0 >= $11_1 >>> 0) {
          break block40
         }
         $3_1 = ($15_1 | 0) > (9 | 0);
         $15_1 = $10_1;
         if ($3_1) {
          continue label16
         }
         break block40;
        };
       }
       block41 : {
        if (($15_1 | 0) < (0 | 0)) {
         break block41
        }
        $12_1 = $11_1 >>> 0 > $19_1 >>> 0 ? $11_1 : $19_1 + 4 | 0;
        $18_1 = $6_1 + 16 | 0 | 9 | 0;
        $11_1 = $19_1;
        label18 : while (1) {
         block42 : {
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$5 = HEAP32[$11_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $1026(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $18_1 | 0) | 0;
          if (($10_1 | 0) != ($18_1 | 0)) {
           break block42
          }
          $10_1 = $10_1 + -1 | 0;
          HEAP8[$10_1 >> 0] = 48;
         }
         block44 : {
          block43 : {
           if (($11_1 | 0) == ($19_1 | 0)) {
            break block43
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break block44
           }
           label17 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label17
            }
            break block44;
           };
          }
          $1021($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          if (!($15_1 | $22_1 | 0)) {
           break block44
          }
          $1021($0_1 | 0, 67227 | 0, 1 | 0);
         }
         $3_1 = $18_1 - $10_1 | 0;
         $1021($0_1 | 0, $10_1 | 0, (($15_1 | 0) > ($3_1 | 0) ? $3_1 : $15_1) | 0);
         $15_1 = $15_1 - $3_1 | 0;
         $11_1 = $11_1 + 4 | 0;
         if ($11_1 >>> 0 >= $12_1 >>> 0) {
          break block41
         }
         if (($15_1 | 0) > (-1 | 0)) {
          continue label18
         }
         break label18;
        };
       }
       $1027($0_1 | 0, 48 | 0, $15_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $1021($0_1 | 0, $20_1 | 0, $13_1 - $20_1 | 0 | 0);
       break block45;
      }
      $10_1 = $15_1;
     }
     $1027($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $1027($0_1 | 0, 32 | 0, $2_1 | 0, $5_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($2_1 | 0) > ($5_1 | 0) ? $2_1 : $5_1;
    break block4;
   }
   $20_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   block46 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break block46
    }
    $10_1 = 12 - $3_1 | 0;
    $27_1 = 16.0;
    label19 : while (1) {
     $27_1 = $27_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label19
     }
     break label19;
    };
    block47 : {
     if ((HEAPU8[$20_1 >> 0] | 0 | 0) != (45 | 0)) {
      break block47
     }
     $1_1 = -($27_1 + (-$1_1 - $27_1));
     break block46;
    }
    $1_1 = $1_1 + $27_1 - $27_1;
   }
   block48 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $10_1 = $11_1 >> 31 | 0;
    i64toi32_i32$4 = 0;
    $10_1 = $1026(($11_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$4 | 0, $13_1 | 0) | 0;
    if (($10_1 | 0) != ($13_1 | 0)) {
     break block48
    }
    $10_1 = $10_1 + -1 | 0;
    HEAP8[$10_1 >> 0] = 48;
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $19_1 = $5_1 & 32 | 0;
   $23_1 = $10_1 + -2 | 0;
   HEAP8[$23_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($11_1 | 0) < (0 | 0) ? 45 : 43;
   $18_1 = ($3_1 | 0) < (1 | 0) & !($4_1 & 8 | 0) | 0;
   $11_1 = $6_1 + 16 | 0;
   label20 : while (1) {
    $10_1 = $11_1;
    $893_1 = $10_1;
    if (Math_abs($1_1) < 2147483647.0) {
     $900_1 = ~~$1_1
    } else {
     $900_1 = -2147483648
    }
    $11_1 = $900_1;
    HEAP8[$893_1 >> 0] = HEAPU8[($11_1 + 79552 | 0) >> 0] | 0 | $19_1 | 0;
    $1_1 = ($1_1 - +($11_1 | 0)) * 16.0;
    block49 : {
     $11_1 = $10_1 + 1 | 0;
     if (($11_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break block49
     }
     if ($1_1 == 0.0 & $18_1 | 0) {
      break block49
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $11_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label20
    }
    break label20;
   };
   $12_1 = -1;
   $19_1 = $13_1 - $23_1 | 0;
   $18_1 = $22_1 + $19_1 | 0;
   if (($3_1 | 0) > (2147483645 - $18_1 | 0 | 0)) {
    break block4
   }
   $10_1 = $11_1 - ($6_1 + 16 | 0) | 0;
   $3_1 = $3_1 ? (($10_1 + -2 | 0 | 0) < ($3_1 | 0) ? $3_1 + 2 | 0 : $10_1) : $10_1;
   $11_1 = $18_1 + $3_1 | 0;
   $1027($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 | 0);
   $1021($0_1 | 0, $20_1 | 0, $22_1 | 0);
   $1027($0_1 | 0, 48 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $1021($0_1 | 0, $6_1 + 16 | 0 | 0, $10_1 | 0);
   $1027($0_1 | 0, 48 | 0, $3_1 - $10_1 | 0 | 0, 0 | 0, 0 | 0);
   $1021($0_1 | 0, $23_1 | 0, $19_1 | 0);
   $1027($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 8192 | 0 | 0);
   $12_1 = ($2_1 | 0) > ($11_1 | 0) ? $2_1 : $11_1;
  }
  global$0 = $6_1 + 560 | 0;
  return $12_1 | 0;
 }
 
 function $1030($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$1047($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $1031($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1032($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $6_1 = 0, $12_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10_1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $9_1 = 0, $87_1 = 0, $201_1 = 0, $1154_1 = 0, $1156_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  block5 : {
   block88 : {
    block4 : {
     block6 : {
      block : {
       if ($0_1 >>> 0 > 244 >>> 0) {
        break block
       }
       block1 : {
        $2_1 = HEAP32[(0 + 96184 | 0) >> 2] | 0;
        $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & 504 | 0;
        $4_1 = $3_1 >>> 3 | 0;
        $0_1 = $2_1 >>> $4_1 | 0;
        if (!($0_1 & 3 | 0)) {
         break block1
        }
        block3 : {
         block2 : {
          $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
          $0_1 = $3_1 << 3 | 0;
          $5_1 = $0_1 + 96224 | 0;
          $4_1 = HEAP32[($0_1 + 96232 | 0) >> 2] | 0;
          $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
          if (($5_1 | 0) != ($0_1 | 0)) {
           break block2
          }
          HEAP32[(0 + 96184 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
          break block3;
         }
         if ($0_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
          break block4
         }
         if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block4
         }
         HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
         HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $4_1 + 8 | 0;
        $3_1 = $3_1 << 3 | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
        $4_1 = $4_1 + $3_1 | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
        break block5;
       }
       $6_1 = HEAP32[(0 + 96192 | 0) >> 2] | 0;
       if ($3_1 >>> 0 <= $6_1 >>> 0) {
        break block6
       }
       block7 : {
        if (!$0_1) {
         break block7
        }
        block9 : {
         block8 : {
          $87_1 = $0_1 << $4_1 | 0;
          $0_1 = 2 << $4_1 | 0;
          $5_1 = __wasm_ctz_i32($87_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0 | 0) | 0;
          $0_1 = $5_1 << 3 | 0;
          $7_1 = $0_1 + 96224 | 0;
          $0_1 = HEAP32[($0_1 + 96232 | 0) >> 2] | 0;
          $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if (($7_1 | 0) != ($4_1 | 0)) {
           break block8
          }
          $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
          HEAP32[(0 + 96184 | 0) >> 2] = $2_1;
          break block9;
         }
         if ($4_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
          break block4
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
          break block4
         }
         HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
         HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
        $7_1 = $0_1 + $3_1 | 0;
        $4_1 = $5_1 << 3 | 0;
        $3_1 = $4_1 - $3_1 | 0;
        HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
        HEAP32[($0_1 + $4_1 | 0) >> 2] = $3_1;
        block10 : {
         if (!$6_1) {
          break block10
         }
         $5_1 = ($6_1 & -8 | 0) + 96224 | 0;
         $4_1 = HEAP32[(0 + 96204 | 0) >> 2] | 0;
         block12 : {
          block11 : {
           $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
           if ($2_1 & $8_1 | 0) {
            break block11
           }
           HEAP32[(0 + 96184 | 0) >> 2] = $2_1 | $8_1 | 0;
           $8_1 = $5_1;
           break block12;
          }
          $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
          if ($8_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
           break block4
          }
         }
         HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
         HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
        }
        $0_1 = $0_1 + 8 | 0;
        HEAP32[(0 + 96204 | 0) >> 2] = $7_1;
        HEAP32[(0 + 96192 | 0) >> 2] = $3_1;
        break block5;
       }
       $9_1 = HEAP32[(0 + 96188 | 0) >> 2] | 0;
       if (!$9_1) {
        break block6
       }
       $7_1 = HEAP32[(((__wasm_ctz_i32($9_1 | 0) | 0) << 2 | 0) + 96488 | 0) >> 2] | 0;
       $4_1 = ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
       $5_1 = $7_1;
       block14 : {
        label : while (1) {
         block13 : {
          $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
          if ($0_1) {
           break block13
          }
          $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
          if (!$0_1) {
           break block14
          }
         }
         $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
         $201_1 = $5_1;
         $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
         $4_1 = $5_1 ? $201_1 : $4_1;
         $7_1 = $5_1 ? $0_1 : $7_1;
         $5_1 = $0_1;
         continue label;
        };
       }
       $10_1 = HEAP32[(0 + 96200 | 0) >> 2] | 0;
       if ($7_1 >>> 0 < $10_1 >>> 0) {
        break block4
       }
       $11_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
       block16 : {
        block15 : {
         $0_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
         if (($0_1 | 0) == ($7_1 | 0)) {
          break block15
         }
         $5_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
         if ($5_1 >>> 0 < $10_1 >>> 0) {
          break block4
         }
         if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
          break block4
         }
         if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
          break block4
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
         HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
         break block16;
        }
        block19 : {
         block18 : {
          block17 : {
           $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
           if (!$5_1) {
            break block17
           }
           $8_1 = $7_1 + 20 | 0;
           break block18;
          }
          $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
          if (!$5_1) {
           break block19
          }
          $8_1 = $7_1 + 16 | 0;
         }
         label1 : while (1) {
          $12_1 = $8_1;
          $0_1 = $5_1;
          $8_1 = $0_1 + 20 | 0;
          $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          $8_1 = $0_1 + 16 | 0;
          $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          break label1;
         };
         if ($12_1 >>> 0 < $10_1 >>> 0) {
          break block4
         }
         HEAP32[$12_1 >> 2] = 0;
         break block16;
        }
        $0_1 = 0;
       }
       block20 : {
        if (!$11_1) {
         break block20
        }
        block22 : {
         block21 : {
          $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
          $5_1 = ($8_1 << 2 | 0) + 96488 | 0;
          if (($7_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
           break block21
          }
          HEAP32[$5_1 >> 2] = $0_1;
          if ($0_1) {
           break block22
          }
          HEAP32[(0 + 96188 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
          break block20;
         }
         if ($11_1 >>> 0 < $10_1 >>> 0) {
          break block4
         }
         block24 : {
          block23 : {
           if ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
            break block23
           }
           HEAP32[($11_1 + 16 | 0) >> 2] = $0_1;
           break block24;
          }
          HEAP32[($11_1 + 20 | 0) >> 2] = $0_1;
         }
         if (!$0_1) {
          break block20
         }
        }
        if ($0_1 >>> 0 < $10_1 >>> 0) {
         break block4
        }
        HEAP32[($0_1 + 24 | 0) >> 2] = $11_1;
        block25 : {
         $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
         if (!$5_1) {
          break block25
         }
         if ($5_1 >>> 0 < $10_1 >>> 0) {
          break block4
         }
         HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
         HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
        }
        $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
        if (!$5_1) {
         break block20
        }
        if ($5_1 >>> 0 < $10_1 >>> 0) {
         break block4
        }
        HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
       }
       block27 : {
        block26 : {
         if ($4_1 >>> 0 > 15 >>> 0) {
          break block26
         }
         $0_1 = $4_1 + $3_1 | 0;
         HEAP32[($7_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
         $0_1 = $7_1 + $0_1 | 0;
         HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
         break block27;
        }
        HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
        $3_1 = $7_1 + $3_1 | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
        HEAP32[($3_1 + $4_1 | 0) >> 2] = $4_1;
        block28 : {
         if (!$6_1) {
          break block28
         }
         $5_1 = ($6_1 & -8 | 0) + 96224 | 0;
         $0_1 = HEAP32[(0 + 96204 | 0) >> 2] | 0;
         block30 : {
          block29 : {
           $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
           if ($8_1 & $2_1 | 0) {
            break block29
           }
           HEAP32[(0 + 96184 | 0) >> 2] = $8_1 | $2_1 | 0;
           $8_1 = $5_1;
           break block30;
          }
          $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
          if ($8_1 >>> 0 < $10_1 >>> 0) {
           break block4
          }
         }
         HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
         HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
         HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
         HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
        }
        HEAP32[(0 + 96204 | 0) >> 2] = $3_1;
        HEAP32[(0 + 96192 | 0) >> 2] = $4_1;
       }
       $0_1 = $7_1 + 8 | 0;
       break block5;
      }
      $3_1 = -1;
      if ($0_1 >>> 0 > -65 >>> 0) {
       break block6
      }
      $4_1 = $0_1 + 11 | 0;
      $3_1 = $4_1 & -8 | 0;
      $11_1 = HEAP32[(0 + 96188 | 0) >> 2] | 0;
      if (!$11_1) {
       break block6
      }
      $6_1 = 31;
      block31 : {
       if ($0_1 >>> 0 > 16777204 >>> 0) {
        break block31
       }
       $0_1 = Math_clz32($4_1 >>> 8 | 0);
       $6_1 = ((($3_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
      }
      $4_1 = 0 - $3_1 | 0;
      block37 : {
       block35 : {
        block33 : {
         block32 : {
          $5_1 = HEAP32[(($6_1 << 2 | 0) + 96488 | 0) >> 2] | 0;
          if ($5_1) {
           break block32
          }
          $0_1 = 0;
          $8_1 = 0;
          break block33;
         }
         $0_1 = 0;
         $7_1 = $3_1 << (($6_1 | 0) == (31 | 0) ? 0 : 25 - ($6_1 >>> 1 | 0) | 0) | 0;
         $8_1 = 0;
         label2 : while (1) {
          block34 : {
           $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
           if ($2_1 >>> 0 >= $4_1 >>> 0) {
            break block34
           }
           $4_1 = $2_1;
           $8_1 = $5_1;
           if ($4_1) {
            break block34
           }
           $4_1 = 0;
           $8_1 = $5_1;
           $0_1 = $5_1;
           break block35;
          }
          $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
          $12_1 = HEAP32[(($5_1 + (($7_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
          $0_1 = $2_1 ? (($2_1 | 0) == ($12_1 | 0) ? $0_1 : $2_1) : $0_1;
          $7_1 = $7_1 << 1 | 0;
          $5_1 = $12_1;
          if ($5_1) {
           continue label2
          }
          break label2;
         };
        }
        block36 : {
         if ($0_1 | $8_1 | 0) {
          break block36
         }
         $8_1 = 0;
         $0_1 = 2 << $6_1 | 0;
         $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $11_1 | 0;
         if (!$0_1) {
          break block6
         }
         $0_1 = HEAP32[(((__wasm_ctz_i32($0_1 | 0) | 0) << 2 | 0) + 96488 | 0) >> 2] | 0;
        }
        if (!$0_1) {
         break block37
        }
       }
       label3 : while (1) {
        $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
        $7_1 = $2_1 >>> 0 < $4_1 >>> 0;
        block38 : {
         $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         if ($5_1) {
          break block38
         }
         $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        }
        $4_1 = $7_1 ? $2_1 : $4_1;
        $8_1 = $7_1 ? $0_1 : $8_1;
        $0_1 = $5_1;
        if ($0_1) {
         continue label3
        }
        break label3;
       };
      }
      if (!$8_1) {
       break block6
      }
      if ($4_1 >>> 0 >= ((HEAP32[(0 + 96192 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
       break block6
      }
      $12_1 = HEAP32[(0 + 96200 | 0) >> 2] | 0;
      if ($8_1 >>> 0 < $12_1 >>> 0) {
       break block4
      }
      $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
      block40 : {
       block39 : {
        $0_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
        if (($0_1 | 0) == ($8_1 | 0)) {
         break block39
        }
        $5_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
        if ($5_1 >>> 0 < $12_1 >>> 0) {
         break block4
        }
        if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
         break block4
        }
        if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
         break block4
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
        HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
        break block40;
       }
       block43 : {
        block42 : {
         block41 : {
          $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
          if (!$5_1) {
           break block41
          }
          $7_1 = $8_1 + 20 | 0;
          break block42;
         }
         $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
         if (!$5_1) {
          break block43
         }
         $7_1 = $8_1 + 16 | 0;
        }
        label4 : while (1) {
         $2_1 = $7_1;
         $0_1 = $5_1;
         $7_1 = $0_1 + 20 | 0;
         $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         if ($5_1) {
          continue label4
         }
         $7_1 = $0_1 + 16 | 0;
         $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         if ($5_1) {
          continue label4
         }
         break label4;
        };
        if ($2_1 >>> 0 < $12_1 >>> 0) {
         break block4
        }
        HEAP32[$2_1 >> 2] = 0;
        break block40;
       }
       $0_1 = 0;
      }
      block44 : {
       if (!$6_1) {
        break block44
       }
       block46 : {
        block45 : {
         $7_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
         $5_1 = ($7_1 << 2 | 0) + 96488 | 0;
         if (($8_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
          break block45
         }
         HEAP32[$5_1 >> 2] = $0_1;
         if ($0_1) {
          break block46
         }
         $11_1 = $11_1 & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
         HEAP32[(0 + 96188 | 0) >> 2] = $11_1;
         break block44;
        }
        if ($6_1 >>> 0 < $12_1 >>> 0) {
         break block4
        }
        block48 : {
         block47 : {
          if ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
           break block47
          }
          HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
          break block48;
         }
         HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
        }
        if (!$0_1) {
         break block44
        }
       }
       if ($0_1 >>> 0 < $12_1 >>> 0) {
        break block4
       }
       HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
       block49 : {
        $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
        if (!$5_1) {
         break block49
        }
        if ($5_1 >>> 0 < $12_1 >>> 0) {
         break block4
        }
        HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
       }
       $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
       if (!$5_1) {
        break block44
       }
       if ($5_1 >>> 0 < $12_1 >>> 0) {
        break block4
       }
       HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
      }
      block51 : {
       block50 : {
        if ($4_1 >>> 0 > 15 >>> 0) {
         break block50
        }
        $0_1 = $4_1 + $3_1 | 0;
        HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
        $0_1 = $8_1 + $0_1 | 0;
        HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
        break block51;
       }
       HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
       $7_1 = $8_1 + $3_1 | 0;
       HEAP32[($7_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       HEAP32[($7_1 + $4_1 | 0) >> 2] = $4_1;
       block52 : {
        if ($4_1 >>> 0 > 255 >>> 0) {
         break block52
        }
        $0_1 = ($4_1 & -8 | 0) + 96224 | 0;
        block54 : {
         block53 : {
          $3_1 = HEAP32[(0 + 96184 | 0) >> 2] | 0;
          $4_1 = 1 << ($4_1 >>> 3 | 0) | 0;
          if ($3_1 & $4_1 | 0) {
           break block53
          }
          HEAP32[(0 + 96184 | 0) >> 2] = $3_1 | $4_1 | 0;
          $4_1 = $0_1;
          break block54;
         }
         $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         if ($4_1 >>> 0 < $12_1 >>> 0) {
          break block4
         }
        }
        HEAP32[($0_1 + 8 | 0) >> 2] = $7_1;
        HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
        HEAP32[($7_1 + 12 | 0) >> 2] = $0_1;
        HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
        break block51;
       }
       $0_1 = 31;
       block55 : {
        if ($4_1 >>> 0 > 16777215 >>> 0) {
         break block55
        }
        $0_1 = Math_clz32($4_1 >>> 8 | 0);
        $0_1 = ((($4_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
       }
       HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$0 = 0;
       HEAP32[($7_1 + 16 | 0) >> 2] = 0;
       HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $3_1 = ($0_1 << 2 | 0) + 96488 | 0;
       block58 : {
        block57 : {
         block56 : {
          $5_1 = 1 << $0_1 | 0;
          if ($11_1 & $5_1 | 0) {
           break block56
          }
          HEAP32[(0 + 96188 | 0) >> 2] = $11_1 | $5_1 | 0;
          HEAP32[$3_1 >> 2] = $7_1;
          HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
          break block57;
         }
         $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
         $5_1 = HEAP32[$3_1 >> 2] | 0;
         label5 : while (1) {
          $3_1 = $5_1;
          if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
           break block58
          }
          $5_1 = $0_1 >>> 29 | 0;
          $0_1 = $0_1 << 1 | 0;
          $2_1 = $3_1 + ($5_1 & 4 | 0) | 0;
          $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          if ($5_1) {
           continue label5
          }
          break label5;
         };
         $0_1 = $2_1 + 16 | 0;
         if ($0_1 >>> 0 < $12_1 >>> 0) {
          break block4
         }
         HEAP32[$0_1 >> 2] = $7_1;
         HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
        }
        HEAP32[($7_1 + 12 | 0) >> 2] = $7_1;
        HEAP32[($7_1 + 8 | 0) >> 2] = $7_1;
        break block51;
       }
       if ($3_1 >>> 0 < $12_1 >>> 0) {
        break block4
       }
       $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       if ($0_1 >>> 0 < $12_1 >>> 0) {
        break block4
       }
       HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
       HEAP32[($7_1 + 24 | 0) >> 2] = 0;
       HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = $8_1 + 8 | 0;
      break block5;
     }
     block59 : {
      $0_1 = HEAP32[(0 + 96192 | 0) >> 2] | 0;
      if ($0_1 >>> 0 < $3_1 >>> 0) {
       break block59
      }
      $4_1 = HEAP32[(0 + 96204 | 0) >> 2] | 0;
      block61 : {
       block60 : {
        $5_1 = $0_1 - $3_1 | 0;
        if ($5_1 >>> 0 < 16 >>> 0) {
         break block60
        }
        $7_1 = $4_1 + $3_1 | 0;
        HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
        HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
        break block61;
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
       $0_1 = $4_1 + $0_1 | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
       $7_1 = 0;
       $5_1 = 0;
      }
      HEAP32[(0 + 96192 | 0) >> 2] = $5_1;
      HEAP32[(0 + 96204 | 0) >> 2] = $7_1;
      $0_1 = $4_1 + 8 | 0;
      break block5;
     }
     block62 : {
      $7_1 = HEAP32[(0 + 96196 | 0) >> 2] | 0;
      if ($7_1 >>> 0 <= $3_1 >>> 0) {
       break block62
      }
      $4_1 = $7_1 - $3_1 | 0;
      HEAP32[(0 + 96196 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 96208 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 96208 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break block5;
     }
     block64 : {
      block63 : {
       if (!(HEAP32[(0 + 96656 | 0) >> 2] | 0)) {
        break block63
       }
       $4_1 = HEAP32[(0 + 96664 | 0) >> 2] | 0;
       break block64;
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = -1;
      HEAP32[(i64toi32_i32$1 + 96668 | 0) >> 2] = -1;
      HEAP32[(i64toi32_i32$1 + 96672 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 4096;
      HEAP32[(i64toi32_i32$1 + 96660 | 0) >> 2] = 4096;
      HEAP32[(i64toi32_i32$1 + 96664 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(0 + 96656 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
      HEAP32[(0 + 96676 | 0) >> 2] = 0;
      HEAP32[(0 + 96628 | 0) >> 2] = 0;
      $4_1 = 4096;
     }
     $0_1 = 0;
     $6_1 = $3_1 + 47 | 0;
     $2_1 = $4_1 + $6_1 | 0;
     $12_1 = 0 - $4_1 | 0;
     $8_1 = $2_1 & $12_1 | 0;
     if ($8_1 >>> 0 <= $3_1 >>> 0) {
      break block5
     }
     $0_1 = 0;
     block65 : {
      $4_1 = HEAP32[(0 + 96624 | 0) >> 2] | 0;
      if (!$4_1) {
       break block65
      }
      $5_1 = HEAP32[(0 + 96616 | 0) >> 2] | 0;
      $11_1 = $5_1 + $8_1 | 0;
      if ($11_1 >>> 0 <= $5_1 >>> 0) {
       break block5
      }
      if ($11_1 >>> 0 > $4_1 >>> 0) {
       break block5
      }
     }
     block77 : {
      block74 : {
       block66 : {
        if ((HEAPU8[(0 + 96628 | 0) >> 0] | 0) & 4 | 0) {
         break block66
        }
        block70 : {
         block75 : {
          block73 : {
           block69 : {
            block67 : {
             $4_1 = HEAP32[(0 + 96208 | 0) >> 2] | 0;
             if (!$4_1) {
              break block67
             }
             $0_1 = 96632;
             label6 : while (1) {
              block68 : {
               $5_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1 >>> 0 < $5_1 >>> 0) {
                break block68
               }
               if ($4_1 >>> 0 < ($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0) {
                break block69
               }
              }
              $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
              if ($0_1) {
               continue label6
              }
              break label6;
             };
            }
            $7_1 = $1041(0 | 0) | 0;
            if (($7_1 | 0) == (-1 | 0)) {
             break block70
            }
            $2_1 = $8_1;
            block71 : {
             $0_1 = HEAP32[(0 + 96660 | 0) >> 2] | 0;
             $4_1 = $0_1 + -1 | 0;
             if (!($4_1 & $7_1 | 0)) {
              break block71
             }
             $2_1 = ($8_1 - $7_1 | 0) + (($4_1 + $7_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
            }
            if ($2_1 >>> 0 <= $3_1 >>> 0) {
             break block70
            }
            block72 : {
             $0_1 = HEAP32[(0 + 96624 | 0) >> 2] | 0;
             if (!$0_1) {
              break block72
             }
             $4_1 = HEAP32[(0 + 96616 | 0) >> 2] | 0;
             $5_1 = $4_1 + $2_1 | 0;
             if ($5_1 >>> 0 <= $4_1 >>> 0) {
              break block70
             }
             if ($5_1 >>> 0 > $0_1 >>> 0) {
              break block70
             }
            }
            $0_1 = $1041($2_1 | 0) | 0;
            if (($0_1 | 0) != ($7_1 | 0)) {
             break block73
            }
            break block74;
           }
           $2_1 = ($2_1 - $7_1 | 0) & $12_1 | 0;
           $7_1 = $1041($2_1 | 0) | 0;
           if (($7_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
            break block75
           }
           $0_1 = $7_1;
          }
          if (($0_1 | 0) == (-1 | 0)) {
           break block70
          }
          block76 : {
           if ($2_1 >>> 0 < ($3_1 + 48 | 0) >>> 0) {
            break block76
           }
           $7_1 = $0_1;
           break block74;
          }
          $4_1 = HEAP32[(0 + 96664 | 0) >> 2] | 0;
          $4_1 = (($6_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
          if (($1041($4_1 | 0) | 0 | 0) == (-1 | 0)) {
           break block70
          }
          $2_1 = $4_1 + $2_1 | 0;
          $7_1 = $0_1;
          break block74;
         }
         if (($7_1 | 0) != (-1 | 0)) {
          break block74
         }
        }
        HEAP32[(0 + 96628 | 0) >> 2] = HEAP32[(0 + 96628 | 0) >> 2] | 0 | 4 | 0;
       }
       $7_1 = $1041($8_1 | 0) | 0;
       $0_1 = $1041(0 | 0) | 0;
       if (($7_1 | 0) == (-1 | 0)) {
        break block77
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break block77
       }
       if ($7_1 >>> 0 >= $0_1 >>> 0) {
        break block77
       }
       $2_1 = $0_1 - $7_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break block77
       }
      }
      $0_1 = (HEAP32[(0 + 96616 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 96616 | 0) >> 2] = $0_1;
      block78 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 96620 | 0) >> 2] | 0) >>> 0) {
        break block78
       }
       HEAP32[(0 + 96620 | 0) >> 2] = $0_1;
      }
      block84 : {
       block81 : {
        block80 : {
         block79 : {
          $4_1 = HEAP32[(0 + 96208 | 0) >> 2] | 0;
          if (!$4_1) {
           break block79
          }
          $0_1 = 96632;
          label7 : while (1) {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($7_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
            break block80
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label7
           }
           break block81;
          };
         }
         block83 : {
          block82 : {
           $0_1 = HEAP32[(0 + 96200 | 0) >> 2] | 0;
           if (!$0_1) {
            break block82
           }
           if ($7_1 >>> 0 >= $0_1 >>> 0) {
            break block83
           }
          }
          HEAP32[(0 + 96200 | 0) >> 2] = $7_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 96636 | 0) >> 2] = $2_1;
         HEAP32[(0 + 96632 | 0) >> 2] = $7_1;
         HEAP32[(0 + 96216 | 0) >> 2] = -1;
         HEAP32[(0 + 96220 | 0) >> 2] = HEAP32[(0 + 96656 | 0) >> 2] | 0;
         HEAP32[(0 + 96644 | 0) >> 2] = 0;
         label8 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $5_1 = $4_1 + 96224 | 0;
          HEAP32[($4_1 + 96232 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + 96236 | 0) >> 2] = $5_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label8
          }
          break label8;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = (-8 - $7_1 | 0) & 7 | 0;
         $5_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 96196 | 0) >> 2] = $5_1;
         $4_1 = $7_1 + $4_1 | 0;
         HEAP32[(0 + 96208 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
         HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 96212 | 0) >> 2] = HEAP32[(0 + 96672 | 0) >> 2] | 0;
         break block84;
        }
        if ($4_1 >>> 0 >= $7_1 >>> 0) {
         break block81
        }
        if ($4_1 >>> 0 < $5_1 >>> 0) {
         break block81
        }
        if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & 8 | 0) {
         break block81
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = (-8 - $4_1 | 0) & 7 | 0;
        $5_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 96208 | 0) >> 2] = $5_1;
        $7_1 = (HEAP32[(0 + 96196 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $7_1 - $0_1 | 0;
        HEAP32[(0 + 96196 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $7_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 96212 | 0) >> 2] = HEAP32[(0 + 96672 | 0) >> 2] | 0;
        break block84;
       }
       block85 : {
        if ($7_1 >>> 0 >= (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
         break block85
        }
        HEAP32[(0 + 96200 | 0) >> 2] = $7_1;
       }
       $5_1 = $7_1 + $2_1 | 0;
       $0_1 = 96632;
       block87 : {
        block86 : {
         label9 : while (1) {
          $8_1 = HEAP32[$0_1 >> 2] | 0;
          if (($8_1 | 0) == ($5_1 | 0)) {
           break block86
          }
          $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if ($0_1) {
           continue label9
          }
          break block87;
         };
        }
        if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
         break block88
        }
       }
       $0_1 = 96632;
       block90 : {
        label10 : while (1) {
         block89 : {
          $5_1 = HEAP32[$0_1 >> 2] | 0;
          if ($4_1 >>> 0 < $5_1 >>> 0) {
           break block89
          }
          $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
          if ($4_1 >>> 0 < $5_1 >>> 0) {
           break block90
          }
         }
         $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         continue label10;
        };
       }
       $0_1 = $2_1 + -40 | 0;
       $8_1 = (-8 - $7_1 | 0) & 7 | 0;
       $12_1 = $0_1 - $8_1 | 0;
       HEAP32[(0 + 96196 | 0) >> 2] = $12_1;
       $8_1 = $7_1 + $8_1 | 0;
       HEAP32[(0 + 96208 | 0) >> 2] = $8_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = $12_1 | 1 | 0;
       HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
       HEAP32[(0 + 96212 | 0) >> 2] = HEAP32[(0 + 96672 | 0) >> 2] | 0;
       $0_1 = ($5_1 + ((39 - $5_1 | 0) & 7 | 0) | 0) + -47 | 0;
       $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = 27;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96640 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96644 | 0) >> 2] | 0;
       $1154_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1154_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96632 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96636 | 0) >> 2] | 0;
       $1156_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $1156_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(0 + 96640 | 0) >> 2] = $8_1 + 8 | 0;
       HEAP32[(0 + 96636 | 0) >> 2] = $2_1;
       HEAP32[(0 + 96632 | 0) >> 2] = $7_1;
       HEAP32[(0 + 96644 | 0) >> 2] = 0;
       $0_1 = $8_1 + 24 | 0;
       label11 : while (1) {
        HEAP32[($0_1 + 4 | 0) >> 2] = 7;
        $7_1 = $0_1 + 8 | 0;
        $0_1 = $0_1 + 4 | 0;
        if ($7_1 >>> 0 < $5_1 >>> 0) {
         continue label11
        }
        break label11;
       };
       if (($8_1 | 0) == ($4_1 | 0)) {
        break block84
       }
       HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       $7_1 = $8_1 - $4_1 | 0;
       HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 | 1 | 0;
       HEAP32[$8_1 >> 2] = $7_1;
       block94 : {
        block91 : {
         if ($7_1 >>> 0 > 255 >>> 0) {
          break block91
         }
         $0_1 = ($7_1 & -8 | 0) + 96224 | 0;
         block93 : {
          block92 : {
           $5_1 = HEAP32[(0 + 96184 | 0) >> 2] | 0;
           $7_1 = 1 << ($7_1 >>> 3 | 0) | 0;
           if ($5_1 & $7_1 | 0) {
            break block92
           }
           HEAP32[(0 + 96184 | 0) >> 2] = $5_1 | $7_1 | 0;
           $5_1 = $0_1;
           break block93;
          }
          $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if ($5_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
           break block4
          }
         }
         HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
         HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
         $7_1 = 12;
         $8_1 = 8;
         break block94;
        }
        $0_1 = 31;
        block95 : {
         if ($7_1 >>> 0 > 16777215 >>> 0) {
          break block95
         }
         $0_1 = Math_clz32($7_1 >>> 8 | 0);
         $0_1 = ((($7_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
        }
        HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$0 = 0;
        HEAP32[($4_1 + 16 | 0) >> 2] = 0;
        HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        $5_1 = ($0_1 << 2 | 0) + 96488 | 0;
        block98 : {
         block97 : {
          block96 : {
           $8_1 = HEAP32[(0 + 96188 | 0) >> 2] | 0;
           $2_1 = 1 << $0_1 | 0;
           if ($8_1 & $2_1 | 0) {
            break block96
           }
           HEAP32[(0 + 96188 | 0) >> 2] = $8_1 | $2_1 | 0;
           HEAP32[$5_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
           break block97;
          }
          $0_1 = $7_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
          $8_1 = HEAP32[$5_1 >> 2] | 0;
          label12 : while (1) {
           $5_1 = $8_1;
           if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7_1 | 0)) {
            break block98
           }
           $8_1 = $0_1 >>> 29 | 0;
           $0_1 = $0_1 << 1 | 0;
           $2_1 = $5_1 + ($8_1 & 4 | 0) | 0;
           $8_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
           if ($8_1) {
            continue label12
           }
           break label12;
          };
          $0_1 = $2_1 + 16 | 0;
          if ($0_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
           break block4
          }
          HEAP32[$0_1 >> 2] = $4_1;
          HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
         }
         $7_1 = 8;
         $8_1 = 12;
         $5_1 = $4_1;
         $0_1 = $5_1;
         break block94;
        }
        $7_1 = HEAP32[(0 + 96200 | 0) >> 2] | 0;
        if ($5_1 >>> 0 < $7_1 >>> 0) {
         break block4
        }
        $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        if ($0_1 >>> 0 < $7_1 >>> 0) {
         break block4
        }
        HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
        $0_1 = 0;
        $7_1 = 24;
        $8_1 = 12;
       }
       HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + $7_1 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 96196 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break block77
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 96196 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 96208 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 96208 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break block5;
     }
     HEAP32[($990() | 0) >> 2] = 48;
     $0_1 = 0;
     break block5;
    }
    $991();
    wasm2js_trap();
   }
   HEAP32[$0_1 >> 2] = $7_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
   $0_1 = $1033($7_1 | 0, $8_1 | 0, $3_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1033($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $7_1 = 0, $3_1 = 0, $353_1 = 0;
  $3_1 = $0_1 + ((-8 - $0_1 | 0) & 7 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 | 3 | 0;
  $4_1 = $1_1 + ((-8 - $1_1 | 0) & 7 | 0) | 0;
  $5_1 = $3_1 + $2_1 | 0;
  $0_1 = $4_1 - $5_1 | 0;
  block6 : {
   block1 : {
    block : {
     if (($4_1 | 0) != (HEAP32[(0 + 96208 | 0) >> 2] | 0 | 0)) {
      break block
     }
     HEAP32[(0 + 96208 | 0) >> 2] = $5_1;
     $2_1 = (HEAP32[(0 + 96196 | 0) >> 2] | 0) + $0_1 | 0;
     HEAP32[(0 + 96196 | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
     break block1;
    }
    block2 : {
     if (($4_1 | 0) != (HEAP32[(0 + 96204 | 0) >> 2] | 0 | 0)) {
      break block2
     }
     HEAP32[(0 + 96204 | 0) >> 2] = $5_1;
     $2_1 = (HEAP32[(0 + 96192 | 0) >> 2] | 0) + $0_1 | 0;
     HEAP32[(0 + 96192 | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
     HEAP32[($5_1 + $2_1 | 0) >> 2] = $2_1;
     break block1;
    }
    block3 : {
     $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     if (($6_1 & 3 | 0 | 0) != (1 | 0)) {
      break block3
     }
     $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     block8 : {
      block4 : {
       if ($6_1 >>> 0 > 255 >>> 0) {
        break block4
       }
       block5 : {
        $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        $7_1 = $6_1 >>> 3 | 0;
        $8_1 = ($7_1 << 3 | 0) + 96224 | 0;
        if (($1_1 | 0) == ($8_1 | 0)) {
         break block5
        }
        if ($1_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
         break block6
        }
       }
       block7 : {
        if (($2_1 | 0) != ($1_1 | 0)) {
         break block7
        }
        HEAP32[(0 + 96184 | 0) >> 2] = (HEAP32[(0 + 96184 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
        break block8;
       }
       block9 : {
        if (($2_1 | 0) == ($8_1 | 0)) {
         break block9
        }
        if ($2_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
         break block6
        }
       }
       HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
       break block8;
      }
      $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      block11 : {
       block10 : {
        if (($2_1 | 0) == ($4_1 | 0)) {
         break block10
        }
        $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        if ($1_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
         break block6
        }
        if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
         break block6
        }
        HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
        HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
        break block11;
       }
       block14 : {
        block13 : {
         block12 : {
          $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
          if (!$1_1) {
           break block12
          }
          $8_1 = $4_1 + 20 | 0;
          break block13;
         }
         $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
         if (!$1_1) {
          break block14
         }
         $8_1 = $4_1 + 16 | 0;
        }
        label : while (1) {
         $7_1 = $8_1;
         $2_1 = $1_1;
         $8_1 = $2_1 + 20 | 0;
         $1_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         if ($1_1) {
          continue label
         }
         $8_1 = $2_1 + 16 | 0;
         $1_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if ($1_1) {
          continue label
         }
         break label;
        };
        if ($7_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        HEAP32[$7_1 >> 2] = 0;
        break block11;
       }
       $2_1 = 0;
      }
      if (!$9_1) {
       break block8
      }
      block16 : {
       block15 : {
        $8_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
        $1_1 = ($8_1 << 2 | 0) + 96488 | 0;
        if (($4_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
         break block15
        }
        HEAP32[$1_1 >> 2] = $2_1;
        if ($2_1) {
         break block16
        }
        HEAP32[(0 + 96188 | 0) >> 2] = (HEAP32[(0 + 96188 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
        break block8;
       }
       if ($9_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
        break block6
       }
       block18 : {
        block17 : {
         if ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block17
         }
         HEAP32[($9_1 + 16 | 0) >> 2] = $2_1;
         break block18;
        }
        HEAP32[($9_1 + 20 | 0) >> 2] = $2_1;
       }
       if (!$2_1) {
        break block8
       }
      }
      $8_1 = HEAP32[(0 + 96200 | 0) >> 2] | 0;
      if ($2_1 >>> 0 < $8_1 >>> 0) {
       break block6
      }
      HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
      block19 : {
       $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
       if (!$1_1) {
        break block19
       }
       if ($1_1 >>> 0 < $8_1 >>> 0) {
        break block6
       }
       HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
      }
      $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      if (!$1_1) {
       break block8
      }
      if ($1_1 >>> 0 < $8_1 >>> 0) {
       break block6
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
     }
     $2_1 = $6_1 & -8 | 0;
     $0_1 = $2_1 + $0_1 | 0;
     $4_1 = $4_1 + $2_1 | 0;
     $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 & -2 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($5_1 + $0_1 | 0) >> 2] = $0_1;
    block20 : {
     if ($0_1 >>> 0 > 255 >>> 0) {
      break block20
     }
     $2_1 = ($0_1 & -8 | 0) + 96224 | 0;
     block22 : {
      block21 : {
       $1_1 = HEAP32[(0 + 96184 | 0) >> 2] | 0;
       $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
       if ($1_1 & $0_1 | 0) {
        break block21
       }
       HEAP32[(0 + 96184 | 0) >> 2] = $1_1 | $0_1 | 0;
       $0_1 = $2_1;
       break block22;
      }
      $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      if ($0_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
       break block6
      }
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
     break block1;
    }
    $2_1 = 31;
    block23 : {
     if ($0_1 >>> 0 > 16777215 >>> 0) {
      break block23
     }
     $2_1 = Math_clz32($0_1 >>> 8 | 0);
     $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = 0;
    $1_1 = ($2_1 << 2 | 0) + 96488 | 0;
    block26 : {
     block25 : {
      block24 : {
       $8_1 = HEAP32[(0 + 96188 | 0) >> 2] | 0;
       $4_1 = 1 << $2_1 | 0;
       if ($8_1 & $4_1 | 0) {
        break block24
       }
       HEAP32[(0 + 96188 | 0) >> 2] = $8_1 | $4_1 | 0;
       HEAP32[$1_1 >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
       break block25;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $8_1 = HEAP32[$1_1 >> 2] | 0;
      label1 : while (1) {
       $1_1 = $8_1;
       if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break block26
       }
       $8_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $4_1 = $1_1 + ($8_1 & 4 | 0) | 0;
       $8_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
       if ($8_1) {
        continue label1
       }
       break label1;
      };
      $2_1 = $4_1 + 16 | 0;
      if ($2_1 >>> 0 < (HEAP32[(0 + 96200 | 0) >> 2] | 0) >>> 0) {
       break block6
      }
      HEAP32[$2_1 >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
     break block1;
    }
    $0_1 = HEAP32[(0 + 96200 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $0_1 >>> 0) {
     break block6
    }
    $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if ($2_1 >>> 0 < $0_1 >>> 0) {
     break block6
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
   }
   return $3_1 + 8 | 0 | 0;
  }
  $991();
  wasm2js_trap();
 }
 
 function $1034($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $1_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  block1 : {
   block : {
    if (!$0_1) {
     break block
    }
    $1_1 = $0_1 + -8 | 0;
    $2_1 = HEAP32[(0 + 96200 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     break block1
    }
    $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
    if (($3_1 & 3 | 0 | 0) == (1 | 0)) {
     break block1
    }
    $0_1 = $3_1 & -8 | 0;
    $4_1 = $1_1 + $0_1 | 0;
    block2 : {
     if ($3_1 & 1 | 0) {
      break block2
     }
     if (!($3_1 & 2 | 0)) {
      break block
     }
     $5_1 = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 - $5_1 | 0;
     if ($1_1 >>> 0 < $2_1 >>> 0) {
      break block1
     }
     $0_1 = $5_1 + $0_1 | 0;
     block3 : {
      if (($1_1 | 0) == (HEAP32[(0 + 96204 | 0) >> 2] | 0 | 0)) {
       break block3
      }
      $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      block4 : {
       if ($5_1 >>> 0 > 255 >>> 0) {
        break block4
       }
       block5 : {
        $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        $7_1 = $5_1 >>> 3 | 0;
        $5_1 = ($7_1 << 3 | 0) + 96224 | 0;
        if (($6_1 | 0) == ($5_1 | 0)) {
         break block5
        }
        if ($6_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        if ((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
         break block1
        }
       }
       block6 : {
        if (($3_1 | 0) != ($6_1 | 0)) {
         break block6
        }
        HEAP32[(0 + 96184 | 0) >> 2] = (HEAP32[(0 + 96184 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
        break block2;
       }
       block7 : {
        if (($3_1 | 0) == ($5_1 | 0)) {
         break block7
        }
        if ($3_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
         break block1
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
       break block2;
      }
      $8_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      block9 : {
       block8 : {
        if (($3_1 | 0) == ($1_1 | 0)) {
         break block8
        }
        $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($5_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
         break block1
        }
        if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
         break block1
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        break block9;
       }
       block12 : {
        block11 : {
         block10 : {
          $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
          if (!$5_1) {
           break block10
          }
          $6_1 = $1_1 + 20 | 0;
          break block11;
         }
         $5_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
         if (!$5_1) {
          break block12
         }
         $6_1 = $1_1 + 16 | 0;
        }
        label : while (1) {
         $7_1 = $6_1;
         $3_1 = $5_1;
         $6_1 = $3_1 + 20 | 0;
         $5_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         if ($5_1) {
          continue label
         }
         $6_1 = $3_1 + 16 | 0;
         $5_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($5_1) {
          continue label
         }
         break label;
        };
        if ($7_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        HEAP32[$7_1 >> 2] = 0;
        break block9;
       }
       $3_1 = 0;
      }
      if (!$8_1) {
       break block2
      }
      block14 : {
       block13 : {
        $6_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
        $5_1 = ($6_1 << 2 | 0) + 96488 | 0;
        if (($1_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
         break block13
        }
        HEAP32[$5_1 >> 2] = $3_1;
        if ($3_1) {
         break block14
        }
        HEAP32[(0 + 96188 | 0) >> 2] = (HEAP32[(0 + 96188 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
        break block2;
       }
       if ($8_1 >>> 0 < $2_1 >>> 0) {
        break block1
       }
       block16 : {
        block15 : {
         if ((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break block15
         }
         HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
         break block16;
        }
        HEAP32[($8_1 + 20 | 0) >> 2] = $3_1;
       }
       if (!$3_1) {
        break block2
       }
      }
      if ($3_1 >>> 0 < $2_1 >>> 0) {
       break block1
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = $8_1;
      block17 : {
       $5_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
       if (!$5_1) {
        break block17
       }
       if ($5_1 >>> 0 < $2_1 >>> 0) {
        break block1
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      }
      $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!$5_1) {
       break block2
      }
      if ($5_1 >>> 0 < $2_1 >>> 0) {
       break block1
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      break block2;
     }
     $3_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break block2
     }
     HEAP32[(0 + 96192 | 0) >> 2] = $0_1;
     HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[$4_1 >> 2] = $0_1;
     return;
    }
    if ($1_1 >>> 0 >= $4_1 >>> 0) {
     break block1
    }
    $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if (!($7_1 & 1 | 0)) {
     break block1
    }
    block36 : {
     block18 : {
      if ($7_1 & 2 | 0) {
       break block18
      }
      block19 : {
       if (($4_1 | 0) != (HEAP32[(0 + 96208 | 0) >> 2] | 0 | 0)) {
        break block19
       }
       HEAP32[(0 + 96208 | 0) >> 2] = $1_1;
       $0_1 = (HEAP32[(0 + 96196 | 0) >> 2] | 0) + $0_1 | 0;
       HEAP32[(0 + 96196 | 0) >> 2] = $0_1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
       if (($1_1 | 0) != (HEAP32[(0 + 96204 | 0) >> 2] | 0 | 0)) {
        break block
       }
       HEAP32[(0 + 96192 | 0) >> 2] = 0;
       HEAP32[(0 + 96204 | 0) >> 2] = 0;
       return;
      }
      block20 : {
       $9_1 = HEAP32[(0 + 96204 | 0) >> 2] | 0;
       if (($4_1 | 0) != ($9_1 | 0)) {
        break block20
       }
       HEAP32[(0 + 96204 | 0) >> 2] = $1_1;
       $0_1 = (HEAP32[(0 + 96192 | 0) >> 2] | 0) + $0_1 | 0;
       HEAP32[(0 + 96192 | 0) >> 2] = $0_1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
       HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
       return;
      }
      $3_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      block24 : {
       block21 : {
        if ($7_1 >>> 0 > 255 >>> 0) {
         break block21
        }
        block22 : {
         $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         $8_1 = $7_1 >>> 3 | 0;
         $6_1 = ($8_1 << 3 | 0) + 96224 | 0;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break block22
         }
         if ($5_1 >>> 0 < $2_1 >>> 0) {
          break block1
         }
         if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block1
         }
        }
        block23 : {
         if (($3_1 | 0) != ($5_1 | 0)) {
          break block23
         }
         HEAP32[(0 + 96184 | 0) >> 2] = (HEAP32[(0 + 96184 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
         break block24;
        }
        block25 : {
         if (($3_1 | 0) == ($6_1 | 0)) {
          break block25
         }
         if ($3_1 >>> 0 < $2_1 >>> 0) {
          break block1
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block1
         }
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        break block24;
       }
       $10_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
       block27 : {
        block26 : {
         if (($3_1 | 0) == ($4_1 | 0)) {
          break block26
         }
         $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         if ($5_1 >>> 0 < $2_1 >>> 0) {
          break block1
         }
         if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block1
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block1
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
         break block27;
        }
        block30 : {
         block29 : {
          block28 : {
           $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
           if (!$5_1) {
            break block28
           }
           $6_1 = $4_1 + 20 | 0;
           break block29;
          }
          $5_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
          if (!$5_1) {
           break block30
          }
          $6_1 = $4_1 + 16 | 0;
         }
         label1 : while (1) {
          $8_1 = $6_1;
          $3_1 = $5_1;
          $6_1 = $3_1 + 20 | 0;
          $5_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          $6_1 = $3_1 + 16 | 0;
          $5_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          break label1;
         };
         if ($8_1 >>> 0 < $2_1 >>> 0) {
          break block1
         }
         HEAP32[$8_1 >> 2] = 0;
         break block27;
        }
        $3_1 = 0;
       }
       if (!$10_1) {
        break block24
       }
       block32 : {
        block31 : {
         $6_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
         $5_1 = ($6_1 << 2 | 0) + 96488 | 0;
         if (($4_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
          break block31
         }
         HEAP32[$5_1 >> 2] = $3_1;
         if ($3_1) {
          break block32
         }
         HEAP32[(0 + 96188 | 0) >> 2] = (HEAP32[(0 + 96188 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
         break block24;
        }
        if ($10_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        block34 : {
         block33 : {
          if ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
           break block33
          }
          HEAP32[($10_1 + 16 | 0) >> 2] = $3_1;
          break block34;
         }
         HEAP32[($10_1 + 20 | 0) >> 2] = $3_1;
        }
        if (!$3_1) {
         break block24
        }
       }
       if ($3_1 >>> 0 < $2_1 >>> 0) {
        break block1
       }
       HEAP32[($3_1 + 24 | 0) >> 2] = $10_1;
       block35 : {
        $5_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        if (!$5_1) {
         break block35
        }
        if ($5_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
       }
       $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
       if (!$5_1) {
        break block24
       }
       if ($5_1 >>> 0 < $2_1 >>> 0) {
        break block1
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      }
      $0_1 = ($7_1 & -8 | 0) + $0_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      if (($1_1 | 0) != ($9_1 | 0)) {
       break block36
      }
      HEAP32[(0 + 96192 | 0) >> 2] = $0_1;
      return;
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 & -2 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    }
    block37 : {
     if ($0_1 >>> 0 > 255 >>> 0) {
      break block37
     }
     $3_1 = ($0_1 & -8 | 0) + 96224 | 0;
     block39 : {
      block38 : {
       $5_1 = HEAP32[(0 + 96184 | 0) >> 2] | 0;
       $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
       if ($5_1 & $0_1 | 0) {
        break block38
       }
       HEAP32[(0 + 96184 | 0) >> 2] = $5_1 | $0_1 | 0;
       $0_1 = $3_1;
       break block39;
      }
      $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      if ($0_1 >>> 0 < $2_1 >>> 0) {
       break block1
      }
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
     return;
    }
    $3_1 = 31;
    block40 : {
     if ($0_1 >>> 0 > 16777215 >>> 0) {
      break block40
     }
     $3_1 = Math_clz32($0_1 >>> 8 | 0);
     $3_1 = ((($0_1 >>> (38 - $3_1 | 0) | 0) & 1 | 0) - ($3_1 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = 0;
    HEAP32[($1_1 + 20 | 0) >> 2] = 0;
    $6_1 = ($3_1 << 2 | 0) + 96488 | 0;
    block44 : {
     block43 : {
      block42 : {
       block41 : {
        $5_1 = HEAP32[(0 + 96188 | 0) >> 2] | 0;
        $4_1 = 1 << $3_1 | 0;
        if ($5_1 & $4_1 | 0) {
         break block41
        }
        HEAP32[(0 + 96188 | 0) >> 2] = $5_1 | $4_1 | 0;
        HEAP32[$6_1 >> 2] = $1_1;
        $0_1 = 8;
        $3_1 = 24;
        break block42;
       }
       $3_1 = $0_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
       $6_1 = HEAP32[$6_1 >> 2] | 0;
       label2 : while (1) {
        $5_1 = $6_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
         break block43
        }
        $6_1 = $3_1 >>> 29 | 0;
        $3_1 = $3_1 << 1 | 0;
        $4_1 = $5_1 + ($6_1 & 4 | 0) | 0;
        $6_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        if ($6_1) {
         continue label2
        }
        break label2;
       };
       $0_1 = $4_1 + 16 | 0;
       if ($0_1 >>> 0 < $2_1 >>> 0) {
        break block1
       }
       HEAP32[$0_1 >> 2] = $1_1;
       $0_1 = 8;
       $3_1 = 24;
       $6_1 = $5_1;
      }
      $5_1 = $1_1;
      $4_1 = $5_1;
      break block44;
     }
     if ($5_1 >>> 0 < $2_1 >>> 0) {
      break block1
     }
     $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break block1
     }
     HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
     $4_1 = 0;
     $0_1 = 24;
     $3_1 = 8;
    }
    HEAP32[($1_1 + $3_1 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $4_1;
    $1_1 = (HEAP32[(0 + 96216 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 96216 | 0) >> 2] = $1_1 ? $1_1 : -1;
   }
   return;
  }
  $991();
  wasm2js_trap();
 }
 
 function $1035($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  block : {
   if ($0_1) {
    break block
   }
   return $1032($1_1 | 0) | 0 | 0;
  }
  block1 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break block1
   }
   HEAP32[($990() | 0) >> 2] = 48;
   return 0 | 0;
  }
  block2 : {
   $2_1 = $1036($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break block2
   }
   return $2_1 + 8 | 0 | 0;
  }
  block3 : {
   $2_1 = $1032($1_1 | 0) | 0;
   if ($2_1) {
    break block3
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $985($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $1034($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $1036($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $3_1 = 0, $2_1 = 0, $10_1 = 0, $8_1 = 0, $9_1 = 0;
  block2 : {
   block : {
    $2_1 = HEAP32[(0 + 96200 | 0) >> 2] | 0;
    if ($0_1 >>> 0 < $2_1 >>> 0) {
     break block
    }
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $4_1 = $3_1 & 3 | 0;
    if (($4_1 | 0) == (1 | 0)) {
     break block
    }
    $5_1 = $3_1 & -8 | 0;
    if (!$5_1) {
     break block
    }
    $6_1 = $0_1 + $5_1 | 0;
    $7_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    if (!($7_1 & 1 | 0)) {
     break block
    }
    block1 : {
     if ($4_1) {
      break block1
     }
     $4_1 = 0;
     if ($1_1 >>> 0 < 256 >>> 0) {
      break block2
     }
     block3 : {
      if ($5_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
       break block3
      }
      $4_1 = $0_1;
      if (($5_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 96664 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
       break block2
      }
     }
     $4_1 = 0;
     break block2;
    }
    block4 : {
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break block4
     }
     block5 : {
      $5_1 = $5_1 - $1_1 | 0;
      if ($5_1 >>> 0 < 16 >>> 0) {
       break block5
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($3_1 & 1 | 0) | 0 | 2 | 0;
      $1_1 = $0_1 + $1_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $1039($1_1 | 0, $5_1 | 0);
     }
     return $0_1 | 0;
    }
    $4_1 = 0;
    block6 : {
     if (($6_1 | 0) != (HEAP32[(0 + 96208 | 0) >> 2] | 0 | 0)) {
      break block6
     }
     $5_1 = (HEAP32[(0 + 96196 | 0) >> 2] | 0) + $5_1 | 0;
     if ($5_1 >>> 0 <= $1_1 >>> 0) {
      break block2
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($3_1 & 1 | 0) | 0 | 2 | 0;
     $3_1 = $0_1 + $1_1 | 0;
     $5_1 = $5_1 - $1_1 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
     HEAP32[(0 + 96196 | 0) >> 2] = $5_1;
     HEAP32[(0 + 96208 | 0) >> 2] = $3_1;
     return $0_1 | 0;
    }
    block7 : {
     if (($6_1 | 0) != (HEAP32[(0 + 96204 | 0) >> 2] | 0 | 0)) {
      break block7
     }
     $4_1 = 0;
     $5_1 = (HEAP32[(0 + 96192 | 0) >> 2] | 0) + $5_1 | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break block2
     }
     block9 : {
      block8 : {
       $4_1 = $5_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break block8
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($3_1 & 1 | 0) | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $5_1 = $0_1 + $5_1 | 0;
       HEAP32[$5_1 >> 2] = $4_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break block9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
      $5_1 = $0_1 + $5_1 | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 96204 | 0) >> 2] = $1_1;
     HEAP32[(0 + 96192 | 0) >> 2] = $4_1;
     return $0_1 | 0;
    }
    $4_1 = 0;
    if ($7_1 & 2 | 0) {
     break block2
    }
    $8_1 = ($7_1 & -8 | 0) + $5_1 | 0;
    if ($8_1 >>> 0 < $1_1 >>> 0) {
     break block2
    }
    $5_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    block13 : {
     block10 : {
      if ($7_1 >>> 0 > 255 >>> 0) {
       break block10
      }
      block11 : {
       $4_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       $9_1 = $7_1 >>> 3 | 0;
       $7_1 = ($9_1 << 3 | 0) + 96224 | 0;
       if (($4_1 | 0) == ($7_1 | 0)) {
        break block11
       }
       if ($4_1 >>> 0 < $2_1 >>> 0) {
        break block
       }
       if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
        break block
       }
      }
      block12 : {
       if (($5_1 | 0) != ($4_1 | 0)) {
        break block12
       }
       HEAP32[(0 + 96184 | 0) >> 2] = (HEAP32[(0 + 96184 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
       break block13;
      }
      block14 : {
       if (($5_1 | 0) == ($7_1 | 0)) {
        break block14
       }
       if ($5_1 >>> 0 < $2_1 >>> 0) {
        break block
       }
       if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
        break block
       }
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
      break block13;
     }
     $10_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     block16 : {
      block15 : {
       if (($5_1 | 0) == ($6_1 | 0)) {
        break block15
       }
       $4_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       if ($4_1 >>> 0 < $2_1 >>> 0) {
        break block
       }
       if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
        break block
       }
       if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
        break block
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       break block16;
      }
      block19 : {
       block18 : {
        block17 : {
         $4_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
         if (!$4_1) {
          break block17
         }
         $7_1 = $6_1 + 20 | 0;
         break block18;
        }
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if (!$4_1) {
         break block19
        }
        $7_1 = $6_1 + 16 | 0;
       }
       label : while (1) {
        $9_1 = $7_1;
        $5_1 = $4_1;
        $7_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
        if ($4_1) {
         continue label
        }
        $7_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label
        }
        break label;
       };
       if ($9_1 >>> 0 < $2_1 >>> 0) {
        break block
       }
       HEAP32[$9_1 >> 2] = 0;
       break block16;
      }
      $5_1 = 0;
     }
     if (!$10_1) {
      break block13
     }
     block21 : {
      block20 : {
       $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
       $4_1 = ($7_1 << 2 | 0) + 96488 | 0;
       if (($6_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break block20
       }
       HEAP32[$4_1 >> 2] = $5_1;
       if ($5_1) {
        break block21
       }
       HEAP32[(0 + 96188 | 0) >> 2] = (HEAP32[(0 + 96188 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break block13;
      }
      if ($10_1 >>> 0 < $2_1 >>> 0) {
       break block
      }
      block23 : {
       block22 : {
        if ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
         break block22
        }
        HEAP32[($10_1 + 16 | 0) >> 2] = $5_1;
        break block23;
       }
       HEAP32[($10_1 + 20 | 0) >> 2] = $5_1;
      }
      if (!$5_1) {
       break block13
      }
     }
     if ($5_1 >>> 0 < $2_1 >>> 0) {
      break block
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $10_1;
     block24 : {
      $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
      if (!$4_1) {
       break block24
      }
      if ($4_1 >>> 0 < $2_1 >>> 0) {
       break block
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
     }
     $4_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     if (!$4_1) {
      break block13
     }
     if ($4_1 >>> 0 < $2_1 >>> 0) {
      break block
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
    }
    block25 : {
     $5_1 = $8_1 - $1_1 | 0;
     if ($5_1 >>> 0 > 15 >>> 0) {
      break block25
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 & 1 | 0 | $8_1 | 0 | 2 | 0;
     $5_1 = $0_1 + $8_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     return $0_1 | 0;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($3_1 & 1 | 0) | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
    $3_1 = $0_1 + $8_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $1039($1_1 | 0, $5_1 | 0);
    return $0_1 | 0;
   }
   $991();
   wasm2js_trap();
  }
  return $4_1 | 0;
 }
 
 function $1037($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = 16;
  block1 : {
   block : {
    $3_1 = $0_1 >>> 0 > 16 >>> 0 ? $0_1 : 16;
    if ($3_1 & ($3_1 + -1 | 0) | 0) {
     break block
    }
    $0_1 = $3_1;
    break block1;
   }
   label : while (1) {
    $0_1 = $2_1;
    $2_1 = $0_1 << 1 | 0;
    if ($0_1 >>> 0 < $3_1 >>> 0) {
     continue label
    }
    break label;
   };
  }
  block2 : {
   if ($1_1 >>> 0 < (-64 - $0_1 | 0) >>> 0) {
    break block2
   }
   HEAP32[($990() | 0) >> 2] = 48;
   return 0 | 0;
  }
  block3 : {
   $1_1 = $1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0;
   $2_1 = $1032(($1_1 + $0_1 | 0) + 12 | 0 | 0) | 0;
   if ($2_1) {
    break block3
   }
   return 0 | 0;
  }
  $3_1 = $2_1 + -8 | 0;
  block5 : {
   block4 : {
    if (($0_1 + -1 | 0) & $2_1 | 0) {
     break block4
    }
    $0_1 = $3_1;
    break block5;
   }
   $4_1 = $2_1 + -4 | 0;
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   $2_1 = ((($2_1 + $0_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0) + -8 | 0;
   $0_1 = $2_1 + (($2_1 - $3_1 | 0) >>> 0 > 15 >>> 0 ? 0 : $0_1) | 0;
   $2_1 = $0_1 - $3_1 | 0;
   $6_1 = ($5_1 & -8 | 0) - $2_1 | 0;
   block6 : {
    if ($5_1 & 3 | 0) {
     break block6
    }
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$0_1 >> 2] = $3_1 + $2_1 | 0;
    break block5;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $0_1 + $6_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   HEAP32[$4_1 >> 2] = $2_1 | ((HEAP32[$4_1 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $3_1 + $2_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $1039($3_1 | 0, $2_1 | 0);
  }
  block7 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 3 | 0)) {
    break block7
   }
   $3_1 = $2_1 & -8 | 0;
   if ($3_1 >>> 0 <= ($1_1 + 16 | 0) >>> 0) {
    break block7
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
   $2_1 = $0_1 + $1_1 | 0;
   $1_1 = $3_1 - $1_1 | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 3 | 0;
   $3_1 = $0_1 + $3_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $1039($2_1 | 0, $1_1 | 0);
  }
  return $0_1 + 8 | 0 | 0;
 }
 
 function $1038($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  block2 : {
   block1 : {
    block : {
     if (($1_1 | 0) != (8 | 0)) {
      break block
     }
     $1_1 = $1032($2_1 | 0) | 0;
     break block1;
    }
    $3_1 = 28;
    if ($1_1 >>> 0 < 4 >>> 0) {
     break block2
    }
    if ($1_1 & 3 | 0) {
     break block2
    }
    $4_1 = $1_1 >>> 2 | 0;
    if ($4_1 & ($4_1 + -1 | 0) | 0) {
     break block2
    }
    block3 : {
     if ($2_1 >>> 0 <= (-64 - $1_1 | 0) >>> 0) {
      break block3
     }
     return 48 | 0;
    }
    $1_1 = $1037(($1_1 >>> 0 > 16 >>> 0 ? $1_1 : 16) | 0, $2_1 | 0) | 0;
   }
   block4 : {
    if ($1_1) {
     break block4
    }
    return 48 | 0;
   }
   HEAP32[$0_1 >> 2] = $1_1;
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $1039($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  block3 : {
   block2 : {
    block1 : {
     block : {
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (!($3_1 & 1 | 0)) {
       break block
      }
      $4_1 = HEAP32[(0 + 96200 | 0) >> 2] | 0;
      break block1;
     }
     if (!($3_1 & 2 | 0)) {
      break block2
     }
     $5_1 = HEAP32[$0_1 >> 2] | 0;
     $0_1 = $0_1 - $5_1 | 0;
     $4_1 = HEAP32[(0 + 96200 | 0) >> 2] | 0;
     if ($0_1 >>> 0 < $4_1 >>> 0) {
      break block3
     }
     $1_1 = $5_1 + $1_1 | 0;
     block4 : {
      if (($0_1 | 0) == (HEAP32[(0 + 96204 | 0) >> 2] | 0 | 0)) {
       break block4
      }
      $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      block5 : {
       if ($5_1 >>> 0 > 255 >>> 0) {
        break block5
       }
       block6 : {
        $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        $7_1 = $5_1 >>> 3 | 0;
        $5_1 = ($7_1 << 3 | 0) + 96224 | 0;
        if (($6_1 | 0) == ($5_1 | 0)) {
         break block6
        }
        if ($6_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        if ((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
         break block3
        }
       }
       block7 : {
        if (($3_1 | 0) != ($6_1 | 0)) {
         break block7
        }
        HEAP32[(0 + 96184 | 0) >> 2] = (HEAP32[(0 + 96184 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
        break block1;
       }
       block8 : {
        if (($3_1 | 0) == ($5_1 | 0)) {
         break block8
        }
        if ($3_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
         break block3
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
       break block1;
      }
      $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      block10 : {
       block9 : {
        if (($3_1 | 0) == ($0_1 | 0)) {
         break block9
        }
        $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($5_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
         break block3
        }
        if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
         break block3
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        break block10;
       }
       block13 : {
        block12 : {
         block11 : {
          $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          if (!$5_1) {
           break block11
          }
          $6_1 = $0_1 + 20 | 0;
          break block12;
         }
         $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         if (!$5_1) {
          break block13
         }
         $6_1 = $0_1 + 16 | 0;
        }
        label : while (1) {
         $7_1 = $6_1;
         $3_1 = $5_1;
         $6_1 = $3_1 + 20 | 0;
         $5_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         if ($5_1) {
          continue label
         }
         $6_1 = $3_1 + 16 | 0;
         $5_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($5_1) {
          continue label
         }
         break label;
        };
        if ($7_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        HEAP32[$7_1 >> 2] = 0;
        break block10;
       }
       $3_1 = 0;
      }
      if (!$8_1) {
       break block1
      }
      block15 : {
       block14 : {
        $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $5_1 = ($6_1 << 2 | 0) + 96488 | 0;
        if (($0_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
         break block14
        }
        HEAP32[$5_1 >> 2] = $3_1;
        if ($3_1) {
         break block15
        }
        HEAP32[(0 + 96188 | 0) >> 2] = (HEAP32[(0 + 96188 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
        break block1;
       }
       if ($8_1 >>> 0 < $4_1 >>> 0) {
        break block3
       }
       block17 : {
        block16 : {
         if ((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
          break block16
         }
         HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
         break block17;
        }
        HEAP32[($8_1 + 20 | 0) >> 2] = $3_1;
       }
       if (!$3_1) {
        break block1
       }
      }
      if ($3_1 >>> 0 < $4_1 >>> 0) {
       break block3
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = $8_1;
      block18 : {
       $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (!$5_1) {
        break block18
       }
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break block3
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      }
      $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$5_1) {
       break block1
      }
      if ($5_1 >>> 0 < $4_1 >>> 0) {
       break block3
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      break block1;
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break block1
     }
     HEAP32[(0 + 96192 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     return;
    }
    if ($2_1 >>> 0 < $4_1 >>> 0) {
     break block3
    }
    block37 : {
     block19 : {
      $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if ($8_1 & 2 | 0) {
       break block19
      }
      block20 : {
       if (($2_1 | 0) != (HEAP32[(0 + 96208 | 0) >> 2] | 0 | 0)) {
        break block20
       }
       HEAP32[(0 + 96208 | 0) >> 2] = $0_1;
       $1_1 = (HEAP32[(0 + 96196 | 0) >> 2] | 0) + $1_1 | 0;
       HEAP32[(0 + 96196 | 0) >> 2] = $1_1;
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
       if (($0_1 | 0) != (HEAP32[(0 + 96204 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       HEAP32[(0 + 96192 | 0) >> 2] = 0;
       HEAP32[(0 + 96204 | 0) >> 2] = 0;
       return;
      }
      block21 : {
       $9_1 = HEAP32[(0 + 96204 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($9_1 | 0)) {
        break block21
       }
       HEAP32[(0 + 96204 | 0) >> 2] = $0_1;
       $1_1 = (HEAP32[(0 + 96192 | 0) >> 2] | 0) + $1_1 | 0;
       HEAP32[(0 + 96192 | 0) >> 2] = $1_1;
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
       HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
       return;
      }
      $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      block25 : {
       block22 : {
        if ($8_1 >>> 0 > 255 >>> 0) {
         break block22
        }
        block23 : {
         $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         $7_1 = $8_1 >>> 3 | 0;
         $6_1 = ($7_1 << 3 | 0) + 96224 | 0;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break block23
         }
         if ($5_1 >>> 0 < $4_1 >>> 0) {
          break block3
         }
         if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
          break block3
         }
        }
        block24 : {
         if (($3_1 | 0) != ($5_1 | 0)) {
          break block24
         }
         HEAP32[(0 + 96184 | 0) >> 2] = (HEAP32[(0 + 96184 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
         break block25;
        }
        block26 : {
         if (($3_1 | 0) == ($6_1 | 0)) {
          break block26
         }
         if ($3_1 >>> 0 < $4_1 >>> 0) {
          break block3
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
          break block3
         }
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        break block25;
       }
       $10_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
       block28 : {
        block27 : {
         if (($3_1 | 0) == ($2_1 | 0)) {
          break block27
         }
         $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         if ($5_1 >>> 0 < $4_1 >>> 0) {
          break block3
         }
         if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
          break block3
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
          break block3
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
         break block28;
        }
        block31 : {
         block30 : {
          block29 : {
           $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
           if (!$5_1) {
            break block29
           }
           $6_1 = $2_1 + 20 | 0;
           break block30;
          }
          $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          if (!$5_1) {
           break block31
          }
          $6_1 = $2_1 + 16 | 0;
         }
         label1 : while (1) {
          $7_1 = $6_1;
          $3_1 = $5_1;
          $6_1 = $3_1 + 20 | 0;
          $5_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          $6_1 = $3_1 + 16 | 0;
          $5_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          break label1;
         };
         if ($7_1 >>> 0 < $4_1 >>> 0) {
          break block3
         }
         HEAP32[$7_1 >> 2] = 0;
         break block28;
        }
        $3_1 = 0;
       }
       if (!$10_1) {
        break block25
       }
       block33 : {
        block32 : {
         $6_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
         $5_1 = ($6_1 << 2 | 0) + 96488 | 0;
         if (($2_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
          break block32
         }
         HEAP32[$5_1 >> 2] = $3_1;
         if ($3_1) {
          break block33
         }
         HEAP32[(0 + 96188 | 0) >> 2] = (HEAP32[(0 + 96188 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
         break block25;
        }
        if ($10_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        block35 : {
         block34 : {
          if ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
           break block34
          }
          HEAP32[($10_1 + 16 | 0) >> 2] = $3_1;
          break block35;
         }
         HEAP32[($10_1 + 20 | 0) >> 2] = $3_1;
        }
        if (!$3_1) {
         break block25
        }
       }
       if ($3_1 >>> 0 < $4_1 >>> 0) {
        break block3
       }
       HEAP32[($3_1 + 24 | 0) >> 2] = $10_1;
       block36 : {
        $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        if (!$5_1) {
         break block36
        }
        if ($5_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
       }
       $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
       if (!$5_1) {
        break block25
       }
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break block3
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      }
      $1_1 = ($8_1 & -8 | 0) + $1_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      if (($0_1 | 0) != ($9_1 | 0)) {
       break block37
      }
      HEAP32[(0 + 96192 | 0) >> 2] = $1_1;
      return;
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = $8_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
    }
    block38 : {
     if ($1_1 >>> 0 > 255 >>> 0) {
      break block38
     }
     $3_1 = ($1_1 & -8 | 0) + 96224 | 0;
     block40 : {
      block39 : {
       $5_1 = HEAP32[(0 + 96184 | 0) >> 2] | 0;
       $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
       if ($5_1 & $1_1 | 0) {
        break block39
       }
       HEAP32[(0 + 96184 | 0) >> 2] = $5_1 | $1_1 | 0;
       $1_1 = $3_1;
       break block40;
      }
      $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      if ($1_1 >>> 0 < $4_1 >>> 0) {
       break block3
      }
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
     return;
    }
    $3_1 = 31;
    block41 : {
     if ($1_1 >>> 0 > 16777215 >>> 0) {
      break block41
     }
     $3_1 = Math_clz32($1_1 >>> 8 | 0);
     $3_1 = ((($1_1 >>> (38 - $3_1 | 0) | 0) & 1 | 0) - ($3_1 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $5_1 = ($3_1 << 2 | 0) + 96488 | 0;
    block44 : {
     block43 : {
      block42 : {
       $6_1 = HEAP32[(0 + 96188 | 0) >> 2] | 0;
       $2_1 = 1 << $3_1 | 0;
       if ($6_1 & $2_1 | 0) {
        break block42
       }
       HEAP32[(0 + 96188 | 0) >> 2] = $6_1 | $2_1 | 0;
       HEAP32[$5_1 >> 2] = $0_1;
       HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
       break block43;
      }
      $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$5_1 >> 2] | 0;
      label2 : while (1) {
       $5_1 = $6_1;
       if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
        break block44
       }
       $6_1 = $3_1 >>> 29 | 0;
       $3_1 = $3_1 << 1 | 0;
       $2_1 = $5_1 + ($6_1 & 4 | 0) | 0;
       $6_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if ($6_1) {
        continue label2
       }
       break label2;
      };
      $1_1 = $2_1 + 16 | 0;
      if ($1_1 >>> 0 < $4_1 >>> 0) {
       break block3
      }
      HEAP32[$1_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
     return;
    }
    if ($5_1 >>> 0 < $4_1 >>> 0) {
     break block3
    }
    $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break block3
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   }
   return;
  }
  $991();
  wasm2js_trap();
 }
 
 function $1040() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $1041($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 95628 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 7 | 0) & -8 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  block2 : {
   block1 : {
    block : {
     if (!$2_1) {
      break block
     }
     if ($0_1 >>> 0 <= $1_1 >>> 0) {
      break block1
     }
    }
    if ($0_1 >>> 0 <= ($1040() | 0) >>> 0) {
     break block2
    }
    if (fimport$20($0_1 | 0) | 0) {
     break block2
    }
   }
   HEAP32[($990() | 0) >> 2] = 48;
   return -1 | 0;
  }
  HEAP32[(0 + 95628 | 0) >> 2] = $0_1;
  return $1_1 | 0;
 }
 
 function $1042($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  block2 : {
   block1 : {
    block : {
     if ($2_1 >>> 0 < 4 >>> 0) {
      break block
     }
     if (($1_1 | $0_1 | 0) & 3 | 0) {
      break block1
     }
     label : while (1) {
      if ((HEAP32[$0_1 >> 2] | 0 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break block1
      }
      $1_1 = $1_1 + 4 | 0;
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label
      }
      break label;
     };
    }
    if (!$2_1) {
     break block2
    }
   }
   block3 : {
    label1 : while (1) {
     $3_1 = HEAPU8[$0_1 >> 0] | 0;
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($3_1 | 0) != ($4_1 | 0)) {
      break block3
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break block2
     }
     continue label1;
    };
   }
   return $3_1 - $4_1 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $1043($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $50_1 = 0, $53_1 = 0, $56_1 = 0;
  block2 : {
   block4 : {
    switch ($0_1 + -1 | 0 | 0) {
    case 0:
     block7 : {
      switch ($3_1 + -1 | 0 | 0) {
      default:
       HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       return;
      case 0:
      case 1:
       HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       return;
      case 4:
       break block7;
      };
     }
     HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
     return;
    case 1:
     if ($1_1 & 1 | 0) {
      break block2
     }
     block10 : {
      switch ($3_1 + -1 | 0 | 0) {
      default:
       HEAP16[$2_1 >> 1] = HEAPU16[$1_1 >> 1] | 0;
       return;
      case 0:
      case 1:
       HEAP16[$2_1 >> 1] = HEAPU16[$1_1 >> 1] | 0;
       return;
      case 4:
       break block10;
      };
     }
     HEAP16[$2_1 >> 1] = HEAPU16[$1_1 >> 1] | 0;
     return;
    case 3:
     if ($1_1 & 3 | 0) {
      break block2
     }
     block13 : {
      switch ($3_1 + -1 | 0 | 0) {
      default:
       HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
       return;
      case 0:
      case 1:
       HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
       return;
      case 4:
       break block13;
      };
     }
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 7:
     break block4;
    default:
     break block2;
    };
   }
   if ($1_1 & 7 | 0) {
    break block2
   }
   block16 : {
    switch ($3_1 + -1 | 0 | 0) {
    default:
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $50_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[$2_1 >> 2] = $50_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 0:
    case 1:
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $53_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[$2_1 >> 2] = $53_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 4:
     break block16;
    };
   }
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $56_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $56_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   return;
  }
  $4_1 = (((($1_1 >>> 20 | 0) ^ ($1_1 >>> 4 | 0) | 0) & 1023 | 0) << 2 | 0) + 96688 | 0;
  label : while (1) {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = $3_1 ? $3_1 : 1;
   if ($3_1) {
    continue label
   }
   break label;
  };
  block17 : {
   if (!$0_1) {
    break block17
   }
   wasm2js_memory_copy($2_1, $1_1, $0_1);
  }
  HEAP32[$4_1 >> 2] = 0;
 }
 
 function $1044($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $5$hi = 0;
  block2 : {
   block4 : {
    switch ($0_1 + -1 | 0 | 0) {
    case 0:
     $4_1 = HEAPU8[$2_1 >> 0] | 0;
     block5 : {
      switch ($3_1 + -3 | 0 | 0) {
      default:
       break block5;
      };
     }
     HEAP8[$1_1 >> 0] = $4_1;
     return;
    case 1:
     if ($1_1 & 1 | 0) {
      break block2
     }
     $4_1 = HEAPU16[$2_1 >> 1] | 0;
     block6 : {
      switch ($3_1 + -3 | 0 | 0) {
      default:
       break block6;
      };
     }
     HEAP16[$1_1 >> 1] = $4_1;
     return;
    case 3:
     if ($1_1 & 3 | 0) {
      break block2
     }
     $4_1 = HEAP32[$2_1 >> 2] | 0;
     block7 : {
      switch ($3_1 + -3 | 0 | 0) {
      default:
       break block7;
      };
     }
     HEAP32[$1_1 >> 2] = $4_1;
     return;
    case 7:
     break block4;
    default:
     break block2;
    };
   }
   if ($1_1 & 7 | 0) {
    break block2
   }
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $5_1 = HEAP32[$2_1 >> 2] | 0;
   $5$hi = i64toi32_i32$1;
   block8 : {
    switch ($3_1 + -3 | 0 | 0) {
    default:
     break block8;
    };
   }
   i64toi32_i32$1 = $5$hi;
   HEAP32[$1_1 >> 2] = $5_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   return;
  }
  $4_1 = (((($1_1 >>> 20 | 0) ^ ($1_1 >>> 4 | 0) | 0) & 1023 | 0) << 2 | 0) + 96688 | 0;
  label : while (1) {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = $3_1 ? $3_1 : 1;
   if ($3_1) {
    continue label
   }
   break label;
  };
  block9 : {
   if (!$0_1) {
    break block9
   }
   wasm2js_memory_copy($1_1, $2_1, $0_1);
  }
  HEAP32[$4_1 >> 2] = 0;
 }
 
 function $1045($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  block1 : {
   block : {
    if (!($3_1 & 64 | 0)) {
     break block
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break block1;
   }
   if (!$3_1) {
    break block1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1046($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  block1 : {
   block : {
    if (!($3_1 & 64 | 0)) {
     break block
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break block1;
   }
   if (!$3_1) {
    break block1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1047($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $2_1 = 0, $8_1 = 0, $8$hi = 0, $6_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $4_1 = 0, $5_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $48$hi = 0, $58_1 = 0, $58$hi = 0, $60$hi = 0, $79_1 = 0, $79$hi = 0, $92_1 = 0, $92$hi = 0, $95$hi = 0, $98_1 = 0, $98$hi = 0, $103_1 = 0, $103$hi = 0, $105_1 = 0, $105$hi = 0, $108_1 = 0, $109$hi = 0, $118$hi = 0, $122_1 = 0, $122$hi = 0, $133$hi = 0, $135_1 = 0, $135$hi = 0, $136$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  block3 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $47_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $47_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $47_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32767;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $8_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    $3_1 = $8_1;
    if (($3_1 + -15361 | 0) >>> 0 > 2045 >>> 0) {
     break block
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 60;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $48_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $48_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $23_1 = $48_1;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $25$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $23$hi;
    i64toi32_i32$1 = $23_1;
    i64toi32_i32$0 = $25$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $7_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $8_1 = $3_1 + -15360 | 0;
    $8$hi = i64toi32_i32$0;
    block2 : {
     block1 : {
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 268435455;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $0_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $0$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$2 = 134217728;
      i64toi32_i32$3 = 1;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
       break block1
      }
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $7_1 = i64toi32_i32$4;
      $7$hi = i64toi32_i32$5;
      break block2;
     }
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block2
     }
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $39$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $39$hi;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $7_1 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$0 = 1048575;
    i64toi32_i32$3 = -1;
    $3_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 ? 0 : $7_1;
    i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
    $0_1 = i64toi32_i32$0;
    $0$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $48$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$3 = $48$hi;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$5 = $8_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$1;
    break block3;
   }
   block4 : {
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$3 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
     break block4
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 32767;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block4
    }
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 60;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $50_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $50_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $58_1 = $50_1;
    $58$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $51_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
     $51_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $60$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $58$hi;
    i64toi32_i32$2 = $58_1;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$3 = $51_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 524288;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $7_1 = 2047;
    $7$hi = i64toi32_i32$2;
    break block3;
   }
   block5 : {
    if ($3_1 >>> 0 <= 17406 >>> 0) {
     break block5
    }
    i64toi32_i32$2 = 0;
    $7_1 = 2047;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $0_1 = 0;
    $0$hi = i64toi32_i32$2;
    break block3;
   }
   block6 : {
    i64toi32_i32$2 = $8$hi;
    $4_1 = !($8_1 | i64toi32_i32$2 | 0);
    $5_1 = $4_1 ? 15360 : 15361;
    $6_1 = $5_1 - $3_1 | 0;
    if (($6_1 | 0) <= (112 | 0)) {
     break block6
    }
    i64toi32_i32$2 = 0;
    $0_1 = 0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$2;
    break block3;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $79_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $79$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$1 = $79$hi;
   i64toi32_i32$3 = i64toi32_i32$0 ? $7_1 : $79_1;
   i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$1;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$3 = $7$hi;
   $1045($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$3 | 0, 128 - $6_1 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   $1046($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$2;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $52_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $52_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   $92_1 = $52_1;
   $92$hi = i64toi32_i32$2;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $53_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $53_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $95$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $92$hi;
   i64toi32_i32$0 = $92_1;
   i64toi32_i32$3 = $95$hi;
   i64toi32_i32$5 = $53_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $0_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $0$hi = i64toi32_i32$3;
   block8 : {
    block7 : {
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = 268435455;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $98_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $98$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
     $103_1 = i64toi32_i32$0;
     $103$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] | 0;
     $105_1 = i64toi32_i32$2;
     $105$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $103$hi;
     i64toi32_i32$3 = $103_1;
     i64toi32_i32$2 = $105$hi;
     i64toi32_i32$5 = $105_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     $108_1 = ($5_1 | 0) != ($3_1 | 0) & ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) | 0;
     i64toi32_i32$0 = 0;
     $109$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $98$hi;
     i64toi32_i32$5 = $98_1;
     i64toi32_i32$2 = $109$hi;
     i64toi32_i32$3 = $108_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $7_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = 134217728;
     i64toi32_i32$3 = 1;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break block7
     }
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $0_1 = i64toi32_i32$1;
     $0$hi = i64toi32_i32$4;
     break block8;
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$3 = 134217728;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block8
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $118$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$4 = $118$hi;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $0_1 = i64toi32_i32$2;
    $0$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = 1048576;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   $122_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
   $122$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = 1048575;
   i64toi32_i32$3 = -1;
   $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $122$hi;
   i64toi32_i32$4 = i64toi32_i32$5 ? $122_1 : $0_1;
   i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $0_1 = i64toi32_i32$4;
   $0$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$5 = $7_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = 52;
  i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
  }
  $133$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$5 = -2147483648;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
  $135_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $135$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $133$hi;
  i64toi32_i32$4 = $54_1;
  i64toi32_i32$3 = $135$hi;
  i64toi32_i32$1 = $135_1;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $136$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $0$hi;
  i64toi32_i32$3 = $136$hi;
  i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  i64toi32_i32$4 = $0$hi;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $1048() {
  return ($1049() | 0 | 0) > (0 | 0) | 0;
 }
 
 function $1049() {
  return $2650() | 0 | 0;
 }
 
 function $1050($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  block2 : {
   block4 : {
    block3 : {
     block : {
      $2_1 = $1_1 & 255 | 0;
      if (!$2_1) {
       break block
      }
      block1 : {
       if (!($0_1 & 3 | 0)) {
        break block1
       }
       $3_1 = $1_1 & 255 | 0;
       label : while (1) {
        $4_1 = HEAPU8[$0_1 >> 0] | 0;
        if (!$4_1) {
         break block2
        }
        if (($4_1 | 0) == ($3_1 | 0)) {
         break block2
        }
        $0_1 = $0_1 + 1 | 0;
        if ($0_1 & 3 | 0) {
         continue label
        }
        break label;
       };
      }
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
       break block3
      }
      $2_1 = Math_imul($2_1, 16843009);
      label1 : while (1) {
       $4_1 = $3_1 ^ $2_1 | 0;
       if (((16843008 - $4_1 | 0 | $4_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
        break block3
       }
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $4_1 = $0_1 + 4 | 0;
       $0_1 = $4_1;
       if ((($3_1 | (16843008 - $3_1 | 0) | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
        continue label1
       }
       break block4;
      };
     }
     return $0_1 + ($987($0_1 | 0) | 0) | 0 | 0;
    }
    $4_1 = $0_1;
   }
   label2 : while (1) {
    $0_1 = $4_1;
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if (!$3_1) {
     break block2
    }
    $4_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) != ($1_1 & 255 | 0 | 0)) {
     continue label2
    }
    break label2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1051($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = 0;
  $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($5_1 | 0) != (0 | 0)) | 0;
  $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
  $5_1 = 32;
  block2 : {
   block1 : {
    block : {
     if ($992(fimport$21(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break block
     }
     $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($5_1 | 0) > (0 | 0)) {
      break block1
     }
     $5_1 = $5_1 ? 32 : 16;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | $5_1 | 0;
    break block2;
   }
   $4_1 = $5_1;
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($5_1 >>> 0 <= $6_1 >>> 0) {
    break block2
   }
   $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + ($5_1 - $6_1 | 0) | 0;
   block3 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break block3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[(($1_1 + $2_1 | 0) + -1 | 0) >> 0] = HEAPU8[$4_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $1052($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0;
  block : {
   if ($0_1) {
    break block
   }
   $1_1 = 0;
   block1 : {
    if (!(HEAP32[(0 + 95920 | 0) >> 2] | 0)) {
     break block1
    }
    $1_1 = $1052(HEAP32[(0 + 95920 | 0) >> 2] | 0 | 0) | 0;
   }
   block2 : {
    if (!(HEAP32[(0 + 95624 | 0) >> 2] | 0)) {
     break block2
    }
    $1_1 = $1052(HEAP32[(0 + 95624 | 0) >> 2] | 0 | 0) | 0 | $1_1 | 0;
   }
   block3 : {
    $0_1 = HEAP32[($1008() | 0) >> 2] | 0;
    if (!$0_1) {
     break block3
    }
    label : while (1) {
     block5 : {
      block4 : {
       if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
        break block4
       }
       $2_1 = 1;
       break block5;
      }
      $2_1 = !($998($0_1 | 0) | 0);
     }
     block6 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
       break block6
      }
      $1_1 = $1052($0_1 | 0) | 0 | $1_1 | 0;
     }
     block7 : {
      if ($2_1) {
       break block7
      }
      $999($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label
     }
     break label;
    };
   }
   $1009();
   return $1_1 | 0;
  }
  block9 : {
   block8 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block8
    }
    $2_1 = 1;
    break block9;
   }
   $2_1 = !($998($0_1 | 0) | 0);
  }
  block12 : {
   block11 : {
    block10 : {
     if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break block10
     }
     FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
     if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
      break block10
     }
     $1_1 = -1;
     if (!$2_1) {
      break block11
     }
     break block12;
    }
    block13 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($1_1 | 0) == ($3_1 | 0)) {
      break block13
     }
     i64toi32_i32$1 = $1_1 - $3_1 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1_1 = 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    if ($2_1) {
     break block12
    }
   }
   $999($0_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $1053($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  block : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  block1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break block1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $1054($0_1) {
  $0_1 = $0_1 | 0;
  return $1297($0_1 | 0) | 0 | 0;
 }
 
 function $1055($0_1) {
  $0_1 = $0_1 | 0;
  $1054($0_1 | 0) | 0;
  $2587($0_1 | 0, 84 | 0);
 }
 
 function $1056($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 79576;
  $1503($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1057($0_1) {
  $0_1 = $0_1 | 0;
  $1056($0_1 | 0) | 0;
  $2587($0_1 | 0, 32 | 0);
 }
 
 function $1058($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 79576;
  $2115($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $1059($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1060($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $1061($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1062($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1062($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1063($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1062($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1064($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1065($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1066($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break block
    }
    block2 : {
     block1 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break block1
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 - $5_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $1067($3_1 + 12 | 0 | 0, $1067($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $1068($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $1069($0_1 | 0, $5_1 | 0);
      break block2;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break block
     }
     HEAP8[$1_1 >> 0] = $1070($5_1 | 0) | 0;
     $5_1 = 1;
    }
    $1_1 = $1_1 + $5_1 | 0;
    $4_1 = $5_1 + $4_1 | 0;
    continue label;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1067($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1071($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1068($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1072($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1069($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $1070($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 << 24 >> 24 | 0;
 }
 
 function $1071($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1226($2_1 + 15 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1072($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if (!$2_1) {
    break block
   }
   if (!$2_1) {
    break block
   }
   wasm2js_memory_copy($0_1, $1_1, $2_1);
  }
  return $0_1 | 0;
 }
 
 function $1073($0_1) {
  $0_1 = $0_1 | 0;
  return $1074() | 0 | 0;
 }
 
 function $1074() {
  return -1 | 0;
 }
 
 function $1075($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($1074() | 0 | 0)) {
    break block
   }
   return $1074() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $1076(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $1076($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 & 255 | 0 | 0;
 }
 
 function $1077($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1074() | 0 | 0;
 }
 
 function $1078($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $1074() | 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break block
    }
    block1 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break block1
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1076(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break block
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $7_1 - $6_1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $1067($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $1068(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $6_1 + (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $6_1 | 0;
    continue label;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1079($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1074() | 0 | 0;
 }
 
 function $1080($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1081($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1080($0_1 | 0, 79672 | 0) | 0;
  $1054($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1082($0_1) {
  $0_1 = $0_1 | 0;
  return $1081($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1083($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1081($0_1 | 0) | 0 | 0, 92 | 0);
 }
 
 function $1084($0_1) {
  $0_1 = $0_1 | 0;
  $1083($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1085($0_1) {
  $0_1 = $0_1 | 0;
  return $1095($0_1 | 0) | 0 | 0;
 }
 
 function $1086($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $1087($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  block : {
   if (!($1096($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $1113($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   block1 : {
    if (!($1097($1_1 + 8 | 0 | 0) | 0)) {
     break block1
    }
    if (($1098($1096($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break block1
    }
    $1094($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $1114($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1088($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1089($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104528 | 0) | 0 | 0;
 }
 
 function $1090($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1099($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1091($0_1) {
  $0_1 = $0_1 | 0;
  return ($1100(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 24 >> 24 | 0;
 }
 
 function $1092($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  block : {
   if (($2_1 | 0) < (0 | 0)) {
    break block
   }
   $3_1 = ((HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1093($0_1) {
  $0_1 = $0_1 | 0;
  $1101(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1094($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1102($0_1 | 0, $1_1 | 0);
 }
 
 function $1095($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
 }
 
 function $1096($0_1) {
  $0_1 = $0_1 | 0;
  return $1105($0_1 | 0) | 0 | 0;
 }
 
 function $1097($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1098($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1099($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1285($0_1 | 0) | 0) ^ ($1285($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1100($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $1076(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $1101($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $1076(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $1102($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1295($0_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | $1_1 | 0 | 0);
 }
 
 function $1103($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $1104($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  block : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1076($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 1 | 0;
  HEAP8[$2_1 >> 0] = $1_1;
  return $1076($1_1 | 0) | 0 | 0;
 }
 
 function $1105($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $1106() {
  return $1107() | 0 | 0;
 }
 
 function $1107() {
  return 2147483647 | 0;
 }
 
 function $1108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1109($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1108($0_1 | 0, 79720 | 0) | 0;
  $1054($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1110($0_1) {
  $0_1 = $0_1 | 0;
  return $1109($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1111($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1109($0_1 | 0) | 0 | 0, 88 | 0);
 }
 
 function $1112($0_1) {
  $0_1 = $0_1 | 0;
  $1111($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  block : {
   if (!($1085($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   block1 : {
    if (!($1086($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break block1
    }
    $1087($1086($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $1114($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1096($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1085($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($1088($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break block
   }
   if ($1048() | 0) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1098($1096($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1094($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1115($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104208 | 0) | 0 | 0;
 }
 
 function $1116($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1096($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1117($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = $0_1 + 76 | 0;
   if ($1119($1_1 | 0) | 0) {
    break block
   }
   $1121($1_1 | 0, $1120($0_1 | 0, 32 | 0) | 0 | 0) | 0;
  }
  return ($1122($1_1 | 0) | 0) << 24 >> 24 | 0;
 }
 
 function $1118($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $1119($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0;
 }
 
 function $1120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1293($2_1 + 12 | 0 | 0, $0_1 | 0);
  $0_1 = $1286($1089($2_1 + 12 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
  $1503($2_1 + 12 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1121($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = $1_1;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  HEAP8[($2_1 + 4 | 0) >> 0] = 1;
  return $2_1 | 0;
 }
 
 function $1122($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1;
  return HEAPU8[$1_1 >> 0] | 0 | ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0;
 }
 
 function $1123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1113($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
  block : {
   if (!($1097($2_1 + 8 | 0 | 0) | 0)) {
    break block
   }
   $1293($2_1 + 4 | 0 | 0, $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
   $3_1 = $1115($2_1 + 4 | 0 | 0) | 0;
   $1503($2_1 + 4 | 0 | 0) | 0;
   $4_1 = $1116($2_1 | 0, $0_1 | 0) | 0;
   $5_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $6_1 = $1117($5_1 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1124($3_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $5_1 | 0, $6_1 | 0, +(+$1_1)) | 0;
   if (!($1118($2_1 + 4 | 0 | 0) | 0)) {
    break block
   }
   $1094($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  }
  $1114($2_1 + 8 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1124($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1125($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1126($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  block : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break block
   }
   if (!($1103($1104($2_1 | 0, $1_1 | 0) | 0 | 0, $1074() | 0 | 0) | 0)) {
    break block
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $1127($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1113($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
  block : {
   if (!($1097($2_1 + 8 | 0 | 0) | 0)) {
    break block
   }
   $3_1 = $1116($2_1 + 4 | 0 | 0, $0_1 | 0) | 0;
   $1126($1125($3_1 | 0) | 0 | 0, $1_1 | 0) | 0;
   if (!($1118($3_1 | 0) | 0)) {
    break block
   }
   $1094($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  $1114($2_1 + 8 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1129($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1130($0_1) {
  $0_1 = $0_1 | 0;
  return $1297($0_1 | 0) | 0 | 0;
 }
 
 function $1131($0_1) {
  $0_1 = $0_1 | 0;
  $1130($0_1 | 0) | 0;
  $2587($0_1 | 0, 84 | 0);
 }
 
 function $1132($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 79736;
  $1503($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1133($0_1) {
  $0_1 = $0_1 | 0;
  $1132($0_1 | 0) | 0;
  $2587($0_1 | 0, 32 | 0);
 }
 
 function $1134($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 79736;
  $2115($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $1135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1136($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $1137($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1062($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1138($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1062($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1139($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1140($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1141($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break block
    }
    block2 : {
     block1 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break block1
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = ($6_1 - $5_1 | 0) >> 2 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $1067($3_1 + 12 | 0 | 0, $1067($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $1142($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $1143($0_1 | 0, $5_1 | 0);
      $1_1 = $1_1 + ($5_1 << 2 | 0) | 0;
      break block2;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break block
     }
     HEAP32[$1_1 >> 2] = $1144($5_1 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $5_1 = 1;
    }
    $4_1 = $5_1 + $4_1 | 0;
    continue label;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1142($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1145($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
 }
 
 function $1144($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1145($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if (!$2_1) {
    break block
   }
   $2_1 = $2_1 << 2 | 0;
   if (!$2_1) {
    break block
   }
   wasm2js_memory_copy($0_1, $1_1, $2_1);
  }
  return $0_1 | 0;
 }
 
 function $1146($0_1) {
  $0_1 = $0_1 | 0;
  return $1147() | 0 | 0;
 }
 
 function $1147() {
  return -1 | 0;
 }
 
 function $1148($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($1147() | 0 | 0)) {
    break block
   }
   return $1147() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $1149(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1149($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1147() | 0 | 0;
 }
 
 function $1151($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $1147() | 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break block
    }
    block1 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break block1
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1149(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break block
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = ($7_1 - $6_1 | 0) >> 2 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $1067($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $1142(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    $7_1 = $6_1 << 2 | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $7_1 | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $7_1 | 0;
    continue label;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1152($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1147() | 0 | 0;
 }
 
 function $1153($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1154($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1153($0_1 | 0, 79832 | 0) | 0;
  $1130($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1155($0_1) {
  $0_1 = $0_1 | 0;
  return $1154($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1156($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1154($0_1 | 0) | 0 | 0, 92 | 0);
 }
 
 function $1157($0_1) {
  $0_1 = $0_1 | 0;
  $1156($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1158($0_1) {
  $0_1 = $0_1 | 0;
  return $1095($0_1 | 0) | 0 | 0;
 }
 
 function $1159($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $1160($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  block : {
   if (!($1167($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $1180($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   block1 : {
    if (!($1168($1_1 + 8 | 0 | 0) | 0)) {
     break block1
    }
    if (($1169($1167($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break block1
    }
    $1166($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $1181($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1161($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104520 | 0) | 0 | 0;
 }
 
 function $1162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1170($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1163($0_1) {
  $0_1 = $0_1 | 0;
  return $1171(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1164($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1165($0_1) {
  $0_1 = $0_1 | 0;
  $1172(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1166($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1102($0_1 | 0, $1_1 | 0);
 }
 
 function $1167($0_1) {
  $0_1 = $0_1 | 0;
  return $1105($0_1 | 0) | 0 | 0;
 }
 
 function $1168($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1169($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1287($0_1 | 0) | 0) ^ ($1287($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1171($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $1149(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1172($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $1149(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $1174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  block : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1149($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 4 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  return $1149($1_1 | 0) | 0 | 0;
 }
 
 function $1175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1176($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1175($0_1 | 0, 79880 | 0) | 0;
  $1130($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1177($0_1) {
  $0_1 = $0_1 | 0;
  return $1176($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1178($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1176($0_1 | 0) | 0 | 0, 88 | 0);
 }
 
 function $1179($0_1) {
  $0_1 = $0_1 | 0;
  $1178($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1180($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  block : {
   if (!($1158($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   block1 : {
    if (!($1159($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break block1
    }
    $1160($1159($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $1181($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1167($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1158($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($1088($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break block
   }
   if ($1048() | 0) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1169($1167($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1166($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1182($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1183($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  block : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break block
   }
   if (!($1173($1174($2_1 | 0, $1_1 | 0) | 0 | 0, $1147() | 0 | 0) | 0)) {
    break block
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $1184($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1185($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1186($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $1187($0_1 | 0, $1_1 + 15 | 0 | 0, $1_1 + 14 | 0 | 0) | 0;
  $1188($0_1 | 0, 0 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1187($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1228($1227($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1188($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1189($0_1) {
  $0_1 = $0_1 | 0;
  return $1193($1192($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1194($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2112($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $1192($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($1196($0_1 | 0) | 0)) {
    break block
   }
   return $1231($0_1 | 0) | 0 | 0;
  }
  return $1232($0_1 | 0) | 0 | 0;
 }
 
 function $1193($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1194($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $37_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1197($0_1 | 0);
  block : {
   if (!($1196($0_1 | 0) | 0)) {
    break block
   }
   $1236($1199($0_1 | 0) | 0 | 0, $1231($0_1 | 0) | 0 | 0, $1214($0_1 | 0) | 0 | 0);
  }
  $3_1 = $1210($1_1 | 0) | 0;
  $4_1 = $1196($1_1 | 0) | 0;
  $1237($0_1 | 0, $1_1 | 0);
  $5_1 = $1198($1_1 | 0) | 0;
  $6_1 = $1198($0_1 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $37_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $37_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1238($1_1 | 0, 0 | 0);
  $5_1 = $1232($1_1 | 0) | 0;
  HEAP8[($2_1 + 15 | 0) >> 0] = 0;
  $1239($5_1 | 0, $2_1 + 15 | 0 | 0);
  block2 : {
   block1 : {
    $5_1 = ($0_1 | 0) == ($1_1 | 0);
    if ($5_1) {
     break block1
    }
    if ($4_1) {
     break block1
    }
    $1208($1_1 | 0, $3_1 | 0);
    break block2;
   }
   $1188($1_1 | 0, 0 | 0);
  }
  $1_1 = $1196($0_1 | 0) | 0;
  block3 : {
   if ($5_1) {
    break block3
   }
   if ($1_1) {
    break block3
   }
   $1188($0_1 | 0, $1200($0_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $1196($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1207($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $1197($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1198($0_1) {
  $0_1 = $0_1 | 0;
  return $1235($0_1 | 0) | 0 | 0;
 }
 
 function $1199($0_1) {
  $0_1 = $0_1 | 0;
  return $1241($0_1 | 0) | 0 | 0;
 }
 
 function $1200($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1207($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0 | 0;
 }
 
 function $1201($0_1) {
  $0_1 = $0_1 | 0;
  $1203($0_1 | 0) | 0;
 }
 
 function $1202($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $1204($0_1 | 0, $4_1 + 15 | 0 | 0, $3_1 | 0) | 0;
  $1205($3_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1203($0_1) {
  $0_1 = $0_1 | 0;
  return $1250($0_1 | 0) | 0 | 0;
 }
 
 function $1204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1253($1252($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1205($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1255($0_1 | 0, $1_1 | 0, $2_1 | 0, $1254($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $1206($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1207($0_1) {
  $0_1 = $0_1 | 0;
  return $1234($0_1 | 0) | 0 | 0;
 }
 
 function $1208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1209($0_1) {
  $0_1 = $0_1 | 0;
  return $1280($1279($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1210($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($1196($0_1 | 0) | 0)) {
    break block
   }
   return $1215($0_1 | 0) | 0 | 0;
  }
  return $1200($0_1 | 0) | 0 | 0;
 }
 
 function $1211($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 10;
  block : {
   if (!($1196($0_1 | 0) | 0)) {
    break block
   }
   $1_1 = ($1214($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2621($0_1 | 0, $1_1 | 0, 0 | 0);
 }
 
 function $1213($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($1103($0_1 | 0, $1074() | 0 | 0) | 0)) {
    break block
   }
   $0_1 = ($1074() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1214($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1207($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1215($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1207($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1216($0_1) {
  $0_1 = $0_1 | 0;
  return $1209($0_1 | 0) | 0 | 0;
 }
 
 function $1217($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104536 | 0) | 0 | 0;
 }
 
 function $1218($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1219($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1222($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1220($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1221() {
  $991();
  wasm2js_trap();
 }
 
 function $1222($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1284($2_1 + 15 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1223($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1224($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1225($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1226($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1227($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1228($0_1) {
  $0_1 = $0_1 | 0;
  return $1229($0_1 | 0) | 0 | 0;
 }
 
 function $1229($0_1) {
  $0_1 = $0_1 | 0;
  return $1230($0_1 | 0) | 0 | 0;
 }
 
 function $1230($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1231($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1198($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1232($0_1) {
  $0_1 = $0_1 | 0;
  return $1233($1198($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1233($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1234($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1235($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1236($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1240($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1242($0_1 | 0, $1_1 | 0);
 }
 
 function $1238($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1198($0_1 | 0) | 0;
  HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($1_1 & 127 | 0) | 0;
  $0_1 = $1198($0_1 | 0) | 0;
  HEAP8[($0_1 + 11 | 0) >> 0] = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 127 | 0;
 }
 
 function $1239($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
 }
 
 function $1240($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1243($1_1 | 0, $2_1 | 0, 1 | 0);
 }
 
 function $1241($0_1) {
  $0_1 = $0_1 | 0;
  return $1249($0_1 | 0) | 0 | 0;
 }
 
 function $1242($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1199($1_1 | 0) | 0;
  $1199($0_1 | 0) | 0;
 }
 
 function $1243($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if (!($1244($2_1 | 0) | 0)) {
    break block
   }
   $1245($0_1 | 0, $1_1 | 0, $2_1 | 0);
   return;
  }
  $1246($0_1 | 0, $1_1 | 0);
 }
 
 function $1244($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 > 8 >>> 0 | 0;
 }
 
 function $1245($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1247($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1246($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1248($0_1 | 0, $1_1 | 0);
 }
 
 function $1247($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2594($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2587($0_1 | 0, $1_1 | 0);
 }
 
 function $1249($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1250($0_1) {
  $0_1 = $0_1 | 0;
  return $1251($0_1 | 0) | 0 | 0;
 }
 
 function $1251($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1252($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1256($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1255($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block : {
   if ($3_1 >>> 0 > ($1257($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($1258($3_1 | 0) | 0)) {
      break block1
     }
     $1238($0_1 | 0, $3_1 | 0);
     $5_1 = $1232($0_1 | 0) | 0;
     break block2;
    }
    $1260($4_1 + 8 | 0 | 0, $1199($0_1 | 0) | 0 | 0, ($1259($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $1261($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1262($0_1 | 0, $5_1 | 0);
    $1263($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1264($0_1 | 0, $3_1 | 0);
   }
   $5_1 = $1265($1_1 | 0, $2_1 | 0, $1193($5_1 | 0) | 0 | 0) | 0;
   HEAP8[($4_1 + 7 | 0) >> 0] = 0;
   $1239($5_1 | 0, $4_1 + 7 | 0 | 0);
   $1188($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1266($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1257($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1267($1203($0_1 | 0) | 0 | 0) | 0;
  return ($0_1 >>> ($0_1 >>> 0 > (($1268() | 0) >>> 1 | 0) >>> 0) | 0) + -8 | 0 | 0;
 }
 
 function $1258($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 11 >>> 0 | 0;
 }
 
 function $1259($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  block : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break block
   }
   $0_1 = $1271($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1260($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1270($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1261($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1262($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1198($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1263($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1198($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
  $0_1 = $1198($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
 }
 
 function $1264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1198($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1265($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = $1193($0_1 | 0) | 0;
  $0_1 = $1_1 - $0_1 | 0;
  $1068($2_1 | 0, $5_1 | 0, $0_1 | 0) | 0;
  return $2_1 + $0_1 | 0 | 0;
 }
 
 function $1266($0_1) {
  $0_1 = $0_1 | 0;
  $1269(66178 | 0);
  wasm2js_trap();
 }
 
 function $1267($0_1) {
  $0_1 = $0_1 | 0;
  return $1268() | 0 | 0;
 }
 
 function $1268() {
  return $1272() | 0 | 0;
 }
 
 function $1269($0_1) {
  $0_1 = $0_1 | 0;
  $991();
  wasm2js_trap();
 }
 
 function $1270($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1273($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1271($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 7 | 0) & -8 | 0 | 0;
 }
 
 function $1272() {
  return -1 | 0;
 }
 
 function $1273($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1274($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 <= ($1267($0_1 | 0) | 0) >>> 0) {
    break block
   }
   $1275();
   wasm2js_trap();
  }
  return $1276($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1275() {
  $991();
  wasm2js_trap();
 }
 
 function $1276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if (!($1244($1_1 | 0) | 0)) {
    break block
   }
   return $1277($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  return $1278($0_1 | 0) | 0 | 0;
 }
 
 function $1277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2589($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1278($0_1) {
  $0_1 = $0_1 | 0;
  return $2583($0_1 | 0) | 0 | 0;
 }
 
 function $1279($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($1196($0_1 | 0) | 0)) {
    break block
   }
   return $1281($0_1 | 0) | 0 | 0;
  }
  return $1282($0_1 | 0) | 0 | 0;
 }
 
 function $1280($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1281($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1207($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1282($0_1) {
  $0_1 = $0_1 | 0;
  return $1283($1207($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1283($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1284($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $1285($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break block
   }
   block1 : {
    if ($1103($1100($1_1 | 0) | 0 | 0, $1074() | 0 | 0) | 0) {
     break block1
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $1286($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1287($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break block
   }
   block1 : {
    if ($1173($1171($1_1 | 0) | 0 | 0, $1147() | 0 | 0) | 0) {
     break block1
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $1288($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1289($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = $1290($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  $2613($0_1 | 0, $1_1 | 0, $1291($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1290($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1228($1252($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1291($0_1) {
  $0_1 = $0_1 | 0;
  return $1301($0_1 | 0) | 0 | 0;
 }
 
 function $1292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  label : while (1) {
   block : {
    if ($2_1) {
     break block
    }
    return;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $2_1 << 2 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0 | 0]($1_1, $0_1, HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
   continue label;
  };
 }
 
 function $1293($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2112($0_1 | 0, $1_1 + 28 | 0 | 0) | 0;
 }
 
 function $1294($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1296($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1_1 | !(HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  block : {
   if (!((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $1_1 | 0)) {
    break block
   }
   $1299(65872 | 0);
   wasm2js_trap();
  }
 }
 
 function $1296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1284($2_1 + 15 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1297($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 80448;
  block : {
   if (!(HEAP32[($0_1 + 28 | 0) >> 2] | 0)) {
    break block
   }
   $1292($0_1 | 0, 0 | 0);
   $1503($0_1 + 28 | 0 | 0) | 0;
   $1034(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
   $1034(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
   $1034(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
   $1034(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1298($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1297($0_1 | 0) | 0 | 0, 72 | 0);
 }
 
 function $1299($0_1) {
  $0_1 = $0_1 | 0;
  $991();
  wasm2js_trap();
 }
 
 function $1300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4098;
  HEAP32[($0_1 + 8 | 0) >> 2] = 6;
  HEAP32[($0_1 + 16 | 0) >> 2] = !$1_1;
  block : {
   if (!40) {
    break block
   }
   wasm2js_memory_fill($0_1 + 32 | 0, 0, 40);
  }
  $2115($0_1 + 28 | 0 | 0) | 0;
 }
 
 function $1301($0_1) {
  $0_1 = $0_1 | 0;
  return $987($0_1 | 0) | 0 | 0;
 }
 
 function $1302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1303($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1304($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1305($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $1306($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 0 | 0;
 }
 
 function $1307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = -1;
  block : {
   if (($0_1 | 0) == (-1 | 0)) {
    break block
   }
   block2 : {
    block1 : {
     if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break block1
     }
     $3_1 = 1;
     break block2;
    }
    $3_1 = !($998($1_1 | 0) | 0);
   }
   block5 : {
    block4 : {
     block3 : {
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($4_1) {
       break block3
      }
      $1053($1_1 | 0) | 0;
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break block4
      }
     }
     if ($4_1 >>> 0 > ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + -8 | 0) >>> 0) {
      break block5
     }
    }
    if ($3_1) {
     break block
    }
    $999($1_1 | 0);
    return -1 | 0;
   }
   $2_1 = $4_1 + -1 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   HEAP8[$2_1 >> 0] = $0_1;
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
   block6 : {
    if ($3_1) {
     break block6
    }
    $999($1_1 | 0);
   }
   $2_1 = $0_1 & 255 | 0;
  }
  return $2_1 | 0;
 }
 
 function $1308($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  block : {
   if ($1053($0_1 | 0) | 0) {
    break block
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break block
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1309($0_1) {
  $0_1 = $0_1 | 0;
  return $1310($0_1 | 0) | 0 | 0;
 }
 
 function $1310($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block1 : {
   block : {
    $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break block
    }
    if (!$1_1) {
     break block1
    }
    if (($1_1 & 1073741823 | 0 | 0) != (HEAP32[(($974() | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break block1
    }
   }
   block2 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($1_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break block2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    return HEAPU8[$1_1 >> 0] | 0 | 0;
   }
   return $1308($0_1 | 0) | 0 | 0;
  }
  return $1311($0_1 | 0) | 0 | 0;
 }
 
 function $1311($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  block : {
   $1_1 = $0_1 + 76 | 0;
   if (!($1312($1_1 | 0) | 0)) {
    break block
   }
   $998($0_1 | 0) | 0;
  }
  block2 : {
   block1 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    break block2;
   }
   $0_1 = $1308($0_1 | 0) | 0;
  }
  block3 : {
   if (!(($1313($1_1 | 0) | 0) & 1073741824 | 0)) {
    break block3
   }
   $1314($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1312($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
  return $1_1 | 0;
 }
 
 function $1313($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1314($0_1) {
  $0_1 = $0_1 | 0;
  $1000($0_1 | 0, 1 | 0) | 0;
 }
 
 function $1315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  block1 : {
   block : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block
    }
    $2_1 = 1;
    break block1;
   }
   $2_1 = !($998($0_1 | 0) | 0);
  }
  block3 : {
   block2 : {
    if ($1_1) {
     break block2
    }
    $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    break block3;
   }
   block4 : {
    if (HEAP32[($0_1 + 136 | 0) >> 2] | 0) {
     break block4
    }
    HEAP32[($0_1 + 136 | 0) >> 2] = HEAP32[(HEAP32[(($974() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0 ? 80576 : 80552;
   }
   $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if ($3_1) {
    break block3
   }
   $3_1 = ($1_1 | 0) < (1 | 0) ? -1 : 1;
   HEAP32[($0_1 + 72 | 0) >> 2] = $3_1;
  }
  block5 : {
   if ($2_1) {
    break block5
   }
   $999($0_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1316($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  block : {
   if ($1_1) {
    break block
   }
   return 0 | 0;
  }
  block5 : {
   block1 : {
    if (!$2_1) {
     break block1
    }
    block2 : {
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     $4_1 = $3_1 << 24 >> 24;
     if (($4_1 | 0) < (0 | 0)) {
      break block2
     }
     block3 : {
      if (!$0_1) {
       break block3
      }
      HEAP32[$0_1 >> 2] = $3_1;
     }
     return ($4_1 | 0) != (0 | 0) | 0;
    }
    block4 : {
     if (HEAP32[(HEAP32[(($974() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
      break block4
     }
     $1_1 = 1;
     if (!$0_1) {
      break block5
     }
     HEAP32[$0_1 >> 2] = $4_1 & 57343 | 0;
     return 1 | 0;
    }
    $4_1 = $3_1 + -194 | 0;
    if ($4_1 >>> 0 > 50 >>> 0) {
     break block1
    }
    $4_1 = HEAP32[(($4_1 << 2 | 0) + 80608 | 0) >> 2] | 0;
    block6 : {
     if ($2_1 >>> 0 > 3 >>> 0) {
      break block6
     }
     if (($4_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
      break block1
     }
    }
    $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $2_1 = $3_1 >>> 3 | 0;
    if (($2_1 + -16 | 0 | ($2_1 + ($4_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
     break block1
    }
    block7 : {
     $2_1 = $3_1 + -128 | 0 | ($4_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break block7
     }
     $1_1 = 2;
     if (!$0_1) {
      break block5
     }
     HEAP32[$0_1 >> 2] = $2_1;
     return 2 | 0;
    }
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
    if ($4_1 >>> 0 > 63 >>> 0) {
     break block1
    }
    $2_1 = $2_1 << 6 | 0;
    $4_1 = $4_1 | $2_1 | 0;
    block8 : {
     if (($2_1 | 0) < (0 | 0)) {
      break block8
     }
     $1_1 = 3;
     if (!$0_1) {
      break block5
     }
     HEAP32[$0_1 >> 2] = $4_1;
     return 3 | 0;
    }
    $2_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
    if ($2_1 >>> 0 > 63 >>> 0) {
     break block1
    }
    $1_1 = 4;
    if (!$0_1) {
     break block5
    }
    HEAP32[$0_1 >> 2] = $2_1 | ($4_1 << 6 | 0) | 0;
    return 4 | 0;
   }
   HEAP32[($990() | 0) >> 2] = 25;
   $1_1 = -1;
  }
  return $1_1 | 0;
 }
 
 function $1317($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = $3_1 ? $3_1 : 102856;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block8 : {
   block2 : {
    block1 : {
     block : {
      if ($1_1) {
       break block
      }
      if ($3_1) {
       break block1
      }
      return 0 | 0;
     }
     $5_1 = -2;
     if (!$2_1) {
      break block2
     }
     block4 : {
      block3 : {
       if (!$3_1) {
        break block3
       }
       $5_1 = $2_1;
       break block4;
      }
      block5 : {
       $5_1 = HEAPU8[$1_1 >> 0] | 0;
       $3_1 = $5_1 << 24 >> 24;
       if (($3_1 | 0) < (0 | 0)) {
        break block5
       }
       block6 : {
        if (!$0_1) {
         break block6
        }
        HEAP32[$0_1 >> 2] = $5_1;
       }
       return ($3_1 | 0) != (0 | 0) | 0;
      }
      block7 : {
       if (HEAP32[(HEAP32[(($974() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
        break block7
       }
       $5_1 = 1;
       if (!$0_1) {
        break block2
       }
       HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
       return 1 | 0;
      }
      $3_1 = $5_1 + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break block1
      }
      $3_1 = HEAP32[(($3_1 << 2 | 0) + 80608 | 0) >> 2] | 0;
      $5_1 = $2_1 + -1 | 0;
      if (!$5_1) {
       break block8
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $6_1 = HEAPU8[$1_1 >> 0] | 0;
     $7_1 = $6_1 >>> 3 | 0;
     if (($7_1 + -16 | 0 | (($3_1 >> 26 | 0) + $7_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break block1
     }
     label : while (1) {
      $5_1 = $5_1 + -1 | 0;
      block9 : {
       $3_1 = ($6_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break block9
       }
       HEAP32[$4_1 >> 2] = 0;
       block10 : {
        if (!$0_1) {
         break block10
        }
        HEAP32[$0_1 >> 2] = $3_1;
       }
       return $2_1 - $5_1 | 0 | 0;
      }
      if (!$5_1) {
       break block8
      }
      $1_1 = $1_1 + 1 | 0;
      $6_1 = HEAP8[$1_1 >> 0] | 0;
      if (($6_1 | 0) < (-64 | 0)) {
       continue label
      }
      break label;
     };
    }
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($990() | 0) >> 2] = 25;
    $5_1 = -1;
   }
   return $5_1 | 0;
  }
  HEAP32[$4_1 >> 2] = $3_1;
  return -2 | 0;
 }
 
 function $1318($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $974() | 0;
  $2_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
  block : {
   if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
    break block
   }
   $1315($0_1 | 0, 1 | 0) | 0;
  }
  HEAP32[($1_1 + 96 | 0) >> 2] = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
  $0_1 = $1319($0_1 | 0) | 0;
  HEAP32[($1_1 + 96 | 0) >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1319($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  block4 : {
   block1 : {
    block : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($2_1 | 0) == ($3_1 | 0)) {
      break block
     }
     $2_1 = $1316($1_1 + 28 | 0 | 0, $2_1 | 0, $3_1 - $2_1 | 0 | 0) | 0;
     if (($2_1 | 0) == (-1 | 0)) {
      break block
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + ($2_1 >>> 0 > 1 >>> 0 ? $2_1 : 1) | 0;
     break block1;
    }
    HEAP32[($1_1 + 16 | 0) >> 2] = 0;
    HEAP32[($1_1 + 20 | 0) >> 2] = 0;
    $2_1 = 0;
    label : while (1) {
     $4_1 = $2_1;
     block3 : {
      block2 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       HEAP8[($1_1 + 15 | 0) >> 0] = HEAPU8[$2_1 >> 0] | 0;
       break block3;
      }
      $2_1 = $1308($0_1 | 0) | 0;
      HEAP8[($1_1 + 15 | 0) >> 0] = $2_1;
      if (($2_1 | 0) > (-1 | 0)) {
       break block3
      }
      $2_1 = -1;
      if (!($4_1 & 1 | 0)) {
       break block4
      }
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
      HEAP32[($990() | 0) >> 2] = 25;
      break block4;
     }
     $2_1 = 1;
     $3_1 = $1317($1_1 + 28 | 0 | 0, $1_1 + 15 | 0 | 0, 1 | 0, $1_1 + 16 | 0 | 0) | 0;
     if (($3_1 | 0) == (-2 | 0)) {
      continue label
     }
     break label;
    };
    $2_1 = -1;
    if (($3_1 | 0) != (-1 | 0)) {
     break block1
    }
    if (!($4_1 & 1 | 0)) {
     break block4
    }
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
    $1307(HEAPU8[($1_1 + 15 | 0) >> 0] | 0 | 0, $0_1 | 0) | 0;
    break block4;
   }
   $2_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
  }
  global$0 = $1_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1320($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  block : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break block
   }
   return $1318($0_1 | 0) | 0 | 0;
  }
  $1_1 = $998($0_1 | 0) | 0;
  $2_1 = $1318($0_1 | 0) | 0;
  block1 : {
   if (!$1_1) {
    break block1
   }
   $999($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1321($0_1) {
  $0_1 = $0_1 | 0;
  return $1320($0_1 | 0) | 0 | 0;
 }
 
 function $1322($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $7_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $974() | 0;
  $4_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  block1 : {
   block : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block
    }
    $5_1 = 1;
    break block1;
   }
   $5_1 = !($998($1_1 | 0) | 0);
  }
  block2 : {
   if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
    break block2
   }
   $1315($1_1 | 0, 1 | 0) | 0;
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
  $6_1 = 0;
  block3 : {
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break block3
   }
   $1053($1_1 | 0) | 0;
   $6_1 = !(HEAP32[($1_1 + 4 | 0) >> 2] | 0);
  }
  $7_1 = -1;
  block4 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break block4
   }
   if ($6_1) {
    break block4
   }
   $6_1 = $1013($2_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0) | 0;
   if (($6_1 | 0) < (0 | 0)) {
    break block4
   }
   $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if ($8_1 >>> 0 < (((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + $6_1 | 0) + -8 | 0) >>> 0) {
    break block4
   }
   block6 : {
    block5 : {
     if ($0_1 >>> 0 > 127 >>> 0) {
      break block5
     }
     $7_1 = $8_1 + -1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
     HEAP8[$7_1 >> 0] = $0_1;
     break block6;
    }
    $7_1 = $8_1 - $6_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
    $985($7_1 | 0, $2_1 + 12 | 0 | 0, $6_1 | 0) | 0;
   }
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
   $7_1 = $0_1;
  }
  block7 : {
   if ($5_1) {
    break block7
   }
   $999($1_1 | 0);
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = $4_1;
  global$0 = $2_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $1323($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  block2 : {
   block : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break block
    }
    block1 : {
     if (!($1010($0_1 | 0) | 0)) {
      break block1
     }
     $3_1 = -1;
     break block2;
    }
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   block3 : {
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == ($3_1 | 0)) {
     break block3
    }
    $3_1 = $1_1 & 255 | 0;
    if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
     break block3
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $1_1;
    break block2;
   }
   block4 : {
    if ((FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) == (1 | 0)) {
     break block4
    }
    $3_1 = -1;
    break block2;
   }
   $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1324($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $974() | 0;
  $4_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  block : {
   if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
    break block
   }
   $1315($1_1 | 0, 1 | 0) | 0;
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
  block3 : {
   block6 : {
    block4 : {
     block1 : {
      if ($0_1 >>> 0 > 127 >>> 0) {
       break block1
      }
      block2 : {
       if (($0_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
       if (($5_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       HEAP32[($1_1 + 20 | 0) >> 2] = $5_1 + 1 | 0;
       HEAP8[$5_1 >> 0] = $0_1;
       break block3;
      }
      $0_1 = $1323($1_1 | 0, $0_1 | 0) | 0;
      break block4;
     }
     block5 : {
      $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (($5_1 + 4 | 0) >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
       break block5
      }
      $5_1 = $1014($5_1 | 0, $0_1 | 0) | 0;
      if (($5_1 | 0) < (0 | 0)) {
       break block6
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + $5_1 | 0;
      break block4;
     }
     $5_1 = $1014($2_1 + 12 | 0 | 0, $0_1 | 0) | 0;
     if (($5_1 | 0) < (0 | 0)) {
      break block6
     }
     if (($1016($2_1 + 12 | 0 | 0, $5_1 | 0, $1_1 | 0) | 0) >>> 0 < $5_1 >>> 0) {
      break block6
     }
    }
    if (($0_1 | 0) != (-1 | 0)) {
     break block3
    }
   }
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | 32 | 0;
   $0_1 = -1;
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = $4_1;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1325($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  block : {
   if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break block
   }
   return $1324($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  $2_1 = $998($1_1 | 0) | 0;
  $0_1 = $1324($0_1 | 0, $1_1 | 0) | 0;
  block1 : {
   if (!$2_1) {
    break block1
   }
   $999($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1326() {
  $1327(103572 | 0) | 0;
 }
 
 function $1327($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 103929 | 0) >> 0] | 0) {
    break block
   }
   $1328(103928 | 0) | 0;
   $1306(86 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 103929 | 0) >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $1328($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[(0 + 80484 | 0) >> 2] | 0;
  $1329(103576 | 0, $1_1 | 0, 103632 | 0) | 0;
  $1330(102860 | 0, 103576 | 0) | 0;
  $2_1 = HEAP32[(0 + 80488 | 0) >> 2] | 0;
  $1331(103640 | 0, $2_1 | 0, 103688 | 0) | 0;
  $1332(103044 | 0, 103640 | 0) | 0;
  $3_1 = HEAP32[(0 + 79072 | 0) >> 2] | 0;
  $1331(103696 | 0, $3_1 | 0, 103744 | 0) | 0;
  $1332(103220 | 0, 103696 | 0) | 0;
  $1332(103396 | 0, $1096((HEAP32[((HEAP32[(0 + 103220 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103220 | 0 | 0) | 0 | 0) | 0;
  $1333((HEAP32[((HEAP32[(0 + 102860 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 102860 | 0 | 0, 103044 | 0) | 0;
  $1334((HEAP32[((HEAP32[(0 + 103220 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103220 | 0 | 0) | 0;
  $1333((HEAP32[((HEAP32[(0 + 103220 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103220 | 0 | 0, 103044 | 0) | 0;
  $1335(103752 | 0, $1_1 | 0, 103808 | 0) | 0;
  $1336(102952 | 0, 103752 | 0) | 0;
  $1337(103816 | 0, $2_1 | 0, 103864 | 0) | 0;
  $1338(103132 | 0, 103816 | 0) | 0;
  $1337(103872 | 0, $3_1 | 0, 103920 | 0) | 0;
  $1338(103308 | 0, 103872 | 0) | 0;
  $1338(103484 | 0, $1167((HEAP32[((HEAP32[(0 + 103308 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103308 | 0 | 0) | 0 | 0) | 0;
  $1339((HEAP32[((HEAP32[(0 + 102952 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 102952 | 0 | 0, 103132 | 0) | 0;
  $1334((HEAP32[((HEAP32[(0 + 103308 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103308 | 0 | 0) | 0;
  $1339((HEAP32[((HEAP32[(0 + 103308 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 103308 | 0 | 0, 103132 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1329($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1058($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 80820;
  $2_1 = $1074() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
  $1191($3_1 + 12 | 0 | 0, $0_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 12 | 0);
  $1503($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1340($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79632 + 12 | 0;
  HEAP32[$2_1 >> 2] = 79632 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $1341($0_1 + (HEAP32[(0 + 79632 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1331($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1058($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 80920;
  $1191($3_1 + 12 | 0 | 0, $0_1 | 0);
  $1_1 = $1217($3_1 + 12 | 0 | 0) | 0;
  $1503($3_1 + 12 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1218($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1332($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1340($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79680 + 12 | 0;
  HEAP32[$2_1 >> 2] = 79680 + 32 | 0;
  $1341($0_1 + (HEAP32[(0 + 79680 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1333($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1334($0_1) {
  $0_1 = $0_1 | 0;
  $1342($0_1 | 0, 8192 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1335($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1134($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 81024;
  $2_1 = $1147() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
  $1343($3_1 + 12 | 0 | 0, $0_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 12 | 0);
  $1503($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1344($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79792 + 12 | 0;
  HEAP32[$2_1 >> 2] = 79792 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $1345($0_1 + (HEAP32[(0 + 79792 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1337($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1134($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 81124;
  $1343($3_1 + 12 | 0 | 0, $0_1 | 0);
  $1_1 = $1346($3_1 + 12 | 0 | 0) | 0;
  $1503($3_1 + 12 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1347($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1344($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79840 + 12 | 0;
  HEAP32[$2_1 >> 2] = 79840 + 32 | 0;
  $1345($0_1 + (HEAP32[(0 + 79840 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1340($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1361($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 79888 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1341($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1300($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  $1362($0_1 + 76 | 0 | 0);
 }
 
 function $1342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 | $1_1 | 0;
  return $2_1 | 0;
 }
 
 function $1343($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2112($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $1344($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1361($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 80164 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1345($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1300($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  $1380($0_1 + 76 | 0 | 0);
 }
 
 function $1346($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104544 | 0) | 0 | 0;
 }
 
 function $1347($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1348($0_1) {
  $0_1 = $0_1 | 0;
  $1087(103044 | 0) | 0;
  $1087(103396 | 0) | 0;
  $1160(103132 | 0) | 0;
  $1160(103484 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1349($0_1) {
  $0_1 = $0_1 | 0;
  $1348(103928 | 0) | 0;
 }
 
 function $1350($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1056($0_1 | 0) | 0 | 0, 56 | 0);
 }
 
 function $1351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1217($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1224($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $1218(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  block : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break block
   }
   $2605(65681 | 0);
   wasm2js_trap();
  }
 }
 
 function $1352($0_1) {
  $0_1 = $0_1 | 0;
  return $1353($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ((HEAPU8[($0_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break block
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break block1
    }
    $4_1 = $1074() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break block1;
   }
   block3 : {
    block2 : {
     if ((HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break block2
     }
     if (!($1357(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $2_1 + 24 | 0 | 0) | 0)) {
      break block3
     }
     $3_1 = $1076(HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0;
     block5 : {
      block4 : {
       if ($1_1) {
        break block4
       }
       if (!($1356($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0)) {
        break block3
       }
       break block5;
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
     }
     $3_1 = $1076(HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0;
     break block1;
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = 1;
    $3_1 = 0;
    $5_1 = HEAP32[($1358($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
    $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
    block6 : {
     label : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break block6
      }
      $4_1 = $1309(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break block3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label;
     };
    }
    $6_1 = ($2_1 + 23 | 0) + 1 | 0;
    block9 : {
     block8 : {
      label1 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       block7 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($1220(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 23 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 1:
         break block3;
        case 0:
         break block7;
        case 2:
         break block8;
        default:
         break block9;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break block3
       }
       $3_1 = $1309(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break block3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label1;
      };
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
    }
    block11 : {
     block10 : {
      if ($1_1) {
       break block10
      }
      label2 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break block11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($1307($1076(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break block3
       }
       continue label2;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $1076(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    }
    $3_1 = $1076(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    break block1;
   }
   $3_1 = $1074() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1354($0_1) {
  $0_1 = $0_1 | 0;
  return $1353($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if (!($1103($1_1 | 0, $1074() | 0 | 0) | 0)) {
     break block
    }
    if (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) {
     break block1
    }
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($1103($1_1 | 0, $1074() | 0 | 0) | 0) ^ 1 | 0;
    break block1;
   }
   $3_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
   block4 : {
    block6 : {
     block3 : {
      block2 : {
       if (HEAPU8[($0_1 + 53 | 0) >> 0] | 0) {
        break block2
       }
       if ($3_1 & 1 | 0) {
        break block3
       }
       break block4;
      }
      block5 : {
       $3_1 = $3_1 & 1 | 0;
       if (!$3_1) {
        break block5
       }
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       if ($1356($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $1070($3_1 | 0) | 0 | 0) | 0) {
        break block4
       }
       break block6;
      }
      if (!$3_1) {
       break block4
      }
     }
     HEAP8[($2_1 + 19 | 0) >> 0] = $1070(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     block8 : {
      switch (($1223(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 19 | 0 | 0, ($2_1 + 19 | 0) + 1 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
      case 2:
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = ($2_1 + 24 | 0) + 1 | 0;
       HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
       break;
      case 0:
      case 1:
       break block6;
      default:
       break block8;
      };
     }
     label : while (1) {
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
       break block4
      }
      $3_1 = $3_1 + -1 | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      if (($1307(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
       continue label
      }
      break label;
     };
    }
    $1_1 = $1074() | 0;
    break block1;
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1356($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($1307($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
 }
 
 function $1357($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   $0_1 = $1309($0_1 | 0) | 0;
   if (($0_1 | 0) == (-1 | 0)) {
    break block
   }
   HEAP8[$1_1 >> 0] = $0_1;
  }
  return ($0_1 | 0) != (-1 | 0) | 0;
 }
 
 function $1358($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1359($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1359($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1360($2_1 + 15 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1360($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1361($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 80440 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1362($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 4 | 0) >> 0] = 0;
 }
 
 function $1363($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1056($0_1 | 0) | 0 | 0, 48 | 0);
 }
 
 function $1364($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $1217($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1218($1_1 | 0) | 0;
 }
 
 function $1365($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  block : {
   label : while (1) {
    $3_1 = $1225(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($1017($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break block
    }
    block1 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break block;
     case 0:
      continue label;
     default:
      break block1;
     };
    }
    break label;
   };
   $4_1 = $1052(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1366($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  block1 : {
   block : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break block
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break block1
     }
     block2 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1076(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($1074() | 0 | 0)) {
       break block2
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label;
    };
   }
   $2_1 = $1017($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $1367($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block4 : {
   block2 : {
    block : {
     if ($1103($1_1 | 0, $1074() | 0 | 0) | 0) {
      break block
     }
     $3_1 = $1070($1_1 | 0) | 0;
     HEAP8[($2_1 + 23 | 0) >> 0] = $3_1;
     block1 : {
      if ((HEAPU8[($0_1 + 44 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block1
      }
      if (!($1368($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
       break block2
      }
      break block;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $4_1 = $2_1 + 32 | 0;
     $5_1 = ($2_1 + 23 | 0) + 1 | 0;
     $6_1 = $2_1 + 23 | 0;
     label : while (1) {
      $3_1 = $1223(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
       break block2
      }
      block3 : {
       if (($3_1 | 0) != (3 | 0)) {
        break block3
       }
       if (($1017($6_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break block
       }
       break block2;
      }
      if ($3_1 >>> 0 > 1 >>> 0) {
       break block2
      }
      $6_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($1017($2_1 + 24 | 0 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
       break block2
      }
      $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($3_1 | 0) == (1 | 0)) {
       continue label
      }
      break label;
     };
    }
    $0_1 = $1213($1_1 | 0) | 0;
    break block4;
   }
   $0_1 = $1074() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1368($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $0_1;
  $0_1 = $1017($2_1 + 15 | 0 | 0, 1 | 0, 1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($0_1 | 0) == (1 | 0) | 0;
 }
 
 function $1369($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1132($0_1 | 0) | 0 | 0, 56 | 0);
 }
 
 function $1370($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1346($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1371($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $1347(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  block : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break block
   }
   $2605(65681 | 0);
   wasm2js_trap();
  }
 }
 
 function $1371($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1372($0_1) {
  $0_1 = $0_1 | 0;
  return $1373($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1373($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ((HEAPU8[($0_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break block
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break block1
    }
    $4_1 = $1147() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break block1;
   }
   block3 : {
    block2 : {
     if ((HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break block2
     }
     if (!($1378(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $2_1 + 24 | 0 | 0) | 0)) {
      break block3
     }
     $3_1 = $1149(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0;
     block5 : {
      block4 : {
       if ($1_1) {
        break block4
       }
       if (!($1376($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
        break block3
       }
       break block5;
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
     }
     $3_1 = $1149(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0;
     break block1;
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = 1;
    $3_1 = 0;
    $5_1 = HEAP32[($1358($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
    $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
    block6 : {
     label : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break block6
      }
      $4_1 = $1309(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break block3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label;
     };
    }
    $6_1 = $2_1 + 24 | 0;
    block9 : {
     block8 : {
      label1 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       block7 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($1379(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 1:
         break block3;
        case 0:
         break block7;
        case 2:
         break block8;
        default:
         break block9;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break block3
       }
       $3_1 = $1309(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break block3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label1;
      };
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
    }
    block11 : {
     block10 : {
      if ($1_1) {
       break block10
      }
      label2 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break block11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($1307($1149(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break block3
       }
       continue label2;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $1149(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    }
    $3_1 = $1149(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break block1;
   }
   $3_1 = $1147() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1374($0_1) {
  $0_1 = $0_1 | 0;
  return $1373($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1375($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if (!($1173($1_1 | 0, $1147() | 0 | 0) | 0)) {
     break block
    }
    if (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) {
     break block1
    }
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($1173($1_1 | 0, $1147() | 0 | 0) | 0) ^ 1 | 0;
    break block1;
   }
   $3_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
   block4 : {
    block6 : {
     block3 : {
      block2 : {
       if (HEAPU8[($0_1 + 53 | 0) >> 0] | 0) {
        break block2
       }
       if ($3_1 & 1 | 0) {
        break block3
       }
       break block4;
      }
      block5 : {
       $3_1 = $3_1 & 1 | 0;
       if (!$3_1) {
        break block5
       }
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       if ($1376($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $1144($3_1 | 0) | 0 | 0) | 0) {
        break block4
       }
       break block6;
      }
      if (!$3_1) {
       break block4
      }
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1144(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     block8 : {
      switch (($1377(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
      case 2:
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 25 | 0;
       HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
       break;
      case 0:
      case 1:
       break block6;
      default:
       break block8;
      };
     }
     label : while (1) {
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
       break block4
      }
      $3_1 = $3_1 + -1 | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      if (($1307(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
       continue label
      }
      break label;
     };
    }
    $1_1 = $1147() | 0;
    break block1;
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1376($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($1322($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
 }
 
 function $1377($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   $0_1 = $1321($0_1 | 0) | 0;
   if (($0_1 | 0) == (-1 | 0)) {
    break block
   }
   HEAP32[$1_1 >> 2] = $0_1;
  }
  return ($0_1 | 0) != (-1 | 0) | 0;
 }
 
 function $1379($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1380($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 4 | 0) >> 0] = 0;
 }
 
 function $1381($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1132($0_1 | 0) | 0 | 0, 48 | 0);
 }
 
 function $1382($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $1346($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1347($1_1 | 0) | 0;
 }
 
 function $1383($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  block : {
   label : while (1) {
    $3_1 = $1384(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($1017($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break block
    }
    block1 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break block;
     case 0:
      continue label;
     default:
      break block1;
     };
    }
    break label;
   };
   $4_1 = $1052(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1384($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1385($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  block1 : {
   block : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break block
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break block1
     }
     block2 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1149(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($1147() | 0 | 0)) {
       break block2
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label;
    };
   }
   $2_1 = $1017($1_1 | 0, 4 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $1386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block4 : {
   block2 : {
    block : {
     if ($1173($1_1 | 0, $1147() | 0 | 0) | 0) {
      break block
     }
     $3_1 = $1144($1_1 | 0) | 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
     block1 : {
      if ((HEAPU8[($0_1 + 44 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block1
      }
      if (!($1387($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
       break block2
      }
      break block;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $4_1 = $2_1 + 32 | 0;
     $5_1 = $2_1 + 24 | 0;
     $6_1 = $2_1 + 20 | 0;
     label : while (1) {
      $3_1 = $1377(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
       break block2
      }
      block3 : {
       if (($3_1 | 0) != (3 | 0)) {
        break block3
       }
       if (($1017($6_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break block
       }
       break block2;
      }
      if ($3_1 >>> 0 > 1 >>> 0) {
       break block2
      }
      $6_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($1017($2_1 + 24 | 0 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
       break block2
      }
      $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($3_1 | 0) == (1 | 0)) {
       continue label
      }
      break label;
     };
    }
    $0_1 = $1388($1_1 | 0) | 0;
    break block4;
   }
   $0_1 = $1147() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1387($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1325($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
 }
 
 function $1388($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($1173($0_1 | 0, $1147() | 0 | 0) | 0)) {
    break block
   }
   $0_1 = ($1147() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1389() {
  $1326();
 }
 
 function $1390($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0, $13_1 = 0, $22_1 = 0, $22$hi = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  block : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | i64toi32_i32$0 | 0)) {
    break block
   }
   i64toi32_i32$1 = $3_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $22_1 = i64toi32_i32$1;
   $22$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $22_1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      $14_1 = 0
     } else {
      $14_1 = 1
     }
     $15_1 = $14_1;
    } else {
     $15_1 = 0
    }
    $12_1 = $15_1;
   }
   if ($12_1) {
    break block
   }
   i64toi32_i32$2 = $1$hi;
   $3_1 = $2_1 + $1_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
 }
 
 function $1391($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $4$hi = 0, $2_1 = 0, $5$hi = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $7_1 = 0, $7$hi = 0, $15_1 = 0, $15$hi = 0, $35_1 = 0, $40_1 = 0, $40$hi = 0, $59_1 = 0, $59$hi = 0, $67_1 = 0, $74_1 = 0, $74$hi = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $1_1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2_1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1_1 - $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $15_1 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$3 = $15_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $4_1 = i64toi32_i32$4;
  $4$hi = i64toi32_i32$5;
  block2 : {
   block1 : {
    block : {
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$5;
     $5$hi = i64toi32_i32$2;
     if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
      break block
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     if ($26_1) {
      break block1
     }
    }
    $2_1 = $1308($0_1 | 0) | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break block2
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1_1;
   $35_1 = i64toi32_i32$2;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $2_1 - $1_1 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $40_1 = i64toi32_i32$2;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$5 = $40_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$3 = $35_1;
   HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
   return -1 | 0;
  }
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  block3 : {
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break block3
   }
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $3_1 - $1_1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $59_1 = i64toi32_i32$5;
   $59$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $59$hi;
   i64toi32_i32$0 = $59_1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $29_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      $30_1 = 0
     } else {
      $30_1 = 1
     }
     $31_1 = $30_1;
    } else {
     $31_1 = 0
    }
    $29_1 = $31_1;
   }
   if ($29_1) {
    break block3
   }
   i64toi32_i32$4 = $5$hi;
   $3_1 = $1_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $67_1 = $0_1;
  i64toi32_i32$4 = $4$hi;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  i64toi32_i32$2 = $3_1 - $1_1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
  $74_1 = i64toi32_i32$2;
  $74$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$5 = $74_1;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$0 = $67_1;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
  block4 : {
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    break block4
   }
   HEAP8[($1_1 + -1 | 0) >> 0] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $1392($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $8_1 = 0, $8$hi = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $36_1 = 0, $50_1 = 0, $53_1 = 0, $53$hi = 0, $57$hi = 0, $58$hi = 0, $60_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
  $4_1 = $3_1 & 8388607 | 0;
  block2 : {
   block : {
    $5_1 = $3_1 >>> 23 | 0;
    $6_1 = $5_1 & 255 | 0;
    if (!$6_1) {
     break block
    }
    block1 : {
     if (($6_1 | 0) == (255 | 0)) {
      break block1
     }
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 25;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $23_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $23_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7_1 = $23_1;
     $7$hi = i64toi32_i32$1;
     $4_1 = ($5_1 & 255 | 0) + 16256 | 0;
     i64toi32_i32$1 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$1;
     break block2;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $7_1 = $24_1;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$2;
    $4_1 = 32767;
    break block2;
   }
   block3 : {
    if ($4_1) {
     break block3
    }
    i64toi32_i32$2 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$2;
    $4_1 = 0;
    i64toi32_i32$2 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$2;
    break block2;
   }
   i64toi32_i32$2 = 0;
   $36_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$0 = 0;
   $1045($2_1 | 0, $36_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 + 81 | 0 | 0);
   $4_1 = 16265 - $4_1 | 0;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $50_1 = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $25_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $53_1 = $25_1;
  $53$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $3_1 >>> 31 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $26_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $57$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $53$hi;
  i64toi32_i32$0 = $53_1;
  i64toi32_i32$1 = $57$hi;
  i64toi32_i32$3 = $26_1;
  i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
  $58$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $58$hi;
  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $60_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $50_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $60_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1393($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $26_1 = 0, $26$hi = 0, $30$hi = 0, $31_1 = 0, $31$hi = 0, $35$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ($1_1) {
     break block
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break block1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 ^ $3_1 | 0) - $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $1045($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $26_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $26$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $30$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $26$hi;
   i64toi32_i32$1 = $26_1;
   i64toi32_i32$0 = $30$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $31_1 = i64toi32_i32$4;
   $31$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $35$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $31$hi;
   i64toi32_i32$5 = $31_1;
   i64toi32_i32$2 = $35$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1394($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $14$hi = 0, $11$hi = 0, $11_1 = 0, $14_1 = 0, $5_1 = 0, $10$hi = 0, $12$hi = 0, $6_1 = 0, $18$hi = 0, $12_1 = 0, $10_1 = 0, $8_1 = 0, $15$hi = 0, $18_1 = 0, $7_1 = 0, $16$hi = 0, $17$hi = 0, $20$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0, $15_1 = 0, $21$hi = 0, $9_1 = 0, $19$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $219_1 = 0, $221_1 = 0, $222_1 = 0, $224_1 = 0, $226_1 = 0, $227_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $19_1 = 0, $232_1 = 0, $233_1 = 0, $21_1 = 0, $235_1 = 0, $237_1 = 0, $22_1 = 0, $238_1 = 0, $239_1 = 0, $24_1 = 0, $240_1 = 0, $241_1 = 0, $243_1 = 0, $244_1 = 0, $245_1 = 0, $246_1 = 0, $248_1 = 0, $249_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $255_1 = 0, $256_1 = 0, $257_1 = 0, $53_1 = 0, $57_1 = 0, $64_1 = 0, $68_1 = 0, $77_1 = 0, $77$hi = 0, $89_1 = 0, $89$hi = 0, $111_1 = 0, $112_1 = 0, $112$hi = 0, $113_1 = 0, $113$hi = 0, $120$hi = 0, $123$hi = 0, $139_1 = 0, $140_1 = 0, $140$hi = 0, $141_1 = 0, $141$hi = 0, $148$hi = 0, $151$hi = 0, $168_1 = 0, $168$hi = 0, $173_1 = 0, $173$hi = 0, $180_1 = 0, $180$hi = 0, $187_1 = 0, $187$hi = 0, $192_1 = 0, $192$hi = 0, $201_1 = 0, $201$hi = 0, $203_1 = 0, $203$hi = 0, $205_1 = 0, $205$hi = 0, $213_1 = 0, $213$hi = 0, $215_1 = 0, $215$hi = 0, $217_1 = 0, $217$hi = 0, $220_1 = 0, $222$hi = 0, $223_1 = 0, $223$hi = 0, $225_1 = 0, $225$hi = 0, $234_1 = 0, $234$hi = 0, $236_1 = 0, $236$hi = 0, $242_1 = 0, $242$hi = 0, $247_1 = 0, $247$hi = 0, $250$hi = 0, $23_1 = 0, $266_1 = 0, $266$hi = 0, $270_1 = 0, $271_1 = 0, $271$hi = 0, $275_1 = 0, $275$hi = 0, $279_1 = 0, $280$hi = 0, $281$hi = 0, $284_1 = 0, $284$hi = 0, $285_1 = 0, $285$hi = 0, $286_1 = 0, $286$hi = 0, $289_1 = 0, $290$hi = 0, $293_1 = 0, $294$hi = 0, $295$hi = 0, $299_1 = 0, $300$hi = 0, $301_1 = 0, $301$hi = 0, $308_1 = 0, $308$hi = 0, $312_1 = 0, $314_1 = 0, $314$hi = 0, $316$hi = 0, $317_1 = 0, $317$hi = 0, $318_1 = 0, $318$hi = 0, $319_1 = 0, $319$hi = 0, $321$hi = 0, $325_1 = 0, $326$hi = 0, $327_1 = 0, $327$hi = 0, $328_1 = 0, $328$hi = 0, $330_1 = 0, $330$hi = 0, $333_1 = 0, $334$hi = 0, $337_1 = 0, $338$hi = 0, $339$hi = 0, $342_1 = 0, $343$hi = 0, $345$hi = 0, $346_1 = 0, $346$hi = 0, $350_1 = 0, $351$hi = 0, $352_1 = 0, $352$hi = 0, $353_1 = 0, $353$hi = 0, $356_1 = 0, $357$hi = 0, $360_1 = 0, $361$hi = 0, $362$hi = 0, $366_1 = 0, $367$hi = 0, $377_1 = 0, $377$hi = 0, $379$hi = 0, $382_1 = 0, $382$hi = 0, $384$hi = 0, $388_1 = 0, $388$hi = 0, $390$hi = 0, $424_1 = 0, $424$hi = 0, $426_1 = 0, $426$hi = 0, $427_1 = 0, $427$hi = 0, $429_1 = 0, $429$hi = 0, $431_1 = 0, $431$hi = 0, $433_1 = 0, $434$hi = 0, $437_1 = 0, $437$hi = 0, $439_1 = 0, $439$hi = 0, $447$hi = 0, $449_1 = 0, $449$hi = 0, $455_1 = 0, $461_1 = 0, $461$hi = 0, $465_1 = 0, $466$hi = 0, $470_1 = 0, $470$hi = 0, $474_1 = 0, $474$hi = 0, $477_1 = 0, $477$hi = 0, $481_1 = 0, $482$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $12_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $219_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $219_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $13_1 = $219_1;
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $221_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $221_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $221_1 & 32767 | 0;
  block3 : {
   block1 : {
    block : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $222_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $222_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $222_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break block
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$1 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $14_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53_1 : $57_1) {
      break block2
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$1;
     break block3;
    }
    block4 : {
     i64toi32_i32$1 = $3$hi;
     $64_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
      break block4
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block5 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $77$hi;
     i64toi32_i32$0 = $77_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break block5
     }
     block6 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break block6
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break block3;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break block3;
    }
    block7 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $89_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $89$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = $89$hi;
     i64toi32_i32$1 = $89_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block7
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     block8 : {
      i64toi32_i32$2 = $2$hi;
      if (!!($2_1 | i64toi32_i32$2 | 0)) {
       break block8
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      break block3;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     break block3;
    }
    block9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break block9
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block10
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    $8_1 = 0;
    block11 : {
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break block11
     }
     $111_1 = $5_1 + 80 | 0;
     i64toi32_i32$2 = $1$hi;
     $112_1 = $1_1;
     $112$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     $113_1 = $12_1;
     $113$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     $8_1 = !($12_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $12_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $224_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $224_1 = i64toi32_i32$2
     }
     $120$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $123$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $120$hi;
     i64toi32_i32$3 = $224_1;
     i64toi32_i32$0 = $123$hi;
     i64toi32_i32$2 = $8_1 << 6 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$1;
     i64toi32_i32$5 = $112$hi;
     i64toi32_i32$3 = $113$hi;
     $1045($111_1 | 0, $112_1 | 0, i64toi32_i32$5 | 0, $113_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$1 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $226_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $226_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $226_1;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block1
    }
    $139_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $140_1 = $3_1;
    $140$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $141_1 = $10_1;
    $141$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? $3_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $227_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $227_1 = i64toi32_i32$5
    }
    $148$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $151$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $148$hi;
    i64toi32_i32$3 = $227_1;
    i64toi32_i32$2 = $151$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$1 = $140$hi;
    i64toi32_i32$3 = $141$hi;
    $1045($139_1 | 0, $140_1 | 0, i64toi32_i32$1 | 0, $141_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $228_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
    $228_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $14_1 = $228_1;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$0;
   $168_1 = $2_1;
   $168$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $229_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $229_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $4_1 = $229_1;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $168$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($168_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $15_1 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$3;
   $173_1 = i64toi32_i32$1;
   $173$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $230_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $230_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   $14_1 = $230_1;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $180_1 = i64toi32_i32$3;
   $180$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $173$hi;
   i64toi32_i32$1 = $173_1;
   i64toi32_i32$3 = $180$hi;
   i64toi32_i32$5 = $180_1;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $231_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $231_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $17_1 = $231_1;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $187_1 = i64toi32_i32$0;
   $187$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$4 = $17_1;
   i64toi32_i32$0 = $187$hi;
   i64toi32_i32$5 = $187_1;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $18_1 = i64toi32_i32$3;
   $18$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $17$hi;
   i64toi32_i32$5 = $17_1;
   i64toi32_i32$1 = 0;
   $192_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $192$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $201_1 = i64toi32_i32$5;
   $201$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$5 = $201$hi;
   i64toi32_i32$4 = $201_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$3;
   $203_1 = i64toi32_i32$0;
   $203$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 49;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $232_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    $232_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
   }
   $205_1 = $232_1;
   $205$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    $233_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $233_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
   }
   $20_1 = $233_1;
   $20$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $205$hi;
   i64toi32_i32$1 = $205_1;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$4 = $20_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $3_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $213_1 = i64toi32_i32$2;
   $213$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $203$hi;
   i64toi32_i32$3 = $203_1;
   i64toi32_i32$2 = $213$hi;
   i64toi32_i32$4 = $213_1;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$0;
   $215_1 = i64toi32_i32$5;
   $215$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $16_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $235_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $235_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $217_1 = $235_1;
   $217$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$0 = $16_1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$4 = $15_1;
   $220_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $220_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    $237_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $237_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
   }
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $217$hi;
   i64toi32_i32$0 = $217_1;
   i64toi32_i32$4 = $222$hi;
   i64toi32_i32$1 = $237_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $223_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $223$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $215$hi;
   i64toi32_i32$3 = $215_1;
   i64toi32_i32$0 = $223$hi;
   i64toi32_i32$1 = $223_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$5;
   $225_1 = i64toi32_i32$2;
   $225$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $234_1 = i64toi32_i32$4;
   $234$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$5 = $22_1;
   i64toi32_i32$4 = $234$hi;
   i64toi32_i32$1 = $234_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$2;
   $236_1 = i64toi32_i32$0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $238_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $238_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$2 = $238_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = -2147483648;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $242_1 = i64toi32_i32$2;
   $242$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$5 = $236_1;
   i64toi32_i32$2 = $242$hi;
   i64toi32_i32$1 = $242_1;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $15_1 = i64toi32_i32$4;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $247_1 = i64toi32_i32$5;
   $247$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $247$hi;
   i64toi32_i32$1 = $247_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $20_1 = i64toi32_i32$2;
   $20$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
    $239_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
    $239_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $250$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $225$hi;
   i64toi32_i32$4 = $225_1;
   i64toi32_i32$0 = $250$hi;
   i64toi32_i32$1 = $239_1;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $23_1 = i64toi32_i32$5;
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $192$hi;
   i64toi32_i32$3 = $192_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$5;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   block13 : {
    block12 : {
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $266_1 = i64toi32_i32$3;
     $266$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$2 = $24_1;
     i64toi32_i32$3 = $266$hi;
     i64toi32_i32$1 = $266_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$1 = $24_1;
     $270_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $271_1 = $270_1;
     $271$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $275_1 = i64toi32_i32$0;
     $275$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = $275$hi;
     i64toi32_i32$2 = $275_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     $279_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $280$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $271$hi;
     i64toi32_i32$2 = $271_1;
     i64toi32_i32$4 = $280$hi;
     i64toi32_i32$1 = $279_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $281$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $284_1 = i64toi32_i32$2;
     $284$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $281$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = $284$hi;
     i64toi32_i32$1 = $284_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $285_1 = i64toi32_i32$4;
     $285$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     $286_1 = $14_1;
     $286$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     $289_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $290$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$5 = $17_1;
     $293_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $294$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $290$hi;
     i64toi32_i32$5 = $289_1;
     i64toi32_i32$3 = $294$hi;
     i64toi32_i32$0 = $293_1;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $295$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $286$hi;
     i64toi32_i32$1 = $286_1;
     i64toi32_i32$5 = $295$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$0 = $14_1;
     $299_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $300$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $285$hi;
     i64toi32_i32$0 = $285_1;
     i64toi32_i32$2 = $300$hi;
     i64toi32_i32$1 = $299_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $301_1 = i64toi32_i32$5;
     $301$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $308_1 = i64toi32_i32$0;
     $308$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $308$hi;
     i64toi32_i32$1 = $308_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $312_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = $312_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $240_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $240_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $314_1 = $240_1;
     $314$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $241_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $241_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $316$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $314$hi;
     i64toi32_i32$5 = $314_1;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$4 = $241_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $317_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $317$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $301$hi;
     i64toi32_i32$1 = $301_1;
     i64toi32_i32$5 = $317$hi;
     i64toi32_i32$4 = $317_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $318_1 = i64toi32_i32$0;
     $318$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     $319_1 = $4_1;
     $319$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $243_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
      $243_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $321$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $319$hi;
     i64toi32_i32$2 = $319_1;
     i64toi32_i32$3 = $321$hi;
     i64toi32_i32$4 = $243_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = $4_1;
     $325_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $326$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $318$hi;
     i64toi32_i32$4 = $318_1;
     i64toi32_i32$0 = $326$hi;
     i64toi32_i32$2 = $325_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $327_1 = i64toi32_i32$3;
     $327$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     $328_1 = $2_1;
     $328$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $244_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $244_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $330_1 = $244_1;
     $330$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$2 = $22_1;
     $333_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $334$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$1 = $13_1;
     $337_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $338$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $334$hi;
     i64toi32_i32$1 = $333_1;
     i64toi32_i32$5 = $338$hi;
     i64toi32_i32$4 = $337_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $339$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$2 = $20_1;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$4 = $15_1;
     $342_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $343$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $339$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = $343$hi;
     i64toi32_i32$1 = $342_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $245_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $245_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     }
     $345$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $330$hi;
     i64toi32_i32$0 = $330_1;
     i64toi32_i32$2 = $345$hi;
     i64toi32_i32$1 = $245_1;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $346_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $346$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $328$hi;
     i64toi32_i32$4 = $328_1;
     i64toi32_i32$0 = $346$hi;
     i64toi32_i32$1 = $346_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $350_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $351$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$1 = $327_1;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$4 = $350_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $352_1 = i64toi32_i32$0;
     $352$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $353_1 = $4_1;
     $353$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $21_1;
     $356_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $357$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$4 = $23_1;
     i64toi32_i32$1 = $16_1;
     $360_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $361$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $357$hi;
     i64toi32_i32$1 = $356_1;
     i64toi32_i32$2 = $361$hi;
     i64toi32_i32$3 = $360_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $362$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $353$hi;
     i64toi32_i32$4 = $353_1;
     i64toi32_i32$1 = $362$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4_1;
     $366_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $367$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $352$hi;
     i64toi32_i32$3 = $352_1;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$4 = $366_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$4 | 0 | i64toi32_i32$3 | 0)) {
      break block12
     }
     $6_1 = $6_1 + 1 | 0;
     break block13;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $246_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
     $246_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $3_1 = $246_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $248_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $377_1 = $248_1;
    $377$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $249_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $249_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $379$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $377$hi;
    i64toi32_i32$2 = $377_1;
    i64toi32_i32$0 = $379$hi;
    i64toi32_i32$4 = $249_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $250_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $250_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $382_1 = $250_1;
    $382$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $251_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $251_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $384$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $382$hi;
    i64toi32_i32$2 = $382_1;
    i64toi32_i32$0 = $384$hi;
    i64toi32_i32$4 = $251_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $18_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $252_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $252_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $18_1 = $252_1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    $388_1 = $3_1;
    $388$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $253_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $253_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $390$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $388$hi;
    i64toi32_i32$2 = $388_1;
    i64toi32_i32$0 = $390$hi;
    i64toi32_i32$4 = $253_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$0;
   }
   block14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break block14
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$2;
    break block3;
   }
   block17 : {
    block15 : {
     if (($6_1 | 0) > (0 | 0)) {
      break block15
     }
     block16 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 > 127 >>> 0) {
       break block16
      }
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $1$hi;
      $6_1 = $6_1 + 127 | 0;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      $1045($5_1 + 48 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      $1045($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      $1046($5_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      $1046($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      $424_1 = i64toi32_i32$2;
      $424$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $426_1 = i64toi32_i32$3;
      $426$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $424$hi;
      i64toi32_i32$0 = $424_1;
      i64toi32_i32$3 = $426$hi;
      i64toi32_i32$4 = $426_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $427_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $427$hi = i64toi32_i32$3;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
      $429_1 = i64toi32_i32$3;
      $429$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
      $431_1 = i64toi32_i32$0;
      $431$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $429$hi;
      i64toi32_i32$2 = $429_1;
      i64toi32_i32$0 = $431$hi;
      i64toi32_i32$4 = $431_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 0;
      $433_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = 0;
      $434$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $427$hi;
      i64toi32_i32$4 = $427_1;
      i64toi32_i32$0 = $434$hi;
      i64toi32_i32$2 = $433_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
      $437_1 = i64toi32_i32$0;
      $437$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] | 0;
      $439_1 = i64toi32_i32$4;
      $439$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $437$hi;
      i64toi32_i32$3 = $437_1;
      i64toi32_i32$4 = $439$hi;
      i64toi32_i32$2 = $439_1;
      i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$3;
      $2$hi = i64toi32_i32$4;
      break block17;
     }
     i64toi32_i32$4 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$4;
     break block3;
    }
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $254_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
     $254_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $447$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $449_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $449$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $447$hi;
    i64toi32_i32$3 = $254_1;
    i64toi32_i32$4 = $449$hi;
    i64toi32_i32$2 = $449_1;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11$hi = i64toi32_i32$3;
   block18 : {
    i64toi32_i32$3 = $18$hi;
    $455_1 = !($18_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
     $255_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $256_1 = 0
      } else {
       $256_1 = 1
      }
      $257_1 = $256_1;
     } else {
      $257_1 = 0
     }
     $255_1 = $257_1;
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $455_1 : $255_1) {
     break block18
    }
    i64toi32_i32$2 = $11$hi;
    $461_1 = $11_1;
    $461$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$1;
    $465_1 = !(i64toi32_i32$5 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $466$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $461$hi;
    i64toi32_i32$2 = $461_1;
    i64toi32_i32$0 = $466$hi;
    i64toi32_i32$3 = $465_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    break block3;
   }
   block19 : {
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
    $470_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $470$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$1 = $470$hi;
    i64toi32_i32$3 = $470_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0) {
     break block19
    }
    i64toi32_i32$2 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$2;
    break block3;
   }
   i64toi32_i32$2 = $11$hi;
   $474_1 = $11_1;
   $474$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $477_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $477$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$3 = $477$hi;
   i64toi32_i32$5 = $477_1;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   $481_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $482$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $474$hi;
   i64toi32_i32$5 = $474_1;
   i64toi32_i32$4 = $482$hi;
   i64toi32_i32$2 = $481_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $11_1 = i64toi32_i32$3;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $1395() {
  return 0 | 0;
 }
 
 function $1396() {
  return 0 | 0;
 }
 
 function $1397($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $10$hi = 0, $10_1 = 0, $6_1 = 0, $9$hi = 0, $7_1 = 0, $9_1 = 0, $5_1 = 0, $12$hi = 0, $12_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $151_1 = 0, $152_1 = 0, $153_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $159_1 = 0, $20_1 = 0, $25_1 = 0, $30_1 = 0, $34_1 = 0, $40_1 = 0, $48_1 = 0, $50_1 = 0, $58_1 = 0, $58$hi = 0, $64_1 = 0, $64$hi = 0, $68_1 = 0, $68$hi = 0, $78_1 = 0, $78$hi = 0, $106_1 = 0, $109_1 = 0, $136_1 = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $167_1 = 0, $168_1 = 0, $168$hi = 0, $169_1 = 0, $169$hi = 0, $176$hi = 0, $179$hi = 0, $191_1 = 0, $191$hi = 0, $193$hi = 0, $197_1 = 0, $197$hi = 0, $199$hi = 0, $226_1 = 0, $226$hi = 0, $228_1 = 0, $228$hi = 0, $230_1 = 0, $230$hi = 0, $232_1 = 0, $233$hi = 0, $245_1 = 0, $245$hi = 0, $248_1 = 0, $248$hi = 0, $256$hi = 0, $259_1 = 0, $260$hi = 0, $265_1 = 0, $266_1 = 0, $266$hi = 0, $267_1 = 0, $267$hi = 0, $274$hi = 0, $277$hi = 0, $291_1 = 0, $291$hi = 0, $297_1 = 0, $298$hi = 0, $304_1 = 0, $304$hi = 0, $306$hi = 0, $307_1 = 0, $307$hi = 0, $309_1 = 0, $309$hi = 0, $336_1 = 0, $336$hi = 0, $338_1 = 0, $338$hi = 0, $340_1 = 0, $340$hi = 0, $342_1 = 0, $343$hi = 0, $348_1 = 0, $348$hi = 0, $350$hi = 0, $354_1 = 0, $354$hi = 0, $357_1 = 0, $357$hi = 0, $358$hi = 0, $367_1 = 0, $367$hi = 0, $371$hi = 0, $375_1 = 0, $376$hi = 0, $379_1 = 0, $379$hi = 0, $382_1 = 0, $382$hi = 0, $386_1 = 0, $387$hi = 0, $390_1 = 0, $390$hi = 0, $396_1 = 0, $397$hi = 0, $401_1 = 0, $402$hi = 0, $405_1 = 0, $405$hi = 0, $411_1 = 0, $412$hi = 0, $416_1 = 0, $417$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  block3 : {
   block1 : {
    block : {
     i64toi32_i32$1 = $1$hi;
     $6_1 = !($1_1 | i64toi32_i32$1 | 0);
     $20_1 = $6_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$3 = 0;
     $25_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $10$hi;
     if (!($10_1 | i64toi32_i32$2 | 0) ? $20_1 : $25_1) {
      break block
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 0;
     $30_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = -2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$5 = 0;
     $34_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = -2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30_1 : $34_1) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$4 = 0;
     $40_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $6_1 : $40_1) {
      break block2
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$1;
     break block3;
    }
    block4 : {
     i64toi32_i32$1 = $3$hi;
     $48_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$5 = 0;
     $50_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $50_1) {
      break block4
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$4;
     break block3;
    }
    block5 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $58_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $58$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $58$hi;
     i64toi32_i32$1 = $58_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break block5
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
     $64_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $64$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $68_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $68$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $64$hi;
     i64toi32_i32$1 = $64_1;
     i64toi32_i32$5 = $68$hi;
     i64toi32_i32$4 = $68_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$2 ? 0 : $1_1;
     i64toi32_i32$2 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$2;
     break block3;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    $78_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $78$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $78$hi;
    i64toi32_i32$3 = $78_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break block3
    }
    block6 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break block6
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block3
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $4$hi = i64toi32_i32$5;
     break block3;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break block1
    }
    i64toi32_i32$1 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$1;
    break block3;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   $106_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$3 = $9_1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $109_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$2 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1;
   $7_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $106_1 : $109_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$2;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $10_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$3;
   $12_1 = i64toi32_i32$1;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $139_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $139_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $8_1 = $139_1 & 32767 | 0;
   block7 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $140_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $140_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
    }
    $6_1 = $140_1 & 32767 | 0;
    if ($6_1) {
     break block7
    }
    $136_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $137_1 = $9_1;
    $137$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $138_1 = $10_1;
    $138$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$2 = i64toi32_i32$3 ? $9_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $141_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $141_1 = i64toi32_i32$5
    }
    $145$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $148$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $145$hi;
    i64toi32_i32$2 = $141_1;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$2 = $138$hi;
    $1045($136_1 | 0, $137_1 | 0, i64toi32_i32$0 | 0, $138_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$1 ? $1_1 : $3_1;
   i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $1$hi = i64toi32_i32$5;
   block8 : {
    if ($8_1) {
     break block8
    }
    $167_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $168_1 = $3_1;
    $168$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $169_1 = $1_1;
    $169$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    $7_1 = !($1_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$0 ? $3_1 : $1_1;
    i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$1;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$3);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $142_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $142_1 = i64toi32_i32$5
    }
    $176$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $179$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $176$hi;
    i64toi32_i32$2 = $142_1;
    i64toi32_i32$3 = $179$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$1;
    i64toi32_i32$4 = $168$hi;
    i64toi32_i32$2 = $169$hi;
    $1045($167_1 | 0, $168_1 | 0, i64toi32_i32$4 | 0, $169_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$1 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 88 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 92 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $143_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $143_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $191_1 = $143_1;
   $191$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $144_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $144_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $193$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $191$hi;
   i64toi32_i32$4 = $191_1;
   i64toi32_i32$2 = $193$hi;
   i64toi32_i32$5 = $144_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $145_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $145_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $197_1 = $145_1;
   $197$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $146_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $146_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $199$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $197$hi;
   i64toi32_i32$0 = $197_1;
   i64toi32_i32$4 = $199$hi;
   i64toi32_i32$5 = $146_1;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $12_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $147_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $147_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $10_1 = $147_1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   block9 : {
    if (($6_1 | 0) == ($8_1 | 0)) {
     break block9
    }
    block10 : {
     $7_1 = $6_1 - $8_1 | 0;
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break block10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $10_1 = 1;
     $10$hi = i64toi32_i32$2;
     break block9;
    }
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$4 = $1$hi;
    $1045($5_1 + 64 | 0 | 0, $10_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    $1046($5_1 + 48 | 0 | 0, $10_1 | 0, i64toi32_i32$4 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $226_1 = i64toi32_i32$2;
    $226$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $228_1 = i64toi32_i32$4;
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
    $230_1 = i64toi32_i32$2;
    $230$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $228$hi;
    i64toi32_i32$0 = $228_1;
    i64toi32_i32$2 = $230$hi;
    i64toi32_i32$5 = $230_1;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    $232_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $233$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $226$hi;
    i64toi32_i32$5 = $226_1;
    i64toi32_i32$2 = $233$hi;
    i64toi32_i32$0 = $232_1;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 56 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 60 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$2 = 524288;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 3;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    $148_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $148_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
   }
   $9_1 = $148_1;
   $9$hi = i64toi32_i32$4;
   block12 : {
    block11 : {
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $149_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $150_1 = 0
       } else {
        $150_1 = 1
       }
       $151_1 = $150_1;
      } else {
       $151_1 = 0
      }
      $149_1 = $151_1;
     }
     if ($149_1) {
      break block11
     }
     i64toi32_i32$2 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $245_1 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $245$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $248_1 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
     $248$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $245$hi;
     i64toi32_i32$4 = $245_1;
     i64toi32_i32$2 = $248$hi;
     i64toi32_i32$5 = $248_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     if (!(i64toi32_i32$4 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
      break block3
     }
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $256$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$5 = $10_1;
     $259_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $260$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $256$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$3 = $260$hi;
     i64toi32_i32$2 = $259_1;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = 524287;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break block12
     }
     $265_1 = $5_1 + 32 | 0;
     i64toi32_i32$1 = $2$hi;
     $266_1 = $2_1;
     $266$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$4;
     $267_1 = i64toi32_i32$0;
     $267$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     $7_1 = !(i64toi32_i32$0 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $2_1 : i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$2);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $152_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $152_1 = i64toi32_i32$1
     }
     $274$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $277$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $274$hi;
     i64toi32_i32$5 = $152_1;
     i64toi32_i32$2 = $277$hi;
     i64toi32_i32$1 = $7_1 << 6 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $7_1 = i64toi32_i32$4 + -12 | 0;
     i64toi32_i32$0 = $266$hi;
     i64toi32_i32$5 = $267$hi;
     $1045($265_1 | 0, $266_1 | 0, i64toi32_i32$0 | 0, $267_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$5;
     break block12;
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $291_1 = i64toi32_i32$2;
    $291$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $10_1;
    $297_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $298$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $291$hi;
    i64toi32_i32$1 = $291_1;
    i64toi32_i32$2 = $298$hi;
    i64toi32_i32$5 = $297_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = 1048576;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$1 | 0)) {
     break block12
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $153_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     $153_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $304_1 = $153_1;
    $304$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $154_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $154_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $306$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $304$hi;
    i64toi32_i32$4 = $304_1;
    i64toi32_i32$1 = $306$hi;
    i64toi32_i32$5 = $154_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $307_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $307$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
    $309_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $309$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $307$hi;
    i64toi32_i32$1 = $307_1;
    i64toi32_i32$0 = $309$hi;
    i64toi32_i32$5 = $309_1;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$0;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $155_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $155_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $155_1;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$0 = $11_1;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$4;
   block13 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break block13
    }
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break block3;
   }
   $7_1 = 0;
   block15 : {
    block14 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break block14
     }
     $7_1 = $6_1;
     break block15;
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    $1045($5_1 + 16 | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    $1046($5_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $336_1 = i64toi32_i32$0;
    $336$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
    $338_1 = i64toi32_i32$1;
    $338$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
    $340_1 = i64toi32_i32$0;
    $340$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $338$hi;
    i64toi32_i32$4 = $338_1;
    i64toi32_i32$0 = $340$hi;
    i64toi32_i32$5 = $340_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $342_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = 0;
    $343$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $336$hi;
    i64toi32_i32$5 = $336_1;
    i64toi32_i32$0 = $343$hi;
    i64toi32_i32$4 = $342_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $156_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    $156_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $348_1 = $156_1;
   $348$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 61;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    $157_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $157_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   }
   $350$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $348$hi;
   i64toi32_i32$0 = $348_1;
   i64toi32_i32$5 = $350$hi;
   i64toi32_i32$4 = $157_1;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $3_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 48;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $158_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $354_1 = $158_1;
   $354$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $159_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $159_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   i64toi32_i32$0 = $159_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$4 = -1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $357_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $357$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $354$hi;
   i64toi32_i32$1 = $354_1;
   i64toi32_i32$0 = $357$hi;
   i64toi32_i32$4 = $357_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $358$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$0 = $358$hi;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   $6_1 = $2_1 & 7 | 0;
   block21 : {
    block19 : {
     block18 : {
      switch ($1395() | 0 | 0) {
      case 0:
       block20 : {
        if (($6_1 | 0) == (4 | 0)) {
         break block20
        }
        i64toi32_i32$1 = $4$hi;
        $367_1 = $4_1;
        $367$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = 0;
        $371$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$5 = $371$hi;
        i64toi32_i32$4 = $6_1 >>> 0 > 4 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
        }
        $10_1 = i64toi32_i32$2;
        $10$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$4 = $3_1;
        $375_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $376$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $367$hi;
        i64toi32_i32$4 = $367_1;
        i64toi32_i32$3 = $376$hi;
        i64toi32_i32$0 = $375_1;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        $3_1 = $10_1;
        $3$hi = i64toi32_i32$2;
        break block19;
       }
       i64toi32_i32$2 = $4$hi;
       $379_1 = $4_1;
       $379$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $382_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $382$hi = i64toi32_i32$4;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $382$hi;
       i64toi32_i32$0 = $382_1;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$3;
       $10$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3_1;
       $386_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $387$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $379$hi;
       i64toi32_i32$0 = $379_1;
       i64toi32_i32$5 = $387$hi;
       i64toi32_i32$2 = $386_1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $4_1 = i64toi32_i32$1;
       $4$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$3;
       break block21;
      case 1:
       i64toi32_i32$3 = $4$hi;
       $390_1 = $4_1;
       $390$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 0;
       $396_1 = ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $397$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$3 = $397$hi;
       i64toi32_i32$0 = $396_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $10_1 = i64toi32_i32$5;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3_1;
       $401_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $402$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $390$hi;
       i64toi32_i32$0 = $390_1;
       i64toi32_i32$1 = $402$hi;
       i64toi32_i32$2 = $401_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $4_1 = i64toi32_i32$3;
       $4$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$5;
       break block19;
      case 2:
       break block18;
      default:
       break block19;
      };
     }
     i64toi32_i32$5 = $4$hi;
     $405_1 = $4_1;
     $405$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $10$hi;
     $411_1 = !($10_1 | i64toi32_i32$5 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $412$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $412$hi;
     i64toi32_i32$2 = $411_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $416_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $417$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $405$hi;
     i64toi32_i32$2 = $405_1;
     i64toi32_i32$3 = $417$hi;
     i64toi32_i32$4 = $416_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     $3_1 = $10_1;
     $3$hi = i64toi32_i32$1;
    }
    if (!$6_1) {
     break block3
    }
   }
   $1396() | 0;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $1398($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $4_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $3_1 = 0, $33_1 = 0, $4$hi = 0, $35_1 = 0, $36_1 = 0, $36$hi = 0, $52_1 = 0, $54$hi = 0, $56_1 = 0, $56$hi = 0, $57$hi = 0, $59_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 1048575;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$1;
  block2 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $27_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $27_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $27_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 2047;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $6_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$0;
    if (!($6_1 | i64toi32_i32$0 | 0)) {
     break block
    }
    block1 : {
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 2047;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break block1
     }
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 4;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $28_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $28_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $28_1;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 60;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $29_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $5_1 = $29_1;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 15360;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $6_1 = i64toi32_i32$4;
     $6$hi = i64toi32_i32$5;
     break block2;
    }
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $30_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $30_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $7_1 = $30_1;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $31_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $31_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $5_1 = $31_1;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $6_1 = 32767;
    $6$hi = i64toi32_i32$3;
    break block2;
   }
   block3 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break block3
    }
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    break block2;
   }
   $35_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $36_1 = $5_1;
   $36$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$1 | 0) == (32 | 0)) {
    $32_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
   } else {
    $32_1 = i64toi32_i32$1
   }
   $3_1 = $32_1;
   i64toi32_i32$0 = $36$hi;
   i64toi32_i32$3 = 0;
   $1045($35_1 | 0, $36_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $7_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   $6_1 = 15372 - $3_1 | 0;
   $6$hi = i64toi32_i32$3;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
  $52_1 = i64toi32_i32$3;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = 48;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $33_1 = 0;
  } else {
   i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $33_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $54$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
  $56_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $54$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = $56$hi;
  i64toi32_i32$1 = $56_1;
  i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
  $57$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  i64toi32_i32$5 = $57$hi;
  i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $59_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$0 = $52_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $59_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1399($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $51_1 = 0, $51$hi = 0, $54_1 = 0, $54$hi = 0, $59_1 = 0, $70_1 = 0, $70$hi = 0, $73_1 = 0, $73$hi = 0;
  $4_1 = 1;
  block : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break block
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break block
   }
   block1 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break block1
    }
    return 0 | 0;
   }
   block2 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break block2
    }
    block3 : {
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
      $38_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $39_1 = 0
       } else {
        $39_1 = 1
       }
       $41_1 = $39_1;
      } else {
       $41_1 = 0
      }
      $38_1 = $41_1;
     }
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1)) {
      break block3
     }
     return -1 | 0;
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $51_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $51$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $54_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $54$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $51$hi;
    i64toi32_i32$0 = $51_1;
    i64toi32_i32$3 = $54$hi;
    i64toi32_i32$1 = $54_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   block4 : {
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $59_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $42_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $43_1 = 0
      } else {
       $43_1 = 1
      }
      $44_1 = $43_1;
     } else {
      $44_1 = 0
     }
     $42_1 = $44_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $59_1 : $42_1)) {
     break block4
    }
    return -1 | 0;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $70_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $70$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $73_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $73$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $70$hi;
   i64toi32_i32$0 = $70_1;
   i64toi32_i32$3 = $73$hi;
   i64toi32_i32$1 = $73_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1400($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  block : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break block
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break block
   }
   block1 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break block1
    }
    return 0 | 0;
   }
   block2 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break block2
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break block
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break block
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1401($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 2147418112;
  i64toi32_i32$3 = 0;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $23_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $11_1 | $23_1 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $20_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$1 = $24_1;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $21_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $7_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1402($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ($1_1) {
     break block
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break block1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $1045($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - ($1_1 ^ 31 | 0) | 0 | 0);
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1403($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $1397($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$3;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 16 | 0;
 }
 
 function $1404($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $62_1 = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0, $64$hi = 0, $68$hi = 0, $71_1 = 0, $74_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  block2 : {
   block : {
    if (($3_1 | 0) < (16384 | 0)) {
     break block
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $1394($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    block1 : {
     if ($3_1 >>> 0 >= 32767 >>> 0) {
      break block1
     }
     $3_1 = $3_1 + -16383 | 0;
     break block2;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $1394($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = ($3_1 >>> 0 < 49149 >>> 0 ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break block2;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break block2
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 7471104;
   $1394($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   block3 : {
    if ($3_1 >>> 0 <= -32652 >>> 0) {
     break block3
    }
    $3_1 = $3_1 + 16269 | 0;
    break block2;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 7471104;
   $1394($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = ($3_1 >>> 0 > -48920 >>> 0 ? $3_1 : -48920) + 32538 | 0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $62_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $63_1 = $1_1;
  $63$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $64_1 = $2_1;
  $64$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $68$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $63$hi;
  i64toi32_i32$2 = $64$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $68$hi;
  $1394($62_1 | 0, $63_1 | 0, i64toi32_i32$1 | 0, $64_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $71_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $71_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $74_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $74_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $1405($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $46_1;
  $2$hi = i64toi32_i32$2;
  $16_1 = $2_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $48_1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $1_1 = i64toi32_i32$4;
  $1$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $1406($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $11$hi = 0, i64toi32_i32$6 = 0, $11_1 = 0, $10$hi = 0, $13$hi = 0, $10_1 = 0, $16$hi = 0, $12$hi = 0, $13_1 = 0, $17$hi = 0, $21$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $21_1 = 0, $14$hi = 0, $15$hi = 0, $8_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $15_1 = 0, $18_1 = 0, $22_1 = 0, $22$hi = 0, $24$hi = 0, $9_1 = 0, $19_1 = 0, $19$hi = 0, $322_1 = 0, $324_1 = 0, $7_1 = 0, $325_1 = 0, $326_1 = 0, $327_1 = 0, $329_1 = 0, $330_1 = 0, $331_1 = 0, $332_1 = 0, $333_1 = 0, $334_1 = 0, $336_1 = 0, $337_1 = 0, $338_1 = 0, $339_1 = 0, $342_1 = 0, $343_1 = 0, $345_1 = 0, $346_1 = 0, $348_1 = 0, $20_1 = 0, $20$hi = 0, $349_1 = 0, $350_1 = 0, $351_1 = 0, $352_1 = 0, $354_1 = 0, $355_1 = 0, $356_1 = 0, $358_1 = 0, $23_1 = 0, $23$hi = 0, $359_1 = 0, $360_1 = 0, $361_1 = 0, $364_1 = 0, $24_1 = 0, $365_1 = 0, $366_1 = 0, $367_1 = 0, $368_1 = 0, $369_1 = 0, $371_1 = 0, $372_1 = 0, $373_1 = 0, $374_1 = 0, $375_1 = 0, $377_1 = 0, $378_1 = 0, $382_1 = 0, $383_1 = 0, $384_1 = 0, $385_1 = 0, $386_1 = 0, $51_1 = 0, $55_1 = 0, $62_1 = 0, $66_1 = 0, $75_1 = 0, $75$hi = 0, $80_1 = 0, $80$hi = 0, $88_1 = 0, $88$hi = 0, $110_1 = 0, $111_1 = 0, $111$hi = 0, $112_1 = 0, $112$hi = 0, $119$hi = 0, $122$hi = 0, $136_1 = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $162_1 = 0, $164_1 = 0, $164$hi = 0, $168$hi = 0, $177_1 = 0, $177$hi = 0, $178$hi = 0, $181_1 = 0, $184_1 = 0, $184$hi = 0, $187$hi = 0, $195_1 = 0, $195$hi = 0, $196$hi = 0, $198_1 = 0, $201_1 = 0, $201$hi = 0, $204$hi = 0, $212_1 = 0, $212$hi = 0, $213$hi = 0, $215_1 = 0, $218_1 = 0, $218$hi = 0, $221$hi = 0, $229_1 = 0, $229$hi = 0, $230$hi = 0, $232_1 = 0, $233_1 = 0, $233$hi = 0, $236_1 = 0, $236$hi = 0, $239$hi = 0, $244_1 = 0, $246$hi = 0, $249_1 = 0, $250_1 = 0, $250$hi = 0, $252_1 = 0, $252$hi = 0, $257_1 = 0, $257$hi = 0, $261_1 = 0, $262$hi = 0, $263$hi = 0, $265_1 = 0, $266$hi = 0, $267$hi = 0, $268$hi = 0, $272$hi = 0, $283_1 = 0, $283$hi = 0, $286_1 = 0, $286$hi = 0, $290$hi = 0, $291_1 = 0, $291$hi = 0, $297_1 = 0, $297$hi = 0, $306_1 = 0, $306$hi = 0, $311_1 = 0, $311$hi = 0, $314_1 = 0, $314$hi = 0, $316$hi = 0, $317_1 = 0, $317$hi = 0, $319$hi = 0, $320$hi = 0, $323_1 = 0, $324$hi = 0, $325$hi = 0, $328_1 = 0, $329$hi = 0, $335_1 = 0, $335$hi = 0, $340_1 = 0, $340$hi = 0, $341_1 = 0, $341$hi = 0, $344_1 = 0, $344$hi = 0, $347_1 = 0, $347$hi = 0, $349$hi = 0, $353_1 = 0, $353$hi = 0, $357_1 = 0, $358$hi = 0, $359$hi = 0, $362_1 = 0, $362$hi = 0, $363_1 = 0, $363$hi = 0, $370_1 = 0, $370$hi = 0, $376_1 = 0, $376$hi = 0, $378$hi = 0, $379_1 = 0, $379$hi = 0, $380_1 = 0, $380$hi = 0, $381_1 = 0, $381$hi = 0, $383$hi = 0, $387_1 = 0, $388$hi = 0, $389_1 = 0, $389$hi = 0, $390_1 = 0, $390$hi = 0, $399_1 = 0, $399$hi = 0, $403_1 = 0, $404_1 = 0, $404$hi = 0, $410_1 = 0, $410$hi = 0, $414_1 = 0, $415$hi = 0, $416$hi = 0, $420_1 = 0, $421$hi = 0, $422_1 = 0, $422$hi = 0, $423_1 = 0, $423$hi = 0, $430_1 = 0, $430$hi = 0, $435_1 = 0, $435$hi = 0, $440_1 = 0, $440$hi = 0, $443_1 = 0, $443$hi = 0, $446_1 = 0, $447$hi = 0, $450_1 = 0, $451$hi = 0, $452$hi = 0, $455_1 = 0, $456$hi = 0, $458$hi = 0, $459_1 = 0, $459$hi = 0, $463_1 = 0, $464$hi = 0, $465_1 = 0, $465$hi = 0, $466_1 = 0, $466$hi = 0, $467_1 = 0, $467$hi = 0, $474_1 = 0, $474$hi = 0, $477_1 = 0, $477$hi = 0, $480_1 = 0, $482$hi = 0, $483_1 = 0, $483$hi = 0, $488_1 = 0, $488$hi = 0, $489_1 = 0, $489$hi = 0, $491$hi = 0, $492$hi = 0, $494_1 = 0, $495$hi = 0, $496$hi = 0, $500_1 = 0, $501$hi = 0, $515$hi = 0, $517_1 = 0, $517$hi = 0, $518$hi = 0, $522_1 = 0, $523$hi = 0, $530_1 = 0, $532_1 = 0, $532$hi = 0, $534$hi = 0, $536_1 = 0, $536$hi = 0, $543$hi = 0, $545_1 = 0, $545$hi = 0, $546$hi = 0, $550_1 = 0, $551$hi = 0, $565_1 = 0, $565$hi = 0, $567$hi = 0, $571$hi = 0, $573_1 = 0, $573$hi = 0, $602_1 = 0, $602$hi = 0, $605_1 = 0, $605$hi = 0, $609$hi = 0, $610_1 = 0, $610$hi = 0, $611_1 = 0, $611$hi = 0, $614_1 = 0, $614$hi = 0, $618_1 = 0, $619$hi = 0, $631_1 = 0, $631$hi = 0, $632_1 = 0, $632$hi = 0, $640_1 = 0, $644_1 = 0, $645$hi = 0, $649_1 = 0, $653_1 = 0, $654$hi = 0, $658_1 = 0, $659$hi = 0, $661_1 = 0, $661$hi = 0, $664_1 = 0, $667_1 = 0, $667$hi = 0, $668_1 = 0, $673_1 = 0, $678_1 = 0, $679$hi = 0, $683_1 = 0, $684$hi = 0, $686_1 = 0, $686$hi = 0, $689_1 = 0, $692_1 = 0, $692$hi = 0, $693_1 = 0, $698_1 = 0, $703_1 = 0, $704$hi = 0, $708_1 = 0, $709$hi = 0, $710$hi = 0;
  $5_1 = global$0 - 336 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $322_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $322_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $322_1 & 32767 | 0;
  block3 : {
   block1 : {
    block : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $324_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $324_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $324_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break block
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$0 = $1$hi;
     $51_1 = !($1_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $55_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $55_1) {
      break block2
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $12$hi = i64toi32_i32$0;
     break block3;
    }
    block4 : {
     i64toi32_i32$0 = $3$hi;
     $62_1 = !($3_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62_1 : $66_1) {
      break block4
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$0;
     break block3;
    }
    block5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $75_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $75$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = $75$hi;
     i64toi32_i32$2 = $75_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block5
     }
     block6 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $80_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $80$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $80$hi;
      i64toi32_i32$0 = $80_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break block6
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$2;
      break block3;
     }
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break block3;
    }
    block7 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $88_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $88$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $88$hi;
     i64toi32_i32$0 = $88_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block7
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block8 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block8
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block9 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break block9
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break block3;
    }
    $8_1 = 0;
    block10 : {
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break block10
     }
     $110_1 = $5_1 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $111_1 = $1_1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     $112_1 = $11_1;
     $112$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     $8_1 = !($11_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1_1 : $11_1;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $325_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $325_1 = i64toi32_i32$1
     }
     $119$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $122$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $119$hi;
     i64toi32_i32$2 = $325_1;
     i64toi32_i32$4 = $122$hi;
     i64toi32_i32$1 = $8_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$0;
     i64toi32_i32$5 = $111$hi;
     i64toi32_i32$2 = $112$hi;
     $1045($110_1 | 0, $111_1 | 0, i64toi32_i32$5 | 0, $112_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 328 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 332 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break block1
    }
    $136_1 = $5_1 + 304 | 0;
    i64toi32_i32$3 = $3$hi;
    $137_1 = $3_1;
    $137$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    $138_1 = $10_1;
    $138$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $326_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $326_1 = i64toi32_i32$3
    }
    $145$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $145$hi;
    i64toi32_i32$5 = $326_1;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$3 = $9_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $9_1 = i64toi32_i32$2;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$5 = $138$hi;
    $1045($136_1 | 0, $137_1 | 0, i64toi32_i32$0 | 0, $138_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 312 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 316 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$5;
   }
   $162_1 = $5_1 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $327_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $327_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $164_1 = $327_1;
   $164$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $329_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $329_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $168$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $164$hi;
   i64toi32_i32$4 = $164_1;
   i64toi32_i32$0 = $168$hi;
   i64toi32_i32$3 = $329_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 0;
   $1405($162_1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 296 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 300 | 0) >> 2] | 0;
   $177_1 = i64toi32_i32$3;
   $177$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $177$hi;
   i64toi32_i32$2 = $177_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $178$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $178$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = 0;
   $1405($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $181_1 = $5_1 + 256 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $330_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $330_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $184_1 = $330_1;
   $184$hi = i64toi32_i32$2;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 280 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 284 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $331_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $331_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $187$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $184$hi;
   i64toi32_i32$5 = $184_1;
   i64toi32_i32$0 = $187$hi;
   i64toi32_i32$1 = $331_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   $1405($181_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 264 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 268 | 0) >> 2] | 0;
   $195_1 = i64toi32_i32$1;
   $195$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $195$hi;
   i64toi32_i32$0 = $195_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $196$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $196$hi;
   i64toi32_i32$0 = 0;
   $1405($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $198_1 = $5_1 + 224 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $332_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $332_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $201_1 = $332_1;
   $201$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 248 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 252 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $333_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $333_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $204$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $201$hi;
   i64toi32_i32$5 = $201_1;
   i64toi32_i32$2 = $204$hi;
   i64toi32_i32$4 = $333_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = 0;
   $1405($198_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 232 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 236 | 0) >> 2] | 0;
   $212_1 = i64toi32_i32$4;
   $212$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $212$hi;
   i64toi32_i32$2 = $212_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   $213$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $213$hi;
   i64toi32_i32$2 = 0;
   $1405($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $215_1 = $5_1 + 192 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $334_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $334_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $218_1 = $334_1;
   $218$hi = i64toi32_i32$2;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 216 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 220 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $336_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $336_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $221$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $218$hi;
   i64toi32_i32$5 = $218_1;
   i64toi32_i32$0 = $221$hi;
   i64toi32_i32$3 = $336_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   $1405($215_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 200 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 204 | 0) >> 2] | 0;
   $229_1 = i64toi32_i32$3;
   $229$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $229$hi;
   i64toi32_i32$0 = $229_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $230$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $230$hi;
   i64toi32_i32$0 = 0;
   $1405($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $232_1 = $5_1 + 160 | 0;
   i64toi32_i32$0 = $2$hi;
   $233_1 = $2_1;
   $233$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $337_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $337_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $236_1 = $337_1;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $338_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $338_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $239$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $236$hi;
   i64toi32_i32$5 = $236_1;
   i64toi32_i32$2 = $239$hi;
   i64toi32_i32$1 = $338_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $233$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = 0;
   $1405($232_1 | 0, $233_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $244_1 = $5_1 + 144 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $339_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $339_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $246$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $246$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = 0;
   $1405($244_1 | 0, $339_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $249_1 = $5_1 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   $250_1 = $4_1;
   $250$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 168 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 172 | 0) >> 2] | 0;
   $252_1 = i64toi32_i32$4;
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] | 0;
   $257_1 = i64toi32_i32$4;
   $257$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$4 = $257$hi;
   i64toi32_i32$2 = $257_1;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $261_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $262$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $252$hi;
   i64toi32_i32$2 = $252_1;
   i64toi32_i32$3 = $262$hi;
   i64toi32_i32$0 = $261_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $263$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   $265_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $266$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $263$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = $266$hi;
   i64toi32_i32$2 = $265_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $267$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $267$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $268$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $250$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $268$hi;
   i64toi32_i32$2 = 0;
   $1405($249_1 | 0, $250_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $272$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $272$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   $1405($5_1 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
   block12 : {
    block11 : {
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $342_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $342_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $16_1 = $342_1;
     $16$hi = i64toi32_i32$3;
     $283_1 = $16_1;
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $343_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $343_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $286_1 = $343_1;
     $286$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $345_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $345_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $290$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $286$hi;
     i64toi32_i32$2 = $286_1;
     i64toi32_i32$1 = $290$hi;
     i64toi32_i32$5 = $345_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $291_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $291$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $283$hi;
     i64toi32_i32$3 = $283_1;
     i64toi32_i32$2 = $291$hi;
     i64toi32_i32$5 = $291_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $346_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $346_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2_1 = $346_1;
     $2$hi = i64toi32_i32$1;
     $297_1 = $2_1;
     $297$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $348_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $348_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $20_1 = $348_1;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $349_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $349_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $4_1 = $349_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $297$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($297_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$1;
     $306_1 = i64toi32_i32$0;
     $306$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $350_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $350_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $22_1 = $350_1;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $351_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $351_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $10_1 = $351_1;
     $10$hi = i64toi32_i32$4;
     $311_1 = $10_1;
     $311$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $352_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $352_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $314_1 = $352_1;
     $314$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $354_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $354_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $316$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $314$hi;
     i64toi32_i32$4 = $314_1;
     i64toi32_i32$1 = $316$hi;
     i64toi32_i32$5 = $354_1;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $317_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $317$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $355_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $355_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $319$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $317$hi;
     i64toi32_i32$1 = $317_1;
     i64toi32_i32$0 = $319$hi;
     i64toi32_i32$5 = $355_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $320$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$5 = $16_1;
     $323_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $324$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $320$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $324$hi;
     i64toi32_i32$1 = $323_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $325$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13_1;
     $328_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $329$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $325$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $329$hi;
     i64toi32_i32$5 = $328_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $356_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $356_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $13_1 = $356_1;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $311$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($311_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $335_1 = i64toi32_i32$0;
     $335$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $306$hi;
     i64toi32_i32$2 = $306_1;
     i64toi32_i32$0 = $335$hi;
     i64toi32_i32$5 = $335_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$5 = $21_1;
     i64toi32_i32$4 = 0;
     $340_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $341_1 = i64toi32_i32$1;
     $341$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $344_1 = $15_1;
     $344$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $358_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $358_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $23_1 = $358_1;
     $23$hi = i64toi32_i32$5;
     $347_1 = $23_1;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $359_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $359_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $349$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$5 = $347_1;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$2 = $359_1;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $344$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = __wasm_i64_mul($344_1 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $353_1 = i64toi32_i32$4;
     $353$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $341$hi;
     i64toi32_i32$3 = $341_1;
     i64toi32_i32$4 = $353$hi;
     i64toi32_i32$2 = $353_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $357_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $358$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $340$hi;
     i64toi32_i32$2 = $340_1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$3 = $357_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $359$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $362_1 = i64toi32_i32$2;
     $362$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $359$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $362$hi;
     i64toi32_i32$3 = $362_1;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $363_1 = i64toi32_i32$1;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $370_1 = i64toi32_i32$5;
     $370$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$0 = $21_1;
     i64toi32_i32$5 = $370$hi;
     i64toi32_i32$3 = $370_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$3 = $21_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $360_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $360_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $376_1 = $360_1;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $361_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $361_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $378$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $376$hi;
     i64toi32_i32$1 = $376_1;
     i64toi32_i32$4 = $378$hi;
     i64toi32_i32$0 = $361_1;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $379_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $379$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $363$hi;
     i64toi32_i32$3 = $363_1;
     i64toi32_i32$1 = $379$hi;
     i64toi32_i32$0 = $379_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $380_1 = i64toi32_i32$5;
     $380$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $381_1 = $17_1;
     $381$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $364_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $364_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $383$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $381$hi;
     i64toi32_i32$2 = $381_1;
     i64toi32_i32$4 = $383$hi;
     i64toi32_i32$0 = $364_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $387_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $388$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $380$hi;
     i64toi32_i32$0 = $380_1;
     i64toi32_i32$5 = $388$hi;
     i64toi32_i32$2 = $387_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $389_1 = i64toi32_i32$4;
     $389$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     $390_1 = $16_1;
     $390$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$3;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $399_1 = i64toi32_i32$3;
     $399$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$3 = $399$hi;
     i64toi32_i32$2 = $399_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$2 = $21_1;
     $403_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $404_1 = $403_1;
     $404$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$2 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = -2;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $21_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $410_1 = i64toi32_i32$2;
     $410$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$2 = $410$hi;
     i64toi32_i32$1 = $410_1;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17_1;
     $414_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $415$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $404$hi;
     i64toi32_i32$1 = $404_1;
     i64toi32_i32$5 = $415$hi;
     i64toi32_i32$0 = $414_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $416$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $390$hi;
     i64toi32_i32$4 = $390_1;
     i64toi32_i32$1 = $416$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$0 = $16_1;
     $420_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $421$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $389$hi;
     i64toi32_i32$0 = $389_1;
     i64toi32_i32$2 = $421$hi;
     i64toi32_i32$4 = $420_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $422_1 = i64toi32_i32$1;
     $422$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     $423_1 = $17_1;
     $423$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $430_1 = i64toi32_i32$0;
     $430$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$0 = $430$hi;
     i64toi32_i32$4 = $430_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $435_1 = i64toi32_i32$3;
     $435$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = $435$hi;
     i64toi32_i32$4 = $435_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $440_1 = i64toi32_i32$5;
     $440$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = $440$hi;
     i64toi32_i32$4 = $440_1;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $365_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      $365_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $443_1 = $365_1;
     $443$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     $446_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $447$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$2 = $4_1;
     $450_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $451$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $447$hi;
     i64toi32_i32$2 = $446_1;
     i64toi32_i32$0 = $451$hi;
     i64toi32_i32$1 = $450_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $452$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $11_1;
     $455_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $456$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $452$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $456$hi;
     i64toi32_i32$2 = $455_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $366_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $366_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $458$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $443$hi;
     i64toi32_i32$5 = $443_1;
     i64toi32_i32$4 = $458$hi;
     i64toi32_i32$2 = $366_1;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $459_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $459$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $423$hi;
     i64toi32_i32$1 = $423_1;
     i64toi32_i32$5 = $459$hi;
     i64toi32_i32$2 = $459_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$2 = $17_1;
     $463_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $464$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $422$hi;
     i64toi32_i32$2 = $422_1;
     i64toi32_i32$0 = $464$hi;
     i64toi32_i32$1 = $463_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $465_1 = i64toi32_i32$5;
     $465$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $466_1 = $4_1;
     $466$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $24$hi;
     $467_1 = $24_1;
     $467$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $474_1 = i64toi32_i32$2;
     $474$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = $474$hi;
     i64toi32_i32$1 = $474_1;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $367_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $367_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $477_1 = $367_1;
     $477$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $480_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = $480_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $368_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $368_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $482$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $477$hi;
     i64toi32_i32$5 = $477_1;
     i64toi32_i32$1 = $482$hi;
     i64toi32_i32$3 = $368_1;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $483_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $483$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $467$hi;
     i64toi32_i32$4 = $467_1;
     i64toi32_i32$5 = $483$hi;
     i64toi32_i32$3 = $483_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$3 = $24_1;
     i64toi32_i32$1 = 0;
     $488_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     $488$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$0;
     $489_1 = i64toi32_i32$2;
     $489$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $369_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $369_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $491$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $489$hi;
     i64toi32_i32$1 = $489_1;
     i64toi32_i32$3 = $491$hi;
     i64toi32_i32$4 = $369_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $492$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $492$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     $494_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $495$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $488$hi;
     i64toi32_i32$4 = $488_1;
     i64toi32_i32$2 = $495$hi;
     i64toi32_i32$1 = $494_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $496$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $466$hi;
     i64toi32_i32$0 = $466_1;
     i64toi32_i32$4 = $496$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     $500_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $501$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $465$hi;
     i64toi32_i32$1 = $465_1;
     i64toi32_i32$3 = $501$hi;
     i64toi32_i32$0 = $500_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = 131071;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break block11
     }
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$1 = $23_1;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $19_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $14$hi;
     $1405($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $371_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $371_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $515$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] | 0;
     $517_1 = i64toi32_i32$5;
     $517$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $515$hi;
     i64toi32_i32$1 = $371_1;
     i64toi32_i32$5 = $517$hi;
     i64toi32_i32$2 = $517_1;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     $518$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     $522_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $523$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $518$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = $523$hi;
     i64toi32_i32$4 = $522_1;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$3;
     $6_1 = $6_1 + 16382 | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$5;
     break block12;
    }
    $530_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $372_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $372_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $532_1 = $372_1;
    $532$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $373_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $373_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $534$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $532$hi;
    i64toi32_i32$0 = $532_1;
    i64toi32_i32$5 = $534$hi;
    i64toi32_i32$4 = $373_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $2_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$5;
    $536_1 = $2_1;
    $536$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $374_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $374_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $374_1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$0 = $536$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    $1405($530_1 | 0, $536_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $375_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $375_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $543$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 104 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 108 | 0) >> 2] | 0;
    $545_1 = i64toi32_i32$5;
    $545$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $543$hi;
    i64toi32_i32$4 = $375_1;
    i64toi32_i32$5 = $545$hi;
    i64toi32_i32$0 = $545_1;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $546$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $550_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$3 = 0;
    $551$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $546$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$4 = $551$hi;
    i64toi32_i32$1 = $550_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$2;
    $6_1 = $6_1 + 16383 | 0;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $22_1 = $1_1;
    $22$hi = i64toi32_i32$5;
   }
   block13 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break block13
    }
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $12$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$3;
    break block3;
   }
   block15 : {
    block14 : {
     if (($6_1 | 0) < (1 | 0)) {
      break block14
     }
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $377_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $377_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $565_1 = $377_1;
     $565$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 63;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $378_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $378_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $567$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $565$hi;
     i64toi32_i32$2 = $565_1;
     i64toi32_i32$3 = $567$hi;
     i64toi32_i32$1 = $378_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 48;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $382_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $382_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $571$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $573_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $573$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $571$hi;
     i64toi32_i32$2 = $382_1;
     i64toi32_i32$3 = $573$hi;
     i64toi32_i32$1 = $573_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $383_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $383_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $4_1 = $383_1;
     $4$hi = i64toi32_i32$2;
     break block15;
    }
    block16 : {
     if (($6_1 | 0) > (-113 | 0)) {
      break block16
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break block3;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    $1046($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    $1045($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 72 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 76 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = $10$hi;
    $1405($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 56 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 60 | 0) >> 2] | 0;
    $602_1 = i64toi32_i32$1;
    $602$hi = i64toi32_i32$3;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 44 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $384_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $384_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $605_1 = $384_1;
    $605$hi = i64toi32_i32$3;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $385_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $385_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $609$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $605$hi;
    i64toi32_i32$5 = $605_1;
    i64toi32_i32$1 = $609$hi;
    i64toi32_i32$2 = $385_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $610_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $610$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $602$hi;
    i64toi32_i32$3 = $602_1;
    i64toi32_i32$5 = $610$hi;
    i64toi32_i32$2 = $610_1;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
    $611_1 = i64toi32_i32$0;
    $611$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$3;
    $614_1 = i64toi32_i32$4;
    $614$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     $386_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $386_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    }
    $11_1 = $386_1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $614$hi;
    i64toi32_i32$3 = $614_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $11_1;
    $618_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $619$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $611$hi;
    i64toi32_i32$2 = $611_1;
    i64toi32_i32$4 = $619$hi;
    i64toi32_i32$1 = $618_1;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $1405($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   $1405($5_1 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$0 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$5 = $10$hi;
   $631_1 = $10_1;
   $631$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $632_1 = $2_1;
   $632$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $11_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $11$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = $3_1;
   $640_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$5 = $11_1;
   $644_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $645$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$3 = $645$hi;
   i64toi32_i32$4 = $644_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$4 = $14_1;
   $649_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$5 = $14_1;
   $653_1 = (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $640_1 : $649_1;
   i64toi32_i32$4 = 0;
   $654$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $632$hi;
   i64toi32_i32$5 = $632_1;
   i64toi32_i32$1 = $654$hi;
   i64toi32_i32$2 = $653_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $658_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $659$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $631$hi;
   i64toi32_i32$2 = $631_1;
   i64toi32_i32$0 = $659$hi;
   i64toi32_i32$5 = $658_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$3;
   $661_1 = i64toi32_i32$1;
   $661$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$5 = 0;
   $664_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
   $667_1 = i64toi32_i32$4;
   $667$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $667$hi;
   i64toi32_i32$2 = $667_1;
   $668_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $673_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$5 = $2_1;
   $678_1 = $664_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $668_1 : $673_1) | 0;
   i64toi32_i32$4 = 0;
   $679$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $679$hi;
   i64toi32_i32$3 = $678_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $683_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $684$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $661$hi;
   i64toi32_i32$3 = $661_1;
   i64toi32_i32$1 = $684$hi;
   i64toi32_i32$5 = $683_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$0;
   $686_1 = i64toi32_i32$2;
   $686$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$5 = 0;
   $689_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $692_1 = i64toi32_i32$4;
   $692$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $692$hi;
   i64toi32_i32$3 = $692_1;
   $693_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   $698_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4_1;
   $703_1 = $689_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) | 0 ? $693_1 : $698_1) | 0;
   i64toi32_i32$4 = 0;
   $704$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = $704$hi;
   i64toi32_i32$0 = $703_1;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $708_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $709$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $686$hi;
   i64toi32_i32$0 = $686_1;
   i64toi32_i32$2 = $709$hi;
   i64toi32_i32$5 = $708_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $710$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = $710$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 336 | 0;
 }
 
 function $1407($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  block1 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $13_1 & 32767 | 0;
    if (($3_1 | 0) == (32767 | 0)) {
     break block
    }
    $4_1 = 4;
    if ($3_1) {
     break block1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $1408($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11$hi = 0, $52_1 = 0, $6_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $11_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $117$hi = 0, $120_1 = 0, $121$hi = 0, $141_1 = 0, $141$hi = 0, $143$hi = 0, $146_1 = 0, $146$hi = 0, $148$hi = 0, $160$hi = 0, $163_1 = 0, $164$hi = 0, $192_1 = 0, $192$hi = 0, $194$hi = 0, $203_1 = 0, $204_1 = 0, $204$hi = 0, $206_1 = 0, $206$hi = 0, $212$hi = 0, $213_1 = 0, $213$hi = 0, $219_1 = 0, $219$hi = 0, $224$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  block2 : {
   block1 : {
    block : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($1399($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break block
     }
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     if (!($1407($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break block
     }
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6_1 = $52_1;
     $7_1 = $6_1 & 32767 | 0;
     if (($7_1 | 0) != (32767 | 0)) {
      break block1
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $1394($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $1406($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break block2;
   }
   block3 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $9_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $10$hi;
    if (($1399($1_1 | 0, i64toi32_i32$2 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break block3
    }
    block4 : {
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $10$hi;
     if (!($1399($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0)) {
      break block4
     }
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break block2;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $1394($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    break block2;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $53_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $53_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $8_1 = $53_1 & 32767 | 0;
   block6 : {
    block5 : {
     if (!$7_1) {
      break block5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break block6;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1081540608;
    $1394($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $54_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $54_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $54_1 + -120 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
   }
   block7 : {
    if ($8_1) {
     break block7
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1081540608;
    $1394($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $55_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $55_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $55_1 + -120 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $11_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $9_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$1;
   block8 : {
    if (($7_1 | 0) <= ($8_1 | 0)) {
     break block8
    }
    label : while (1) {
     block11 : {
      block9 : {
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$1 = $11$hi;
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       $117$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $120_1 = $4$hi >>> 0 < i64toi32_i32$2 >>> 0 | (($4$hi | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $121$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $117$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $121$hi;
       i64toi32_i32$2 = $120_1;
       i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $56_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $57_1 = 0
         } else {
          $57_1 = 1
         }
         $58_1 = $57_1;
        } else {
         $58_1 = 0
        }
        $56_1 = $58_1;
       }
       if ($56_1) {
        break block9
       }
       block10 : {
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
         break block10
        }
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 0;
        $1394($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$1;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$1;
        break block2;
       }
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$2 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $59_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $59_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $141_1 = $59_1;
       $141$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $60_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $60_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $143$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $141$hi;
       i64toi32_i32$3 = $141_1;
       i64toi32_i32$1 = $143$hi;
       i64toi32_i32$0 = $60_1;
       i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       $9$hi = i64toi32_i32$1;
       break block11;
      }
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $61_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $61_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $146_1 = $61_1;
      $146$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 63;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $62_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $62_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $148$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $146$hi;
      i64toi32_i32$3 = $146_1;
      i64toi32_i32$1 = $148$hi;
      i64toi32_i32$0 = $62_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $9$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $63_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $63_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $4_1 = $63_1;
     $4$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     if (($7_1 | 0) > ($8_1 | 0)) {
      continue label
     }
     break label;
    };
    $7_1 = $8_1;
   }
   block13 : {
    block12 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $160$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     $163_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $164$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $160$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $164$hi;
     i64toi32_i32$1 = $163_1;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
      $64_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        $65_1 = 0
       } else {
        $65_1 = 1
       }
       $66_1 = $65_1;
      } else {
       $66_1 = 0
      }
      $64_1 = $66_1;
     }
     if ($64_1) {
      break block12
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break block13;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block13
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    $1394($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    break block2;
   }
   block14 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block14
    }
    label1 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $67_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $67_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $67_1;
     $3$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $68_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $68_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $68_1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $192_1 = $3_1;
     $192$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $69_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $69_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $194$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $192$hi;
     i64toi32_i32$2 = $192_1;
     i64toi32_i32$3 = $194$hi;
     i64toi32_i32$0 = $69_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$2 = 65536;
     i64toi32_i32$0 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      continue label1
     }
     break label1;
    };
   }
   $8_1 = $6_1 & 32768 | 0;
   block15 : {
    if (($7_1 | 0) > (0 | 0)) {
     break block15
    }
    $203_1 = $5_1 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $204_1 = $4_1;
    $204$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $206_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $206$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = $7_1 + 120 | 0 | $8_1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $70_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $70_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $212$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $206$hi;
    i64toi32_i32$3 = $206_1;
    i64toi32_i32$1 = $212$hi;
    i64toi32_i32$2 = $70_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $213_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $213$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $204$hi;
    i64toi32_i32$3 = $213$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1065811968;
    $1394($203_1 | 0, $204_1 | 0, i64toi32_i32$1 | 0, $213_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 72 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 76 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    break block2;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $219_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $219$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $7_1 | $8_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $71_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $71_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$0 = $219_1;
   i64toi32_i32$2 = $224$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
   $2_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $1409($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $1410($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  block14 : {
   block : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break block
    }
    $2_1 = $2_1 << 2 | 0;
    $5_1 = HEAP32[($2_1 + 81292 | 0) >> 2] | 0;
    $6_1 = HEAP32[($2_1 + 81280 | 0) >> 2] | 0;
    label : while (1) {
     block2 : {
      block1 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block1
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break block2;
      }
      $2_1 = $1391($1_1 | 0) | 0;
     }
     if ($1411($2_1 | 0) | 0) {
      continue label
     }
     break label;
    };
    $7_1 = 1;
    block4 : {
     block3 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break block3;
      default:
       break block4;
      };
     }
     $7_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     block5 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break block5
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break block4;
     }
     $2_1 = $1391($1_1 | 0) | 0;
    }
    $8_1 = 0;
    block11 : {
     block7 : {
      block6 : {
       if (($2_1 & -33 | 0 | 0) != (73 | 0)) {
        break block6
       }
       label1 : while (1) {
        if (($8_1 | 0) == (7 | 0)) {
         break block7
        }
        block9 : {
         block8 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break block8
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break block9;
         }
         $2_1 = $1391($1_1 | 0) | 0;
        }
        $9_1 = $8_1 + 65537 | 0;
        $8_1 = $8_1 + 1 | 0;
        if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
         continue label1
        }
        break label1;
       };
      }
      block10 : {
       if (($8_1 | 0) == (3 | 0)) {
        break block10
       }
       if (($8_1 | 0) == (8 | 0)) {
        break block7
       }
       if (!$3_1) {
        break block11
       }
       if ($8_1 >>> 0 < 4 >>> 0) {
        break block11
       }
       if (($8_1 | 0) == (8 | 0)) {
        break block7
       }
      }
      block12 : {
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19_1 = 0
         } else {
          $19_1 = 1
         }
         $20_1 = $19_1;
        } else {
         $20_1 = 0
        }
        $18_1 = $20_1;
       }
       if ($18_1) {
        break block12
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break block7
      }
      if ($8_1 >>> 0 < 4 >>> 0) {
       break block7
      }
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $21_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $22_1 = 0
        } else {
         $22_1 = 1
        }
        $23_1 = $22_1;
       } else {
        $23_1 = 0
       }
       $21_1 = $23_1;
      }
      $2_1 = $21_1;
      label2 : while (1) {
       block13 : {
        if ($2_1) {
         break block13
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       $8_1 = $8_1 + -1 | 0;
       if ($8_1 >>> 0 > 3 >>> 0) {
        continue label2
       }
       break label2;
      };
     }
     $1392($4_1 | 0, Math_fround(Math_fround(Math_fround($7_1 | 0) * Math_fround(Infinity))));
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$3;
     break block14;
    }
    block32 : {
     block19 : {
      block33 : {
       block20 : {
        block16 : {
         block15 : {
          if ($8_1) {
           break block15
          }
          $8_1 = 0;
          if (($2_1 & -33 | 0 | 0) != (78 | 0)) {
           break block15
          }
          label3 : while (1) {
           if (($8_1 | 0) == (2 | 0)) {
            break block16
           }
           block18 : {
            block17 : {
             $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
             if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
              break block17
             }
             HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
             $2_1 = HEAPU8[$2_1 >> 0] | 0;
             break block18;
            }
            $2_1 = $1391($1_1 | 0) | 0;
           }
           $9_1 = $8_1 + 66e3 | 0;
           $8_1 = $8_1 + 1 | 0;
           if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
            continue label3
           }
           break label3;
          };
         }
         switch ($8_1 | 0) {
         case 3:
          break block16;
         case 0:
          break block19;
         default:
          break block20;
         };
        }
        block22 : {
         block21 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break block21
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break block22;
         }
         $2_1 = $1391($1_1 | 0) | 0;
        }
        block24 : {
         block23 : {
          if (($2_1 | 0) != (40 | 0)) {
           break block23
          }
          $8_1 = 1;
          break block24;
         }
         i64toi32_i32$3 = 0;
         $10_1 = 0;
         $10$hi = i64toi32_i32$3;
         i64toi32_i32$3 = 2147450880;
         $11_1 = 0;
         $11$hi = i64toi32_i32$3;
         i64toi32_i32$0 = $1_1;
         i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
          $24_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
            $25_1 = 0
           } else {
            $25_1 = 1
           }
           $26_1 = $25_1;
          } else {
           $26_1 = 0
          }
          $24_1 = $26_1;
         }
         if ($24_1) {
          break block14
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         break block14;
        }
        label4 : while (1) {
         block26 : {
          block25 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break block25
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break block26;
          }
          $2_1 = $1391($1_1 | 0) | 0;
         }
         $9_1 = $2_1 + -65 | 0;
         block28 : {
          block27 : {
           if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
            break block27
           }
           if ($9_1 >>> 0 < 26 >>> 0) {
            break block27
           }
           $9_1 = $2_1 + -97 | 0;
           if (($2_1 | 0) == (95 | 0)) {
            break block27
           }
           if ($9_1 >>> 0 >= 26 >>> 0) {
            break block28
           }
          }
          $8_1 = $8_1 + 1 | 0;
          continue label4;
         }
         break label4;
        };
        i64toi32_i32$0 = 2147450880;
        $11_1 = 0;
        $11$hi = i64toi32_i32$0;
        if (($2_1 | 0) == (41 | 0)) {
         break block14
        }
        block29 : {
         i64toi32_i32$1 = $1_1;
         i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
         $10_1 = i64toi32_i32$0;
         $10$hi = i64toi32_i32$2;
         i64toi32_i32$1 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
          $27_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
           if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $28_1 = 0
           } else {
            $28_1 = 1
           }
           $29_1 = $28_1;
          } else {
           $29_1 = 0
          }
          $27_1 = $29_1;
         }
         if ($27_1) {
          break block29
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        block31 : {
         block30 : {
          if (!$3_1) {
           break block30
          }
          if ($8_1) {
           break block31
          }
          break block32;
         }
         HEAP32[($990() | 0) >> 2] = 28;
         i64toi32_i32$1 = 0;
         $10_1 = 0;
         $10$hi = i64toi32_i32$1;
         break block33;
        }
        label5 : while (1) {
         block34 : {
          i64toi32_i32$1 = $10$hi;
          i64toi32_i32$3 = $10_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = 0;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
           $30_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
             $31_1 = 0
            } else {
             $31_1 = 1
            }
            $32_1 = $31_1;
           } else {
            $32_1 = 0
           }
           $30_1 = $32_1;
          }
          if ($30_1) {
           break block34
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         $8_1 = $8_1 + -1 | 0;
         if (!$8_1) {
          break block32
         }
         continue label5;
        };
       }
       i64toi32_i32$3 = 0;
       $10_1 = 0;
       $10$hi = i64toi32_i32$3;
       block35 : {
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
         $33_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
           $34_1 = 0
          } else {
           $34_1 = 1
          }
          $35_1 = $34_1;
         } else {
          $35_1 = 0
         }
         $33_1 = $35_1;
        }
        if ($33_1) {
         break block35
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       HEAP32[($990() | 0) >> 2] = 28;
      }
      i64toi32_i32$0 = $10$hi;
      $1390($1_1 | 0, $10_1 | 0, i64toi32_i32$0 | 0);
      break block;
     }
     block36 : {
      if (($2_1 | 0) != (48 | 0)) {
       break block36
      }
      block38 : {
       block37 : {
        $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($8_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
         break block37
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
        $8_1 = HEAPU8[$8_1 >> 0] | 0;
        break block38;
       }
       $8_1 = $1391($1_1 | 0) | 0;
      }
      block39 : {
       if (($8_1 & -33 | 0 | 0) != (88 | 0)) {
        break block39
       }
       $1412($4_1 + 16 | 0 | 0, $1_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $11_1 = i64toi32_i32$0;
       $11$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$0;
       break block14;
      }
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
       $36_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $37_1 = 0
        } else {
         $37_1 = 1
        }
        $38_1 = $37_1;
       } else {
        $38_1 = 0
       }
       $36_1 = $38_1;
      }
      if ($36_1) {
       break block36
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     $1413($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$2;
     break block14;
    }
    i64toi32_i32$2 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$2;
    break block14;
   }
   i64toi32_i32$2 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $1411($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1412($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $6_1 = 0, $16$hi = 0, $19$hi = 0, $15$hi = 0, $16_1 = 0, $19_1 = 0, $17$hi = 0, $15_1 = 0, $14$hi = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $12_1 = 0, $20_1 = 0, $11_1 = 0, $13_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $125_1 = 0, $127_1 = 0, $129_1 = 0, $130_1 = 0, $131_1 = 0, $132_1 = 0, $133_1 = 0, $134_1 = 0, $135_1 = 0, $136_1 = 0, $138_1 = 0, $140_1 = 0, $126_1 = 0, $126$hi = 0, $128_1 = 0, $128$hi = 0, $137_1 = 0, $137$hi = 0, $139_1 = 0, $139$hi = 0, $156_1 = 0, $156$hi = 0, $158_1 = 0, $158$hi = 0, $204_1 = 0, $204$hi = 0, $208_1 = 0, $208$hi = 0, $249_1 = 0, $249$hi = 0, $253_1 = 0, $253$hi = 0, $264$hi = 0, $271$hi = 0, $280_1 = 0, $280$hi = 0, $282_1 = 0, $282$hi = 0, $286_1 = 0, $286$hi = 0, $288_1 = 0, $288$hi = 0, $296_1 = 0, $296$hi = 0, $312$hi = 0, $141_1 = 0, $317_1 = 0, $317$hi = 0, $319$hi = 0, $142_1 = 0, $322_1 = 0, $322$hi = 0, $339$hi = 0, $346_1 = 0, $347_1 = 0, $350$hi = 0, $373_1 = 0, $373$hi = 0, $375_1 = 0, $375$hi = 0, $407_1 = 0, $407$hi = 0, $409_1 = 0, $409$hi = 0, $413_1 = 0, $413$hi = 0, $415_1 = 0, $415$hi = 0, $424_1 = 0, $424$hi = 0, $427_1 = 0, $427$hi = 0, $431_1 = 0, $431$hi = 0, $433_1 = 0, $433$hi = 0, $435_1 = 0, $435$hi = 0, $437_1 = 0, $437$hi = 0, $441_1 = 0, $441$hi = 0, $443_1 = 0, $443$hi = 0, $471_1 = 0, $471$hi = 0, $473_1 = 0, $473$hi = 0, $477_1 = 0, $477$hi = 0, $479_1 = 0, $479$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  block1 : {
   block : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
     break block
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break block1;
   }
   $7_1 = $1391($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  block3 : {
   block5 : {
    block4 : {
     label : while (1) {
      block2 : {
       if (($7_1 | 0) == (48 | 0)) {
        break block2
       }
       if (($7_1 | 0) != (46 | 0)) {
        break block3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block4
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break block5;
      }
      block6 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block6
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label;
      }
      $9_1 = 1;
      $7_1 = $1391($1_1 | 0) | 0;
      continue label;
     };
    }
    $7_1 = $1391($1_1 | 0) | 0;
   }
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   block7 : {
    if (($7_1 | 0) == (48 | 0)) {
     break block7
    }
    $8_1 = 1;
    break block3;
   }
   label1 : while (1) {
    block9 : {
     block8 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break block8
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break block9;
     }
     $7_1 = $1391($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label1
    }
    break label1;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  block12 : {
   label2 : while (1) {
    $12_1 = $7_1;
    block13 : {
     block10 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break block10
      }
      $12_1 = $7_1 | 32 | 0;
      block11 : {
       if (($7_1 | 0) == (46 | 0)) {
        break block11
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break block12
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break block10
      }
      if ($8_1) {
       break block12
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break block13;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     block15 : {
      block14 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $112_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $113_1 = 0
         } else {
          $113_1 = 1
         }
         $114_1 = $113_1;
        } else {
         $114_1 = 0
        }
        $112_1 = $114_1;
       }
       if ($112_1) {
        break block14
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break block15;
      }
      block16 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break block16
       }
       $1393($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $1394($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $126_1 = i64toi32_i32$5;
       $126$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] | 0;
       $128_1 = i64toi32_i32$2;
       $128$hi = i64toi32_i32$5;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $126$hi;
       i64toi32_i32$2 = $128$hi;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       $1394($6_1 + 16 | 0 | 0, $126_1 | 0, i64toi32_i32$5 | 0, $128_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $137_1 = i64toi32_i32$3;
       $137$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $139_1 = i64toi32_i32$0;
       $139$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$3 = $137$hi;
       i64toi32_i32$0 = $139$hi;
       i64toi32_i32$2 = $16$hi;
       i64toi32_i32$5 = $17$hi;
       $1397($6_1 | 0, $137_1 | 0, i64toi32_i32$3 | 0, $139_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break block15;
      }
      if (!$7_1) {
       break block15
      }
      if ($11_1) {
       break block15
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $1394($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
      $156_1 = i64toi32_i32$3;
      $156$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
      $158_1 = i64toi32_i32$0;
      $158$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $156$hi;
      i64toi32_i32$0 = $158$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $1397($6_1 + 64 | 0 | 0, $156_1 | 0, i64toi32_i32$3 | 0, $158_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    block17 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
      break block17
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label2;
    }
    $7_1 = $1391($1_1 | 0) | 0;
    continue label2;
   };
  }
  block22 : {
   block18 : {
    if ($9_1) {
     break block18
    }
    block21 : {
     block20 : {
      block19 : {
       i64toi32_i32$5 = $1_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
        $115_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $116_1 = 0
         } else {
          $116_1 = 1
         }
         $117_1 = $116_1;
        } else {
         $117_1 = 0
        }
        $115_1 = $117_1;
       }
       if ($115_1) {
        break block19
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
       if (!$5_1) {
        break block20
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
       if (!$8_1) {
        break block21
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
       break block21;
      }
      if ($5_1) {
       break block21
      }
     }
     i64toi32_i32$5 = 0;
     $1390($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $204_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $204$hi = i64toi32_i32$0;
    wasm2js_scratch_store_f64(+(+($4_1 | 0)));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $208_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
    $208$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $204$hi;
    i64toi32_i32$0 = $204_1;
    i64toi32_i32$5 = $208$hi;
    i64toi32_i32$4 = $208_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
    $1398($6_1 + 96 | 0 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$5;
    break block22;
   }
   block23 : {
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 7;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $118_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $119_1 = 0
      } else {
       $119_1 = 1
      }
      $120_1 = $119_1;
     } else {
      $120_1 = 0
     }
     $118_1 = $120_1;
    }
    if ($118_1) {
     break block23
    }
    i64toi32_i32$3 = $19$hi;
    $15_1 = $19_1;
    $15$hi = i64toi32_i32$3;
    label3 : while (1) {
     $10_1 = $10_1 << 4 | 0;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $15_1 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      continue label3
     }
     break label3;
    };
   }
   block25 : {
    block28 : {
     block27 : {
      block24 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break block24
       }
       i64toi32_i32$3 = $1414($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = -2147483648;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break block25
       }
       block26 : {
        if (!$5_1) {
         break block26
        }
        i64toi32_i32$4 = $1_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
         $121_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $122_1 = 0
          } else {
           $122_1 = 1
          }
          $123_1 = $122_1;
         } else {
          $123_1 = 0
         }
         $121_1 = $123_1;
        }
        if ($121_1) {
         break block27
        }
        break block28;
       }
       i64toi32_i32$4 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       $1390($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$4 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$4;
       break block22;
      }
      i64toi32_i32$4 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
       $124_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $125_1 = 0
        } else {
         $125_1 = 1
        }
        $127_1 = $125_1;
       } else {
        $127_1 = 0
       }
       $124_1 = $127_1;
      }
      if ($124_1) {
       break block25
      }
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$3 = 0;
    $15_1 = 0;
    $15$hi = i64toi32_i32$3;
   }
   block29 : {
    if ($10_1) {
     break block29
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $249_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $249$hi = i64toi32_i32$1;
    wasm2js_scratch_store_f64(+(+($4_1 | 0)));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -2147483648;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $253_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $253$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $249$hi;
    i64toi32_i32$1 = $249_1;
    i64toi32_i32$3 = $253$hi;
    i64toi32_i32$4 = $253_1;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $1398($6_1 + 112 | 0 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$3;
    break block22;
   }
   block30 : {
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$5 = $8_1;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = i64toi32_i32$5 ? $14_1 : $19_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 2;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     $129_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
     $129_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $264$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $264$hi;
    i64toi32_i32$0 = $129_1;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$3 = $15_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -32;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $271$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$4 = $271$hi;
    i64toi32_i32$3 = 0 - $3_1 | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $130_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $131_1 = 0
      } else {
       $131_1 = 1
      }
      $132_1 = $131_1;
     } else {
      $132_1 = 0
     }
     $130_1 = $132_1;
    }
    if ($130_1) {
     break block30
    }
    HEAP32[($990() | 0) >> 2] = 68;
    $1393($6_1 + 160 | 0 | 0, $4_1 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
    $280_1 = i64toi32_i32$2;
    $280$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 168 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 172 | 0) >> 2] | 0;
    $282_1 = i64toi32_i32$1;
    $282$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $280$hi;
    i64toi32_i32$1 = $282$hi;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = 2147418111;
    $1394($6_1 + 144 | 0 | 0, $280_1 | 0, i64toi32_i32$2 | 0, $282_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
    $286_1 = i64toi32_i32$4;
    $286$hi = i64toi32_i32$3;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
    $288_1 = i64toi32_i32$3;
    $288$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $286$hi;
    i64toi32_i32$3 = $288$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $1394($6_1 + 128 | 0 | 0, $286_1 | 0, i64toi32_i32$4 | 0, $288_1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 136 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 140 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$2;
    break block22;
   }
   block31 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $3_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $296_1 = i64toi32_i32$1;
    $296$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$1 = $296$hi;
    i64toi32_i32$4 = $296_1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $133_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $134_1 = 0
      } else {
       $134_1 = 1
      }
      $135_1 = $134_1;
     } else {
      $135_1 = 0
     }
     $133_1 = $135_1;
    }
    if ($133_1) {
     break block31
    }
    block32 : {
     if (($10_1 | 0) <= (-1 | 0)) {
      break block32
     }
     label4 : while (1) {
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1073807360;
      $1397($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1073610752;
      $7_1 = $1400($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
      $312$hi = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$1;
      $7_1 = ($7_1 | 0) > (-1 | 0);
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$2 = $312$hi;
      $141_1 = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$0 ? $141_1 : $16_1;
      i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
      $317_1 = i64toi32_i32$1;
      $317$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 424 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 428 | 0) >> 2] | 0;
      $319$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = $319$hi;
      $142_1 = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$3 ? $142_1 : $17_1;
      i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
      $322_1 = i64toi32_i32$2;
      $322$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$3 = $317$hi;
      i64toi32_i32$1 = $322$hi;
      $1397($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0, $317_1 | 0, i64toi32_i32$3 | 0, $322_1 | 0, i64toi32_i32$1 | 0);
      $1_1 = $10_1 << 1 | 0;
      $10_1 = $1_1 | $7_1 | 0;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 408 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 412 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
      if (($1_1 | 0) > (-1 | 0)) {
       continue label4
      }
      break label4;
     };
    }
    block34 : {
     block33 : {
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = 0;
      $339$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = $19_1;
      i64toi32_i32$2 = $339$hi;
      i64toi32_i32$0 = 32 - $3_1 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $14_1 = i64toi32_i32$3;
      $14$hi = i64toi32_i32$4;
      $7_1 = i64toi32_i32$3;
      $346_1 = (i64toi32_i32$3 | 0) > (0 | 0) ? i64toi32_i32$3 : 0;
      $347_1 = $2_1;
      i64toi32_i32$4 = 0;
      $350$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = $350$hi;
      i64toi32_i32$0 = $2_1;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
       $136_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $138_1 = 0
        } else {
         $138_1 = 1
        }
        $140_1 = $138_1;
       } else {
        $140_1 = 0
       }
       $136_1 = $140_1;
      }
      $7_1 = $136_1 ? $346_1 : $347_1;
      if ($7_1 >>> 0 < 113 >>> 0) {
       break block33
      }
      $1393($6_1 + 384 | 0 | 0, $4_1 | 0);
      i64toi32_i32$5 = 0;
      $14_1 = 0;
      $14$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 392 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 396 | 0) >> 2] | 0;
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 384 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $20_1 = 0;
      $20$hi = i64toi32_i32$5;
      break block34;
     }
     $1398($6_1 + 352 | 0 | 0, +(+$977(+(1.0), 144 - $7_1 | 0 | 0)));
     $1393($6_1 + 336 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
     $373_1 = i64toi32_i32$5;
     $373$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 360 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 364 | 0) >> 2] | 0;
     $375_1 = i64toi32_i32$4;
     $375$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$5;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 344 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 348 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$4 = $375$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $15$hi;
     $1401($6_1 + 368 | 0 | 0, $373_1 | 0, i64toi32_i32$5 | 0, $375_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$4 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 376 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 380 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 368 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 372 | 0) >> 2] | 0;
     $14_1 = i64toi32_i32$0;
     $14$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $7_1 = !($10_1 & 1 | 0) & ($7_1 >>> 0 < 32 >>> 0 & ($1399($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    $1402($6_1 + 320 | 0 | 0, $10_1 | $7_1 | 0 | 0);
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
    $407_1 = i64toi32_i32$5;
    $407$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 328 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 332 | 0) >> 2] | 0;
    $409_1 = i64toi32_i32$4;
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$0 = $407$hi;
    i64toi32_i32$1 = $409$hi;
    $1394($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$4 | 0, $407_1 | 0, i64toi32_i32$0 | 0, $409_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $413_1 = i64toi32_i32$1;
    $413$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 312 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 316 | 0) >> 2] | 0;
    $415_1 = i64toi32_i32$0;
    $415$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$1 = $413$hi;
    i64toi32_i32$0 = $415$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$5 = $20$hi;
    $1397($6_1 + 272 | 0 | 0, $413_1 | 0, i64toi32_i32$1 | 0, $415_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$1 = i64toi32_i32$2 ? 0 : $16_1;
    i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
    $424_1 = i64toi32_i32$1;
    $424$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? 0 : $17_1;
    i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
    $427_1 = i64toi32_i32$5;
    $427$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$4 = $424$hi;
    i64toi32_i32$0 = $427$hi;
    $1394($6_1 + 288 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$5 | 0, $424_1 | 0, i64toi32_i32$4 | 0, $427_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
    $431_1 = i64toi32_i32$0;
    $431$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 296 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 300 | 0) >> 2] | 0;
    $433_1 = i64toi32_i32$4;
    $433$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
    $435_1 = i64toi32_i32$0;
    $435$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 280 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 284 | 0) >> 2] | 0;
    $437_1 = i64toi32_i32$4;
    $437$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $431$hi;
    i64toi32_i32$4 = $433$hi;
    i64toi32_i32$5 = $435$hi;
    i64toi32_i32$2 = $437$hi;
    $1397($6_1 + 256 | 0 | 0, $431_1 | 0, i64toi32_i32$0 | 0, $433_1 | 0, i64toi32_i32$4 | 0, $435_1 | 0, i64toi32_i32$5 | 0, $437_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
    $441_1 = i64toi32_i32$2;
    $441$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 264 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 268 | 0) >> 2] | 0;
    $443_1 = i64toi32_i32$5;
    $443$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $441$hi;
    i64toi32_i32$5 = $443$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$0 = $20$hi;
    $1403($6_1 + 240 | 0 | 0, $441_1 | 0, i64toi32_i32$2 | 0, $443_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$0 | 0);
    block35 : {
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 248 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 252 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$4;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ($1399($16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0) | 0) {
      break block35
     }
     HEAP32[($990() | 0) >> 2] = 68;
    }
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$5 = $17$hi;
    $1404($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 232 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 236 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$5;
    break block22;
   }
   HEAP32[($990() | 0) >> 2] = 68;
   $1393($6_1 + 208 | 0 | 0, $4_1 | 0);
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
   $471_1 = i64toi32_i32$5;
   $471$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 216 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 220 | 0) >> 2] | 0;
   $473_1 = i64toi32_i32$2;
   $473$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $471$hi;
   i64toi32_i32$2 = $473$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 65536;
   $1394($6_1 + 192 | 0 | 0, $471_1 | 0, i64toi32_i32$5 | 0, $473_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $477_1 = i64toi32_i32$0;
   $477$hi = i64toi32_i32$4;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 200 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 204 | 0) >> 2] | 0;
   $479_1 = i64toi32_i32$4;
   $479$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $477$hi;
   i64toi32_i32$4 = $479$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 65536;
   $1394($6_1 + 176 | 0 | 0, $477_1 | 0, i64toi32_i32$0 | 0, $479_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 184 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 188 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $16$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $1413($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $7_1 = 0, i64toi32_i32$2 = 0, $18$hi = 0, $18_1 = 0, $14_1 = 0, $19$hi = 0, $13_1 = 0, $19_1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $15_1 = 0, $16_1 = 0, $21$hi = 0, $20$hi = 0, $8_1 = 0, $12_1 = 0, $21_1 = 0, $20_1 = 0, $9_1 = 0, $22$hi = 0, $23$hi = 0, $22_1 = 0, $23_1 = 0, $10_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $178_1 = 0, $179_1 = 0, $180_1 = 0, $181_1 = 0, $182_1 = 0, $183_1 = 0, $184_1 = 0, $185_1 = 0, $186_1 = 0, $187_1 = 0, $188_1 = 0, $189_1 = 0, $190_1 = 0, $191_1 = 0, $192_1 = 0, $193_1 = 0, $194_1 = 0, $195_1 = 0, $17_1 = 0, $24_1 = 0.0, $125_1 = 0, $205_1 = 0, $205$hi = 0, $209_1 = 0, $209$hi = 0, $235_1 = 0, $235$hi = 0, $237_1 = 0, $237$hi = 0, $239_1 = 0, $239$hi = 0, $241_1 = 0, $241$hi = 0, $249$hi = 0, $258_1 = 0, $258$hi = 0, $260_1 = 0, $260$hi = 0, $264_1 = 0, $264$hi = 0, $266_1 = 0, $266$hi = 0, $274_1 = 0, $274$hi = 0, $283_1 = 0, $283$hi = 0, $285_1 = 0, $285$hi = 0, $289_1 = 0, $289$hi = 0, $291_1 = 0, $291$hi = 0, $338_1 = 0, $338$hi = 0, $340_1 = 0, $340$hi = 0, $342_1 = 0, $342$hi = 0, $344_1 = 0, $344$hi = 0, $361_1 = 0, $361$hi = 0, $363_1 = 0, $363$hi = 0, $365_1 = 0, $365$hi = 0, $367_1 = 0, $367$hi = 0, $378_1 = 0, $378$hi = 0, $380_1 = 0, $380$hi = 0, $382_1 = 0, $382$hi = 0, $384_1 = 0, $384$hi = 0, $410_1 = 0, $410$hi = 0, $412_1 = 0, $412$hi = 0, $414_1 = 0, $414$hi = 0, $416_1 = 0, $416$hi = 0, $426_1 = 0, $426$hi = 0, $428_1 = 0, $428$hi = 0, $430_1 = 0, $430$hi = 0, $432_1 = 0, $432$hi = 0, $451_1 = 0, $452_1 = 0, $469_1 = 0, $547$hi = 0, $549$hi = 0, $557_1 = 0, $557$hi = 0, $698_1 = 0, $698$hi = 0, $700_1 = 0, $700$hi = 0, $702_1 = 0, $702$hi = 0, $704_1 = 0, $704$hi = 0, $721_1 = 0, $721$hi = 0, $723_1 = 0, $723$hi = 0, $763_1 = 0, $824_1 = 0, $824$hi = 0, $826_1 = 0, $826$hi = 0, $843_1 = 0, $843$hi = 0, $845_1 = 0, $845$hi = 0, $861_1 = 0, $861$hi = 0, $863_1 = 0, $863$hi = 0, $898_1 = 0, $898$hi = 0, $900_1 = 0, $900$hi = 0, $917_1 = 0, $917$hi = 0, $919_1 = 0, $919$hi = 0, $940_1 = 0, $940$hi = 0, $942_1 = 0, $942$hi = 0, $956_1 = 0, $956$hi = 0, $958_1 = 0, $958$hi = 0, $970_1 = 0, $970$hi = 0, $972_1 = 0, $972$hi = 0, $991_1 = 0, $991$hi = 0, $993_1 = 0, $993$hi = 0, $1014_1 = 0, $1014$hi = 0, $1016_1 = 0, $1016$hi = 0, $1019$hi = 0, $196_1 = 0, $1026$hi = 0, $197_1 = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = 0 - $4_1 | 0;
  $10_1 = $9_1 - $3_1 | 0;
  i64toi32_i32$0 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$0;
  $11_1 = 0;
  block1 : {
   block3 : {
    block2 : {
     label : while (1) {
      block : {
       if (($2_1 | 0) == (48 | 0)) {
        break block
       }
       if (($2_1 | 0) != (46 | 0)) {
        break block1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break block3;
      }
      block4 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block4
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label;
      }
      $11_1 = 1;
      $2_1 = $1391($1_1 | 0) | 0;
      continue label;
     };
    }
    $2_1 = $1391($1_1 | 0) | 0;
   }
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   block5 : {
    if (($2_1 | 0) != (48 | 0)) {
     break block5
    }
    label1 : while (1) {
     block7 : {
      block6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block6
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break block7;
      }
      $2_1 = $1391($1_1 | 0) | 0;
     }
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = $18$hi + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
     if (($2_1 | 0) == (48 | 0)) {
      continue label1
     }
     break label1;
    };
    $11_1 = 1;
   }
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  block23 : {
   block21 : {
    block20 : {
     block22 : {
      block13 : {
       block9 : {
        block8 : {
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          break block8
         }
         i64toi32_i32$5 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$5;
         if ($13_1 >>> 0 <= 9 >>> 0) {
          break block8
         }
         $15_1 = 0;
         $16_1 = 0;
         break block9;
        }
        i64toi32_i32$5 = 0;
        $19_1 = 0;
        $19$hi = i64toi32_i32$5;
        $16_1 = 0;
        $15_1 = 0;
        $12_1 = 0;
        label2 : while (1) {
         block12 : {
          block10 : {
           if (!($14_1 & 1 | 0)) {
            break block10
           }
           block11 : {
            if ($8_1) {
             break block11
            }
            i64toi32_i32$5 = $19$hi;
            $18_1 = $19_1;
            $18$hi = i64toi32_i32$5;
            $8_1 = 1;
            break block12;
           }
           $14_1 = !$11_1;
           break block13;
          }
          i64toi32_i32$5 = $19$hi;
          i64toi32_i32$0 = $19_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $19_1 = i64toi32_i32$1;
          $19$hi = i64toi32_i32$4;
          block14 : {
           if (($15_1 | 0) > (2044 | 0)) {
            break block14
           }
           $11_1 = i64toi32_i32$1;
           $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
           block15 : {
            if (!$16_1) {
             break block15
            }
            $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $12_1 = ($2_1 | 0) == (48 | 0) ? $12_1 : $11_1;
           HEAP32[$14_1 >> 2] = $13_1;
           $11_1 = 1;
           $2_1 = $16_1 + 1 | 0;
           $125_1 = $2_1;
           $2_1 = ($2_1 | 0) == (9 | 0);
           $16_1 = $2_1 ? 0 : $125_1;
           $15_1 = $15_1 + $2_1 | 0;
           break block12;
          }
          if (($2_1 | 0) == (48 | 0)) {
           break block12
          }
          HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
          $12_1 = 18396;
         }
         block17 : {
          block16 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break block16
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break block17;
          }
          $2_1 = $1391($1_1 | 0) | 0;
         }
         $13_1 = $2_1 + -48 | 0;
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          continue label2
         }
         if ($13_1 >>> 0 < 10 >>> 0) {
          continue label2
         }
         break label2;
        };
       }
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $18_1 : $19_1;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $18_1 = i64toi32_i32$3;
       $18$hi = i64toi32_i32$5;
       block18 : {
        if (!$11_1) {
         break block18
        }
        if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
         break block18
        }
        block19 : {
         i64toi32_i32$5 = $1414($1_1 | 0, $6_1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $20_1 = i64toi32_i32$5;
         $20$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break block19
         }
         if (!$6_1) {
          break block20
         }
         i64toi32_i32$2 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$2;
         i64toi32_i32$4 = $1_1;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
         i64toi32_i32$4 = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         i64toi32_i32$5 = 0;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
          $171_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
            $172_1 = 0
           } else {
            $172_1 = 1
           }
           $173_1 = $172_1;
          } else {
           $173_1 = 0
          }
          $171_1 = $173_1;
         }
         if ($171_1) {
          break block19
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$5 = $20_1;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$2 = $18_1;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$1;
        break block21;
       }
       $14_1 = !$11_1;
       if (($2_1 | 0) < (0 | 0)) {
        break block22
       }
      }
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
       $174_1 = 1
      } else {
       if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
         $175_1 = 0
        } else {
         $175_1 = 1
        }
        $176_1 = $175_1;
       } else {
        $176_1 = 0
       }
       $174_1 = $176_1;
      }
      if ($174_1) {
       break block22
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if (!$14_1) {
      break block21
     }
     HEAP32[($990() | 0) >> 2] = 28;
    }
    i64toi32_i32$4 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $1390($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$4;
    break block23;
   }
   block24 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break block24
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$4 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$5 = 2147483647;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $205_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $205$hi = i64toi32_i32$5;
    wasm2js_scratch_store_f64(+(+($5_1 | 0)));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$4 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $209_1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
    $209$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $205$hi;
    i64toi32_i32$5 = $205_1;
    i64toi32_i32$4 = $209$hi;
    i64toi32_i32$1 = $209_1;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
    $1398($7_1 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break block23;
   }
   block25 : {
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 9;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
     $177_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $178_1 = 0
      } else {
       $178_1 = 1
      }
      $179_1 = $178_1;
     } else {
      $179_1 = 0
     }
     $177_1 = $179_1;
    }
    if ($177_1) {
     break block25
    }
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$5 = $19_1;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
     break block25
    }
    block26 : {
     if ($3_1 >>> 0 > 30 >>> 0) {
      break block26
     }
     if ($1_1 >>> $3_1 | 0) {
      break block25
     }
    }
    $1393($7_1 + 48 | 0 | 0, $5_1 | 0);
    $1402($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
    $235_1 = i64toi32_i32$1;
    $235$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 60 | 0) >> 2] | 0;
    $237_1 = i64toi32_i32$2;
    $237$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$1;
    $239$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 44 | 0) >> 2] | 0;
    $241_1 = i64toi32_i32$2;
    $241$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $235$hi;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$5 = $239$hi;
    i64toi32_i32$4 = $241$hi;
    $1394($7_1 + 16 | 0 | 0, $235_1 | 0, i64toi32_i32$1 | 0, $237_1 | 0, i64toi32_i32$2 | 0, $239_1 | 0, i64toi32_i32$5 | 0, $241_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break block23;
   }
   block27 : {
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = 0;
    $249$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$5 = $249$hi;
    i64toi32_i32$1 = $9_1 >>> 1 | 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
     $180_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $181_1 = 0
      } else {
       $181_1 = 1
      }
      $182_1 = $181_1;
     } else {
      $182_1 = 0
     }
     $180_1 = $182_1;
    }
    if ($180_1) {
     break block27
    }
    HEAP32[($990() | 0) >> 2] = 68;
    $1393($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
    $258_1 = i64toi32_i32$2;
    $258$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] | 0;
    $260_1 = i64toi32_i32$4;
    $260$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $258$hi;
    i64toi32_i32$4 = $260$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = 2147418111;
    $1394($7_1 + 80 | 0 | 0, $258_1 | 0, i64toi32_i32$2 | 0, $260_1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
    $264_1 = i64toi32_i32$5;
    $264$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] | 0;
    $266_1 = i64toi32_i32$1;
    $266$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $264$hi;
    i64toi32_i32$1 = $266$hi;
    i64toi32_i32$4 = -1;
    i64toi32_i32$2 = 2147418111;
    $1394($7_1 + 64 | 0 | 0, $264_1 | 0, i64toi32_i32$5 | 0, $266_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$2;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$2;
    break block23;
   }
   block28 : {
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$4 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $274_1 = i64toi32_i32$4;
    $274$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $274$hi;
    i64toi32_i32$5 = $274_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
     $183_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       $184_1 = 0
      } else {
       $184_1 = 1
      }
      $185_1 = $184_1;
     } else {
      $185_1 = 0
     }
     $183_1 = $185_1;
    }
    if ($183_1) {
     break block28
    }
    HEAP32[($990() | 0) >> 2] = 68;
    $1393($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
    $283_1 = i64toi32_i32$1;
    $283$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 156 | 0) >> 2] | 0;
    $285_1 = i64toi32_i32$2;
    $285$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $283$hi;
    i64toi32_i32$2 = $285$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 65536;
    $1394($7_1 + 128 | 0 | 0, $283_1 | 0, i64toi32_i32$1 | 0, $285_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $289_1 = i64toi32_i32$4;
    $289$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
    $291_1 = i64toi32_i32$5;
    $291$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $289$hi;
    i64toi32_i32$5 = $291$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 65536;
    $1394($7_1 + 112 | 0 | 0, $289_1 | 0, i64toi32_i32$4 | 0, $291_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 120 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 124 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    break block23;
   }
   block29 : {
    if (!$16_1) {
     break block29
    }
    block30 : {
     if (($16_1 | 0) > (8 | 0)) {
      break block30
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label3 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label3
      }
      break label3;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$1 = $18$hi;
   $16_1 = $18_1;
   block31 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break block31
    }
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 17;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $186_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $187_1 = 0
      } else {
       $187_1 = 1
      }
      $188_1 = $187_1;
     } else {
      $188_1 = 0
     }
     $186_1 = $188_1;
    }
    if ($186_1) {
     break block31
    }
    if (($12_1 | 0) > ($16_1 | 0)) {
     break block31
    }
    block32 : {
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 9;
     if ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break block32
     }
     $1393($7_1 + 192 | 0 | 0, $5_1 | 0);
     $1402($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $338_1 = i64toi32_i32$4;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 200 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
     $340_1 = i64toi32_i32$5;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $342_1 = i64toi32_i32$4;
     $342$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 184 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 188 | 0) >> 2] | 0;
     $344_1 = i64toi32_i32$5;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $338$hi;
     i64toi32_i32$5 = $340$hi;
     i64toi32_i32$2 = $342$hi;
     i64toi32_i32$1 = $344$hi;
     $1394($7_1 + 160 | 0 | 0, $338_1 | 0, i64toi32_i32$4 | 0, $340_1 | 0, i64toi32_i32$5 | 0, $342_1 | 0, i64toi32_i32$2 | 0, $344_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 168 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 172 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$1;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 164 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$1;
     break block23;
    }
    block33 : {
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$5 = $18_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 8;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $189_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $190_1 = 0
       } else {
        $190_1 = 1
       }
       $191_1 = $190_1;
      } else {
       $191_1 = 0
      }
      $189_1 = $191_1;
     }
     if ($189_1) {
      break block33
     }
     $1393($7_1 + 272 | 0 | 0, $5_1 | 0);
     $1402($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 272 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 276 | 0) >> 2] | 0;
     $361_1 = i64toi32_i32$5;
     $361$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 280 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 284 | 0) >> 2] | 0;
     $363_1 = i64toi32_i32$1;
     $363$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
     $365_1 = i64toi32_i32$5;
     $365$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 264 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 268 | 0) >> 2] | 0;
     $367_1 = i64toi32_i32$1;
     $367$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $361$hi;
     i64toi32_i32$1 = $363$hi;
     i64toi32_i32$4 = $365$hi;
     i64toi32_i32$2 = $367$hi;
     $1394($7_1 + 240 | 0 | 0, $361_1 | 0, i64toi32_i32$5 | 0, $363_1 | 0, i64toi32_i32$1 | 0, $365_1 | 0, i64toi32_i32$4 | 0, $367_1 | 0, i64toi32_i32$2 | 0);
     $1393($7_1 + 224 | 0 | 0, HEAP32[(((8 - $16_1 | 0) << 2 | 0) + 81248 | 0) >> 2] | 0 | 0);
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] | 0;
     $378_1 = i64toi32_i32$2;
     $378$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 248 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 252 | 0) >> 2] | 0;
     $380_1 = i64toi32_i32$4;
     $380$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 228 | 0) >> 2] | 0;
     $382_1 = i64toi32_i32$2;
     $382$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 232 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 236 | 0) >> 2] | 0;
     $384_1 = i64toi32_i32$4;
     $384$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $378$hi;
     i64toi32_i32$4 = $380$hi;
     i64toi32_i32$1 = $382$hi;
     i64toi32_i32$5 = $384$hi;
     $1406($7_1 + 208 | 0 | 0, $378_1 | 0, i64toi32_i32$2 | 0, $380_1 | 0, i64toi32_i32$4 | 0, $382_1 | 0, i64toi32_i32$1 | 0, $384_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 216 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 220 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$5;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$5;
     break block23;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    block34 : {
     $2_1 = ($3_1 + Math_imul($16_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break block34
     }
     if ($1_1 >>> $2_1 | 0) {
      break block31
     }
    }
    $1393($7_1 + 352 | 0 | 0, $5_1 | 0);
    $1402($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 352 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 356 | 0) >> 2] | 0;
    $410_1 = i64toi32_i32$5;
    $410$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 360 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 364 | 0) >> 2] | 0;
    $412_1 = i64toi32_i32$1;
    $412$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 336 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 340 | 0) >> 2] | 0;
    $414_1 = i64toi32_i32$5;
    $414$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 344 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 348 | 0) >> 2] | 0;
    $416_1 = i64toi32_i32$1;
    $416$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $410$hi;
    i64toi32_i32$1 = $412$hi;
    i64toi32_i32$4 = $414$hi;
    i64toi32_i32$2 = $416$hi;
    $1394($7_1 + 320 | 0 | 0, $410_1 | 0, i64toi32_i32$5 | 0, $412_1 | 0, i64toi32_i32$1 | 0, $414_1 | 0, i64toi32_i32$4 | 0, $416_1 | 0, i64toi32_i32$2 | 0);
    $1393($7_1 + 304 | 0 | 0, HEAP32[(($16_1 << 2 | 0) + 81208 | 0) >> 2] | 0 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] | 0;
    $426_1 = i64toi32_i32$2;
    $426$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 328 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 332 | 0) >> 2] | 0;
    $428_1 = i64toi32_i32$4;
    $428$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 308 | 0) >> 2] | 0;
    $430_1 = i64toi32_i32$2;
    $430$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 312 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 316 | 0) >> 2] | 0;
    $432_1 = i64toi32_i32$4;
    $432$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $426$hi;
    i64toi32_i32$4 = $428$hi;
    i64toi32_i32$1 = $430$hi;
    i64toi32_i32$5 = $432$hi;
    $1394($7_1 + 288 | 0 | 0, $426_1 | 0, i64toi32_i32$2 | 0, $428_1 | 0, i64toi32_i32$4 | 0, $430_1 | 0, i64toi32_i32$1 | 0, $432_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$5;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 288 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 292 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$5;
    break block23;
   }
   label4 : while (1) {
    $14_1 = $15_1;
    $15_1 = $14_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label4
    }
    break label4;
   };
   $12_1 = 0;
   block36 : {
    block35 : {
     $1_1 = ($16_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break block35
     }
     $13_1 = 0;
     break block36;
    }
    $451_1 = $1_1 + 9 | 0;
    $452_1 = $1_1;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $18_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
     $192_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $193_1 = 0
      } else {
       $193_1 = 1
      }
      $194_1 = $193_1;
     } else {
      $194_1 = 0
     }
     $192_1 = $194_1;
    }
    $9_1 = $192_1 ? $451_1 : $452_1;
    block38 : {
     block37 : {
      if ($14_1) {
       break block37
      }
      $13_1 = 0;
      $14_1 = 0;
      break block38;
     }
     $11_1 = HEAP32[(((8 - $9_1 | 0) << 2 | 0) + 81248 | 0) >> 2] | 0;
     $6_1 = (1e9 | 0) / ($11_1 | 0) | 0;
     $2_1 = 0;
     $1_1 = 0;
     $13_1 = 0;
     label5 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $469_1 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $8_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
      $2_1 = $8_1 + $2_1 | 0;
      HEAP32[$469_1 >> 2] = $2_1;
      $2_1 = ($1_1 | 0) == ($13_1 | 0) & !$2_1 | 0;
      $13_1 = $2_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
      $16_1 = $2_1 ? $16_1 + -9 | 0 : $16_1;
      $2_1 = Math_imul($6_1, $15_1 - Math_imul($8_1, $11_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($14_1 | 0)) {
       continue label5
      }
      break label5;
     };
     if (!$2_1) {
      break block38
     }
     HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $2_1;
     $14_1 = $14_1 + 1 | 0;
    }
    $16_1 = ($16_1 - $9_1 | 0) + 9 | 0;
   }
   label8 : while (1) {
    $9_1 = ($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0;
    $6_1 = ($16_1 | 0) < (36 | 0);
    block40 : {
     label7 : while (1) {
      block39 : {
       if ($6_1) {
        break block39
       }
       if (($16_1 | 0) != (36 | 0)) {
        break block40
       }
       if ((HEAP32[$9_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break block40
       }
      }
      $15_1 = $14_1 + 2047 | 0;
      $11_1 = 0;
      label6 : while (1) {
       $2_1 = $14_1;
       block42 : {
        block41 : {
         $1_1 = $15_1 & 2047 | 0;
         $14_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $14_1;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         i64toi32_i32$1 = 29;
         i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $195_1 = 0;
         } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $195_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $547$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $549$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $547$hi;
         i64toi32_i32$5 = $195_1;
         i64toi32_i32$2 = $549$hi;
         i64toi32_i32$1 = $11_1;
         i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $18_1 = i64toi32_i32$3;
         $18$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$4 = i64toi32_i32$3;
         i64toi32_i32$5 = 0;
         i64toi32_i32$1 = 1000000001;
         if ($18$hi >>> 0 > i64toi32_i32$5 >>> 0 | (($18$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
          break block41
         }
         $11_1 = 0;
         break block42;
        }
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($18_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $19_1 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $557_1 = i64toi32_i32$0;
        $557$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$1 = $18_1;
        i64toi32_i32$0 = $557$hi;
        i64toi32_i32$5 = $557_1;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $19$hi;
        $11_1 = $19_1;
       }
       i64toi32_i32$3 = $18$hi;
       HEAP32[$14_1 >> 2] = $18_1;
       $8_1 = ($2_1 + -1 | 0) & 2047 | 0;
       $14_1 = ($1_1 | 0) != ($8_1 | 0) ? $2_1 : ($1_1 | 0) == ($13_1 | 0) ? $2_1 : !($18_1 | i64toi32_i32$3 | 0) ? $1_1 : $2_1;
       $15_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($13_1 | 0)) {
        continue label6
       }
       break label6;
      };
      $12_1 = $12_1 + -29 | 0;
      $14_1 = $2_1;
      if (!$11_1) {
       continue label7
      }
      break label7;
     };
     block44 : {
      block43 : {
       $13_1 = ($13_1 + -1 | 0) & 2047 | 0;
       if (($13_1 | 0) == ($2_1 | 0)) {
        break block43
       }
       $14_1 = $2_1;
       break block44;
      }
      $1_1 = ($7_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      $14_1 = $8_1;
     }
     $16_1 = $16_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0) >> 2] = $11_1;
     continue label8;
    }
    break label8;
   };
   block49 : {
    label14 : while (1) {
     $17_1 = ($14_1 + 1 | 0) & 2047 | 0;
     $9_1 = ($7_1 + 784 | 0) + ((($14_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label13 : while (1) {
      $15_1 = ($16_1 | 0) > (45 | 0) ? 9 : 1;
      block48 : {
       label11 : while (1) {
        $11_1 = $13_1;
        $1_1 = 0;
        block46 : {
         block45 : {
          label9 : while (1) {
           $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($2_1 | 0) == ($14_1 | 0)) {
            break block45
           }
           $2_1 = HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($1_1 << 2 | 0) + 81232 | 0) >> 2] | 0;
           if ($2_1 >>> 0 < $13_1 >>> 0) {
            break block45
           }
           if ($2_1 >>> 0 > $13_1 >>> 0) {
            break block46
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label9
           }
           break label9;
          };
         }
         if (($16_1 | 0) != (36 | 0)) {
          break block46
         }
         i64toi32_i32$3 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         label10 : while (1) {
          block47 : {
           $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($2_1 | 0) != ($14_1 | 0)) {
            break block47
           }
           $14_1 = ($14_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($14_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          $1402($7_1 + 768 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$4 = 0;
          i64toi32_i32$5 = 1075633366;
          $1394($7_1 + 752 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 1342177280 | 0, i64toi32_i32$5 | 0);
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 756 | 0) >> 2] | 0;
          $698_1 = i64toi32_i32$5;
          $698$hi = i64toi32_i32$4;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 760 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 764 | 0) >> 2] | 0;
          $700_1 = i64toi32_i32$4;
          $700$hi = i64toi32_i32$5;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 772 | 0) >> 2] | 0;
          $702_1 = i64toi32_i32$5;
          $702$hi = i64toi32_i32$4;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 776 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 780 | 0) >> 2] | 0;
          $704_1 = i64toi32_i32$4;
          $704$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $698$hi;
          i64toi32_i32$4 = $700$hi;
          i64toi32_i32$1 = $702$hi;
          i64toi32_i32$3 = $704$hi;
          $1397($7_1 + 736 | 0 | 0, $698_1 | 0, i64toi32_i32$5 | 0, $700_1 | 0, i64toi32_i32$4 | 0, $702_1 | 0, i64toi32_i32$1 | 0, $704_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$4 = $7_1;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 744 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 748 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$3;
          $19$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 740 | 0) >> 2] | 0;
          $18_1 = i64toi32_i32$1;
          $18$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label10
          }
          break label10;
         };
         $1393(i64toi32_i32$4 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 720 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 724 | 0) >> 2] | 0;
         $721_1 = i64toi32_i32$3;
         $721$hi = i64toi32_i32$1;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 728 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 732 | 0) >> 2] | 0;
         $723_1 = i64toi32_i32$1;
         $723$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$1 = $19$hi;
         i64toi32_i32$4 = $721$hi;
         i64toi32_i32$5 = $723$hi;
         $1394($7_1 + 704 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $721_1 | 0, i64toi32_i32$4 | 0, $723_1 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$5 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$5;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 712 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 716 | 0) >> 2] | 0;
         $19_1 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$4;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 708 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$5;
         $13_1 = $12_1 + 113 | 0;
         $1_1 = $13_1 - $4_1 | 0;
         $8_1 = ($3_1 | 0) > ($1_1 | 0);
         $2_1 = $8_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if ($2_1 >>> 0 <= 112 >>> 0) {
          break block48
         }
         i64toi32_i32$5 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$5;
         break block49;
        }
        $12_1 = $15_1 + $12_1 | 0;
        $13_1 = $14_1;
        if (($11_1 | 0) == ($14_1 | 0)) {
         continue label11
        }
        break label11;
       };
       $8_1 = 1e9 >>> $15_1 | 0;
       $6_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $13_1 = $11_1;
       label12 : while (1) {
        $2_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $763_1 = $2_1;
        $2_1 = HEAP32[$2_1 >> 2] | 0;
        $1_1 = ($2_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$763_1 >> 2] = $1_1;
        $1_1 = ($11_1 | 0) == ($13_1 | 0) & !$1_1 | 0;
        $13_1 = $1_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
        $16_1 = $1_1 ? $16_1 + -9 | 0 : $16_1;
        $1_1 = Math_imul($2_1 & $6_1 | 0, $8_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($14_1 | 0)) {
         continue label12
        }
        break label12;
       };
       if (!$1_1) {
        continue label13
       }
       block50 : {
        if (($17_1 | 0) == ($13_1 | 0)) {
         break block50
        }
        HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $1_1;
        $14_1 = $17_1;
        continue label14;
       }
       HEAP32[$9_1 >> 2] = HEAP32[$9_1 >> 2] | 0 | 1 | 0;
       continue label13;
      }
      break label13;
     };
     break label14;
    };
    $1398($7_1 + 656 | 0 | 0, +(+$977(+(1.0), 225 - $2_1 | 0 | 0)));
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 660 | 0) >> 2] | 0;
    $824_1 = i64toi32_i32$5;
    $824$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 664 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 668 | 0) >> 2] | 0;
    $826_1 = i64toi32_i32$4;
    $826$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $824$hi;
    i64toi32_i32$4 = $826$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    $1401($7_1 + 688 | 0 | 0, $824_1 | 0, i64toi32_i32$5 | 0, $826_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 696 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 700 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 692 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$3;
    $1398(i64toi32_i32$4 + 640 | 0 | 0, +(+$977(+(1.0), 113 - $2_1 | 0 | 0)));
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 644 | 0) >> 2] | 0;
    $843_1 = i64toi32_i32$3;
    $843$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 648 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 652 | 0) >> 2] | 0;
    $845_1 = i64toi32_i32$1;
    $845$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = $843$hi;
    i64toi32_i32$5 = $845$hi;
    $1408($7_1 + 672 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $843_1 | 0, i64toi32_i32$4 | 0, $845_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 676 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$5;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 684 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    $1403($7_1 + 624 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 624 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 628 | 0) >> 2] | 0;
    $861_1 = i64toi32_i32$3;
    $861$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 632 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 636 | 0) >> 2] | 0;
    $863_1 = i64toi32_i32$1;
    $863$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$4 = $861$hi;
    i64toi32_i32$5 = $863$hi;
    $1397($7_1 + 608 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $861_1 | 0, i64toi32_i32$4 | 0, $863_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 616 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 620 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 612 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$5;
   }
   block51 : {
    $15_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($15_1 | 0) == ($14_1 | 0)) {
     break block51
    }
    block54 : {
     block52 : {
      $15_1 = HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0;
      if ($15_1 >>> 0 > 499999999 >>> 0) {
       break block52
      }
      block53 : {
       if ($15_1) {
        break block53
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($14_1 | 0)) {
        break block54
       }
      }
      $1398($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 500 | 0) >> 2] | 0;
      $898_1 = i64toi32_i32$5;
      $898$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 504 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 508 | 0) >> 2] | 0;
      $900_1 = i64toi32_i32$4;
      $900$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $898$hi;
      i64toi32_i32$3 = $900$hi;
      $1397($7_1 + 480 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $898_1 | 0, i64toi32_i32$1 | 0, $900_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 488 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 492 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 484 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break block54;
     }
     block55 : {
      if (($15_1 | 0) == (5e8 | 0)) {
       break block55
      }
      $1398($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 592 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 596 | 0) >> 2] | 0;
      $917_1 = i64toi32_i32$3;
      $917$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 600 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 604 | 0) >> 2] | 0;
      $919_1 = i64toi32_i32$1;
      $919$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = $917$hi;
      i64toi32_i32$5 = $919$hi;
      $1397($7_1 + 576 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $917_1 | 0, i64toi32_i32$4 | 0, $919_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 584 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 588 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 580 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
      break block54;
     }
     $24_1 = +($5_1 | 0);
     block56 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($14_1 | 0)) {
       break block56
      }
      $1398($7_1 + 528 | 0 | 0, +($24_1 * .5));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 532 | 0) >> 2] | 0;
      $940_1 = i64toi32_i32$5;
      $940$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 536 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 540 | 0) >> 2] | 0;
      $942_1 = i64toi32_i32$4;
      $942$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $940$hi;
      i64toi32_i32$3 = $942$hi;
      $1397($7_1 + 512 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $940_1 | 0, i64toi32_i32$1 | 0, $942_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 520 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 524 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 516 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break block54;
     }
     $1398($7_1 + 560 | 0 | 0, +($24_1 * .75));
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 560 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 564 | 0) >> 2] | 0;
     $956_1 = i64toi32_i32$3;
     $956$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 568 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 572 | 0) >> 2] | 0;
     $958_1 = i64toi32_i32$1;
     $958$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $956$hi;
     i64toi32_i32$5 = $958$hi;
     $1397($7_1 + 544 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $956_1 | 0, i64toi32_i32$4 | 0, $958_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 552 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 556 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 548 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
    }
    if ($2_1 >>> 0 > 111 >>> 0) {
     break block51
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $1408($7_1 + 464 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 464 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 468 | 0) >> 2] | 0;
    $970_1 = i64toi32_i32$3;
    $970$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 472 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 476 | 0) >> 2] | 0;
    $972_1 = i64toi32_i32$1;
    $972$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $970$hi;
    i64toi32_i32$1 = $972$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    if ($1399($970_1 | 0, i64toi32_i32$3 | 0, $972_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
     break block51
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $1397($7_1 + 448 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 456 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 460 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 452 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $18$hi;
   i64toi32_i32$5 = $21$hi;
   $1397($7_1 + 432 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 436 | 0) >> 2] | 0;
   $991_1 = i64toi32_i32$5;
   $991$hi = i64toi32_i32$4;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 440 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 444 | 0) >> 2] | 0;
   $993_1 = i64toi32_i32$4;
   $993$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$5 = $991$hi;
   i64toi32_i32$4 = $993$hi;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $23$hi;
   $1403($7_1 + 416 | 0 | 0, $991_1 | 0, i64toi32_i32$5 | 0, $993_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 424 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 428 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$3;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$3;
   block57 : {
    if (($13_1 & 2147483647 | 0 | 0) <= ($10_1 + -2 | 0 | 0)) {
     break block57
    }
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    $1409(i64toi32_i32$4 + 400 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1073610752;
    $1394($7_1 + 384 | 0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1014_1 = i64toi32_i32$5;
    $1014$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 408 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
    $1016_1 = i64toi32_i32$4;
    $1016$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1014$hi;
    i64toi32_i32$4 = $1016$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1081081856;
    $13_1 = $1400($1014_1 | 0, i64toi32_i32$5 | 0, $1016_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 392 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 396 | 0) >> 2] | 0;
    $1019$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    $14_1 = ($13_1 | 0) > (-1 | 0);
    i64toi32_i32$0 = $14_1;
    i64toi32_i32$3 = $1019$hi;
    $196_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$5 = $14_1 ? $196_1 : $19_1;
    i64toi32_i32$4 = $14_1 ? i64toi32_i32$3 : i64toi32_i32$1;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1026$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $14_1;
    i64toi32_i32$5 = $1026$hi;
    $197_1 = i64toi32_i32$4;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $197_1 : $20_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    $20_1 = i64toi32_i32$3;
    $20$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    $11_1 = $1399($18_1 | 0, $18$hi | 0, $21_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    block58 : {
     $12_1 = $12_1 + $14_1 | 0;
     if (($12_1 + 110 | 0 | 0) > ($10_1 | 0)) {
      break block58
     }
     if (!(($8_1 & (($2_1 | 0) != ($1_1 | 0) | ($13_1 | 0) < (0 | 0) | 0) | 0) & ($11_1 | 0) != (0 | 0) | 0)) {
      break block57
     }
    }
    HEAP32[($990() | 0) >> 2] = 68;
   }
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$5 = $19$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   $1404($7_1 + 368 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0);
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$1 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$5;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $18_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  HEAP32[i64toi32_i32$5 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $1414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $6$hi = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $88$hi = 0, $90_1 = 0, $90$hi = 0, $139$hi = 0;
  block1 : {
   block : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
     break block
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $3_1 = HEAPU8[$2_1 >> 0] | 0;
    break block1;
   }
   $3_1 = $1391($0_1 | 0) | 0;
  }
  block18 : {
   block7 : {
    block6 : {
     block3 : {
      switch ($3_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       block5 : {
        block4 : {
         $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break block4
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break block5;
        }
        $2_1 = $1391($0_1 | 0) | 0;
       }
       $4_1 = ($3_1 | 0) == (45 | 0);
       $5_1 = $2_1 + -58 | 0;
       if (!$1_1) {
        break block6
       }
       if ($5_1 >>> 0 > -11 >>> 0) {
        break block6
       }
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19_1 = 0
         } else {
          $19_1 = 1
         }
         $20_1 = $19_1;
        } else {
         $20_1 = 0
        }
        $18_1 = $20_1;
       }
       if ($18_1) {
        break block7
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       break block7;
      default:
       break block3;
      };
     }
     $5_1 = $3_1 + -58 | 0;
     $4_1 = 0;
     $2_1 = $3_1;
    }
    if ($5_1 >>> 0 < -10 >>> 0) {
     break block7
    }
    i64toi32_i32$2 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$2;
    block8 : {
     if (($2_1 + -48 | 0) >>> 0 >= 10 >>> 0) {
      break block8
     }
     $3_1 = 0;
     label : while (1) {
      $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
      block10 : {
       block9 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break block9
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break block10;
       }
       $2_1 = $1391($0_1 | 0) | 0;
      }
      $3_1 = $3_1 + -48 | 0;
      block11 : {
       $5_1 = $2_1 + -48 | 0;
       if ($5_1 >>> 0 > 9 >>> 0) {
        break block11
       }
       if (($3_1 | 0) < (214748364 | 0)) {
        continue label
       }
      }
      break label;
     };
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $6_1 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$2;
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break block8
     }
     label1 : while (1) {
      i64toi32_i32$2 = 0;
      $88$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $90_1 = i64toi32_i32$1;
      $90$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $88$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = $90$hi;
      i64toi32_i32$0 = $90_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      block13 : {
       block12 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break block12
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break block13;
       }
       $2_1 = $1391($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -48;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      block14 : {
       $3_1 = $2_1 + -48 | 0;
       if ($3_1 >>> 0 > 9 >>> 0) {
        break block14
       }
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$2 = 21474836;
       i64toi32_i32$0 = 2061584302;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
        $21_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $22_1 = 0
         } else {
          $22_1 = 1
         }
         $23_1 = $22_1;
        } else {
         $23_1 = 0
        }
        $21_1 = $23_1;
       }
       if ($21_1) {
        continue label1
       }
      }
      break label1;
     };
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break block8
     }
     label2 : while (1) {
      block16 : {
       block15 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break block15
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break block16;
       }
       $2_1 = $1391($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label2
      }
      break label2;
     };
    }
    block17 : {
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$5 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
      $24_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $25_1 = 0
       } else {
        $25_1 = 1
       }
       $26_1 = $25_1;
      } else {
       $26_1 = 0
      }
      $24_1 = $26_1;
     }
     if ($24_1) {
      break block17
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$1 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $139$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $139$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
    $6_1 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    break block18;
   }
   i64toi32_i32$0 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
    $27_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $28_1 = 0
     } else {
      $28_1 = 1
     }
     $29_1 = $28_1;
    } else {
     $29_1 = 0
    }
    $27_1 = $29_1;
   }
   if ($27_1) {
    break block18
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$4 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function $1415($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $10$hi = 0, $10_1 = 0, $11$hi = 0, $7_1 = 0, $12$hi = 0, $11_1 = 0, $12_1 = 0, $13$hi = 0, $6_1 = 0, $13_1 = 0, $4_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $8_1 = 0, $9_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $195_1 = 0, $195$hi = 0, $249_1 = 0, $249$hi = 0, $348$hi = 0, $415$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block2 : {
   block1 : {
    block : {
     if ($1_1 >>> 0 > 36 >>> 0) {
      break block
     }
     if (($1_1 | 0) != (1 | 0)) {
      break block1
     }
    }
    HEAP32[($990() | 0) >> 2] = 28;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break block2;
   }
   label : while (1) {
    block4 : {
     block3 : {
      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
       break block3
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
      $5_1 = HEAPU8[$5_1 >> 0] | 0;
      break block4;
     }
     $5_1 = $1391($0_1 | 0) | 0;
    }
    if ($1416($5_1 | 0) | 0) {
     continue label
    }
    break label;
   };
   $6_1 = 0;
   block6 : {
    block5 : {
     switch ($5_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break block5;
     default:
      break block6;
     };
    }
    $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
    block7 : {
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
      break block7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $5_1 = HEAPU8[$5_1 >> 0] | 0;
     break block6;
    }
    $5_1 = $1391($0_1 | 0) | 0;
   }
   block23 : {
    block29 : {
     block14 : {
      block17 : {
       block8 : {
        if (($1_1 | 0) != (0 | 0) & ($1_1 | 0) != (16 | 0) | 0) {
         break block8
        }
        if (($5_1 | 0) != (48 | 0)) {
         break block8
        }
        block10 : {
         block9 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break block9
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break block10;
         }
         $5_1 = $1391($0_1 | 0) | 0;
        }
        block11 : {
         if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
          break block11
         }
         block13 : {
          block12 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break block12
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break block13;
          }
          $5_1 = $1391($0_1 | 0) | 0;
         }
         $1_1 = 16;
         if ((HEAPU8[($5_1 + 81313 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
          break block14
         }
         i64toi32_i32$0 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$0;
         block16 : {
          block15 : {
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $31_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $32_1 = 0
             } else {
              $32_1 = 1
             }
             $33_1 = $32_1;
            } else {
             $33_1 = 0
            }
            $31_1 = $33_1;
           }
           if ($31_1) {
            break block15
           }
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
           if (!$2_1) {
            break block16
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
           break block2;
          }
          if ($2_1) {
           break block2
          }
         }
         i64toi32_i32$2 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $1390($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
         break block2;
        }
        if ($1_1) {
         break block17
        }
        $1_1 = 8;
        break block14;
       }
       $1_1 = $1_1 ? $1_1 : 10;
       if ($1_1 >>> 0 > (HEAPU8[($5_1 + 81313 | 0) >> 0] | 0) >>> 0) {
        break block17
       }
       i64toi32_i32$2 = 0;
       $3_1 = 0;
       $3$hi = i64toi32_i32$2;
       block18 : {
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $34_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
           $35_1 = 0
          } else {
           $35_1 = 1
          }
          $36_1 = $35_1;
         } else {
          $36_1 = 0
         }
         $34_1 = $36_1;
        }
        if ($34_1) {
         break block18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       i64toi32_i32$3 = 0;
       $1390($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
       HEAP32[($990() | 0) >> 2] = 28;
       break block2;
      }
      if (($1_1 | 0) != (10 | 0)) {
       break block14
      }
      i64toi32_i32$3 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$3;
      block19 : {
       $2_1 = $5_1 + -48 | 0;
       if ($2_1 >>> 0 > 9 >>> 0) {
        break block19
       }
       $5_1 = 0;
       label1 : while (1) {
        block21 : {
         block20 : {
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break block20
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
          $1_1 = HEAPU8[$1_1 >> 0] | 0;
          break block21;
         }
         $1_1 = $1391($0_1 | 0) | 0;
        }
        $5_1 = Math_imul($5_1, 10) + $2_1 | 0;
        block22 : {
         $2_1 = $1_1 + -48 | 0;
         if ($2_1 >>> 0 > 9 >>> 0) {
          break block22
         }
         if ($5_1 >>> 0 < 429496729 >>> 0) {
          continue label1
         }
        }
        break label1;
       };
       i64toi32_i32$3 = 0;
       $10_1 = $5_1;
       $10$hi = i64toi32_i32$3;
      }
      if ($2_1 >>> 0 > 9 >>> 0) {
       break block23
      }
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $11_1 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $12_1 = $2_1;
      $12$hi = i64toi32_i32$3;
      label2 : while (1) {
       block25 : {
        block24 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break block24
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break block25;
        }
        $5_1 = $1391($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$0 = $11_1;
       i64toi32_i32$1 = $12$hi;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$4;
       $10$hi = i64toi32_i32$5;
       block28 : {
        block27 : {
         block26 : {
          $1_1 = $5_1 + -48 | 0;
          if ($1_1 >>> 0 > 9 >>> 0) {
           break block26
          }
          i64toi32_i32$3 = i64toi32_i32$4;
          i64toi32_i32$0 = 429496729;
          i64toi32_i32$2 = -1717986918;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
           break block27
          }
         }
         if ($1_1 >>> 0 <= 9 >>> 0) {
          break block28
         }
         break block23;
        }
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $12_1 = $1_1;
        $12$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        $195_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $195$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $195$hi;
        i64toi32_i32$0 = $195_1;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
         continue label2
        }
       }
       break label2;
      };
      $1_1 = 10;
      break block29;
     }
     block30 : {
      if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
       break block30
      }
      i64toi32_i32$3 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$3;
      block31 : {
       $7_1 = HEAPU8[($5_1 + 81313 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break block31
       }
       $2_1 = 0;
       label3 : while (1) {
        block33 : {
         block32 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break block32
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break block33;
         }
         $5_1 = $1391($0_1 | 0) | 0;
        }
        $2_1 = $7_1 + Math_imul($2_1, $1_1) | 0;
        block34 : {
         $7_1 = HEAPU8[($5_1 + 81313 | 0) >> 0] | 0;
         if ($1_1 >>> 0 <= $7_1 >>> 0) {
          break block34
         }
         if ($2_1 >>> 0 < 119304647 >>> 0) {
          continue label3
         }
        }
        break label3;
       };
       i64toi32_i32$3 = 0;
       $10_1 = $2_1;
       $10$hi = i64toi32_i32$3;
      }
      if ($1_1 >>> 0 <= $7_1 >>> 0) {
       break block29
      }
      i64toi32_i32$3 = 0;
      $11_1 = $1_1;
      $11$hi = i64toi32_i32$3;
      label4 : while (1) {
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$5 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $12_1 = i64toi32_i32$5;
       $12$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = $7_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 255;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $13_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       $13$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $249_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
       $249$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$5 = $12_1;
       i64toi32_i32$3 = $249$hi;
       i64toi32_i32$2 = $249_1;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break block29
       }
       block36 : {
        block35 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break block35
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break block36;
        }
        $5_1 = $1391($0_1 | 0) | 0;
       }
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$5 = $13$hi;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $10_1 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$4;
       $7_1 = HEAPU8[($5_1 + 81313 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break block29
       }
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$3 = 0;
       $1405($4_1 | 0, $11_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break block29
       }
       continue label4;
      };
     }
     $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 81569 | 0) >> 0] | 0;
     i64toi32_i32$2 = 0;
     $10_1 = 0;
     $10$hi = i64toi32_i32$2;
     block37 : {
      $2_1 = HEAPU8[($5_1 + 81313 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break block37
      }
      $7_1 = 0;
      label5 : while (1) {
       block39 : {
        block38 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break block38
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break block39;
        }
        $5_1 = $1391($0_1 | 0) | 0;
       }
       $9_1 = $7_1 << $8_1 | 0;
       $7_1 = $2_1 | $9_1 | 0;
       block40 : {
        $2_1 = HEAPU8[($5_1 + 81313 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break block40
        }
        if ($9_1 >>> 0 < 134217728 >>> 0) {
         continue label5
        }
       }
       break label5;
      };
      i64toi32_i32$2 = 0;
      $10_1 = $7_1;
      $10$hi = i64toi32_i32$2;
     }
     if ($1_1 >>> 0 <= $2_1 >>> 0) {
      break block29
     }
     i64toi32_i32$2 = 0;
     $12_1 = $8_1;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $37_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $37_1;
     $13$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$2 = $13_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$3 = $10_1;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break block29
     }
     label6 : while (1) {
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 255;
      i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $11_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $11$hi = i64toi32_i32$5;
      block42 : {
       block41 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break block41
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break block42;
       }
       $5_1 = $1391($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$2 = $10_1;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$4 = $12_1;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $38_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
       $38_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $348$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $348$hi;
      i64toi32_i32$5 = $38_1;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $10_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $10$hi = i64toi32_i32$2;
      $2_1 = HEAPU8[($5_1 + 81313 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break block29
      }
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$4 = $13_1;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
       continue label6
      }
      break label6;
     };
    }
    if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 81313 | 0) >> 0] | 0) >>> 0) {
     break block23
    }
    label7 : while (1) {
     block44 : {
      block43 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block43
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
       $5_1 = HEAPU8[$5_1 >> 0] | 0;
       break block44;
      }
      $5_1 = $1391($0_1 | 0) | 0;
     }
     if ($1_1 >>> 0 > (HEAPU8[($5_1 + 81313 | 0) >> 0] | 0) >>> 0) {
      continue label7
     }
     break label7;
    };
    HEAP32[($990() | 0) >> 2] = 68;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0) ? $6_1 : 0;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$2 = i64toi32_i32$3;
    $10_1 = i64toi32_i32$4;
    $10$hi = i64toi32_i32$3;
   }
   block45 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
     $39_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $40_1 = 0
      } else {
       $40_1 = 1
      }
      $41_1 = $40_1;
     } else {
      $41_1 = 0
     }
     $39_1 = $41_1;
    }
    if ($39_1) {
     break block45
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   block46 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block46
    }
    block47 : {
     i64toi32_i32$5 = i64toi32_i32$4;
     if (i64toi32_i32$2 & 1 | 0) {
      break block47
     }
     if ($6_1) {
      break block47
     }
     HEAP32[($990() | 0) >> 2] = 68;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     break block2;
    }
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
     break block46
    }
    HEAP32[($990() | 0) >> 2] = 68;
    break block2;
   }
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $415$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $415$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $1416($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1417($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0, $8_1 = 0, $37_1 = 0, $8$hi = 0, $39_1 = 0, $40_1 = 0, $6_1 = 0, $41_1 = 0, $42_1 = 0, $26_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $80_1 = 0, $80$hi = 0, $96_1 = 0, $96$hi = 0, $101_1 = 0, $101$hi = 0, $103_1 = 0, $103$hi = 0, $106_1 = 0, $107$hi = 0, $110_1 = 0, $114_1 = 0, $122_1 = 0, $122$hi = 0, $139_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  block3 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $37_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $37_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32767;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $8_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    $3_1 = $8_1;
    if (($3_1 + -16257 | 0) >>> 0 > 253 >>> 0) {
     break block
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $39_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $4_1 = $39_1;
    block2 : {
     block1 : {
      i64toi32_i32$1 = $0$hi;
      $26_1 = !($0_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 33554431;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $7_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 16777216;
      $30_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 16777216;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $26_1 : $30_1) {
       break block1
      }
      $4_1 = $4_1 + 1 | 0;
      break block2;
     }
     i64toi32_i32$3 = $0$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 16777216;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $38_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $38$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$0 = $38$hi;
     i64toi32_i32$2 = $38_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block2
     }
     $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
    }
    $5_1 = $4_1 >>> 0 > 8388607 >>> 0;
    $4_1 = $5_1 ? 0 : $4_1;
    $3_1 = ($5_1 ? -16255 : -16256) + $3_1 | 0;
    break block3;
   }
   block4 : {
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
     break block4
    }
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32767;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break block4
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 25;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $40_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $40_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $4_1 = $40_1 | 4194304 | 0;
    $3_1 = 255;
    break block3;
   }
   block5 : {
    if ($3_1 >>> 0 <= 16510 >>> 0) {
     break block5
    }
    $3_1 = 255;
    $4_1 = 0;
    break block3;
   }
   block6 : {
    i64toi32_i32$0 = $8$hi;
    $5_1 = !($8_1 | i64toi32_i32$0 | 0);
    $6_1 = $5_1 ? 16256 : 16257;
    $4_1 = $6_1 - $3_1 | 0;
    if (($4_1 | 0) <= (112 | 0)) {
     break block6
    }
    $4_1 = 0;
    $3_1 = 0;
    break block3;
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $80_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $80$hi = i64toi32_i32$3;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$1 = $80$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $7_1 : $80_1;
   i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
   $7_1 = i64toi32_i32$2;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $7$hi;
   $1045($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, i64toi32_i32$2 | 0, 128 - $4_1 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   $1046($2_1 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
   $0_1 = i64toi32_i32$0;
   $0$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 25;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $41_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $41_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $4_1 = $41_1;
   block8 : {
    block7 : {
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $96_1 = i64toi32_i32$0;
     $96$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $101_1 = i64toi32_i32$4;
     $101$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
     $103_1 = i64toi32_i32$0;
     $103$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $101$hi;
     i64toi32_i32$2 = $101_1;
     i64toi32_i32$0 = $103$hi;
     i64toi32_i32$3 = $103_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     $106_1 = ($6_1 | 0) != ($3_1 | 0) & ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) | 0;
     i64toi32_i32$4 = 0;
     $107$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $96$hi;
     i64toi32_i32$3 = $96_1;
     i64toi32_i32$0 = $107$hi;
     i64toi32_i32$2 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $7_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$0;
     $110_1 = !($7_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$4 = $0_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $0_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $0$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 16777216;
     $114_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 16777216;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) | 0 ? $110_1 : $114_1) {
      break block7
     }
     $4_1 = $4_1 + 1 | 0;
     break block8;
    }
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$4 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $122_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
    $122$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = $122$hi;
    i64toi32_i32$3 = $122_1;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break block8
    }
    $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
   }
   $3_1 = $4_1 >>> 0 > 8388607 >>> 0;
   $4_1 = $3_1 ? $4_1 ^ 8388608 | 0 : $4_1;
  }
  global$0 = $2_1 + 32 | 0;
  $139_1 = $3_1 << 23 | 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$2 = 32;
  i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $42_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
   $42_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $139_1 | ($42_1 & -2147483648 | 0) | 0 | $4_1 | 0), wasm2js_scratch_load_f32()));
 }
 
 function $1418($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if ($0_1) {
    break block
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $1419($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, i64toi32_i32$5 = 0, $13_1 = 0, $10_1 = 0, $3_1 = 0, $7_1 = 0, $18$hi = 0, $11_1 = 0, $12_1 = 0, $19$hi = 0, $15_1 = 0, $6_1 = 0, $18_1 = 0, $9_1 = 0, $19_1 = 0, $16_1 = 0, $20$hi = 0, $14_1 = 0, $20_1 = 0, $17_1 = 0, i64toi32_i32$6 = 0, $4_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77$hi = 0, $79$hi = 0, $84_1 = 0, $84$hi = 0, $143$hi = 0, $145$hi = 0, $151_1 = 0, $151$hi = 0, $282$hi = 0, $284$hi = 0, $289_1 = 0, $289$hi = 0, $329_1 = 0, $329$hi = 0, $335_1 = 0, $335$hi = 0, $336$hi = 0, $441_1 = 0, $441$hi = 0, $447_1 = 0, $447$hi = 0, $448$hi = 0, $653_1 = 0, $653$hi = 0, $658_1 = 0, $658$hi = 0, $685$hi = 0, $687$hi = 0, $693_1 = 0, $693$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block
    }
    $4_1 = 1;
    break block1;
   }
   $4_1 = !($998($0_1 | 0) | 0);
  }
  block5 : {
   block3 : {
    block2 : {
     if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
      break block2
     }
     $1053($0_1 | 0) | 0;
     if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
      break block3
     }
    }
    block4 : {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if ($5_1) {
      break block4
     }
     $6_1 = 0;
     break block5;
    }
    i64toi32_i32$0 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$0;
    $6_1 = 0;
    block50 : {
     block27 : {
      block67 : {
       label13 : while (1) {
        block10 : {
         block6 : {
          $5_1 = $5_1 & 255 | 0;
          if (!($1420($5_1 | 0) | 0)) {
           break block6
          }
          label : while (1) {
           $5_1 = $1_1;
           $1_1 = $1_1 + 1 | 0;
           if ($1420(HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
            continue label
           }
           break label;
          };
          i64toi32_i32$0 = 0;
          $1390($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          label1 : while (1) {
           block8 : {
            block7 : {
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
              break block7
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
             $1_1 = HEAPU8[$1_1 >> 0] | 0;
             break block8;
            }
            $1_1 = $1391($0_1 | 0) | 0;
           }
           if ($1420($1_1 | 0) | 0) {
            continue label1
           }
           break label1;
          };
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          block9 : {
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $61_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $62_1 = 0
             } else {
              $62_1 = 1
             }
             $63_1 = $62_1;
            } else {
             $63_1 = 0
            }
            $61_1 = $63_1;
           }
           if ($61_1) {
            break block9
           }
           $1_1 = $1_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
          }
          i64toi32_i32$3 = $0_1;
          i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $77$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $77$hi;
          i64toi32_i32$3 = i64toi32_i32$2;
          i64toi32_i32$2 = $18$hi;
          i64toi32_i32$0 = $18_1;
          i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $79$hi = i64toi32_i32$5;
          i64toi32_i32$3 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
          $84_1 = i64toi32_i32$3;
          $84$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $79$hi;
          i64toi32_i32$1 = i64toi32_i32$4;
          i64toi32_i32$3 = $84$hi;
          i64toi32_i32$0 = $84_1;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $18_1 = i64toi32_i32$2;
          $18$hi = i64toi32_i32$4;
          break block10;
         }
         block21 : {
          block13 : {
           block12 : {
            block11 : {
             if (($5_1 | 0) != (37 | 0)) {
              break block11
             }
             $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
             if (($5_1 | 0) == (42 | 0)) {
              break block12
             }
             if (($5_1 | 0) != (37 | 0)) {
              break block13
             }
            }
            i64toi32_i32$4 = 0;
            $1390($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
            block17 : {
             block14 : {
              if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
               break block14
              }
              label2 : while (1) {
               block16 : {
                block15 : {
                 $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break block15
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                 $5_1 = HEAPU8[$5_1 >> 0] | 0;
                 break block16;
                }
                $5_1 = $1391($0_1 | 0) | 0;
               }
               if ($1420($5_1 | 0) | 0) {
                continue label2
               }
               break label2;
              };
              $1_1 = $1_1 + 1 | 0;
              break block17;
             }
             block18 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
               break block18
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break block17;
             }
             $5_1 = $1391($0_1 | 0) | 0;
            }
            block19 : {
             if (($5_1 | 0) == (HEAPU8[$1_1 >> 0] | 0 | 0)) {
              break block19
             }
             block20 : {
              i64toi32_i32$5 = $0_1;
              i64toi32_i32$4 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$5 = i64toi32_i32$4;
              i64toi32_i32$4 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
               $64_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                 $65_1 = 0
                } else {
                 $65_1 = 1
                }
                $66_1 = $65_1;
               } else {
                $66_1 = 0
               }
               $64_1 = $66_1;
              }
              if ($64_1) {
               break block20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
             }
             if (($5_1 | 0) > (-1 | 0)) {
              break block5
             }
             if ($6_1) {
              break block5
             }
             break block3;
            }
            i64toi32_i32$0 = $0_1;
            i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
            $143$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $18$hi;
            i64toi32_i32$1 = $143$hi;
            i64toi32_i32$0 = i64toi32_i32$5;
            i64toi32_i32$5 = $18$hi;
            i64toi32_i32$4 = $18_1;
            i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
            i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            $145$hi = i64toi32_i32$2;
            i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
            $151_1 = i64toi32_i32$0;
            $151$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $145$hi;
            i64toi32_i32$1 = i64toi32_i32$3;
            i64toi32_i32$0 = $151$hi;
            i64toi32_i32$4 = $151_1;
            i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
            i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
            if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
            }
            $18_1 = i64toi32_i32$5;
            $18$hi = i64toi32_i32$3;
            $5_1 = $1_1;
            break block10;
           }
           $5_1 = $1_1 + 2 | 0;
           $7_1 = 0;
           break block21;
          }
          block22 : {
           $8_1 = $5_1 + -48 | 0;
           if ($8_1 >>> 0 > 9 >>> 0) {
            break block22
           }
           if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
            break block22
           }
           $5_1 = $1_1 + 3 | 0;
           $7_1 = $1421($2_1 | 0, $8_1 | 0) | 0;
           break block21;
          }
          $5_1 = $1_1 + 1 | 0;
          $7_1 = HEAP32[$2_1 >> 2] | 0;
          $2_1 = $2_1 + 4 | 0;
         }
         $9_1 = 0;
         $8_1 = 0;
         block23 : {
          $1_1 = HEAPU8[$5_1 >> 0] | 0;
          if ((($1_1 + -48 | 0) & 255 | 0) >>> 0 > 9 >>> 0) {
           break block23
          }
          label3 : while (1) {
           $8_1 = (Math_imul($8_1, 10) + ($1_1 & 255 | 0) | 0) + -48 | 0;
           $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
           $5_1 = $5_1 + 1 | 0;
           if ((($1_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
            continue label3
           }
           break label3;
          };
         }
         block25 : {
          block24 : {
           if (($1_1 & 255 | 0 | 0) == (109 | 0)) {
            break block24
           }
           $10_1 = $5_1;
           break block25;
          }
          $10_1 = $5_1 + 1 | 0;
          $11_1 = 0;
          $9_1 = ($7_1 | 0) != (0 | 0);
          $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
          $12_1 = 0;
         }
         $5_1 = $10_1 + 1 | 0;
         $13_1 = 3;
         block30 : {
          block26 : {
           switch (($1_1 & 255 | 0) + -65 | 0 | 0) {
           case 39:
            $1_1 = (HEAPU8[($10_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
            $5_1 = $1_1 ? $10_1 + 2 | 0 : $5_1;
            $13_1 = $1_1 ? -2 : -1;
            break block30;
           case 43:
            $1_1 = (HEAPU8[($10_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
            $5_1 = $1_1 ? $10_1 + 2 | 0 : $5_1;
            $13_1 = $1_1 ? 3 : 1;
            break block30;
           case 51:
           case 57:
            $13_1 = 1;
            break block30;
           case 11:
            $13_1 = 2;
            break block30;
           case 0:
           case 2:
           case 4:
           case 5:
           case 6:
           case 18:
           case 23:
           case 26:
           case 32:
           case 34:
           case 35:
           case 36:
           case 37:
           case 38:
           case 40:
           case 45:
           case 46:
           case 47:
           case 50:
           case 52:
           case 55:
            break block26;
           case 41:
            break block30;
           default:
            break block27;
           };
          }
          $13_1 = 0;
          $5_1 = $10_1;
         }
         $1_1 = HEAPU8[$5_1 >> 0] | 0;
         $10_1 = ($1_1 & 47 | 0 | 0) == (3 | 0);
         $14_1 = $10_1 ? 1 : $13_1;
         block33 : {
          $15_1 = $10_1 ? $1_1 | 32 | 0 : $1_1;
          if (($15_1 | 0) == (91 | 0)) {
           break block33
          }
          block35 : {
           block34 : {
            if (($15_1 | 0) == (110 | 0)) {
             break block34
            }
            if (($15_1 | 0) != (99 | 0)) {
             break block35
            }
            $8_1 = ($8_1 | 0) > (1 | 0) ? $8_1 : 1;
            break block33;
           }
           i64toi32_i32$3 = $18$hi;
           $1422($7_1 | 0, $14_1 | 0, $18_1 | 0, i64toi32_i32$3 | 0);
           break block10;
          }
          i64toi32_i32$3 = 0;
          $1390($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
          label4 : while (1) {
           block37 : {
            block36 : {
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
              break block36
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
             $1_1 = HEAPU8[$1_1 >> 0] | 0;
             break block37;
            }
            $1_1 = $1391($0_1 | 0) | 0;
           }
           if ($1420($1_1 | 0) | 0) {
            continue label4
           }
           break label4;
          };
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          block38 : {
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$3;
           i64toi32_i32$3 = 0;
           i64toi32_i32$4 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
            $67_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
              $68_1 = 0
             } else {
              $68_1 = 1
             }
             $69_1 = $68_1;
            } else {
             $69_1 = 0
            }
            $67_1 = $69_1;
           }
           if ($67_1) {
            break block38
           }
           $1_1 = $1_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
          }
          i64toi32_i32$4 = $0_1;
          i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $282$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $282$hi;
          i64toi32_i32$4 = i64toi32_i32$2;
          i64toi32_i32$2 = $18$hi;
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $284$hi = i64toi32_i32$5;
          i64toi32_i32$4 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
          $289_1 = i64toi32_i32$4;
          $289$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $284$hi;
          i64toi32_i32$1 = i64toi32_i32$0;
          i64toi32_i32$4 = $289$hi;
          i64toi32_i32$3 = $289_1;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
          }
          $18_1 = i64toi32_i32$2;
          $18$hi = i64toi32_i32$0;
         }
         i64toi32_i32$1 = $8_1;
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $19_1 = i64toi32_i32$1;
         $19$hi = i64toi32_i32$0;
         $1390($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
         block40 : {
          block39 : {
           $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break block39
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
           break block40;
          }
          if (($1391($0_1 | 0) | 0 | 0) < (0 | 0)) {
           break block27
          }
         }
         block41 : {
          i64toi32_i32$5 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
          i64toi32_i32$5 = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 0;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
           $70_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
            if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
             $71_1 = 0
            } else {
             $71_1 = 1
            }
            $72_1 = $71_1;
           } else {
            $72_1 = 0
           }
           $70_1 = $72_1;
          }
          if ($70_1) {
           break block41
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         $1_1 = 16;
         block43 : {
          block55 : {
           block53 : {
            block52 : {
             block51 : {
              block42 : {
               block47 : {
                switch ($15_1 + -88 | 0 | 0) {
                default:
                 $1_1 = $15_1 + -65 | 0;
                 if ($1_1 >>> 0 > 6 >>> 0) {
                  break block43
                 }
                 if (!((1 << $1_1 | 0) & 113 | 0)) {
                  break block43
                 }
                case 9:
                case 13:
                case 14:
                case 15:
                 $1410($3_1 + 8 | 0 | 0, $0_1 | 0, $14_1 | 0, 0 | 0);
                 i64toi32_i32$3 = $0_1;
                 i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                 $329_1 = i64toi32_i32$5;
                 $329$hi = i64toi32_i32$1;
                 i64toi32_i32$5 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                 i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                 $335_1 = i64toi32_i32$5;
                 $335$hi = i64toi32_i32$1;
                 i64toi32_i32$1 = 0;
                 i64toi32_i32$3 = 0;
                 i64toi32_i32$5 = $335$hi;
                 i64toi32_i32$0 = $335_1;
                 i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                 i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                 i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                 i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                 $336$hi = i64toi32_i32$2;
                 i64toi32_i32$2 = $329$hi;
                 i64toi32_i32$1 = $329_1;
                 i64toi32_i32$3 = $336$hi;
                 i64toi32_i32$0 = i64toi32_i32$4;
                 if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0) {
                  break block50
                 }
                 if (!$7_1) {
                  break block43
                 }
                 i64toi32_i32$0 = $3_1;
                 i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
                 i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
                 $19_1 = i64toi32_i32$1;
                 $19$hi = i64toi32_i32$2;
                 i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
                 $20_1 = i64toi32_i32$2;
                 $20$hi = i64toi32_i32$1;
                 switch ($14_1 | 0) {
                 case 0:
                  break block51;
                 case 1:
                  break block52;
                 case 2:
                  break block53;
                 default:
                  break block43;
                 };
                case 3:
                case 11:
                case 27:
                 block54 : {
                  if (($15_1 | 16 | 0 | 0) != (115 | 0)) {
                   break block54
                  }
                  $1018($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  if (($15_1 | 0) != (115 | 0)) {
                   break block55
                  }
                  HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                  HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                  $73_1 = 0;
                  HEAP16[($3_1 + 42 | 0) >> 1] = $73_1;
                  HEAP16[($3_1 + 44 | 0) >> 1] = $73_1 >>> 16 | 0;
                  break block55;
                 }
                 $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                 $1_1 = ($13_1 | 0) == (94 | 0);
                 $1018($3_1 + 32 | 0 | 0, $1_1 | 0, 257 | 0) | 0;
                 HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                 $16_1 = $1_1 ? $5_1 + 2 | 0 : $5_1 + 1 | 0;
                 block58 : {
                  block59 : {
                   block57 : {
                    block56 : {
                     $1_1 = HEAPU8[($5_1 + ($1_1 ? 2 : 1) | 0) >> 0] | 0;
                     if (($1_1 | 0) == (45 | 0)) {
                      break block56
                     }
                     if (($1_1 | 0) == (93 | 0)) {
                      break block57
                     }
                     $10_1 = ($13_1 | 0) != (94 | 0);
                     $5_1 = $16_1;
                     break block58;
                    }
                    $10_1 = ($13_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 78 | 0) >> 0] = $10_1;
                    break block59;
                   }
                   $10_1 = ($13_1 | 0) != (94 | 0);
                   HEAP8[($3_1 + 126 | 0) >> 0] = $10_1;
                  }
                  $5_1 = $16_1 + 1 | 0;
                 }
                 label6 : while (1) {
                  block61 : {
                   block60 : {
                    $13_1 = HEAPU8[$5_1 >> 0] | 0;
                    if (($13_1 | 0) == (45 | 0)) {
                     break block60
                    }
                    if (!$13_1) {
                     break block27
                    }
                    if (($13_1 | 0) == (93 | 0)) {
                     break block55
                    }
                    break block61;
                   }
                   $13_1 = 45;
                   $17_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                   if (!$17_1) {
                    break block61
                   }
                   if (($17_1 | 0) == (93 | 0)) {
                    break block61
                   }
                   $16_1 = $5_1 + 1 | 0;
                   block63 : {
                    block62 : {
                     $1_1 = HEAPU8[($5_1 + -1 | 0) >> 0] | 0;
                     if ($1_1 >>> 0 < $17_1 >>> 0) {
                      break block62
                     }
                     $13_1 = $17_1;
                     break block63;
                    }
                    label5 : while (1) {
                     $1_1 = $1_1 + 1 | 0;
                     HEAP8[(($3_1 + 32 | 0) + $1_1 | 0) >> 0] = $10_1;
                     $13_1 = HEAPU8[$16_1 >> 0] | 0;
                     if ($1_1 >>> 0 < $13_1 >>> 0) {
                      continue label5
                     }
                     break label5;
                    };
                   }
                   $5_1 = $16_1;
                  }
                  HEAP8[(($13_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $10_1;
                  $5_1 = $5_1 + 1 | 0;
                  continue label6;
                 };
                case 23:
                 $1_1 = 8;
                 break block42;
                case 12:
                case 29:
                 $1_1 = 10;
                 break block42;
                case 0:
                case 24:
                case 32:
                 break block42;
                case 1:
                case 2:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 25:
                case 26:
                case 28:
                case 30:
                case 31:
                 break block43;
                case 17:
                 break block47;
                };
               }
               $1_1 = 0;
              }
              i64toi32_i32$1 = -1;
              i64toi32_i32$1 = $1415($0_1 | 0, $1_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              $19_1 = i64toi32_i32$1;
              $19$hi = i64toi32_i32$2;
              i64toi32_i32$0 = $0_1;
              i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
              $441_1 = i64toi32_i32$2;
              $441$hi = i64toi32_i32$1;
              i64toi32_i32$2 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
              $447_1 = i64toi32_i32$2;
              $447$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = $447$hi;
              i64toi32_i32$3 = $447_1;
              i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
              i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
              i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
              i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
              $448$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $441$hi;
              i64toi32_i32$1 = $441_1;
              i64toi32_i32$0 = $448$hi;
              i64toi32_i32$3 = i64toi32_i32$5;
              if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
               break block50
              }
              block64 : {
               if (($15_1 | 0) != (112 | 0)) {
                break block64
               }
               if (!$7_1) {
                break block64
               }
               i64toi32_i32$1 = $19$hi;
               HEAP32[$7_1 >> 2] = $19_1;
               break block43;
              }
              i64toi32_i32$1 = $19$hi;
              $1422($7_1 | 0, $14_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
              break block43;
             }
             i64toi32_i32$1 = $20$hi;
             i64toi32_i32$1 = $19$hi;
             i64toi32_i32$1 = $20$hi;
             i64toi32_i32$4 = $19$hi;
             HEAPF32[$7_1 >> 2] = Math_fround($1417($20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$4 | 0));
             break block43;
            }
            i64toi32_i32$4 = $20$hi;
            i64toi32_i32$4 = $19$hi;
            i64toi32_i32$4 = $20$hi;
            i64toi32_i32$1 = $19$hi;
            HEAPF64[$7_1 >> 3] = +$1047($20_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
            break block43;
           }
           i64toi32_i32$1 = $20$hi;
           i64toi32_i32$4 = $7_1;
           HEAP32[i64toi32_i32$4 >> 2] = $20_1;
           HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$1 = $19$hi;
           HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
           HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
           break block43;
          }
          $16_1 = ($15_1 | 0) != (99 | 0);
          $10_1 = $16_1 ? 31 : $8_1 + 1 | 0;
          block74 : {
           block65 : {
            if (($14_1 | 0) != (1 | 0)) {
             break block65
            }
            $8_1 = $7_1;
            block66 : {
             if (!$9_1) {
              break block66
             }
             $8_1 = $1032($10_1 << 2 | 0 | 0) | 0;
             if (!$8_1) {
              break block67
             }
            }
            i64toi32_i32$4 = $3_1;
            i64toi32_i32$1 = 0;
            HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
            HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
            $1_1 = 0;
            block72 : {
             block70 : {
              label8 : while (1) {
               $13_1 = $8_1;
               label7 : while (1) {
                block69 : {
                 block68 : {
                  $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($8_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                   break block68
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                  $8_1 = HEAPU8[$8_1 >> 0] | 0;
                  break block69;
                 }
                 $8_1 = $1391($0_1 | 0) | 0;
                }
                if (!(HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                 break block70
                }
                HEAP8[($3_1 + 27 | 0) >> 0] = $8_1;
                $8_1 = $1317($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                if (($8_1 | 0) == (-2 | 0)) {
                 continue label7
                }
                block71 : {
                 if (($8_1 | 0) != (-1 | 0)) {
                  break block71
                 }
                 $11_1 = 0;
                 break block72;
                }
                block73 : {
                 if (!$13_1) {
                  break block73
                 }
                 HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                 $1_1 = $1_1 + 1 | 0;
                }
                if (!$9_1) {
                 continue label7
                }
                if (($1_1 | 0) != ($10_1 | 0)) {
                 continue label7
                }
                break label7;
               };
               $10_1 = $10_1 << 1 | 0 | 1 | 0;
               $8_1 = $1035($13_1 | 0, $10_1 << 2 | 0 | 0) | 0;
               if ($8_1) {
                continue label8
               }
               break label8;
              };
              $11_1 = 0;
              $12_1 = $13_1;
              $9_1 = 1;
              break block27;
             }
             $11_1 = 0;
             $12_1 = $13_1;
             if ($1418($3_1 + 296 | 0 | 0) | 0) {
              break block74
             }
            }
            $12_1 = $13_1;
            break block27;
           }
           block75 : {
            if (!$9_1) {
             break block75
            }
            $1_1 = 0;
            $8_1 = $1032($10_1 | 0) | 0;
            if (!$8_1) {
             break block67
            }
            label10 : while (1) {
             $13_1 = $8_1;
             label9 : while (1) {
              block77 : {
               block76 : {
                $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($8_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break block76
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                $8_1 = HEAPU8[$8_1 >> 0] | 0;
                break block77;
               }
               $8_1 = $1391($0_1 | 0) | 0;
              }
              block78 : {
               if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                break block78
               }
               $12_1 = 0;
               $11_1 = $13_1;
               break block74;
              }
              HEAP8[($13_1 + $1_1 | 0) >> 0] = $8_1;
              $1_1 = $1_1 + 1 | 0;
              if (($1_1 | 0) != ($10_1 | 0)) {
               continue label9
              }
              break label9;
             };
             $10_1 = $10_1 << 1 | 0 | 1 | 0;
             $8_1 = $1035($13_1 | 0, $10_1 | 0) | 0;
             if ($8_1) {
              continue label10
             }
             break label10;
            };
            $12_1 = 0;
            $11_1 = $13_1;
            $9_1 = 1;
            break block27;
           }
           $1_1 = 0;
           block79 : {
            if (!$7_1) {
             break block79
            }
            label11 : while (1) {
             block81 : {
              block80 : {
               $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if (($8_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                break block80
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
               $8_1 = HEAPU8[$8_1 >> 0] | 0;
               break block81;
              }
              $8_1 = $1391($0_1 | 0) | 0;
             }
             block82 : {
              if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
               break block82
              }
              $12_1 = 0;
              $13_1 = $7_1;
              $11_1 = $13_1;
              break block74;
             }
             HEAP8[($7_1 + $1_1 | 0) >> 0] = $8_1;
             $1_1 = $1_1 + 1 | 0;
             continue label11;
            };
           }
           label12 : while (1) {
            block84 : {
             block83 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
               break block83
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break block84;
             }
             $1_1 = $1391($0_1 | 0) | 0;
            }
            if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
             continue label12
            }
            break label12;
           };
           $13_1 = 0;
           $11_1 = 0;
           $12_1 = 0;
           $1_1 = 0;
          }
          $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          block85 : {
           i64toi32_i32$3 = $0_1;
           i64toi32_i32$1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
           i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
           i64toi32_i32$3 = i64toi32_i32$1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$0 = 0;
           if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
            $74_1 = 1
           } else {
            if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
             if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
              $75_1 = 0
             } else {
              $75_1 = 1
             }
             $76_1 = $75_1;
            } else {
             $76_1 = 0
            }
            $74_1 = $76_1;
           }
           if ($74_1) {
            break block85
           }
           $8_1 = $8_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $8_1;
          }
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $653_1 = i64toi32_i32$3;
          $653$hi = i64toi32_i32$4;
          i64toi32_i32$3 = $8_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
          i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
          $658_1 = i64toi32_i32$3;
          $658$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $653$hi;
          i64toi32_i32$0 = $653_1;
          i64toi32_i32$3 = $658$hi;
          i64toi32_i32$1 = $658_1;
          i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $20_1 = i64toi32_i32$2;
          $20$hi = i64toi32_i32$5;
          if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
           break block50
          }
          i64toi32_i32$5 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$4 = i64toi32_i32$2;
          i64toi32_i32$0 = $19$hi;
          i64toi32_i32$1 = $19_1;
          if (!($16_1 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) | 0)) {
           break block50
          }
          block86 : {
           if (!$9_1) {
            break block86
           }
           HEAP32[$7_1 >> 2] = $13_1;
          }
          if (($15_1 | 0) == (99 | 0)) {
           break block43
          }
          block87 : {
           if (!$12_1) {
            break block87
           }
           HEAP32[($12_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
          }
          block88 : {
           if ($11_1) {
            break block88
           }
           $11_1 = 0;
           break block43;
          }
          HEAP8[($11_1 + $1_1 | 0) >> 0] = 0;
         }
         i64toi32_i32$1 = $0_1;
         i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
         $685$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $18$hi;
         i64toi32_i32$5 = $685$hi;
         i64toi32_i32$1 = i64toi32_i32$4;
         i64toi32_i32$4 = $18$hi;
         i64toi32_i32$0 = $18_1;
         i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
         i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
         }
         $687$hi = i64toi32_i32$2;
         i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
         i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
         $693_1 = i64toi32_i32$1;
         $693$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $687$hi;
         i64toi32_i32$5 = i64toi32_i32$3;
         i64toi32_i32$1 = $693$hi;
         i64toi32_i32$0 = $693_1;
         i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
         i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
         }
         $18_1 = i64toi32_i32$4;
         $18$hi = i64toi32_i32$3;
         $6_1 = $6_1 + (($7_1 | 0) != (0 | 0)) | 0;
        }
        $1_1 = $5_1 + 1 | 0;
        $5_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if ($5_1) {
         continue label13
        }
        break block5;
       };
      }
      $9_1 = 1;
      $11_1 = 0;
      $12_1 = 0;
     }
     $6_1 = $6_1 ? $6_1 : -1;
    }
    if (!$9_1) {
     break block5
    }
    $1034($11_1 | 0);
    $1034($12_1 | 0);
    break block5;
   }
   $6_1 = -1;
  }
  block89 : {
   if ($4_1) {
    break block89
   }
   $999($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $6_1 | 0;
 }
 
 function $1420($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1_1 >>> 0 > 1 >>> 0 ? ($0_1 + ($1_1 << 2 | 0) | 0) + -4 | 0 : $0_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1422($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  block : {
   if (!$0_1) {
    break block
   }
   block4 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break block4;
    default:
     break block;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $1423($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  block : {
   if (!144) {
    break block
   }
   wasm2js_memory_fill($3_1, 0, 144);
  }
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 107;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $1419($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $1424($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $1011($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $985($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $1425() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  block : {
   if (fimport$22($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break block
   }
   $1_1 = $1032(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 103932 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break block
   }
   block1 : {
    $1_1 = $1032(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (!$1_1) {
     break block1
    }
    $2_1 = HEAP32[(0 + 103932 | 0) >> 2] | 0;
    HEAP32[($2_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    if (!(fimport$23($2_1 | 0, $1_1 | 0) | 0)) {
     break block
    }
   }
   HEAP32[(0 + 103932 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $1426($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  block : {
   if ($2_1) {
    break block
   }
   return 0 | 0;
  }
  block2 : {
   block1 : {
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if ($3_1) {
     break block1
    }
    $0_1 = 0;
    break block2;
   }
   block3 : {
    label : while (1) {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($3_1 & 255 | 0 | 0) != ($4_1 | 0)) {
      break block3
     }
     if (!$4_1) {
      break block3
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break block3
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($3_1) {
      continue label
     }
     break label;
    };
    $3_1 = 0;
   }
   $0_1 = $3_1 & 255 | 0;
  }
  return $0_1 - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $1427($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
  block : {
   $1_1 = $1050($0_1 | 0, 61 | 0) | 0;
   if (($1_1 | 0) != ($0_1 | 0)) {
    break block
   }
   return 0 | 0;
  }
  $2_1 = 0;
  block1 : {
   $3_1 = $1_1 - $0_1 | 0;
   if (HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0) {
    break block1
   }
   $1_1 = HEAP32[(0 + 103932 | 0) >> 2] | 0;
   if (!$1_1) {
    break block1
   }
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$4_1) {
    break block1
   }
   block3 : {
    label : while (1) {
     block2 : {
      if ($1426($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0) {
       break block2
      }
      $4_1 = (HEAP32[$1_1 >> 2] | 0) + $3_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break block3
      }
     }
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     if ($4_1) {
      continue label
     }
     break block1;
    };
   }
   $2_1 = $4_1 + 1 | 0;
  }
  return $2_1 | 0;
 }
 
 function $1428($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  block : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break block
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break block
   }
   label : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break block
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label
    }
    break label;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $1429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  block : {
   if (HEAPU8[$1_1 >> 0] | 0) {
    break block
   }
   block1 : {
    $1_1 = $1427(66462 | 0) | 0;
    if (!$1_1) {
     break block1
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break block
    }
   }
   block2 : {
    $1_1 = $1427(Math_imul($0_1, 12) + 81584 | 0 | 0) | 0;
    if (!$1_1) {
     break block2
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break block
    }
   }
   block3 : {
    $1_1 = $1427(66475 | 0) | 0;
    if (!$1_1) {
     break block3
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break block
    }
   }
   $1_1 = 67175;
  }
  $2_1 = 0;
  block5 : {
   block4 : {
    label : while (1) {
     $3_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
     if (!$3_1) {
      break block4
     }
     if (($3_1 | 0) == (47 | 0)) {
      break block4
     }
     $3_1 = 23;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != (23 | 0)) {
      continue label
     }
     break block5;
    };
   }
   $3_1 = $2_1;
  }
  $4_1 = 67175;
  block11 : {
   block9 : {
    block8 : {
     block7 : {
      block6 : {
       $2_1 = HEAPU8[$1_1 >> 0] | 0;
       if (($2_1 | 0) == (46 | 0)) {
        break block6
       }
       if (HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0) {
        break block6
       }
       $4_1 = $1_1;
       if (($2_1 | 0) != (67 | 0)) {
        break block7
       }
      }
      if (!(HEAPU8[($4_1 + 1 | 0) >> 0] | 0)) {
       break block8
      }
     }
     if (!($1428($4_1 | 0, 67175 | 0) | 0)) {
      break block8
     }
     if ($1428($4_1 | 0, 66431 | 0) | 0) {
      break block9
     }
    }
    block10 : {
     if ($0_1) {
      break block10
     }
     $2_1 = 80516;
     if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
      break block11
     }
    }
    return 0 | 0;
   }
   block12 : {
    $2_1 = HEAP32[(0 + 103940 | 0) >> 2] | 0;
    if (!$2_1) {
     break block12
    }
    label1 : while (1) {
     if (!($1428($4_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
      break block11
     }
     $2_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
     if ($2_1) {
      continue label1
     }
     break label1;
    };
   }
   block13 : {
    $2_1 = $1032(36 | 0) | 0;
    if (!$2_1) {
     break block13
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 80520 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[(i64toi32_i32$2 + 80516 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $2_1 + 8 | 0;
    $985($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[(0 + 103940 | 0) >> 2] | 0;
    HEAP32[(0 + 103940 | 0) >> 2] = $2_1;
   }
   $2_1 = $0_1 | $2_1 | 0 ? $2_1 : 80516;
  }
  return $2_1 | 0;
 }
 
 function $1430($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) != (103968 | 0) & (($0_1 | 0) != (103944 | 0) & (($0_1 | 0) != (80576 | 0) & (($0_1 | 0) != (0 | 0) & ($0_1 | 0) != (80552 | 0) | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1431($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1006(103936 | 0);
  $2_1 = $1432($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1007(103936 | 0);
  return $2_1 | 0;
 }
 
 function $1432($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $72_1 = 0, $78_1 = 0, $84_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  block4 : {
   block2 : {
    label : while (1) {
     $5_1 = (1 << $4_1 | 0) & $0_1 | 0;
     block1 : {
      block : {
       if (!$2_1) {
        break block
       }
       if ($5_1) {
        break block
       }
       $5_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
       break block1;
      }
      $5_1 = $1429($4_1 | 0, ($5_1 ? $1_1 : 67314) | 0) | 0;
     }
     HEAP32[(($3_1 + 8 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $5_1;
     if (($5_1 | 0) == (-1 | 0)) {
      break block2
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (6 | 0)) {
      continue label
     }
     break label;
    };
    block3 : {
     if ($1430($2_1 | 0) | 0) {
      break block3
     }
     $2_1 = 80552;
     if (!($1042($3_1 + 8 | 0 | 0, 80552 | 0, 24 | 0) | 0)) {
      break block4
     }
     $2_1 = 80576;
     if (!($1042($3_1 + 8 | 0 | 0, 80576 | 0, 24 | 0) | 0)) {
      break block4
     }
     $4_1 = 0;
     block5 : {
      if (HEAPU8[(0 + 103992 | 0) >> 0] | 0) {
       break block5
      }
      label1 : while (1) {
       HEAP32[(($4_1 << 2 | 0) + 103944 | 0) >> 2] = $1429($4_1 | 0, 67314 | 0) | 0;
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != (6 | 0)) {
        continue label1
       }
       break label1;
      };
      HEAP8[(0 + 103992 | 0) >> 0] = 1;
      HEAP32[(0 + 103968 | 0) >> 2] = HEAP32[(0 + 103944 | 0) >> 2] | 0;
     }
     $2_1 = 103944;
     if (!($1042($3_1 + 8 | 0 | 0, 103944 | 0, 24 | 0) | 0)) {
      break block4
     }
     $2_1 = 103968;
     if (!($1042($3_1 + 8 | 0 | 0, 103968 | 0, 24 | 0) | 0)) {
      break block4
     }
     $2_1 = $1032(24 | 0) | 0;
     if (!$2_1) {
      break block2
     }
    }
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $72_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[$2_1 >> 2] = $72_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = ($3_1 + 8 | 0) + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $78_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $78_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = ($3_1 + 8 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $84_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $84_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    break block4;
   }
   $2_1 = 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1433($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 + -97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0;
 }
 
 function $1434($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 + -65 | 0) >>> 0 < 26 >>> 0 ? $0_1 | 32 | 0 : $0_1) | 0;
 }
 
 function $1435($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $0_1 = $1_1 ? $0_1 : $4_1 + 158 | 0;
  HEAP32[($4_1 + 148 | 0) >> 2] = $0_1;
  $5_1 = $1_1 + -1 | 0;
  HEAP32[($4_1 + 152 | 0) >> 2] = $5_1 >>> 0 > $1_1 >>> 0 ? 0 : $5_1;
  block : {
   if (!144) {
    break block
   }
   wasm2js_memory_fill($4_1, 0, 144);
  }
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 36 | 0) >> 2] = 108;
  HEAP32[($4_1 + 80 | 0) >> 2] = -1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $4_1 + 159 | 0;
  HEAP32[($4_1 + 84 | 0) >> 2] = $4_1 + 148 | 0;
  HEAP8[$0_1 >> 0] = 0;
  $1_1 = $1028($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 160 | 0;
  return $1_1 | 0;
 }
 
 function $1436($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = HEAP32[$3_1 >> 2] | 0;
  block : {
   $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $7_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $6_1 | 0;
   $7_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $5_1 : $7_1;
   if (!$7_1) {
    break block
   }
   $985($4_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
   $4_1 = (HEAP32[$3_1 >> 2] | 0) + $7_1 | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   $5_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $7_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
  }
  block1 : {
   $5_1 = $5_1 >>> 0 < $2_1 >>> 0 ? $5_1 : $2_1;
   if (!$5_1) {
    break block1
   }
   $985($4_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
   $4_1 = (HEAP32[$3_1 >> 2] | 0) + $5_1 | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $5_1 | 0;
  }
  HEAP8[$4_1 >> 0] = 0;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
  return $2_1 | 0;
 }
 
 function $1437($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0 | 0 | 0;
 }
 
 function $1438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1437($0_1 | 0) | 0 | 0;
 }
 
 function $1439($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $1440($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1439($0_1 | 0) | 0 | 0;
 }
 
 function $1441($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $5_1 = 0, $6$hi = 0, $39_1 = 0, $39$hi = 0, $7_1 = 0, $7$hi = 0, $50_1 = 0, $51_1 = 0, $83_1 = 0, $83$hi = 0, $29_1 = 0, $94_1 = 0, $94$hi = 0;
  block : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -2;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 136;
   if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
    break block
   }
   i64toi32_i32$0 = $0$hi;
   $2_1 = $0_1;
   $3_1 = ($2_1 + -68 | 0) >> 2 | 0;
   block2 : {
    block3 : {
     block1 : {
      if ($2_1 & 3 | 0) {
       break block1
      }
      $3_1 = $3_1 + -1 | 0;
      if (!$1_1) {
       break block2
      }
      $4_1 = 1;
      break block3;
     }
     if (!$1_1) {
      break block2
     }
     $4_1 = 0;
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   i64toi32_i32$5 = (Math_imul($2_1, 31536e3) + Math_imul($3_1, 86400) | 0) + 2087447296 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$3 = $0_1;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = -100;
  i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $0_1 = i64toi32_i32$1;
  $0$hi = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$3 = __wasm_i64_sdiv(i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, 400 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $6_1 = i64toi32_i32$3;
  $6$hi = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$3 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$4 | 0, 400 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $39_1 = i64toi32_i32$3;
  $39$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $0$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$3 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
  i64toi32_i32$1 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$2 = 63;
  i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
   $25_1 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
   $25_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
  }
  i64toi32_i32$5 = $6$hi;
  $3_1 = $25_1 + $6_1 | 0;
  block11 : {
   block10 : {
    block9 : {
     block5 : {
      block4 : {
       i64toi32_i32$5 = $7$hi;
       $2_1 = $7_1;
       $50_1 = $2_1 + 400 | 0;
       $51_1 = $2_1;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$5 | 0) < (i64toi32_i32$4 | 0)) {
        $26_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $27_1 = 0
         } else {
          $27_1 = 1
         }
         $28_1 = $27_1;
        } else {
         $28_1 = 0
        }
        $26_1 = $28_1;
       }
       $2_1 = $26_1 ? $50_1 : $51_1;
       if ($2_1) {
        break block4
       }
       $2_1 = 1;
       $4_1 = 0;
       break block5;
      }
      block8 : {
       block6 : {
        if (($2_1 | 0) < (200 | 0)) {
         break block6
        }
        block7 : {
         if ($2_1 >>> 0 < 300 >>> 0) {
          break block7
         }
         $2_1 = $2_1 + -300 | 0;
         $4_1 = 3;
         break block8;
        }
        $2_1 = $2_1 + -200 | 0;
        $4_1 = 2;
        break block8;
       }
       $4_1 = ($2_1 | 0) > (99 | 0);
       $2_1 = $4_1 ? $2_1 + -100 | 0 : $2_1;
      }
      if ($2_1) {
       break block9
      }
      $2_1 = 0;
     }
     $5_1 = 0;
     if ($1_1) {
      break block10
     }
     break block11;
    }
    $5_1 = $2_1 >>> 2 | 0;
    $2_1 = !($2_1 & 3 | 0);
    if (!$1_1) {
     break block11
    }
   }
   HEAP32[$1_1 >> 2] = $2_1;
  }
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$1 | 0, 31536e3 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $83_1 = i64toi32_i32$5;
  $83$hi = i64toi32_i32$1;
  i64toi32_i32$5 = ($5_1 + (Math_imul($4_1, 24) + Math_imul($3_1, 97) | 0) | 0) - $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
  $29_1 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$1 | 0, 86400 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $94_1 = i64toi32_i32$5;
  $94$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $83$hi;
  i64toi32_i32$2 = $83_1;
  i64toi32_i32$5 = $94$hi;
  i64toi32_i32$4 = $94_1;
  i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = 946771200;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function $1442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[(($0_1 << 2 | 0) + 81664 | 0) >> 2] | 0;
  return (($0_1 | 0) > (1 | 0) ? ($1_1 ? $2_1 + 86400 | 0 : $2_1) : $2_1) | 0;
 }
 
 function $1443($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $5$hi = 0, $4_1 = 0, $5_1 = 0, $1_1 = 0, $3_1 = 0, $34$hi = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $55_1 = 0, $55$hi = 0, $58$hi = 0, $59$hi = 0, $31_1 = 0, $63_1 = 0, $63$hi = 0, $64$hi = 0, $66_1 = 0, $66$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $70$hi = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  block : {
   $2_1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   if ($2_1 >>> 0 < 12 >>> 0) {
    break block
   }
   $3_1 = ($2_1 | 0) / (12 | 0) | 0;
   $4_1 = $2_1 - Math_imul($3_1, 12) | 0;
   $2_1 = ($4_1 | 0) < (0 | 0) ? $4_1 + 12 | 0 : $4_1;
   i64toi32_i32$0 = $3_1 + ($4_1 >> 31 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $34$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$1 = $34$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $5_1 = i64toi32_i32$4;
   $5$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$5 = $1441($5_1 | 0, i64toi32_i32$5 | 0, $1_1 + 12 | 0 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$5;
  $5$hi = i64toi32_i32$2;
  $2_1 = $1442($2_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  $6_1 = i64toi32_i32$2;
  $6$hi = i64toi32_i32$5;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
  $7_1 = i64toi32_i32$5;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  global$0 = $1_1 + 16 | 0;
  $55_1 = i64toi32_i32$2;
  $55$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  $58$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$2 = $58$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $59$hi = i64toi32_i32$4;
  i64toi32_i32$1 = $4_1 + -1 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
  $31_1 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_i64_mul($31_1 | 0, i64toi32_i32$4 | 0, 86400 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $63_1 = i64toi32_i32$1;
  $63$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $59$hi;
  i64toi32_i32$5 = i64toi32_i32$0;
  i64toi32_i32$1 = $63$hi;
  i64toi32_i32$3 = $63_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $64$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 3600 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $66_1 = i64toi32_i32$5;
  $66$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $64$hi;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$5 = $66$hi;
  i64toi32_i32$3 = $66_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $67$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$2 | 0, 60 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $69_1 = i64toi32_i32$4;
  $69$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $67$hi;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$4 = $69$hi;
  i64toi32_i32$3 = $69_1;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $70$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $55$hi;
  i64toi32_i32$2 = $55_1;
  i64toi32_i32$0 = $70$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$2 | 0;
 }
 
 function $1444($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1435($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1445() {
  block : {
   if ((HEAPU8[(0 + 104040 | 0) >> 0] | 0) & 1 | 0) {
    break block
   }
   $1001(104016 | 0) | 0;
   block1 : {
    if ((HEAPU8[(0 + 104040 | 0) >> 0] | 0) & 1 | 0) {
     break block1
    }
    fimport$24(103996 | 0, 104e3 | 0, 104048 | 0, 104080 | 0);
    HEAP32[(0 + 104008 | 0) >> 2] = 104080;
    HEAP32[(0 + 104004 | 0) >> 2] = 104048;
    HEAP8[(0 + 104040 | 0) >> 0] = 1;
   }
   $1002(104016 | 0) | 0;
  }
 }
 
 function $1446($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $1006(104012 | 0);
  $1445();
  $1007(104012 | 0);
  return $0_1 | 0;
 }
 
 function $1447($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  block : {
   if (($0_1 | 0) != (14 | 0)) {
    break block
   }
   return (HEAP32[$1_1 >> 2] | 0 ? 67177 : 66469) | 0;
  }
  $2_1 = $0_1 >> 16 | 0;
  block1 : {
   $3_1 = $0_1 & 65535 | 0;
   if (($3_1 | 0) != (65535 | 0)) {
    break block1
   }
   if (($2_1 | 0) > (5 | 0)) {
    break block1
   }
   $0_1 = HEAP32[($1_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
   return ($0_1 ? $0_1 + 8 | 0 : 66484) | 0;
  }
  $4_1 = 67314;
  block4 : {
   block6 : {
    block5 : {
     switch ($2_1 + -1 | 0 | 0) {
     case 0:
      if ($3_1 >>> 0 > 1 >>> 0) {
       break block4
      }
      $0_1 = 81712;
      break block6;
     case 1:
      if ($3_1 >>> 0 > 49 >>> 0) {
       break block4
      }
      $0_1 = 81728;
      break block6;
     case 4:
      break block5;
     default:
      break block4;
     };
    }
    if ($3_1 >>> 0 > 3 >>> 0) {
     break block4
    }
    $0_1 = 82048;
   }
   block7 : {
    if ($3_1) {
     break block7
    }
    return $0_1 | 0;
   }
   label : while (1) {
    $1_1 = HEAPU8[$0_1 >> 0] | 0;
    $4_1 = $0_1 + 1 | 0;
    $0_1 = $4_1;
    if ($1_1) {
     continue label
    }
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label
    }
    break label;
   };
  }
  return $4_1 | 0;
 }
 
 function $1448($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$0 = $1449($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1449($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $6_1 = 0, $12$hi = 0, $11$hi = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, $5_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $14$hi = 0, $13$hi = 0, $105_1 = 0, $105$hi = 0, $150$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block3 : {
   block2 : {
    block1 : {
     block : {
      if (($2_1 | 0) > (36 | 0)) {
       break block
      }
      $5_1 = 0;
      $6_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($6_1) {
       break block1
      }
      $7_1 = $0_1;
      break block2;
     }
     HEAP32[($990() | 0) >> 2] = 28;
     i64toi32_i32$0 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$0;
     break block3;
    }
    $7_1 = $0_1;
    block4 : {
     label : while (1) {
      if (!($1450($6_1 << 24 >> 24 | 0) | 0)) {
       break block4
      }
      $6_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
      $8_1 = $7_1 + 1 | 0;
      $7_1 = $8_1;
      if ($6_1) {
       continue label
      }
      break label;
     };
     break block2;
    }
    block5 : {
     $6_1 = $6_1 & 255 | 0;
     switch ($6_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break block5;
     default:
      break block2;
     };
    }
    $5_1 = ($6_1 | 0) == (45 | 0) ? -1 : 0;
    $7_1 = $7_1 + 1 | 0;
   }
   block8 : {
    block6 : {
     if (($2_1 | 16 | 0 | 0) != (16 | 0)) {
      break block6
     }
     if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (48 | 0)) {
      break block6
     }
     $9_1 = 1;
     block7 : {
      if (((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) & 223 | 0 | 0) != (88 | 0)) {
       break block7
      }
      $7_1 = $7_1 + 2 | 0;
      $10_1 = 16;
      break block8;
     }
     $7_1 = $7_1 + 1 | 0;
     $10_1 = $2_1 ? $2_1 : 8;
     break block8;
    }
    $10_1 = $2_1 ? $2_1 : 10;
    $9_1 = 0;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $10_1;
   $11$hi = i64toi32_i32$0;
   $2_1 = 0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   block11 : {
    label1 : while (1) {
     block9 : {
      $8_1 = HEAPU8[$7_1 >> 0] | 0;
      $6_1 = $8_1 + -48 | 0;
      if (($6_1 & 255 | 0) >>> 0 < 10 >>> 0) {
       break block9
      }
      block10 : {
       if ((($8_1 + -97 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
        break block10
       }
       $6_1 = $8_1 + -87 | 0;
       break block9;
      }
      if ((($8_1 + -65 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
       break block11
      }
      $6_1 = $8_1 + -55 | 0;
     }
     if (($10_1 | 0) <= ($6_1 & 255 | 0 | 0)) {
      break block11
     }
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = 0;
     $1405($4_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
     $8_1 = 1;
     block12 : {
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break block12
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $13_1 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 255;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $105_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
      $105$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$2 = $13_1;
      i64toi32_i32$1 = $105$hi;
      i64toi32_i32$3 = $105_1;
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break block12
      }
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
      $9_1 = 1;
      $8_1 = $2_1;
     }
     $7_1 = $7_1 + 1 | 0;
     $2_1 = $8_1;
     continue label1;
    };
   }
   block13 : {
    if (!$1_1) {
     break block13
    }
    HEAP32[$1_1 >> 2] = $9_1 ? $7_1 : $0_1;
   }
   block16 : {
    block15 : {
     block14 : {
      if (!$2_1) {
       break block14
      }
      HEAP32[($990() | 0) >> 2] = 68;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $11_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $11$hi = i64toi32_i32$3;
      $5_1 = !($11_1 | i64toi32_i32$3 | 0) ? $5_1 : 0;
      i64toi32_i32$3 = i64toi32_i32$5;
      $12_1 = i64toi32_i32$2;
      $12$hi = i64toi32_i32$3;
      break block15;
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break block16
     }
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $11_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$3;
    }
    block17 : {
     i64toi32_i32$3 = $11$hi;
     if ($11_1) {
      break block17
     }
     if ($5_1) {
      break block17
     }
     HEAP32[($990() | 0) >> 2] = 68;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$4;
     break block3;
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = $12_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block16
    }
    HEAP32[($990() | 0) >> 2] = 68;
    break block3;
   }
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$4 >> 31 | 0;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $150$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $150$hi;
   i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$0 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$3 | 0;
 }
 
 function $1450($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1451($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$0 = $1449($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1452($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1449($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $1453($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $10_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $11$hi = 0, $11_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $12$hi = 0, i64toi32_i32$6 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $54_1 = 0, $54$hi = 0, $56$hi = 0, $64$hi = 0, $80$hi = 0, $101_1 = 0, $101$hi = 0, $103_1 = 0, $103$hi = 0, $141_1 = 0, $141$hi = 0, $145$hi = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  $7_1 = 65628;
  $8_1 = 48;
  $9_1 = 131112;
  $10_1 = 0;
  block1 : {
   block52 : {
    block38 : {
     block47 : {
      block45 : {
       block41 : {
        block40 : {
         block5 : {
          block22 : {
           block29 : {
            block39 : {
             block37 : {
              block44 : {
               block : {
                block19 : {
                 block36 : {
                  block18 : {
                   block35 : {
                    block17 : {
                     block34 : {
                      block48 : {
                       block33 : {
                        switch ($2_1 + -37 | 0 | 0) {
                        case 60:
                         $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 <= 6 >>> 0) {
                          break block37
                         }
                         break block38;
                        case 28:
                         $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 > 6 >>> 0) {
                          break block38
                         }
                         $10_1 = $10_1 + 131079 | 0;
                         break block39;
                        case 61:
                        case 67:
                         $10_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 > 11 >>> 0) {
                          break block38
                         }
                         $10_1 = $10_1 + 131086 | 0;
                         break block39;
                        case 29:
                         $10_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 > 11 >>> 0) {
                          break block38
                         }
                         $10_1 = $10_1 + 131098 | 0;
                         break block39;
                        case 30:
                         i64toi32_i32$2 = $3_1;
                         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
                         i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
                         i64toi32_i32$2 = i64toi32_i32$0;
                         i64toi32_i32$0 = 0;
                         i64toi32_i32$3 = 1900;
                         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                         }
                         i64toi32_i32$2 = 0;
                         i64toi32_i32$2 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 100 | 0, i64toi32_i32$2 | 0) | 0;
                         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$5;
                         break block40;
                        case 64:
                         $8_1 = 95;
                        case 63:
                         i64toi32_i32$1 = $3_1;
                         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
                         i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
                         $11_1 = i64toi32_i32$5;
                         $11$hi = i64toi32_i32$2;
                         break block41;
                        case 33:
                         $7_1 = 66378;
                         break block5;
                        case 34:
                        case 66:
                         i64toi32_i32$1 = $3_1;
                         i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
                         i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
                         $12_1 = i64toi32_i32$2;
                         $12$hi = i64toi32_i32$5;
                         i64toi32_i32$1 = i64toi32_i32$2;
                         i64toi32_i32$2 = 0;
                         i64toi32_i32$3 = 1900;
                         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
                         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                         }
                         $11_1 = i64toi32_i32$0;
                         $11$hi = i64toi32_i32$4;
                         block43 : {
                          block42 : {
                           $10_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                           if (($10_1 | 0) > (2 | 0)) {
                            break block42
                           }
                           $54_1 = i64toi32_i32$0;
                           $54$hi = i64toi32_i32$4;
                           i64toi32_i32$4 = $12$hi;
                           i64toi32_i32$5 = $12_1;
                           i64toi32_i32$1 = 0;
                           i64toi32_i32$3 = 1899;
                           i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                           i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                           }
                           $56$hi = i64toi32_i32$0;
                           i64toi32_i32$1 = ($1454($3_1 | 0) | 0 | 0) == (1 | 0);
                           i64toi32_i32$0 = $54$hi;
                           i64toi32_i32$5 = $56$hi;
                           i64toi32_i32$3 = i64toi32_i32$1 ? $54_1 : i64toi32_i32$2;
                           i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$5;
                           $11_1 = i64toi32_i32$3;
                           $11$hi = i64toi32_i32$4;
                           break block43;
                          }
                          if ($10_1 >>> 0 < 361 >>> 0) {
                           break block43
                          }
                          i64toi32_i32$4 = $12$hi;
                          i64toi32_i32$1 = $12_1;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$0 = 1901;
                          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                          i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                          }
                          $64$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $11$hi;
                          i64toi32_i32$3 = ($1454($3_1 | 0) | 0 | 0) == (1 | 0);
                          i64toi32_i32$2 = $64$hi;
                          i64toi32_i32$1 = $11$hi;
                          i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : $11_1;
                          i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
                          $11_1 = i64toi32_i32$0;
                          $11$hi = i64toi32_i32$4;
                         }
                         $8_1 = 48;
                         if (($2_1 | 0) == (103 | 0)) {
                          break block44
                         }
                         break block45;
                        case 35:
                         i64toi32_i32$3 = $3_1;
                         i64toi32_i32$4 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                         i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
                         $11_1 = i64toi32_i32$4;
                         $11$hi = i64toi32_i32$0;
                         break block40;
                        case 36:
                         $8_1 = 48;
                         $10_1 = 2;
                         block46 : {
                          $3_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                          if ($3_1) {
                           break block46
                          }
                          i64toi32_i32$0 = 0;
                          $11_1 = 12;
                          $11$hi = i64toi32_i32$0;
                          break block47;
                         }
                         i64toi32_i32$4 = $3_1;
                         i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
                         $11_1 = i64toi32_i32$4;
                         $11$hi = i64toi32_i32$0;
                         i64toi32_i32$3 = i64toi32_i32$4;
                         i64toi32_i32$4 = -1;
                         i64toi32_i32$2 = -12;
                         i64toi32_i32$1 = $3_1 + i64toi32_i32$2 | 0;
                         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
                         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
                          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                         }
                         $80$hi = i64toi32_i32$5;
                         i64toi32_i32$5 = $11$hi;
                         i64toi32_i32$4 = ($3_1 | 0) > (12 | 0);
                         i64toi32_i32$5 = $80$hi;
                         i64toi32_i32$3 = $11$hi;
                         i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : $11_1;
                         i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$3;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$0;
                         break block47;
                        case 69:
                         i64toi32_i32$2 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
                         i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$0;
                         $8_1 = 48;
                         $10_1 = 3;
                         break block47;
                        case 72:
                         i64toi32_i32$2 = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
                         i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$0;
                         break block40;
                        case 40:
                         i64toi32_i32$4 = $3_1;
                         i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                         i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                         $11_1 = i64toi32_i32$0;
                         $11$hi = i64toi32_i32$2;
                         break block40;
                        case 73:
                         HEAP32[$1_1 >> 2] = 1;
                         $10_1 = 67311;
                         break block1;
                        case 75:
                         $10_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) > (11 | 0) ? 131111 : 131110;
                         break block39;
                        case 45:
                         $7_1 = 66456;
                         break block5;
                        case 78:
                         i64toi32_i32$2 = $1443($3_1 | 0) | 0;
                         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                         $101_1 = i64toi32_i32$2;
                         $101$hi = i64toi32_i32$0;
                         i64toi32_i32$4 = $3_1;
                         i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
                         i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                         $103_1 = i64toi32_i32$0;
                         $103$hi = i64toi32_i32$2;
                         i64toi32_i32$2 = $101$hi;
                         i64toi32_i32$4 = $101_1;
                         i64toi32_i32$0 = $103$hi;
                         i64toi32_i32$5 = $103_1;
                         i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
                         i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
                         i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                         i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
                         $11_1 = i64toi32_i32$3;
                         $11$hi = i64toi32_i32$1;
                         break block48;
                        case 46:
                         i64toi32_i32$2 = $3_1;
                         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                         i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                         $11_1 = i64toi32_i32$1;
                         $11$hi = i64toi32_i32$4;
                         break block40;
                        case 79:
                         HEAP32[$1_1 >> 2] = 1;
                         $10_1 = 67313;
                         break block1;
                        case 47:
                         $7_1 = 66437;
                         break block5;
                        case 80:
                         $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                         i64toi32_i32$1 = $10_1 ? $10_1 : 7;
                         i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                         $11_1 = i64toi32_i32$1;
                         $11$hi = i64toi32_i32$4;
                         break block48;
                        case 48:
                         i64toi32_i32$4 = 0;
                         $11_1 = ((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) - (HEAP32[($3_1 + 24 | 0) >> 2] | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
                         $11$hi = i64toi32_i32$4;
                         break block40;
                        case 50:
                         i64toi32_i32$4 = 0;
                         $11_1 = ((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) - ((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 6 | 0) >>> 0) % (7 >>> 0) | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
                         $11$hi = i64toi32_i32$4;
                         break block40;
                        case 49:
                         i64toi32_i32$4 = 0;
                         $11_1 = $1454($3_1 | 0) | 0;
                         $11$hi = i64toi32_i32$4;
                         break block40;
                        case 0:
                         break block;
                        case 51:
                         break block17;
                        case 52:
                         break block18;
                        case 53:
                         break block19;
                        case 62:
                         break block22;
                        case 77:
                         break block29;
                        case 82:
                         break block33;
                        case 83:
                         break block34;
                        case 84:
                         break block35;
                        case 85:
                         break block36;
                        case 31:
                         break block5;
                        default:
                         break block1;
                        };
                       }
                       i64toi32_i32$2 = $3_1;
                       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
                       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
                       $11_1 = i64toi32_i32$4;
                       $11$hi = i64toi32_i32$1;
                      }
                      $8_1 = 48;
                      $10_1 = 1;
                      break block47;
                     }
                     $9_1 = 131113;
                     break block22;
                    }
                    $9_1 = 131114;
                    break block22;
                   }
                   i64toi32_i32$2 = $3_1;
                   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
                   i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                   i64toi32_i32$2 = i64toi32_i32$1;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$5 = 1900;
                   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
                   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
                   }
                   i64toi32_i32$2 = 0;
                   i64toi32_i32$2 = __wasm_i64_srem(i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, 100 | 0, i64toi32_i32$2 | 0) | 0;
                   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                   $11_1 = i64toi32_i32$2;
                   $11$hi = i64toi32_i32$3;
                   $141_1 = i64toi32_i32$2;
                   $141$hi = i64toi32_i32$3;
                   i64toi32_i32$4 = i64toi32_i32$2;
                   i64toi32_i32$2 = 0;
                   i64toi32_i32$5 = 63;
                   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
                   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                    i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
                    $34_1 = i64toi32_i32$3 >> i64toi32_i32$1 | 0;
                   } else {
                    i64toi32_i32$2 = i64toi32_i32$3 >> i64toi32_i32$1 | 0;
                    $34_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
                   }
                   $11_1 = $34_1;
                   $11$hi = i64toi32_i32$2;
                   i64toi32_i32$2 = $141$hi;
                   i64toi32_i32$3 = $141_1;
                   i64toi32_i32$4 = $11$hi;
                   i64toi32_i32$5 = $11_1;
                   i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
                   $145$hi = i64toi32_i32$4;
                   i64toi32_i32$4 = $11$hi;
                   i64toi32_i32$4 = $145$hi;
                   i64toi32_i32$2 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
                   i64toi32_i32$3 = $11$hi;
                   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                   i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
                   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
                   i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
                   $11_1 = i64toi32_i32$1;
                   $11$hi = i64toi32_i32$0;
                   break block40;
                  }
                  i64toi32_i32$4 = $3_1;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
                  i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                  $12_1 = i64toi32_i32$0;
                  $12$hi = i64toi32_i32$2;
                  i64toi32_i32$4 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$5 = 1900;
                  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
                  }
                  $11_1 = i64toi32_i32$3;
                  $11$hi = i64toi32_i32$1;
                  block49 : {
                   i64toi32_i32$1 = $12$hi;
                   i64toi32_i32$2 = $12_1;
                   i64toi32_i32$4 = 0;
                   i64toi32_i32$5 = 8100;
                   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
                    $35_1 = 1
                   } else {
                    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
                     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                      $36_1 = 0
                     } else {
                      $36_1 = 1
                     }
                     $37_1 = $36_1;
                    } else {
                     $37_1 = 0
                    }
                    $35_1 = $37_1;
                   }
                   if ($35_1) {
                    break block49
                   }
                   $8_1 = 48;
                   break block45;
                  }
                  i64toi32_i32$2 = $11$hi;
                  i64toi32_i32$1 = $6_1;
                  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $11_1;
                  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$2;
                  HEAP32[$1_1 >> 2] = $1444($0_1 | 0, 100 | 0, 66303 | 0, i64toi32_i32$1 + 48 | 0 | 0) | 0;
                  $10_1 = $0_1;
                  break block1;
                 }
                 block50 : {
                  if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                   break block50
                  }
                  HEAP32[$1_1 >> 2] = 0;
                  $10_1 = 67314;
                  break block1;
                 }
                 $10_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
                 $3_1 = ($10_1 | 0) / (3600 | 0) | 0;
                 HEAP32[($6_1 + 64 | 0) >> 2] = Math_imul($3_1, 100) + (((($10_1 - Math_imul($3_1, 3600) | 0) << 16 >> 16 | 0) / (60 | 0) | 0) << 16 >> 16) | 0;
                 HEAP32[$1_1 >> 2] = $1444($0_1 | 0, 100 | 0, 66309 | 0, $6_1 + 64 | 0 | 0) | 0;
                 $10_1 = $0_1;
                 break block1;
                }
                block51 : {
                 if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                  break block51
                 }
                 HEAP32[$1_1 >> 2] = 0;
                 $10_1 = 67314;
                 break block1;
                }
                $10_1 = $1446($3_1 | 0) | 0;
                break block52;
               }
               HEAP32[$1_1 >> 2] = 1;
               $10_1 = 67238;
               break block1;
              }
              i64toi32_i32$2 = $11$hi;
              i64toi32_i32$1 = 0;
              i64toi32_i32$1 = __wasm_i64_srem($11_1 | 0, i64toi32_i32$2 | 0, 100 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              $11_1 = i64toi32_i32$1;
              $11$hi = i64toi32_i32$2;
              break block41;
             }
             $10_1 = $10_1 | 131072 | 0;
            }
            $10_1 = $1447($10_1 | 0, $4_1 | 0) | 0;
            break block52;
           }
           $9_1 = 131115;
          }
          $7_1 = $1447($9_1 | 0, $4_1 | 0) | 0;
         }
         $10_1 = $1455($0_1 | 0, 100 | 0, $7_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
         HEAP32[$1_1 >> 2] = $10_1;
         $10_1 = $10_1 ? $0_1 : 0;
         break block1;
        }
        $8_1 = 48;
       }
       $10_1 = 2;
       break block47;
      }
      $10_1 = 4;
     }
     block54 : {
      block53 : {
       $3_1 = $5_1 ? $5_1 : $8_1;
       if (($3_1 | 0) == (95 | 0)) {
        break block53
       }
       if (($3_1 | 0) != (45 | 0)) {
        break block54
       }
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$1 = $6_1;
       HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $11_1;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$2;
       HEAP32[$1_1 >> 2] = $1444($0_1 | 0, 100 | 0, 66304 | 0, i64toi32_i32$1 + 16 | 0 | 0) | 0;
       $10_1 = $0_1;
       break block1;
      }
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$1 = $6_1;
      HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $11_1;
      HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $10_1;
      HEAP32[$1_1 >> 2] = $1444($0_1 | 0, 100 | 0, 66297 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
      $10_1 = $0_1;
      break block1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
     HEAP32[i64toi32_i32$1 >> 2] = $10_1;
     HEAP32[$1_1 >> 2] = $1444($0_1 | 0, 100 | 0, 66290 | 0, i64toi32_i32$1 | 0) | 0;
     $10_1 = $0_1;
     break block1;
    }
    $10_1 = 67229;
   }
   HEAP32[$1_1 >> 2] = $987($10_1 | 0) | 0;
  }
  global$0 = $6_1 + 80 | 0;
  return $10_1 | 0;
 }
 
 function $1454($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $14_1 = 0;
  $1_1 = 53;
  block1 : {
   block : {
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    $14_1 = ((($2_1 - ((($3_1 + 6 | 0) >>> 0) % (7 >>> 0) | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
    $3_1 = $3_1 - $2_1 | 0;
    $2_1 = $14_1 + (((($3_1 + 369 | 0) >>> 0) % (7 >>> 0) | 0) >>> 0 < 3 >>> 0) | 0;
    if (($2_1 | 0) == (53 | 0)) {
     break block
    }
    $1_1 = $2_1;
    if ($2_1) {
     break block1
    }
    $1_1 = 52;
    block2 : {
     switch (((($3_1 + 6 | 0) >>> 0) % (7 >>> 0) | 0) + -4 | 0 | 0) {
     case 1:
      if (!($1456(((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) % (400 | 0) | 0) + -1 | 0 | 0) | 0)) {
       break block1
      }
      break;
     case 0:
      break block2;
     default:
      break block1;
     };
    }
    return 53 | 0;
   }
   block5 : {
    switch (((($3_1 + 371 | 0) >>> 0) % (7 >>> 0) | 0) + -3 | 0 | 0) {
    case 0:
     if ($1456(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0) {
      break block1
     }
     break;
    case 1:
     break block1;
    default:
     break block5;
    };
   }
   $1_1 = 1;
  }
  return $1_1 | 0;
 }
 
 function $1455($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $5_1 = 0, $8_1 = 0, $12_1 = 0, $11_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  block1 : {
   block : {
    if ($1_1) {
     break block
    }
    $6_1 = 0;
    break block1;
   }
   $7_1 = 0;
   block4 : {
    block14 : {
     label3 : while (1) {
      block8 : {
       block6 : {
        block5 : {
         block3 : {
          block2 : {
           $6_1 = HEAPU8[$2_1 >> 0] | 0;
           if (($6_1 | 0) == (37 | 0)) {
            break block2
           }
           if ($6_1) {
            break block3
           }
           $6_1 = $7_1;
           break block4;
          }
          $8_1 = 0;
          $9_1 = 1;
          block7 : {
           $10_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
           switch ($10_1 + -45 | 0 | 0) {
           case 0:
           case 3:
            break block5;
           case 1:
           case 2:
            break block6;
           default:
            break block7;
           };
          }
          if (($10_1 | 0) == (95 | 0)) {
           break block5
          }
          if ($10_1) {
           break block6
          }
         }
         HEAP8[($0_1 + $7_1 | 0) >> 0] = $6_1;
         $7_1 = $7_1 + 1 | 0;
         break block8;
        }
        $8_1 = $10_1;
        $10_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
        $9_1 = 2;
       }
       block10 : {
        block9 : {
         $11_1 = $10_1 & 255 | 0;
         $9_1 = ($2_1 + $9_1 | 0) + (($11_1 | 0) == (43 | 0)) | 0;
         if (((HEAP8[$9_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
          break block9
         }
         $2_1 = $1452($9_1 | 0, $5_1 + 12 | 0 | 0, 10 | 0) | 0;
         $10_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
         break block10;
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $9_1;
        $2_1 = 0;
        $10_1 = $9_1;
       }
       $12_1 = 0;
       block11 : {
        $6_1 = HEAPU8[$10_1 >> 0] | 0;
        $13_1 = $6_1 + -67 | 0;
        if ($13_1 >>> 0 > 22 >>> 0) {
         break block11
        }
        if (!((1 << $13_1 | 0) & 4194329 | 0)) {
         break block11
        }
        $12_1 = $2_1;
        if ($2_1) {
         break block11
        }
        $12_1 = ($10_1 | 0) != ($9_1 | 0);
       }
       block13 : {
        block12 : {
         if (($6_1 | 0) == (79 | 0)) {
          break block12
         }
         if (($6_1 | 0) == (69 | 0)) {
          break block12
         }
         $2_1 = $10_1;
         break block13;
        }
        $2_1 = $10_1 + 1 | 0;
        $6_1 = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
       }
       $8_1 = $1453($5_1 + 16 | 0 | 0, $5_1 + 124 | 0 | 0, $6_1 << 24 >> 24 | 0, $3_1 | 0, $4_1 | 0, $8_1 | 0) | 0;
       if (!$8_1) {
        break block14
       }
       block16 : {
        block15 : {
         if ($12_1) {
          break block15
         }
         $9_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
         break block16;
        }
        block19 : {
         block17 : {
          block18 : {
           $6_1 = HEAPU8[$8_1 >> 0] | 0;
           switch ($6_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break block17;
           default:
            break block18;
           };
          }
          $9_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
          break block19;
         }
         $9_1 = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + -1 | 0;
         $6_1 = HEAPU8[($8_1 + 1 | 0) >> 0] | 0;
         $8_1 = $8_1 + 1 | 0;
        }
        block20 : {
         if (($6_1 & 255 | 0 | 0) != (48 | 0)) {
          break block20
         }
         label : while (1) {
          $6_1 = HEAP8[($8_1 + 1 | 0) >> 0] | 0;
          if (($6_1 + -48 | 0) >>> 0 > 9 >>> 0) {
           break block20
          }
          $8_1 = $8_1 + 1 | 0;
          $9_1 = $9_1 + -1 | 0;
          if (($6_1 | 0) == (48 | 0)) {
           continue label
          }
          break label;
         };
        }
        HEAP32[($5_1 + 124 | 0) >> 2] = $9_1;
        $6_1 = 0;
        label1 : while (1) {
         $10_1 = $6_1;
         $6_1 = $6_1 + 1 | 0;
         if (((HEAP8[($8_1 + $10_1 | 0) >> 0] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
          continue label1
         }
         break label1;
        };
        $6_1 = $12_1 >>> 0 > $9_1 >>> 0 ? $12_1 : $9_1;
        block23 : {
         block22 : {
          block21 : {
           if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) >= (-1900 | 0)) {
            break block21
           }
           $10_1 = 45;
           break block22;
          }
          if (($11_1 | 0) != (43 | 0)) {
           break block23
          }
          if ((($6_1 - $9_1 | 0) + $10_1 | 0) >>> 0 < ((HEAPU8[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 0] | 0 | 0) == (67 | 0) ? 3 : 5) >>> 0) {
           break block23
          }
          $10_1 = 43;
         }
         HEAP8[($0_1 + $7_1 | 0) >> 0] = $10_1;
         $6_1 = $6_1 + -1 | 0;
         $7_1 = $7_1 + 1 | 0;
        }
        if ($6_1 >>> 0 <= $9_1 >>> 0) {
         break block16
        }
        if ($7_1 >>> 0 >= $1_1 >>> 0) {
         break block16
        }
        label2 : while (1) {
         HEAP8[($0_1 + $7_1 | 0) >> 0] = 48;
         $7_1 = $7_1 + 1 | 0;
         $6_1 = $6_1 + -1 | 0;
         if ($6_1 >>> 0 <= $9_1 >>> 0) {
          break block16
         }
         if ($7_1 >>> 0 < $1_1 >>> 0) {
          continue label2
         }
         break label2;
        };
       }
       $6_1 = $1_1 - $7_1 | 0;
       $6_1 = $9_1 >>> 0 < $6_1 >>> 0 ? $9_1 : $6_1;
       HEAP32[($5_1 + 124 | 0) >> 2] = $6_1;
       $985($0_1 + $7_1 | 0 | 0, $8_1 | 0, $6_1 | 0) | 0;
       $7_1 = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + $7_1 | 0;
      }
      $2_1 = $2_1 + 1 | 0;
      if ($7_1 >>> 0 < $1_1 >>> 0) {
       continue label3
      }
      break label3;
     };
    }
    $7_1 = ($7_1 | 0) == ($1_1 | 0) ? $1_1 + -1 | 0 : $7_1;
    $6_1 = 0;
   }
   HEAP8[($0_1 + $7_1 | 0) >> 0] = 0;
  }
  global$0 = $5_1 + 128 | 0;
  return $6_1 | 0;
 }
 
 function $1456($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   $0_1 = ($0_1 | 0) > (2147481747 | 0) ? $0_1 + -2e3 | 0 : $0_1;
   if (!($0_1 & 3 | 0)) {
    break block
   }
   return 0 | 0;
  }
  block1 : {
   $0_1 = $0_1 + 1900 | 0;
   if (!(($0_1 | 0) % (100 | 0) | 0)) {
    break block1
   }
   return 1 | 0;
  }
  return !(($0_1 | 0) % (400 | 0) | 0) | 0;
 }
 
 function $1457($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $1423($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1458($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  block : {
   $2_1 = $1435(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break block
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $1032($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break block
   }
   $4_1 = $1435($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1459($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1460(104100 | 0) | 0;
  block : {
   label : while (1) {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
     break block
    }
    $1461(104124 | 0, 104100 | 0) | 0;
    continue label;
   };
  }
  block1 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break block1
   }
   $1462($0_1 | 0);
   $1463(104100 | 0) | 0;
   FUNCTION_TABLE[$2_1 | 0]($1_1);
   $1460(104100 | 0) | 0;
   $1464($0_1 | 0);
   $1463(104100 | 0) | 0;
   $1465(104124 | 0) | 0;
   return;
  }
  $1463(104100 | 0) | 0;
 }
 
 function $1460($0_1) {
  $0_1 = $0_1 | 0;
  return $1001($0_1 | 0) | 0 | 0;
 }
 
 function $1461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1003($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1462($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1;
 }
 
 function $1463($0_1) {
  $0_1 = $0_1 | 0;
  return $1002($0_1 | 0) | 0 | 0;
 }
 
 function $1464($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = -1;
 }
 
 function $1465($0_1) {
  $0_1 = $0_1 | 0;
  return $1004($0_1 | 0) | 0 | 0;
 }
 
 function $1466($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($1430($0_1 | 0) | 0)) {
    break block
   }
   $1034($0_1 | 0);
  }
 }
 
 function $1467($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 4 | 0;
   if (HEAP32[$2_1 >> 2] | 0) {
    continue label
   }
   break label;
  };
  return ($2_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1468() {
  return 82068 | 0;
 }
 
 function $1469() {
  return 83616 | 0;
 }
 
 function $1470($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  block : {
   $7_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$7_1) {
    break block
   }
   if (!$2_1) {
    break block
   }
   $8_1 = $0_1 ? $3_1 : 0;
   $6_1 = 0;
   label : while (1) {
    block1 : {
     $3_1 = $1013(($8_1 >>> 0 < 4 >>> 0 ? $5_1 + 12 | 0 : $0_1) | 0, HEAP32[$7_1 >> 2] | 0 | 0, 0 | 0) | 0;
     if (($3_1 | 0) != (-1 | 0)) {
      break block1
     }
     $6_1 = -1;
     break block;
    }
    block3 : {
     block2 : {
      if ($0_1) {
       break block2
      }
      $0_1 = 0;
      break block3;
     }
     block4 : {
      if ($8_1 >>> 0 > 3 >>> 0) {
       break block4
      }
      if ($8_1 >>> 0 < $3_1 >>> 0) {
       break block
      }
      $985($0_1 | 0, $5_1 + 12 | 0 | 0, $3_1 | 0) | 0;
     }
     $8_1 = $8_1 - $3_1 | 0;
     $0_1 = $0_1 + $3_1 | 0;
    }
    block5 : {
     if (HEAP32[$7_1 >> 2] | 0) {
      break block5
     }
     $7_1 = 0;
     break block;
    }
    $6_1 = $3_1 + $6_1 | 0;
    $7_1 = $7_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label
    }
    break label;
   };
  }
  block6 : {
   if (!$0_1) {
    break block6
   }
   HEAP32[$1_1 >> 2] = $7_1;
  }
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1471($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  block6 : {
   block35 : {
    block33 : {
     block17 : {
      block22 : {
       block13 : {
        block9 : {
         block10 : {
          block8 : {
           block2 : {
            block3 : {
             block : {
              if (!$3_1) {
               break block
              }
              $5_1 = HEAP32[$3_1 >> 2] | 0;
              if (!$5_1) {
               break block
              }
              block1 : {
               if ($0_1) {
                break block1
               }
               $3_1 = $2_1;
               break block2;
              }
              HEAP32[$3_1 >> 2] = 0;
              $3_1 = $2_1;
              break block3;
             }
             block5 : {
              block4 : {
               if (HEAP32[(HEAP32[(($974() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
                break block4
               }
               if (!$0_1) {
                break block5
               }
               if (!$2_1) {
                break block6
               }
               $5_1 = $2_1;
               block7 : {
                label : while (1) {
                 $3_1 = HEAP8[$4_1 >> 0] | 0;
                 if (!$3_1) {
                  break block7
                 }
                 HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                 $0_1 = $0_1 + 4 | 0;
                 $4_1 = $4_1 + 1 | 0;
                 $5_1 = $5_1 + -1 | 0;
                 if ($5_1) {
                  continue label
                 }
                 break block6;
                };
               }
               HEAP32[$0_1 >> 2] = 0;
               HEAP32[$1_1 >> 2] = 0;
               return $2_1 - $5_1 | 0 | 0;
              }
              $3_1 = $2_1;
              if (!$0_1) {
               break block8
              }
              $6_1 = 0;
              break block9;
             }
             return $987($4_1 | 0) | 0 | 0;
            }
            $6_1 = 1;
            break block9;
           }
           $6_1 = 0;
           break block10;
          }
          $6_1 = 1;
         }
         label1 : while (1) {
          block12 : {
           switch ($6_1 | 0) {
           case 0:
            $6_1 = (HEAPU8[$4_1 >> 0] | 0) >>> 3 | 0;
            if (($6_1 + -16 | 0 | (($5_1 >> 26 | 0) + $6_1 | 0) | 0) >>> 0 > 7 >>> 0) {
             break block13
            }
            $6_1 = $4_1 + 1 | 0;
            block15 : {
             block14 : {
              if ($5_1 & 33554432 | 0) {
               break block14
              }
              $4_1 = $6_1;
              break block15;
             }
             block16 : {
              if ((HEAP8[$6_1 >> 0] | 0 | 0) < (-64 | 0)) {
               break block16
              }
              $4_1 = $4_1 + -1 | 0;
              break block17;
             }
             $6_1 = $4_1 + 2 | 0;
             block18 : {
              if ($5_1 & 524288 | 0) {
               break block18
              }
              $4_1 = $6_1;
              break block15;
             }
             block19 : {
              if ((HEAP8[$6_1 >> 0] | 0 | 0) < (-64 | 0)) {
               break block19
              }
              $4_1 = $4_1 + -1 | 0;
              break block17;
             }
             $4_1 = $4_1 + 3 | 0;
            }
            $3_1 = $3_1 + -1 | 0;
            $6_1 = 1;
            continue label1;
           default:
            break block12;
           };
          }
          label3 : while (1) {
           block20 : {
            $5_1 = HEAP8[$4_1 >> 0] | 0;
            if (($5_1 | 0) < (1 | 0)) {
             break block20
            }
            if ($4_1 & 3 | 0) {
             break block20
            }
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
             break block20
            }
            label2 : while (1) {
             $3_1 = $3_1 + -4 | 0;
             $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             $6_1 = $4_1 + 4 | 0;
             $4_1 = $6_1;
             if (!(($5_1 | ($5_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
              continue label2
             }
             break label2;
            };
           }
           block21 : {
            if (($5_1 << 24 >> 24 | 0) < (1 | 0)) {
             break block21
            }
            $3_1 = $3_1 + -1 | 0;
            $4_1 = $4_1 + 1 | 0;
            continue label3;
           }
           break label3;
          };
          $6_1 = ($5_1 & 255 | 0) + -194 | 0;
          if ($6_1 >>> 0 > 50 >>> 0) {
           break block22
          }
          $4_1 = $4_1 + 1 | 0;
          $5_1 = HEAP32[(($6_1 << 2 | 0) + 80608 | 0) >> 2] | 0;
          $6_1 = 0;
          continue label1;
         };
        }
        label6 : while (1) {
         block24 : {
          switch ($6_1 | 0) {
          case 0:
           if (!$3_1) {
            break block6
           }
           block25 : {
            label5 : while (1) {
             $6_1 = HEAPU8[$4_1 >> 0] | 0;
             $5_1 = $6_1 << 24 >> 24;
             if (($5_1 | 0) <= (0 | 0)) {
              break block25
             }
             block26 : {
              if ($3_1 >>> 0 < 5 >>> 0) {
               break block26
              }
              if ($4_1 & 3 | 0) {
               break block26
              }
              block27 : {
               label4 : while (1) {
                $5_1 = HEAP32[$4_1 >> 2] | 0;
                if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
                 break block27
                }
                HEAP32[$0_1 >> 2] = $5_1 & 255 | 0;
                HEAP32[($0_1 + 4 | 0) >> 2] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                HEAP32[($0_1 + 8 | 0) >> 2] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
                HEAP32[($0_1 + 12 | 0) >> 2] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
                $0_1 = $0_1 + 16 | 0;
                $4_1 = $4_1 + 4 | 0;
                $3_1 = $3_1 + -4 | 0;
                if ($3_1 >>> 0 > 4 >>> 0) {
                 continue label4
                }
                break label4;
               };
               $5_1 = HEAPU8[$4_1 >> 0] | 0;
              }
              $6_1 = $5_1 & 255 | 0;
              if (($5_1 << 24 >> 24 | 0) < (1 | 0)) {
               break block25
              }
             }
             HEAP32[$0_1 >> 2] = $6_1;
             $0_1 = $0_1 + 4 | 0;
             $4_1 = $4_1 + 1 | 0;
             $3_1 = $3_1 + -1 | 0;
             if (!$3_1) {
              break block6
             }
             continue label5;
            };
           }
           $6_1 = $6_1 + -194 | 0;
           if ($6_1 >>> 0 > 50 >>> 0) {
            break block22
           }
           $4_1 = $4_1 + 1 | 0;
           $5_1 = HEAP32[(($6_1 << 2 | 0) + 80608 | 0) >> 2] | 0;
           $6_1 = 1;
           continue label6;
          default:
           break block24;
          };
         }
         $7_1 = HEAPU8[$4_1 >> 0] | 0;
         $6_1 = $7_1 >>> 3 | 0;
         if (($6_1 + -16 | 0 | ($6_1 + ($5_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
          break block13
         }
         $8_1 = $4_1 + 1 | 0;
         block32 : {
          block30 : {
           block29 : {
            block28 : {
             $6_1 = $7_1 + -128 | 0 | ($5_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break block28
             }
             $4_1 = $8_1;
             break block29;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break block30
            }
            $8_1 = $4_1 + 2 | 0;
            $9_1 = $6_1 << 6 | 0;
            $6_1 = $7_1 | $9_1 | 0;
            block31 : {
             if (($9_1 | 0) <= (-1 | 0)) {
              break block31
             }
             $4_1 = $8_1;
             break block29;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break block30
            }
            $4_1 = $4_1 + 3 | 0;
            $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
           }
           HEAP32[$0_1 >> 2] = $6_1;
           $3_1 = $3_1 + -1 | 0;
           $0_1 = $0_1 + 4 | 0;
           break block32;
          }
          HEAP32[($990() | 0) >> 2] = 25;
          $4_1 = $4_1 + -1 | 0;
          break block33;
         }
         $6_1 = 0;
         continue label6;
        };
       }
       $4_1 = $4_1 + -1 | 0;
       if ($5_1) {
        break block17
       }
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
      }
      if ($5_1 & 255 | 0) {
       break block17
      }
      block34 : {
       if (!$0_1) {
        break block34
       }
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3_1 | 0 | 0;
     }
     HEAP32[($990() | 0) >> 2] = 25;
     if (!$0_1) {
      break block35
     }
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $4_1;
  return $2_1 | 0;
 }
 
 function $1472($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $8_1 = 0, $5_1 = 0, $10_1 = 0, $7_1 = 0, $6_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $3_1 = $0_1 ? $3_1 : 256;
  $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  block5 : {
   block2 : {
    block4 : {
     block : {
      if (!$6_1) {
       break block
      }
      if (!$3_1) {
       break block
      }
      label : while (1) {
       $9_1 = $2_1 >>> 2 | 0;
       block1 : {
        if ($2_1 >>> 0 > 131 >>> 0) {
         break block1
        }
        if ($9_1 >>> 0 >= $3_1 >>> 0) {
         break block1
        }
        $9_1 = $6_1;
        break block2;
       }
       $10_1 = $1471($7_1 | 0, $5_1 + 12 | 0 | 0, ($9_1 >>> 0 < $3_1 >>> 0 ? $9_1 : $3_1) | 0, $4_1 | 0) | 0;
       $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       block3 : {
        if (($10_1 | 0) != (-1 | 0)) {
         break block3
        }
        $3_1 = 0;
        $8_1 = -1;
        break block4;
       }
       $11_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0) ? 0 : $10_1;
       $3_1 = $3_1 - $11_1 | 0;
       $7_1 = $7_1 + ($11_1 << 2 | 0) | 0;
       $2_1 = $9_1 ? ($2_1 + $6_1 | 0) - $9_1 | 0 : 0;
       $8_1 = $10_1 + $8_1 | 0;
       if (!$9_1) {
        break block4
       }
       $6_1 = $9_1;
       if ($3_1) {
        continue label
       }
       break block4;
      };
     }
     $9_1 = $6_1;
    }
    if (!$9_1) {
     break block5
    }
   }
   if (!$3_1) {
    break block5
   }
   if (!$2_1) {
    break block5
   }
   $10_1 = $8_1;
   label1 : while (1) {
    block10 : {
     block9 : {
      block6 : {
       $8_1 = $1317($7_1 | 0, $9_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
       if (($8_1 + 2 | 0) >>> 0 > 2 >>> 0) {
        break block6
       }
       block8 : {
        switch ($8_1 + 1 | 0 | 0) {
        case 1:
         HEAP32[($5_1 + 12 | 0) >> 2] = 0;
         break block9;
        case 0:
         break block5;
        default:
         break block8;
        };
       }
       HEAP32[$4_1 >> 2] = 0;
       break block9;
      }
      $9_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + $8_1 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $9_1;
      $10_1 = $10_1 + 1 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       break block10
      }
     }
     $8_1 = $10_1;
     break block5;
    }
    $7_1 = $7_1 + 4 | 0;
    $2_1 = $2_1 - $8_1 | 0;
    $8_1 = $10_1;
    if ($2_1) {
     continue label1
    }
    break label1;
   };
  }
  block11 : {
   if (!$0_1) {
    break block11
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 1040 | 0;
  return $8_1 | 0;
 }
 
 function $1473() {
  return (HEAP32[(HEAP32[(($974() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
 }
 
 function $1474($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1317(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 104172) | 0) | 0 | 0;
 }
 
 function $1475($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $974() | 0;
  $2_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
  block : {
   if (!$0_1) {
    break block
   }
   HEAP32[($1_1 + 96 | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? 96008 : $0_1;
  }
  return (($2_1 | 0) == (96008 | 0) ? -1 : $2_1) | 0;
 }
 
 function $1476($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if (!$2_1) {
    break block
   }
   label : while (1) {
    block1 : {
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break block1
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label
    }
    break label;
   };
  }
  return 0 | 0;
 }
 
 function $1477($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1448($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1478($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1451($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1479($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1480($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = Math_fround($1417($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0));
  global$0 = $2_1 + 16 | 0;
  return Math_fround($3_1);
 }
 
 function $1480($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  i64toi32_i32$0 = 0;
  $1390($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $1410($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  block : {
   if (!$2_1) {
    break block
   }
   HEAP32[$2_1 >> 2] = ($1_1 + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 60 | 0) >> 2] | 0) | 0) | 0) + (HEAP32[($4_1 + 136 | 0) >> 2] | 0) | 0;
  }
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $1481($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1480($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = +$1047($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $1482($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $4$hi = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1480($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1483($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return Math_fround(Math_fround($1479($0_1 | 0, $1_1 | 0)));
 }
 
 function $1484($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return +(+$1481($0_1 | 0, $1_1 | 0));
 }
 
 function $1485($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1482($4_1 | 0, $1_1 | 0, $2_1 | 0);
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1486($0_1) {
  $0_1 = $0_1 | 0;
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $1487($0_1) {
  $0_1 = $0_1 | 0;
  return $2580($0_1 | 0) | 0 | 0;
 }
 
 function $1488($0_1) {
  $0_1 = $0_1 | 0;
  $1486($0_1 | 0) | 0;
  $2587($0_1 | 0, 8 | 0);
 }
 
 function $1489($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0;
  $5_1 = $1_1 + ($4_1 - $3_1 | 0) | 0;
  block1 : {
   block : {
    label : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break block
     }
     $6_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break block1
     }
     $7_1 = HEAP8[$1_1 >> 0] | 0;
     $8_1 = HEAP8[$3_1 >> 0] | 0;
     if (($7_1 | 0) < ($8_1 | 0)) {
      break block1
     }
     block2 : {
      if (($8_1 | 0) >= ($7_1 | 0)) {
       break block2
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label;
    };
   }
   $6_1 = ($5_1 | 0) != ($2_1 | 0);
  }
  return $6_1 | 0;
 }
 
 function $1490($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1491($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $1491($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1290($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $1492($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1492($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2296($0_1 | 0, $1_1 | 0, $2_1 | 0, $2295($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $1493($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $26_1 = 0, $28_1 = 0, $24_1 = 0;
  $3_1 = 0;
  label : while (1) {
   block : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break block
    }
    return $3_1 | 0;
   }
   $3_1 = ($3_1 << 4 | 0) + (HEAP8[$1_1 >> 0] | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 1 | 0;
   continue label;
  };
 }
 
 function $1494($0_1) {
  $0_1 = $0_1 | 0;
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $1495($0_1) {
  $0_1 = $0_1 | 0;
  $1494($0_1 | 0) | 0;
  $2587($0_1 | 0, 8 | 0);
 }
 
 function $1496($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  block1 : {
   block : {
    label : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break block
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break block1
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $7_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break block1
     }
     block2 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break block2
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $1497($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1498($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $1498($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1499($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $1500($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1499($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2300($2299($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1500($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2302($0_1 | 0, $1_1 | 0, $2_1 | 0, $2301($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $1501($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $26_1 = 0, $28_1 = 0, $24_1 = 0;
  $3_1 = 0;
  label : while (1) {
   block : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break block
    }
    return $3_1 | 0;
   }
   $3_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 4 | 0;
   continue label;
  };
 }
 
 function $1502($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  block4 : {
   block : {
    if (($1088($3_1 | 0) | 0) & 1 | 0) {
     break block
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    block3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break block4;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break block4;
     default:
      break block3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break block4;
   }
   $1293($6_1 | 0, $3_1 | 0);
   $1_1 = $1089($6_1 | 0) | 0;
   $1503($6_1 | 0) | 0;
   $1293($6_1 | 0, $3_1 | 0);
   $3_1 = $1504($6_1 | 0) | 0;
   $1503($6_1 | 0) | 0;
   $1505($6_1 | 0, $3_1 | 0);
   $1506($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($1507($6_1 + 28 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   label : while (1) {
    $3_1 = $2610($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label
    }
    break label;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1503($0_1) {
  $0_1 = $0_1 | 0;
  $2114(HEAP32[$0_1 >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $1504($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104584 | 0) | 0 | 0;
 }
 
 function $1505($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1507($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $17_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 124 | 0) >> 2] = $1_1;
  $8_1 = $1509($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 109;
  $9_1 = 0;
  $10_1 = $1510($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  block7 : {
   block6 : {
    block1 : {
     block : {
      if ($8_1 >>> 0 < 101 >>> 0) {
       break block
      }
      $11_1 = $1032($8_1 | 0) | 0;
      if (!$11_1) {
       break block1
      }
      $1511($10_1 | 0, $11_1 | 0);
     }
     $12_1 = $11_1;
     $1_1 = $2_1;
     label4 : while (1) {
      block2 : {
       if (($1_1 | 0) != ($3_1 | 0)) {
        break block2
       }
       $13_1 = 0;
       label1 : while (1) {
        block4 : {
         block3 : {
          if ($1090($0_1 | 0, $7_1 + 124 | 0 | 0) | 0) {
           break block3
          }
          if ($8_1) {
           break block4
          }
         }
         block5 : {
          if (!($1090($0_1 | 0, $7_1 + 124 | 0 | 0) | 0)) {
           break block5
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
         }
         label : while (1) {
          if (($2_1 | 0) == ($3_1 | 0)) {
           break block6
          }
          if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
           break block7
          }
          $11_1 = $11_1 + 1 | 0;
          $2_1 = $2_1 + 12 | 0;
          continue label;
         };
        }
        $14_1 = $1091($0_1 | 0) | 0;
        block8 : {
         if ($6_1) {
          break block8
         }
         $14_1 = $1512($4_1 | 0, $14_1 | 0) | 0;
        }
        $15_1 = $13_1 + 1 | 0;
        $16_1 = 0;
        $12_1 = $11_1;
        $1_1 = $2_1;
        label3 : while (1) {
         block9 : {
          if (($1_1 | 0) != ($3_1 | 0)) {
           break block9
          }
          $13_1 = $15_1;
          if (!($16_1 & 1 | 0)) {
           continue label1
          }
          $1093($0_1 | 0) | 0;
          $13_1 = $15_1;
          $12_1 = $11_1;
          $1_1 = $2_1;
          if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
           continue label1
          }
          label2 : while (1) {
           block10 : {
            if (($1_1 | 0) != ($3_1 | 0)) {
             break block10
            }
            $13_1 = $15_1;
            continue label1;
           }
           block11 : {
            if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
             break block11
            }
            if (($1210($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
             break block11
            }
            HEAP8[$12_1 >> 0] = 0;
            $9_1 = $9_1 + -1 | 0;
           }
           $12_1 = $12_1 + 1 | 0;
           $1_1 = $1_1 + 12 | 0;
           continue label2;
          };
         }
         block12 : {
          if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
           break block12
          }
          $17_1 = HEAP8[($1513($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
          block13 : {
           if ($6_1) {
            break block13
           }
           $17_1 = $1512($4_1 | 0, $17_1 | 0) | 0;
          }
          block15 : {
           block14 : {
            if (($14_1 | 0) != ($17_1 | 0)) {
             break block14
            }
            $16_1 = 1;
            if (($1210($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
             break block12
            }
            HEAP8[$12_1 >> 0] = 2;
            $16_1 = 1;
            $9_1 = $9_1 + 1 | 0;
            break block15;
           }
           HEAP8[$12_1 >> 0] = 0;
          }
          $8_1 = $8_1 + -1 | 0;
         }
         $12_1 = $12_1 + 1 | 0;
         $1_1 = $1_1 + 12 | 0;
         continue label3;
        };
       };
      }
      $17_1 = $1514($1_1 | 0) | 0;
      HEAP8[$12_1 >> 0] = $17_1 ? 2 : 1;
      $12_1 = $12_1 + 1 | 0;
      $1_1 = $1_1 + 12 | 0;
      $9_1 = $9_1 + $17_1 | 0;
      $8_1 = $8_1 - $17_1 | 0;
      continue label4;
     };
    }
    $2595();
    wasm2js_trap();
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
  }
  $1515($10_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $2_1 | 0;
 }
 
 function $1508($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2088(HEAP32[$0_1 >> 2] | 0 | 0, $2048($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1509($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2565($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1510($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $2559($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1511($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($2560($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2560($0_1 | 0) | 0) >> 2] = $1_1;
  block : {
   if (!$2_1) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($2561($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1512($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1209($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $1514($0_1) {
  $0_1 = $0_1 | 0;
  return !($1210($0_1 | 0) | 0) | 0;
 }
 
 function $1515($0_1) {
  $0_1 = $0_1 | 0;
  $1511($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1516($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1517($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1517($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1519($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1520($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1522($1091($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1093($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1523($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1518($0_1) {
  $0_1 = $0_1 | 0;
  block2 : {
   block : {
    $0_1 = ($1088($0_1 | 0) | 0) & 74 | 0;
    if (!$0_1) {
     break block
    }
    block1 : {
     if (($0_1 | 0) != (64 | 0)) {
      break block1
     }
     return 8 | 0;
    }
    if (($0_1 | 0) != (8 | 0)) {
     break block2
    }
    return 16 | 0;
   }
   return 0 | 0;
  }
  return 10 | 0;
 }
 
 function $1519($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1601($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1520($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1293($3_1 + 12 | 0 | 0, $1_1 | 0);
  $1_1 = $1504($3_1 + 12 | 0 | 0) | 0;
  HEAP8[$2_1 >> 0] = $1595($1_1 | 0) | 0;
  $1596($0_1 | 0, $1_1 | 0);
  $1503($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1521($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1192($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $1522($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[($10_1 + 15 | 0) >> 0] = $0_1;
  block5 : {
   block3 : {
    block : {
     $11_1 = HEAP32[$3_1 >> 2] | 0;
     if (($11_1 | 0) != ($2_1 | 0)) {
      break block
     }
     block2 : {
      block1 : {
       $12_1 = $0_1 & 255 | 0;
       if (($12_1 | 0) != (HEAPU8[($9_1 + 24 | 0) >> 0] | 0 | 0)) {
        break block1
       }
       $0_1 = 43;
       break block2;
      }
      if (($12_1 | 0) != (HEAPU8[($9_1 + 25 | 0) >> 0] | 0 | 0)) {
       break block
      }
      $0_1 = 45;
     }
     HEAP32[$3_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = $0_1;
     break block3;
    }
    block4 : {
     if (!($1210($6_1 | 0) | 0)) {
      break block4
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break block4
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break block5
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break block3;
    }
    $0_1 = -1;
    $9_1 = ($1555($9_1 | 0, $9_1 + 26 | 0 | 0, $10_1 + 15 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break block5
    }
    block7 : {
     block8 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break block7
       }
       break block5;
      case 1:
       break block7;
      default:
       break block8;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break block7
     }
     if (($9_1 | 0) < (22 | 0)) {
      break block7
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break block5
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break block5
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break block5
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 85168 | 0) >> 0] | 0;
     break block5;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 85168 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break block5;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1523($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $6_1 = 0, $44_1 = 0, $44$hi = 0, $48_1 = 0, $48$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block6 : {
   block3 : {
    block4 : {
     block5 : {
      block : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break block
       }
       $5_1 = $990() | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = 0;
       i64toi32_i32$0 = $1478($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1553() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       block2 : {
        block1 : {
         $0_1 = HEAP32[$5_1 >> 2] | 0;
         if (!$0_1) {
          break block1
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break block2
         }
         if (($0_1 | 0) == (68 | 0)) {
          break block3
         }
         break block4;
        }
        HEAP32[$5_1 >> 2] = $6_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break block4
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break block5;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     $1_1 = 0;
     break block6;
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$0 = $2566() | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $44_1 = i64toi32_i32$0;
    $44$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$3 = $44_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $17_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $18_1 = 0
      } else {
       $18_1 = 1
      }
      $19_1 = $18_1;
     } else {
      $19_1 = 0
     }
     $17_1 = $19_1;
    }
    if ($17_1) {
     break block3
    }
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $1106() | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $48_1 = i64toi32_i32$1;
    $48$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$1 = $48$hi;
    i64toi32_i32$0 = $48_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $20_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $21_1 = 0
      } else {
       $21_1 = 1
      }
      $22_1 = $21_1;
     } else {
      $22_1 = 0
     }
     $20_1 = $22_1;
    }
    if ($20_1) {
     break block3
    }
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $7$hi;
    $1_1 = $7_1;
    break block6;
   }
   HEAP32[$2_1 >> 2] = 4;
   block7 : {
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    if (($7$hi | 0) < (i64toi32_i32$2 | 0)) {
     $23_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $24_1 = 0
      } else {
       $24_1 = 1
      }
      $25_1 = $24_1;
     } else {
      $25_1 = 0
     }
     $23_1 = $25_1;
    }
    if ($23_1) {
     break block7
    }
    $1_1 = $1106() | 0;
    break block6;
   }
   $1_1 = $2566() | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1524($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = $1210($0_1 | 0) | 0;
  block : {
   if (($2_1 - $1_1 | 0 | 0) < (5 | 0)) {
    break block
   }
   if (!$4_1) {
    break block
   }
   $1867($1_1 | 0, $2_1 | 0);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $1209($0_1 | 0) | 0;
   $5_1 = $2_1 + ($1210($0_1 | 0) | 0) | 0;
   block3 : {
    block1 : {
     label : while (1) {
      $0_1 = HEAP8[$2_1 >> 0] | 0;
      if ($1_1 >>> 0 >= $4_1 >>> 0) {
       break block1
      }
      block2 : {
       if (($0_1 | 0) < (1 | 0)) {
        break block2
       }
       if (($0_1 | 0) >= ($1755() | 0 | 0)) {
        break block2
       }
       if ((HEAP32[$1_1 >> 2] | 0 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
        break block3
       }
      }
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + (($5_1 - $2_1 | 0 | 0) > (1 | 0)) | 0;
      continue label;
     };
    }
    if (($0_1 | 0) < (1 | 0)) {
     break block
    }
    if (($0_1 | 0) >= ($1755() | 0 | 0)) {
     break block
    }
    if (((HEAP32[$4_1 >> 2] | 0) + -1 | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
     break block
    }
   }
   HEAP32[$3_1 >> 2] = 4;
  }
 }
 
 function $1525($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1526($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1526($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1519($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1520($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1522($1091($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1093($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1527($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1527($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $7$hi = 0, $7_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $6_1 = 0, $43_1 = 0, $43$hi = 0, $45$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block6 : {
   block3 : {
    block4 : {
     block5 : {
      block : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break block
       }
       $5_1 = $990() | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = 0;
       i64toi32_i32$0 = $1478($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1553() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       block2 : {
        block1 : {
         $0_1 = HEAP32[$5_1 >> 2] | 0;
         if (!$0_1) {
          break block1
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break block2
         }
         if (($0_1 | 0) == (68 | 0)) {
          break block3
         }
         break block4;
        }
        HEAP32[$5_1 >> 2] = $6_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break block4
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break block5;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     i64toi32_i32$1 = 0;
     $7_1 = 0;
     $7$hi = i64toi32_i32$1;
     break block6;
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $2568() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $43_1 = i64toi32_i32$1;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = $43$hi;
    i64toi32_i32$3 = $43_1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break block3
    }
    i64toi32_i32$2 = $2569() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $45$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = $45$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    if ((i64toi32_i32$0 | 0) > ($7$hi | 0)) {
     $19_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       $20_1 = 0
      } else {
       $20_1 = 1
      }
      $21_1 = $20_1;
     } else {
      $21_1 = 0
     }
     $19_1 = $21_1;
    }
    if ($19_1) {
     break block6
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   block7 : {
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break block7
    }
    i64toi32_i32$1 = $2569() | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$3;
    break block6;
   }
   i64toi32_i32$3 = $2568() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$3 | 0;
 }
 
 function $1528($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1529($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1529($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1519($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1520($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1522($1091($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1093($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $1530($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1530($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block7 : {
   block8 : {
    block5 : {
     block6 : {
      block2 : {
       block : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break block
        }
        block1 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break block1
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break block1
         }
         HEAP32[$2_1 >> 2] = 4;
         break block2;
        }
        $6_1 = $990() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $1477($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1553() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        block4 : {
         block3 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break block3
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break block4
          }
          if (($0_1 | 0) == (68 | 0)) {
           break block5
          }
          break block6;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break block6
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break block2;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break block7;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($2572() | 0) >>> 0 | 0) | 0) {
      break block8
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $2572() | 0;
    break block7;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $1531($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1532($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1532($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1519($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1520($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1522($1091($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1093($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1533($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1533($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block7 : {
   block8 : {
    block5 : {
     block6 : {
      block2 : {
       block : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break block
        }
        block1 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break block1
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break block1
         }
         HEAP32[$2_1 >> 2] = 4;
         break block2;
        }
        $6_1 = $990() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $1477($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1553() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        block4 : {
         block3 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break block3
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break block4
          }
          if (($0_1 | 0) == (68 | 0)) {
           break block5
          }
          break block6;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break block6
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break block2;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break block7;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($1944() | 0) >>> 0 | 0) | 0) {
      break block8
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1944() | 0;
    break block7;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1534($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1535($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1535($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1519($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1520($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1522($1091($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1093($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1536($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1536($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block7 : {
   block8 : {
    block5 : {
     block6 : {
      block2 : {
       block : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break block
        }
        block1 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break block1
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break block1
         }
         HEAP32[$2_1 >> 2] = 4;
         break block2;
        }
        $6_1 = $990() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $1477($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1553() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        block4 : {
         block3 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break block3
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break block4
          }
          if (($0_1 | 0) == (68 | 0)) {
           break block5
          }
          break block6;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break block6
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break block2;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break block7;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($1268() | 0) >>> 0 | 0) | 0) {
      break block8
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1268() | 0;
    break block7;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1537($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1538($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1538($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1519($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1520($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1522($1091($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1093($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1539($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1539($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $7_1 = 0, $53$hi = 0, $59$hi = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block7 : {
   block8 : {
    block5 : {
     block6 : {
      block2 : {
       block : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break block
        }
        block1 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break block1
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break block1
         }
         HEAP32[$2_1 >> 2] = 4;
         break block2;
        }
        $6_1 = $990() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $1477($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1553() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        block4 : {
         block3 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break block3
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break block4
          }
          if (($0_1 | 0) == (68 | 0)) {
           break block5
          }
          break block6;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break block6
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break block2;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      i64toi32_i32$1 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$1;
      break block7;
     }
     i64toi32_i32$1 = $2574() | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $53$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = $53$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$3 = $8_1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $8_1 >>> 0 | 0) | 0) {
      break block8
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    i64toi32_i32$2 = $2574() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $8_1 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$0;
    break block7;
   }
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $8$hi | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $59$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
   i64toi32_i32$5 = $59$hi;
   $17_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$1 = i64toi32_i32$2 ? $17_1 : i64toi32_i32$1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $8$hi;
   $8_1 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1540($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1541($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1541($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $182_1 = 0, $184_1 = 0, $180_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1542($6_1 + 192 | 0 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0, $6_1 + 207 | 0 | 0, $6_1 + 206 | 0 | 0);
  $2_1 = $1186($6_1 + 180 | 0 | 0) | 0;
  $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
  $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 176 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) != ($1_1 + ($1210($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $1210($2_1 | 0) | 0;
       $1212($2_1 | 0, ($1210($2_1 | 0) | 0) << 1 | 0 | 0);
       $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
       $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 176 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($1543($1091($6_1 + 252 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 206 | 0) >> 0] | 0 | 0, $6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 176 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($1210($6_1 + 192 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAPF32[$5_1 >> 2] = Math_fround($1544($1_1 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0, $4_1 | 0));
     $1524($6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
     $2610($2_1 | 0) | 0;
     $2610($6_1 + 192 | 0 | 0) | 0;
     global$0 = $6_1 + 256 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $1093($6_1 + 252 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $1542($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $1293($5_1 + 12 | 0 | 0, $1_1 | 0);
  $1552($1089($5_1 + 12 | 0 | 0) | 0 | 0, 85168 | 0, 85196 | 0, $2_1 | 0) | 0;
  $1_1 = $1504($5_1 + 12 | 0 | 0) | 0;
  HEAP8[$3_1 >> 0] = $1594($1_1 | 0) | 0;
  HEAP8[$4_1 >> 0] = $1595($1_1 | 0) | 0;
  $1596($0_1 | 0, $1_1 | 0);
  $1503($5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1543($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[($12_1 + 15 | 0) >> 0] = $0_1;
  block2 : {
   block1 : {
    block : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break block
     }
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
      break block1
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($1210($7_1 | 0) | 0)) {
      break block2
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break block2
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break block2;
    }
    block4 : {
     block3 : {
      if (($0_1 | 0) != ($6_1 | 0)) {
       break block3
      }
      if (!($1210($7_1 | 0) | 0)) {
       break block3
      }
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break block1
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break block4
      }
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $11_1;
      $0_1 = 0;
      HEAP32[$10_1 >> 2] = 0;
      break block2;
     }
     $11_1 = ($1597($11_1 | 0, $11_1 + 28 | 0 | 0, $12_1 + 15 | 0 | 0) | 0) - $11_1 | 0;
     if (($11_1 | 0) > (27 | 0)) {
      break block1
     }
     $5_1 = HEAP8[($11_1 + 85168 | 0) >> 0] | 0;
     block9 : {
      block6 : {
       switch (($11_1 & -2 | 0) + -22 | 0 | 0) {
       case 2:
        block8 : {
         $11_1 = HEAP32[$4_1 >> 2] | 0;
         if (($11_1 | 0) == ($3_1 | 0)) {
          break block8
         }
         $0_1 = -1;
         if (($1433(HEAP8[($11_1 + -1 | 0) >> 0] | 0 | 0) | 0 | 0) != ($1433(HEAP8[$2_1 >> 0] | 0 | 0) | 0 | 0)) {
          break block2
         }
        }
        HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
        HEAP8[$11_1 >> 0] = $5_1;
        break block4;
       case 0:
        HEAP8[$2_1 >> 0] = 80;
        break block9;
       default:
        break block6;
       };
      }
      $0_1 = $1433($5_1 | 0) | 0;
      if (($0_1 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
       break block9
      }
      HEAP8[$2_1 >> 0] = $1434($0_1 | 0) | 0;
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break block9
      }
      HEAP8[$1_1 >> 0] = 0;
      if (!($1210($7_1 | 0) | 0)) {
       break block9
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break block9
      }
      $1_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $1_1;
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
     HEAP8[$0_1 >> 0] = $5_1;
     $0_1 = 0;
     if (($11_1 | 0) > (21 | 0)) {
      break block2
     }
     HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
     break block2;
    }
    $0_1 = 0;
    break block2;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1544($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = Math_fround(0), $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block4 : {
   block5 : {
    block3 : {
     block : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break block
      }
      $4_1 = $990() | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = 0;
      $6_1 = Math_fround($2576($0_1 | 0, $3_1 + 12 | 0 | 0));
      block2 : {
       block1 : {
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        if (!$0_1) {
         break block1
        }
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break block2
        }
        break block3;
       }
       HEAP32[$4_1 >> 2] = $5_1;
       if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break block3
       }
       break block4;
      }
      if (($0_1 | 0) != (68 | 0)) {
       break block4
      }
      break block5;
     }
     HEAP32[$2_1 >> 2] = 4;
     $6_1 = Math_fround(0.0);
     break block4;
    }
    $6_1 = Math_fround(0.0);
   }
   HEAP32[$2_1 >> 2] = 4;
  }
  global$0 = $3_1 + 16 | 0;
  return Math_fround($6_1);
 }
 
 function $1545($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1546($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1546($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $182_1 = 0, $184_1 = 0, $180_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1542($6_1 + 192 | 0 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0, $6_1 + 207 | 0 | 0, $6_1 + 206 | 0 | 0);
  $2_1 = $1186($6_1 + 180 | 0 | 0) | 0;
  $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
  $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 176 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) != ($1_1 + ($1210($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $1210($2_1 | 0) | 0;
       $1212($2_1 | 0, ($1210($2_1 | 0) | 0) << 1 | 0 | 0);
       $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
       $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 176 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($1543($1091($6_1 + 252 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 206 | 0) >> 0] | 0 | 0, $6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 176 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($1210($6_1 + 192 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAPF64[$5_1 >> 3] = +$1547($1_1 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0, $4_1 | 0);
     $1524($6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
     $2610($2_1 | 0) | 0;
     $2610($6_1 + 192 | 0 | 0) | 0;
     global$0 = $6_1 + 256 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $1093($6_1 + 252 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $1547($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0.0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block4 : {
   block5 : {
    block3 : {
     block : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break block
      }
      $4_1 = $990() | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = 0;
      $6_1 = +$2577($0_1 | 0, $3_1 + 12 | 0 | 0);
      block2 : {
       block1 : {
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        if (!$0_1) {
         break block1
        }
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break block2
        }
        break block3;
       }
       HEAP32[$4_1 >> 2] = $5_1;
       if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break block3
       }
       break block4;
      }
      if (($0_1 | 0) != (68 | 0)) {
       break block4
      }
      break block5;
     }
     HEAP32[$2_1 >> 2] = 4;
     $6_1 = 0.0;
     break block4;
    }
    $6_1 = 0.0;
   }
   HEAP32[$2_1 >> 2] = 4;
  }
  global$0 = $3_1 + 16 | 0;
  return +$6_1;
 }
 
 function $1548($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1549($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1549($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $10$hi = 0, $154_1 = 0, $189_1 = 0, $191_1 = 0, $187_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 268 | 0) >> 2] = $1_1;
  $1542($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $2_1 = $1186($6_1 + 196 | 0 | 0) | 0;
  $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
  $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 192 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($1090($6_1 + 268 | 0 | 0, $6_1 + 264 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 192 | 0) >> 2] | 0 | 0) != ($1_1 + ($1210($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $1210($2_1 | 0) | 0;
       $1212($2_1 | 0, ($1210($2_1 | 0) | 0) << 1 | 0 | 0);
       $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
       $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 192 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($1543($1091($6_1 + 268 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 192 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 192 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($1210($6_1 + 208 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 23 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 28 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     }
     $1550($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 192 | 0) >> 2] | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
     $154_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $154_1;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     HEAP32[i64toi32_i32$1 >> 2] = $10_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1524($6_1 + 208 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($1090($6_1 + 268 | 0 | 0, $6_1 + 264 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 268 | 0) >> 2] | 0;
     $2610($2_1 | 0) | 0;
     $2610($6_1 + 208 | 0 | 0) | 0;
     global$0 = $6_1 + 272 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $1093($6_1 + 268 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $1550($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $8$hi = 0, $8_1 = 0, $9_1 = 0, $9$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  block3 : {
   block2 : {
    block1 : {
     block : {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break block
      }
      $5_1 = $990() | 0;
      $6_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = 0;
      $2578($4_1 + 8 | 0 | 0, $1_1 | 0, $4_1 + 28 | 0 | 0);
      i64toi32_i32$0 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      $7_1 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$0;
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      if (!$1_1) {
       break block1
      }
      i64toi32_i32$0 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$0;
      if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break block2
      }
      i64toi32_i32$0 = $8$hi;
      $9_1 = i64toi32_i32$1;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $7$hi;
      $10_1 = $7_1;
      $10$hi = i64toi32_i32$0;
      if (($1_1 | 0) != (68 | 0)) {
       break block3
      }
      break block2;
     }
     HEAP32[$3_1 >> 2] = 4;
     i64toi32_i32$0 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $7_1 = 0;
     $7$hi = i64toi32_i32$0;
     break block3;
    }
    HEAP32[$5_1 >> 2] = $6_1;
    i64toi32_i32$0 = 0;
    $9_1 = 0;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break block3
    }
   }
   HEAP32[$3_1 >> 2] = 4;
   i64toi32_i32$0 = $9$hi;
   $8_1 = $9_1;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   $7_1 = $10_1;
   $7$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1551($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $7_1 = $1186($6_1 + 196 | 0 | 0) | 0;
  $1293($6_1 + 16 | 0 | 0, $3_1 | 0);
  $1552($1089($6_1 + 16 | 0 | 0) | 0 | 0, 85168 | 0, 85194 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1503($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
  $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($1210($2_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $3_1 = $1210($2_1 | 0) | 0;
     $1212($2_1 | 0, ($1210($2_1 | 0) | 0) << 1 | 0 | 0);
     $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
     $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1522($1091($6_1 + 252 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $7_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
     break block
    }
    $1093($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  $1212($2_1 | 0, (HEAP32[($6_1 + 180 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $1216($2_1 | 0) | 0;
  $3_1 = $1553() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  block2 : {
   if (($1554($1_1 | 0, $3_1 | 0, 65969 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break block2
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  block3 : {
   if (!($1090($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $2610($2_1 | 0) | 0;
  $2610($7_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $1_1 | 0;
 }
 
 function $1552($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $1553() {
  var $0_1 = 0;
  block : {
   if (!(HEAPU8[(0 + 104340 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 104336 | 0) >> 2] | 0 | 0;
  }
  $0_1 = $1431(2147483647 | 0, 66484 | 0, 0 | 0) | 0;
  HEAP8[(0 + 104340 | 0) >> 0] = 1;
  HEAP32[(0 + 104336 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $1554($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $3_1 = $1556($4_1 + 4 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $1_1 = $1423($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1557($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1555($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1604($0_1 | 0, $1603($1602($0_1 | 0) | 0 | 0, $1602($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1475(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1557($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break block
   }
   $1475($1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1558($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  block4 : {
   block : {
    if (($1088($3_1 | 0) | 0) & 1 | 0) {
     break block
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    block3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break block4;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break block4;
     default:
      break block3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break block4;
   }
   $1293($6_1 | 0, $3_1 | 0);
   $1_1 = $1161($6_1 | 0) | 0;
   $1503($6_1 | 0) | 0;
   $1293($6_1 | 0, $3_1 | 0);
   $3_1 = $1559($6_1 | 0) | 0;
   $1503($6_1 | 0) | 0;
   $1560($6_1 | 0, $3_1 | 0);
   $1561($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($1562($6_1 + 28 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   label : while (1) {
    $3_1 = $2624($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label
    }
    break label;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1559($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104592 | 0) | 0 | 0;
 }
 
 function $1560($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1562($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $17_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 124 | 0) >> 2] = $1_1;
  $8_1 = $1563($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 109;
  $9_1 = 0;
  $10_1 = $1510($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  block7 : {
   block6 : {
    block1 : {
     block : {
      if ($8_1 >>> 0 < 101 >>> 0) {
       break block
      }
      $11_1 = $1032($8_1 | 0) | 0;
      if (!$11_1) {
       break block1
      }
      $1511($10_1 | 0, $11_1 | 0);
     }
     $12_1 = $11_1;
     $1_1 = $2_1;
     label4 : while (1) {
      block2 : {
       if (($1_1 | 0) != ($3_1 | 0)) {
        break block2
       }
       $13_1 = 0;
       label1 : while (1) {
        block4 : {
         block3 : {
          if ($1162($0_1 | 0, $7_1 + 124 | 0 | 0) | 0) {
           break block3
          }
          if ($8_1) {
           break block4
          }
         }
         block5 : {
          if (!($1162($0_1 | 0, $7_1 + 124 | 0 | 0) | 0)) {
           break block5
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
         }
         label : while (1) {
          if (($2_1 | 0) == ($3_1 | 0)) {
           break block6
          }
          if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
           break block7
          }
          $11_1 = $11_1 + 1 | 0;
          $2_1 = $2_1 + 12 | 0;
          continue label;
         };
        }
        $14_1 = $1163($0_1 | 0) | 0;
        block8 : {
         if ($6_1) {
          break block8
         }
         $14_1 = $1564($4_1 | 0, $14_1 | 0) | 0;
        }
        $15_1 = $13_1 + 1 | 0;
        $16_1 = 0;
        $12_1 = $11_1;
        $1_1 = $2_1;
        label3 : while (1) {
         block9 : {
          if (($1_1 | 0) != ($3_1 | 0)) {
           break block9
          }
          $13_1 = $15_1;
          if (!($16_1 & 1 | 0)) {
           continue label1
          }
          $1165($0_1 | 0) | 0;
          $13_1 = $15_1;
          $12_1 = $11_1;
          $1_1 = $2_1;
          if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
           continue label1
          }
          label2 : while (1) {
           block10 : {
            if (($1_1 | 0) != ($3_1 | 0)) {
             break block10
            }
            $13_1 = $15_1;
            continue label1;
           }
           block11 : {
            if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
             break block11
            }
            if (($1565($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
             break block11
            }
            HEAP8[$12_1 >> 0] = 0;
            $9_1 = $9_1 + -1 | 0;
           }
           $12_1 = $12_1 + 1 | 0;
           $1_1 = $1_1 + 12 | 0;
           continue label2;
          };
         }
         block12 : {
          if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
           break block12
          }
          $17_1 = HEAP32[($1566($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
          block13 : {
           if ($6_1) {
            break block13
           }
           $17_1 = $1564($4_1 | 0, $17_1 | 0) | 0;
          }
          block15 : {
           block14 : {
            if (($14_1 | 0) != ($17_1 | 0)) {
             break block14
            }
            $16_1 = 1;
            if (($1565($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
             break block12
            }
            HEAP8[$12_1 >> 0] = 2;
            $16_1 = 1;
            $9_1 = $9_1 + 1 | 0;
            break block15;
           }
           HEAP8[$12_1 >> 0] = 0;
          }
          $8_1 = $8_1 + -1 | 0;
         }
         $12_1 = $12_1 + 1 | 0;
         $1_1 = $1_1 + 12 | 0;
         continue label3;
        };
       };
      }
      $17_1 = $1567($1_1 | 0) | 0;
      HEAP8[$12_1 >> 0] = $17_1 ? 2 : 1;
      $12_1 = $12_1 + 1 | 0;
      $1_1 = $1_1 + 12 | 0;
      $9_1 = $9_1 + $17_1 | 0;
      $8_1 = $8_1 - $17_1 | 0;
      continue label4;
     };
    }
    $2595();
    wasm2js_trap();
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
  }
  $1515($10_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $2_1 | 0;
 }
 
 function $1563($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2579($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1564($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1565($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($1719($0_1 | 0) | 0)) {
    break block
   }
   return $1720($0_1 | 0) | 0 | 0;
  }
  return $1721($0_1 | 0) | 0 | 0;
 }
 
 function $1566($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1716($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1567($0_1) {
  $0_1 = $0_1 | 0;
  return !($1565($0_1 | 0) | 0) | 0;
 }
 
 function $1568($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1569($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1569($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1570($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1571($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1572($1163($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1165($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1523($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1570($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1612($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1571($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1293($3_1 + 12 | 0 | 0, $1_1 | 0);
  $1_1 = $1559($3_1 + 12 | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $1606($1_1 | 0) | 0;
  $1607($0_1 | 0, $1_1 | 0);
  $1503($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1572($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $0_1;
  block5 : {
   block3 : {
    block : {
     $11_1 = HEAP32[$3_1 >> 2] | 0;
     if (($11_1 | 0) != ($2_1 | 0)) {
      break block
     }
     block2 : {
      block1 : {
       if (($0_1 | 0) != (HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0)) {
        break block1
       }
       $0_1 = 43;
       break block2;
      }
      if (($0_1 | 0) != (HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0)) {
       break block
      }
      $0_1 = 45;
     }
     HEAP32[$3_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = $0_1;
     break block3;
    }
    block4 : {
     if (!($1210($6_1 | 0) | 0)) {
      break block4
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break block4
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break block5
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break block3;
    }
    $0_1 = -1;
    $9_1 = (($1593($9_1 | 0, $9_1 + 104 | 0 | 0, $10_1 + 12 | 0 | 0) | 0) - $9_1 | 0) >> 2 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break block5
    }
    block7 : {
     block8 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break block7
       }
       break block5;
      case 1:
       break block7;
      default:
       break block8;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break block7
     }
     if (($9_1 | 0) < (22 | 0)) {
      break block7
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break block5
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break block5
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break block5
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 85168 | 0) >> 0] | 0;
     break block5;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 85168 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break block5;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1573($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1574($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1574($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1570($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1571($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1572($1163($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1165($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1527($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1575($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1576($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1576($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1570($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1571($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1572($1163($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1165($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $1530($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1577($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1578($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1578($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1570($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1571($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1572($1163($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1165($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1533($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1579($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1580($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1580($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1570($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1571($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1572($1163($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1165($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $1536($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1581($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1582($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1582($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $1518($3_1 | 0) | 0;
  $0_1 = $1570($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1571($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
  $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($1210($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $1210($3_1 | 0) | 0;
     $1212($3_1 | 0, ($1210($3_1 | 0) | 0) << 1 | 0 | 0);
     $1212($3_1 | 0, $1211($3_1 | 0) | 0 | 0);
     $2_1 = $1521($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1572($1163($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $1165($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($1210($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $1539($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1524($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($1162($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $2610($3_1 | 0) | 0;
  $2610($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $1583($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1584($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1584($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $182_1 = 0, $184_1 = 0, $180_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 348 | 0) >> 2] = $1_1;
  $1585($6_1 + 204 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $2_1 = $1186($6_1 + 192 | 0 | 0) | 0;
  $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
  $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($1162($6_1 + 348 | 0 | 0, $6_1 + 344 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($1210($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $1210($2_1 | 0) | 0;
       $1212($2_1 | 0, ($1210($2_1 | 0) | 0) << 1 | 0 | 0);
       $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
       $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($1586($1163($6_1 + 348 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($1210($6_1 + 204 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAPF32[$5_1 >> 2] = Math_fround($1544($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0));
     $1524($6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($1162($6_1 + 348 | 0 | 0, $6_1 + 344 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 348 | 0) >> 2] | 0;
     $2610($2_1 | 0) | 0;
     $2610($6_1 + 204 | 0 | 0) | 0;
     global$0 = $6_1 + 352 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $1165($6_1 + 348 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $1585($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $1293($5_1 + 12 | 0 | 0, $1_1 | 0);
  $1592($1161($5_1 + 12 | 0 | 0) | 0 | 0, 85168 | 0, 85196 | 0, $2_1 | 0) | 0;
  $1_1 = $1559($5_1 + 12 | 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = $1605($1_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $1606($1_1 | 0) | 0;
  $1607($0_1 | 0, $1_1 | 0);
  $1503($5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1586($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
  block2 : {
   block1 : {
    block : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break block
     }
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
      break block1
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($1210($7_1 | 0) | 0)) {
      break block2
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break block2
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break block2;
    }
    block4 : {
     block3 : {
      if (($0_1 | 0) != ($6_1 | 0)) {
       break block3
      }
      if (!($1210($7_1 | 0) | 0)) {
       break block3
      }
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break block1
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break block4
      }
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $11_1;
      $0_1 = 0;
      HEAP32[$10_1 >> 2] = 0;
      break block2;
     }
     $0_1 = ($1608($11_1 | 0, $11_1 + 112 | 0 | 0, $12_1 + 12 | 0 | 0) | 0) - $11_1 | 0;
     $11_1 = $0_1 >> 2 | 0;
     if (($11_1 | 0) > (27 | 0)) {
      break block1
     }
     $5_1 = HEAP8[($11_1 + 85168 | 0) >> 0] | 0;
     block8 : {
      block6 : {
       block5 : {
        $0_1 = $0_1 & -5 | 0;
        if (($0_1 | 0) == (88 | 0)) {
         break block5
        }
        if (($0_1 | 0) != (96 | 0)) {
         break block6
        }
        block7 : {
         $11_1 = HEAP32[$4_1 >> 2] | 0;
         if (($11_1 | 0) == ($3_1 | 0)) {
          break block7
         }
         $0_1 = -1;
         if (($1433(HEAP8[($11_1 + -1 | 0) >> 0] | 0 | 0) | 0 | 0) != ($1433(HEAP8[$2_1 >> 0] | 0 | 0) | 0 | 0)) {
          break block2
         }
        }
        HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
        HEAP8[$11_1 >> 0] = $5_1;
        break block4;
       }
       HEAP8[$2_1 >> 0] = 80;
       break block8;
      }
      $0_1 = $1433($5_1 | 0) | 0;
      if (($0_1 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
       break block8
      }
      HEAP8[$2_1 >> 0] = $1434($0_1 | 0) | 0;
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break block8
      }
      HEAP8[$1_1 >> 0] = 0;
      if (!($1210($7_1 | 0) | 0)) {
       break block8
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break block8
      }
      $1_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $1_1;
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
     HEAP8[$0_1 >> 0] = $5_1;
     $0_1 = 0;
     if (($11_1 | 0) > (21 | 0)) {
      break block2
     }
     HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
     break block2;
    }
    $0_1 = 0;
    break block2;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1587($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1588($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1588($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $182_1 = 0, $184_1 = 0, $180_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 348 | 0) >> 2] = $1_1;
  $1585($6_1 + 204 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $2_1 = $1186($6_1 + 192 | 0 | 0) | 0;
  $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
  $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($1162($6_1 + 348 | 0 | 0, $6_1 + 344 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($1210($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $1210($2_1 | 0) | 0;
       $1212($2_1 | 0, ($1210($2_1 | 0) | 0) << 1 | 0 | 0);
       $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
       $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($1586($1163($6_1 + 348 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($1210($6_1 + 204 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAPF64[$5_1 >> 3] = +$1547($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0);
     $1524($6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($1162($6_1 + 348 | 0 | 0, $6_1 + 344 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 348 | 0) >> 2] | 0;
     $2610($2_1 | 0) | 0;
     $2610($6_1 + 204 | 0 | 0) | 0;
     global$0 = $6_1 + 352 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $1165($6_1 + 348 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $1589($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1590($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1590($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $10$hi = 0, $154_1 = 0, $189_1 = 0, $191_1 = 0, $187_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 364 | 0) >> 2] = $1_1;
  $1585($6_1 + 220 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 236 | 0 | 0, $6_1 + 232 | 0 | 0);
  $2_1 = $1186($6_1 + 208 | 0 | 0) | 0;
  $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
  $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($1162($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($1_1 + ($1210($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $1210($2_1 | 0) | 0;
       $1212($2_1 | 0, ($1210($2_1 | 0) | 0) << 1 | 0 | 0);
       $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
       $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 204 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($1586($1163($6_1 + 364 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 204 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 204 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($1210($6_1 + 220 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 23 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 28 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     }
     $1550($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
     $154_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $154_1;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     HEAP32[i64toi32_i32$1 >> 2] = $10_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1524($6_1 + 220 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($1162($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 364 | 0) >> 2] | 0;
     $2610($2_1 | 0) | 0;
     $2610($6_1 + 220 | 0 | 0) | 0;
     global$0 = $6_1 + 368 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $1165($6_1 + 364 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $1591($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 320 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 312 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 316 | 0) >> 2] = $1_1;
  $7_1 = $1186($6_1 + 196 | 0 | 0) | 0;
  $1293($6_1 + 16 | 0 | 0, $3_1 | 0);
  $1592($1161($6_1 + 16 | 0 | 0) | 0 | 0, 85168 | 0, 85194 | 0, $6_1 + 208 | 0 | 0) | 0;
  $1503($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $1186($6_1 + 184 | 0 | 0) | 0;
  $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
  $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($1162($6_1 + 316 | 0 | 0, $6_1 + 312 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($1210($2_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $3_1 = $1210($2_1 | 0) | 0;
     $1212($2_1 | 0, ($1210($2_1 | 0) | 0) << 1 | 0 | 0);
     $1212($2_1 | 0, $1211($2_1 | 0) | 0 | 0);
     $1_1 = $1521($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1572($1163($6_1 + 316 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $7_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
     break block
    }
    $1165($6_1 + 316 | 0 | 0) | 0;
    continue label;
   };
  }
  $1212($2_1 | 0, (HEAP32[($6_1 + 180 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $1216($2_1 | 0) | 0;
  $3_1 = $1553() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  block2 : {
   if (($1554($1_1 | 0, $3_1 | 0, 65969 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break block2
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  block3 : {
   if (!($1162($6_1 + 316 | 0 | 0, $6_1 + 312 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
  $2610($2_1 | 0) | 0;
  $2610($7_1 | 0) | 0;
  global$0 = $6_1 + 320 | 0;
  return $1_1 | 0;
 }
 
 function $1592($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $1593($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1615($0_1 | 0, $1614($1613($0_1 | 0) | 0 | 0, $1613($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1594($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1595($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1596($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1597($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1600($0_1 | 0, $1599($1598($0_1 | 0) | 0 | 0, $1598($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1598($0_1) {
  $0_1 = $0_1 | 0;
  return $2336($0_1 | 0) | 0 | 0;
 }
 
 function $1599($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $2335($0_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, $1_1 - $0_1 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $1600($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2334($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1601($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 85168 | 0;
 }
 
 function $1602($0_1) {
  $0_1 = $0_1 | 0;
  return $2339($0_1 | 0) | 0 | 0;
 }
 
 function $1603($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $2338($0_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, $1_1 - $0_1 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $1604($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2337($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1605($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1606($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1607($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1608($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1611($0_1 | 0, $1610($1609($0_1 | 0) | 0 | 0, $1609($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1609($0_1) {
  $0_1 = $0_1 | 0;
  return $2342($0_1 | 0) | 0 | 0;
 }
 
 function $1610($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $2341($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $1611($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2340($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1612($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1293($3_1 + 12 | 0 | 0, $1_1 | 0);
  $1592($1161($3_1 + 12 | 0 | 0) | 0 | 0, 85168 | 0, 85194 | 0, $2_1 | 0) | 0;
  $1503($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1613($0_1) {
  $0_1 = $0_1 | 0;
  return $2345($0_1 | 0) | 0 | 0;
 }
 
 function $1614($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $2344($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $1615($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2343($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1616($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (($1088($2_1 | 0) | 0) & 1 | 0) {
     break block
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break block1;
   }
   $1293($5_1 + 16 | 0 | 0, $2_1 | 0);
   $2_1 = $1504($5_1 + 16 | 0 | 0) | 0;
   $1503($5_1 + 16 | 0 | 0) | 0;
   block3 : {
    block2 : {
     if (!$4_1) {
      break block2
     }
     $1505($5_1 + 16 | 0 | 0, $2_1 | 0);
     break block3;
    }
    $1506($5_1 + 16 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $1617($5_1 + 16 | 0 | 0) | 0;
   label : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $1618($5_1 + 16 | 0 | 0) | 0;
    block4 : {
     if (!($1619($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
      break block4
     }
     $2_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     $2610($5_1 + 16 | 0 | 0) | 0;
     break block1;
    }
    $2_1 = HEAP8[($1620($5_1 + 12 | 0 | 0) | 0) >> 0] | 0;
    $1126($1125($5_1 + 28 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $1621($5_1 + 12 | 0 | 0) | 0;
    $1127($5_1 + 28 | 0 | 0) | 0;
    continue label;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1617($0_1) {
  $0_1 = $0_1 | 0;
  return $1622($0_1 | 0, $1192($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1618($0_1) {
  $0_1 = $0_1 | 0;
  return $1622($0_1 | 0, ($1192($0_1 | 0) | 0) + ($1210($0_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1619($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1623($0_1 | 0) | 0 | 0) == ($1623($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1620($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1621($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1622($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($2346($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1623($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1624($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1625($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66036 | 0) | 0 | 0;
 }
 
 function $1625($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = 37;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  $1626($6_1 + 56 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $1088($2_1 | 0) | 0 | 0);
  $5_1 = $1553() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 43 | 0) + ($1627($6_1 + 43 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 56 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1628($6_1 + 43 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1293($6_1 + 4 | 0 | 0, $2_1 | 0);
  $1629($6_1 + 43 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $1503($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $1630($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 64 | 0;
  return $2_1 | 0;
 }
 
 function $1626($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  block : {
   if (!($3_1 & 2048 | 0)) {
    break block
   }
   $4_1 = $3_1 & 74 | 0;
   if (($4_1 | 0) == (8 | 0)) {
    break block
   }
   if (($4_1 | 0) == (64 | 0)) {
    break block
   }
   if (!$2_1) {
    break block
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  block1 : {
   if (!($3_1 & 512 | 0)) {
    break block1
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  block2 : {
   label : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break block2
    }
    HEAP8[$0_1 >> 0] = $4_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  block4 : {
   block3 : {
    $1_1 = $3_1 & 74 | 0;
    if (($1_1 | 0) != (64 | 0)) {
     break block3
    }
    $1_1 = 111;
    break block4;
   }
   block5 : {
    if (($1_1 | 0) != (8 | 0)) {
     break block5
    }
    $1_1 = $3_1 & 16384 | 0 ? 88 : 120;
    break block4;
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0_1 >> 0] = $1_1;
 }
 
 function $1627($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  $4_1 = $1556($5_1 + 4 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $2_1 = $1435($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1557($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1628($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   $2_1 = ($1088($2_1 | 0) | 0) & 176 | 0;
   if (($2_1 | 0) != (32 | 0)) {
    break block
   }
   return $1_1 | 0;
  }
  block1 : {
   if (($2_1 | 0) != (16 | 0)) {
    break block1
   }
   block3 : {
    block2 : {
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     switch ($2_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break block2;
     default:
      break block3;
     };
    }
    return $0_1 + 1 | 0 | 0;
   }
   if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
    break block1
   }
   if (($2_1 | 0) != (48 | 0)) {
    break block1
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
    break block1
   }
   $0_1 = $0_1 + 2 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1629($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $1089($6_1 | 0) | 0;
  $6_1 = $1504($6_1 | 0) | 0;
  $1596($7_1 + 4 | 0 | 0, $6_1 | 0);
  block1 : {
   block : {
    if (!($1514($7_1 + 4 | 0 | 0) | 0)) {
     break block
    }
    $1552($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + ($2_1 - $0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break block1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   block3 : {
    block2 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break block2;
     default:
      break block3;
     };
    }
    $10_1 = $1286($8_1 | 0, $10_1 << 24 >> 24 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   block4 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break block4
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break block4
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break block4
    }
    $10_1 = $1286($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $10_1 = $1286($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1682($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $1595($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label : while (1) {
    block5 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break block5
     }
     $1682($3_1 + ($9_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break block1;
    }
    block6 : {
     if (!(HEAPU8[($1521($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break block6
     }
     if (($10_1 | 0) != (HEAP8[($1521($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break block6
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
     HEAP8[$10_1 >> 0] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($1210($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $1286($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 1 | 0;
    HEAP8[$14_1 >> 0] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
  $2610($7_1 + 4 | 0 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1630($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  block4 : {
   block : {
    if (!$0_1) {
     break block
    }
    $7_1 = $1649($4_1 | 0) | 0;
    block1 : {
     $8_1 = $2_1 - $1_1 | 0;
     if (($8_1 | 0) < (1 | 0)) {
      break block1
     }
     if (($1129($0_1 | 0, $1_1 | 0, $8_1 | 0) | 0 | 0) != ($8_1 | 0)) {
      break block
     }
    }
    block2 : {
     $1_1 = $3_1 - $1_1 | 0;
     $1_1 = ($7_1 | 0) > ($1_1 | 0) ? $7_1 - $1_1 | 0 : 0;
     if (($1_1 | 0) < (1 | 0)) {
      break block2
     }
     $7_1 = $1650($6_1 + 4 | 0 | 0, $1_1 | 0, $5_1 | 0) | 0;
     $8_1 = $1129($0_1 | 0, $1189($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
     $2610($7_1 | 0) | 0;
     if (($8_1 | 0) != ($1_1 | 0)) {
      break block
     }
    }
    block3 : {
     $1_1 = $3_1 - $2_1 | 0;
     if (($1_1 | 0) < (1 | 0)) {
      break block3
     }
     if (($1129($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
      break block
     }
    }
    $1651($4_1 | 0, 0 | 0) | 0;
    break block4;
   }
   $0_1 = 0;
  }
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1631($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1632($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66029 | 0) | 0 | 0;
 }
 
 function $1632($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = 37;
  HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$0;
  $1626($6_1 + 104 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $1088($2_1 | 0) | 0 | 0);
  $5_1 = $1553() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 80 | 0) + ($1627($6_1 + 80 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 104 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1628($6_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1293($6_1 + 20 | 0 | 0, $2_1 | 0);
  $1629($6_1 + 80 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $1503($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $1630($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 112 | 0;
  return $2_1 | 0;
 }
 
 function $1633($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1634($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66036 | 0) | 0 | 0;
 }
 
 function $1634($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = 37;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  $1626($6_1 + 56 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $1088($2_1 | 0) | 0 | 0);
  $5_1 = $1553() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 43 | 0) + ($1627($6_1 + 43 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 56 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1628($6_1 + 43 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1293($6_1 + 4 | 0 | 0, $2_1 | 0);
  $1629($6_1 + 43 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $1503($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $1630($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 64 | 0;
  return $2_1 | 0;
 }
 
 function $1635($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1636($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66029 | 0) | 0 | 0;
 }
 
 function $1636($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = 37;
  HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$0;
  $1626($6_1 + 104 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $1088($2_1 | 0) | 0 | 0);
  $5_1 = $1553() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 80 | 0) + ($1627($6_1 + 80 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 104 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1628($6_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1293($6_1 + 20 | 0 | 0, $2_1 | 0);
  $1629($6_1 + 80 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $1503($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $1630($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 112 | 0;
  return $2_1 | 0;
 }
 
 function $1637($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  return $1638($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, +$4_1, 67314 | 0) | 0 | 0;
 }
 
 function $1638($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $158_1 = 0;
  $6_1 = global$0 - 208 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 200 | 0) >> 2] = 37;
  HEAP32[($6_1 + 204 | 0) >> 2] = 0;
  $7_1 = $1639($6_1 + 200 | 0 | 1 | 0 | 0, $5_1 | 0, $1088($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 156 | 0) >> 2] = $6_1 + 160 | 0;
  $5_1 = $1553() | 0;
  block1 : {
   block : {
    if (!$7_1) {
     break block
    }
    $8_1 = $1640($2_1 | 0) | 0;
    HEAPF64[($6_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($6_1 + 32 | 0) >> 2] = $8_1;
    $5_1 = $1627($6_1 + 160 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    break block1;
   }
   HEAPF64[($6_1 + 48 | 0) >> 3] = $4_1;
   $5_1 = $1627($6_1 + 160 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 80 | 0) >> 2] = 109;
  $9_1 = $1641($6_1 + 148 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  $8_1 = $6_1 + 160 | 0;
  block5 : {
   block2 : {
    if (($5_1 | 0) < (30 | 0)) {
     break block2
    }
    $5_1 = $1553() | 0;
    block4 : {
     block3 : {
      if (!$7_1) {
       break block3
      }
      $8_1 = $1640($2_1 | 0) | 0;
      HEAPF64[($6_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$6_1 >> 2] = $8_1;
      $5_1 = $1642($6_1 + 156 | 0 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 | 0) | 0;
      break block4;
     }
     HEAPF64[($6_1 + 16 | 0) >> 3] = $4_1;
     $5_1 = $1642($6_1 + 156 | 0 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    }
    if (($5_1 | 0) == (-1 | 0)) {
     break block5
    }
    $1643($9_1 | 0, HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
   }
   $10_1 = $8_1 + $5_1 | 0;
   $11_1 = $1628($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 80 | 0) >> 2] = 109;
   $8_1 = $1641($6_1 + 72 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
   block7 : {
    block6 : {
     $7_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
     if (($7_1 | 0) != ($6_1 + 160 | 0 | 0)) {
      break block6
     }
     $5_1 = $6_1 + 80 | 0;
     break block7;
    }
    $5_1 = $1032($5_1 << 1 | 0 | 0) | 0;
    if (!$5_1) {
     break block5
    }
    $1643($8_1 | 0, $5_1 | 0);
    $7_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
   }
   $1293($6_1 + 60 | 0 | 0, $2_1 | 0);
   $1644($7_1 | 0, $11_1 | 0, $10_1 | 0, $5_1 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 60 | 0 | 0);
   $1503($6_1 + 60 | 0 | 0) | 0;
   $2_1 = $1630($1_1 | 0, $5_1 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1645($8_1 | 0) | 0;
   $1645($9_1 | 0) | 0;
   global$0 = $6_1 + 208 | 0;
   return $2_1 | 0;
  }
  $2595();
  wasm2js_trap();
 }
 
 function $1639($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  block : {
   if (!($2_1 & 2048 | 0)) {
    break block
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  block1 : {
   if (!($2_1 & 1024 | 0)) {
    break block1
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  block2 : {
   $3_1 = $2_1 & 260 | 0;
   if (($3_1 | 0) == (260 | 0)) {
    break block2
   }
   $5_1 = 10798;
   HEAP8[$0_1 >> 0] = $5_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $5_1 >>> 8 | 0;
   $0_1 = $0_1 + 2 | 0;
  }
  $4_1 = $2_1 & 16384 | 0;
  block3 : {
   label : while (1) {
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$2_1) {
     break block3
    }
    HEAP8[$0_1 >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  block6 : {
   block5 : {
    block4 : {
     if (($3_1 | 0) == (256 | 0)) {
      break block4
     }
     if (($3_1 | 0) != (4 | 0)) {
      break block5
     }
     $1_1 = $4_1 ? 70 : 102;
     break block6;
    }
    $1_1 = $4_1 ? 69 : 101;
    break block6;
   }
   block7 : {
    if (($3_1 | 0) != (260 | 0)) {
     break block7
    }
    $1_1 = $4_1 ? 65 : 97;
    break block6;
   }
   $1_1 = $4_1 ? 71 : 103;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return ($3_1 | 0) != (260 | 0) | 0;
 }
 
 function $1640($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1641($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1812($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1642($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $3_1 = $1556($4_1 + 4 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $1_1 = $1458($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1557($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1643($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1829($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1829($0_1 | 0) | 0) >> 2] = $1_1;
  block : {
   if (!$2_1) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($1830($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1644($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $12_1 = 0, $10_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $1089($6_1 | 0) | 0;
  $9_1 = $1504($6_1 | 0) | 0;
  $1596($7_1 + 4 | 0 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  block1 : {
   block : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break block;
    default:
     break block1;
    };
   }
   $6_1 = $1286($8_1 | 0, $6_1 << 24 >> 24 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
   HEAP8[$11_1 >> 0] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  block3 : {
   block2 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break block2
    }
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break block2
    }
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break block2
    }
    $6_1 = $1286($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $6_1 = $1286($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break block3
     }
     if (!($1438(HEAP8[$6_1 >> 0] | 0 | 0, $1553() | 0 | 0) | 0)) {
      break block3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label;
    };
   }
   label1 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break block3
    }
    if (!($1440(HEAP8[$6_1 >> 0] | 0 | 0, $1553() | 0 | 0) | 0)) {
     break block3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label1;
   };
  }
  block5 : {
   block4 : {
    if (!($1514($7_1 + 4 | 0 | 0) | 0)) {
     break block4
    }
    $1552($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ($6_1 - $10_1 | 0) | 0;
    break block5;
   }
   $1682($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $1595($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label2 : while (1) {
    block6 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break block6
     }
     $1682($3_1 + ($10_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break block5;
    }
    block7 : {
     if ((HEAP8[($1521($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break block7
     }
     if (($12_1 | 0) != (HEAP8[($1521($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break block7
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($1210($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $1286($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 1 | 0;
    HEAP8[$16_1 >> 0] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label2;
   };
  }
  label3 : while (1) {
   block10 : {
    block9 : {
     block8 : {
      if ($6_1 >>> 0 < $2_1 >>> 0) {
       break block8
      }
      $11_1 = $6_1;
      break block9;
     }
     $11_1 = $6_1 + 1 | 0;
     $6_1 = HEAP8[$6_1 >> 0] | 0;
     if (($6_1 | 0) != (46 | 0)) {
      break block10
     }
     $6_1 = $1594($9_1 | 0) | 0;
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $6_1;
    }
    $1552($8_1 | 0, $11_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    $6_1 = (HEAP32[$5_1 >> 2] | 0) + ($2_1 - $11_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
    $2610($7_1 + 4 | 0 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
    return;
   }
   $6_1 = $1286($8_1 | 0, $6_1 | 0) | 0;
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
   HEAP8[$12_1 >> 0] = $6_1;
   $6_1 = $11_1;
   continue label3;
  };
 }
 
 function $1645($0_1) {
  $0_1 = $0_1 | 0;
  $1643($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1646($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $4$hi;
  return $1647($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, $5$hi | 0, 66467 | 0) | 0 | 0;
 }
 
 function $1647($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $169_1 = 0;
  $7_1 = global$0 - 256 | 0;
  global$0 = $7_1;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[($7_1 + 248 | 0) >> 2] = 37;
  HEAP32[($7_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = $1639($7_1 + 248 | 0 | 1 | 0 | 0, $6_1 | 0, $1088($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($7_1 + 204 | 0) >> 2] = $7_1 + 208 | 0;
  $6_1 = $1553() | 0;
  block1 : {
   block : {
    if (!$8_1) {
     break block
    }
    $9_1 = $1640($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $7_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 48 | 0) >> 2] = $9_1;
    $6_1 = $1627($7_1 + 208 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
    break block1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($7_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $1627($7_1 + 208 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($7_1 + 128 | 0) >> 2] = 109;
  $10_1 = $1641($7_1 + 196 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
  $9_1 = $7_1 + 208 | 0;
  block5 : {
   block2 : {
    if (($6_1 | 0) < (30 | 0)) {
     break block2
    }
    $6_1 = $1553() | 0;
    block4 : {
     block3 : {
      if (!$8_1) {
       break block3
      }
      $9_1 = $1640($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$7_1 >> 2] = $9_1;
      $6_1 = $1642($7_1 + 204 | 0 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 | 0) | 0;
      break block4;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $1642($7_1 + 204 | 0 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
    }
    if (($6_1 | 0) == (-1 | 0)) {
     break block5
    }
    $1643($10_1 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
   }
   $11_1 = $9_1 + $6_1 | 0;
   $12_1 = $1628($9_1 | 0, $11_1 | 0, $2_1 | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = 109;
   $9_1 = $1641($7_1 + 120 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   block7 : {
    block6 : {
     $8_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
     if (($8_1 | 0) != ($7_1 + 208 | 0 | 0)) {
      break block6
     }
     $6_1 = $7_1 + 128 | 0;
     break block7;
    }
    $6_1 = $1032($6_1 << 1 | 0 | 0) | 0;
    if (!$6_1) {
     break block5
    }
    $1643($9_1 | 0, $6_1 | 0);
    $8_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
   }
   $1293($7_1 + 108 | 0 | 0, $2_1 | 0);
   $1644($8_1 | 0, $12_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 + 116 | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 108 | 0 | 0);
   $1503($7_1 + 108 | 0 | 0) | 0;
   $2_1 = $1630($1_1 | 0, $6_1 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1645($9_1 | 0) | 0;
   $1645($10_1 | 0) | 0;
   global$0 = $7_1 + 256 | 0;
   return $2_1 | 0;
  }
  $2595();
  wasm2js_trap();
 }
 
 function $1648($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $6_1 = $1553() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $1627($5_1 + 64 | 0 | 0, 20 | 0, $6_1 | 0, 65969 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 64 | 0) + $7_1 | 0;
  $6_1 = $1628($5_1 + 64 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $1293($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $1089($5_1 + 16 | 0 | 0) | 0;
  $1503($5_1 + 16 | 0 | 0) | 0;
  $1552($8_1 | 0, $5_1 + 64 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = $7_1 + ($5_1 + 16 | 0) | 0;
  $2_1 = $1630($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + ($6_1 - ($5_1 + 64 | 0) | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 96 | 0;
  return $2_1 | 0;
 }
 
 function $1649($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1650($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1290($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $2618($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1651($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1652($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (($1088($2_1 | 0) | 0) & 1 | 0) {
     break block
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break block1;
   }
   $1293($5_1 + 16 | 0 | 0, $2_1 | 0);
   $2_1 = $1559($5_1 + 16 | 0 | 0) | 0;
   $1503($5_1 + 16 | 0 | 0) | 0;
   block3 : {
    block2 : {
     if (!$4_1) {
      break block2
     }
     $1560($5_1 + 16 | 0 | 0, $2_1 | 0);
     break block3;
    }
    $1561($5_1 + 16 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $1653($5_1 + 16 | 0 | 0) | 0;
   label : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $1654($5_1 + 16 | 0 | 0) | 0;
    block4 : {
     if (!($1655($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
      break block4
     }
     $2_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     $2624($5_1 + 16 | 0 | 0) | 0;
     break block1;
    }
    $2_1 = HEAP32[($1656($5_1 + 12 | 0 | 0) | 0) >> 2] | 0;
    $1183($1182($5_1 + 28 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $1657($5_1 + 12 | 0 | 0) | 0;
    $1184($5_1 + 28 | 0 | 0) | 0;
    continue label;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1653($0_1) {
  $0_1 = $0_1 | 0;
  return $1659($0_1 | 0, $1658($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1654($0_1) {
  $0_1 = $0_1 | 0;
  return $1659($0_1 | 0, ($1658($0_1 | 0) | 0) + (($1565($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1655($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1660($0_1 | 0) | 0 | 0) == ($1660($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1656($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1657($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1658($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($1719($0_1 | 0) | 0)) {
    break block
   }
   return $1890($0_1 | 0) | 0 | 0;
  }
  return $1893($0_1 | 0) | 0 | 0;
 }
 
 function $1659($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($2347($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1660($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1661($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1662($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66036 | 0) | 0 | 0;
 }
 
 function $1662($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 136 | 0) >> 2] = 37;
  HEAP32[($6_1 + 140 | 0) >> 2] = 0;
  $1626($6_1 + 136 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $1088($2_1 | 0) | 0 | 0);
  $5_1 = $1553() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 123 | 0) + ($1627($6_1 + 123 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 136 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1628($6_1 + 123 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1293($6_1 + 4 | 0 | 0, $2_1 | 0);
  $1663($6_1 + 123 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $1503($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $1664($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
  return $2_1 | 0;
 }
 
 function $1663($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $1161($6_1 | 0) | 0;
  $6_1 = $1559($6_1 | 0) | 0;
  $1607($7_1 + 4 | 0 | 0, $6_1 | 0);
  block1 : {
   block : {
    if (!($1514($7_1 + 4 | 0 | 0) | 0)) {
     break block
    }
    $1592($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + (($2_1 - $0_1 | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break block1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   block3 : {
    block2 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break block2;
     default:
      break block3;
     };
    }
    $10_1 = $1288($8_1 | 0, $10_1 << 24 >> 24 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   block4 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break block4
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break block4
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break block4
    }
    $10_1 = $1288($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $10_1 = $1288($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1682($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $1606($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label : while (1) {
    block5 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break block5
     }
     $1684($3_1 + (($9_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break block1;
    }
    block6 : {
     if (!(HEAPU8[($1521($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break block6
     }
     if (($10_1 | 0) != (HEAP8[($1521($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break block6
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
     HEAP32[$10_1 >> 2] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($1210($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $1288($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 4 | 0;
    HEAP32[$14_1 >> 2] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $2610($7_1 + 4 | 0 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1664($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  block4 : {
   block : {
    if (!$0_1) {
     break block
    }
    $7_1 = $1649($4_1 | 0) | 0;
    block1 : {
     $8_1 = ($2_1 - $1_1 | 0) >> 2 | 0;
     if (($8_1 | 0) < (1 | 0)) {
      break block1
     }
     if (($1185($0_1 | 0, $1_1 | 0, $8_1 | 0) | 0 | 0) != ($8_1 | 0)) {
      break block
     }
    }
    block2 : {
     $1_1 = ($3_1 - $1_1 | 0) >> 2 | 0;
     $1_1 = ($7_1 | 0) > ($1_1 | 0) ? $7_1 - $1_1 | 0 : 0;
     if (($1_1 | 0) < (1 | 0)) {
      break block2
     }
     $7_1 = $1680($6_1 + 4 | 0 | 0, $1_1 | 0, $5_1 | 0) | 0;
     $8_1 = $1185($0_1 | 0, $1681($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
     $2624($7_1 | 0) | 0;
     if (($8_1 | 0) != ($1_1 | 0)) {
      break block
     }
    }
    block3 : {
     $1_1 = ($3_1 - $2_1 | 0) >> 2 | 0;
     if (($1_1 | 0) < (1 | 0)) {
      break block3
     }
     if (($1185($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
      break block
     }
    }
    $1651($4_1 | 0, 0 | 0) | 0;
    break block4;
   }
   $0_1 = 0;
  }
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1665($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1666($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66029 | 0) | 0 | 0;
 }
 
 function $1666($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $1626($6_1 + 248 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $1088($2_1 | 0) | 0 | 0);
  $5_1 = $1553() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 224 | 0) + ($1627($6_1 + 224 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1628($6_1 + 224 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1293($6_1 + 20 | 0 | 0, $2_1 | 0);
  $1663($6_1 + 224 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $1503($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $1664($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1667($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1668($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 66036 | 0) | 0 | 0;
 }
 
 function $1668($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 136 | 0) >> 2] = 37;
  HEAP32[($6_1 + 140 | 0) >> 2] = 0;
  $1626($6_1 + 136 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $1088($2_1 | 0) | 0 | 0);
  $5_1 = $1553() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 123 | 0) + ($1627($6_1 + 123 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 136 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1628($6_1 + 123 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1293($6_1 + 4 | 0 | 0, $2_1 | 0);
  $1663($6_1 + 123 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $1503($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $1664($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
  return $2_1 | 0;
 }
 
 function $1669($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1670($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66029 | 0) | 0 | 0;
 }
 
 function $1670($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $1626($6_1 + 248 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $1088($2_1 | 0) | 0 | 0);
  $5_1 = $1553() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 224 | 0) + ($1627($6_1 + 224 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1628($6_1 + 224 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $1293($6_1 + 20 | 0 | 0, $2_1 | 0);
  $1663($6_1 + 224 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $1503($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $1664($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1671($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  return $1672($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, +$4_1, 67314 | 0) | 0 | 0;
 }
 
 function $1672($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $158_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = 37;
  HEAP32[($6_1 + 364 | 0) >> 2] = 0;
  $7_1 = $1639($6_1 + 360 | 0 | 1 | 0 | 0, $5_1 | 0, $1088($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 316 | 0) >> 2] = $6_1 + 320 | 0;
  $5_1 = $1553() | 0;
  block1 : {
   block : {
    if (!$7_1) {
     break block
    }
    $8_1 = $1640($2_1 | 0) | 0;
    HEAPF64[($6_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($6_1 + 32 | 0) >> 2] = $8_1;
    $5_1 = $1627($6_1 + 320 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    break block1;
   }
   HEAPF64[($6_1 + 48 | 0) >> 3] = $4_1;
   $5_1 = $1627($6_1 + 320 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 80 | 0) >> 2] = 109;
  $9_1 = $1641($6_1 + 308 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  $8_1 = $6_1 + 320 | 0;
  block5 : {
   block2 : {
    if (($5_1 | 0) < (30 | 0)) {
     break block2
    }
    $5_1 = $1553() | 0;
    block4 : {
     block3 : {
      if (!$7_1) {
       break block3
      }
      $8_1 = $1640($2_1 | 0) | 0;
      HEAPF64[($6_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$6_1 >> 2] = $8_1;
      $5_1 = $1642($6_1 + 316 | 0 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 | 0) | 0;
      break block4;
     }
     HEAPF64[($6_1 + 16 | 0) >> 3] = $4_1;
     $5_1 = $1642($6_1 + 316 | 0 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    }
    if (($5_1 | 0) == (-1 | 0)) {
     break block5
    }
    $1643($9_1 | 0, HEAP32[($6_1 + 316 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
   }
   $10_1 = $8_1 + $5_1 | 0;
   $11_1 = $1628($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 80 | 0) >> 2] = 109;
   $8_1 = $1673($6_1 + 72 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
   block7 : {
    block6 : {
     $7_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
     if (($7_1 | 0) != ($6_1 + 320 | 0 | 0)) {
      break block6
     }
     $5_1 = $6_1 + 80 | 0;
     break block7;
    }
    $5_1 = $1032($5_1 << 3 | 0 | 0) | 0;
    if (!$5_1) {
     break block5
    }
    $1674($8_1 | 0, $5_1 | 0);
    $7_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
   }
   $1293($6_1 + 60 | 0 | 0, $2_1 | 0);
   $1675($7_1 | 0, $11_1 | 0, $10_1 | 0, $5_1 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 60 | 0 | 0);
   $1503($6_1 + 60 | 0 | 0) | 0;
   $2_1 = $1664($1_1 | 0, $5_1 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1676($8_1 | 0) | 0;
   $1645($9_1 | 0) | 0;
   global$0 = $6_1 + 368 | 0;
   return $2_1 | 0;
  }
  $2595();
  wasm2js_trap();
 }
 
 function $1673($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1873($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1674($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1950($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1950($0_1 | 0) | 0) >> 2] = $1_1;
  block : {
   if (!$2_1) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($1951($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1675($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $12_1 = 0, $10_1 = 0, $7_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $1161($6_1 | 0) | 0;
  $9_1 = $1559($6_1 | 0) | 0;
  $1607($7_1 + 4 | 0 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  block1 : {
   block : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break block;
    default:
     break block1;
    };
   }
   $6_1 = $1288($8_1 | 0, $6_1 << 24 >> 24 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
   HEAP32[$11_1 >> 2] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  block3 : {
   block2 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break block2
    }
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break block2
    }
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break block2
    }
    $6_1 = $1288($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $6_1 = $1288($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break block3
     }
     if (!($1438(HEAP8[$6_1 >> 0] | 0 | 0, $1553() | 0 | 0) | 0)) {
      break block3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label;
    };
   }
   label1 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break block3
    }
    if (!($1440(HEAP8[$6_1 >> 0] | 0 | 0, $1553() | 0 | 0) | 0)) {
     break block3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label1;
   };
  }
  block5 : {
   block4 : {
    if (!($1514($7_1 + 4 | 0 | 0) | 0)) {
     break block4
    }
    $1592($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1 | 0) << 2 | 0) | 0;
    break block5;
   }
   $1682($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $1606($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label2 : while (1) {
    block6 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break block6
     }
     $1684($3_1 + (($10_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break block5;
    }
    block7 : {
     if ((HEAP8[($1521($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break block7
     }
     if (($12_1 | 0) != (HEAP8[($1521($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break block7
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
     HEAP32[$12_1 >> 2] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($1210($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $1288($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 4 | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label2;
   };
  }
  block10 : {
   block8 : {
    label3 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break block8
     }
     $11_1 = $6_1 + 1 | 0;
     block9 : {
      $6_1 = HEAP8[$6_1 >> 0] | 0;
      if (($6_1 | 0) == (46 | 0)) {
       break block9
      }
      $6_1 = $1288($8_1 | 0, $6_1 | 0) | 0;
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
      HEAP32[$12_1 >> 2] = $6_1;
      $6_1 = $11_1;
      continue label3;
     }
     break label3;
    };
    $6_1 = $1605($9_1 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    $12_1 = $14_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $12_1;
    HEAP32[$14_1 >> 2] = $6_1;
    break block10;
   }
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   $11_1 = $6_1;
  }
  $1592($8_1 | 0, $11_1 | 0, $2_1 | 0, $12_1 | 0) | 0;
  $6_1 = (HEAP32[$5_1 >> 2] | 0) + (($2_1 - $11_1 | 0) << 2 | 0) | 0;
  HEAP32[$5_1 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $2610($7_1 + 4 | 0 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1676($0_1) {
  $0_1 = $0_1 | 0;
  $1674($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1677($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $4$hi;
  return $1678($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, $5$hi | 0, 66467 | 0) | 0 | 0;
 }
 
 function $1678($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $169_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[($7_1 + 408 | 0) >> 2] = 37;
  HEAP32[($7_1 + 412 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = $1639($7_1 + 408 | 0 | 1 | 0 | 0, $6_1 | 0, $1088($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($7_1 + 364 | 0) >> 2] = $7_1 + 368 | 0;
  $6_1 = $1553() | 0;
  block1 : {
   block : {
    if (!$8_1) {
     break block
    }
    $9_1 = $1640($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $7_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 48 | 0) >> 2] = $9_1;
    $6_1 = $1627($7_1 + 368 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
    break block1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($7_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $1627($7_1 + 368 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($7_1 + 128 | 0) >> 2] = 109;
  $10_1 = $1641($7_1 + 356 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
  $9_1 = $7_1 + 368 | 0;
  block5 : {
   block2 : {
    if (($6_1 | 0) < (30 | 0)) {
     break block2
    }
    $6_1 = $1553() | 0;
    block4 : {
     block3 : {
      if (!$8_1) {
       break block3
      }
      $9_1 = $1640($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$7_1 >> 2] = $9_1;
      $6_1 = $1642($7_1 + 364 | 0 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 | 0) | 0;
      break block4;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $1642($7_1 + 364 | 0 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
    }
    if (($6_1 | 0) == (-1 | 0)) {
     break block5
    }
    $1643($10_1 | 0, HEAP32[($7_1 + 364 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
   }
   $11_1 = $9_1 + $6_1 | 0;
   $12_1 = $1628($9_1 | 0, $11_1 | 0, $2_1 | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = 109;
   $9_1 = $1673($7_1 + 120 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   block7 : {
    block6 : {
     $8_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
     if (($8_1 | 0) != ($7_1 + 368 | 0 | 0)) {
      break block6
     }
     $6_1 = $7_1 + 128 | 0;
     break block7;
    }
    $6_1 = $1032($6_1 << 3 | 0 | 0) | 0;
    if (!$6_1) {
     break block5
    }
    $1674($9_1 | 0, $6_1 | 0);
    $8_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
   }
   $1293($7_1 + 108 | 0 | 0, $2_1 | 0);
   $1675($8_1 | 0, $12_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 + 116 | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 108 | 0 | 0);
   $1503($7_1 + 108 | 0 | 0) | 0;
   $2_1 = $1664($1_1 | 0, $6_1 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1676($9_1 | 0) | 0;
   $1645($10_1 | 0) | 0;
   global$0 = $7_1 + 416 | 0;
   return $2_1 | 0;
  }
  $2595();
  wasm2js_trap();
 }
 
 function $1679($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  $6_1 = $1553() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $1627($5_1 + 176 | 0 | 0, 20 | 0, $6_1 | 0, 65969 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 176 | 0) + $7_1 | 0;
  $6_1 = $1628($5_1 + 176 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $1293($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $1161($5_1 + 16 | 0 | 0) | 0;
  $1503($5_1 + 16 | 0 | 0) | 0;
  $1592($8_1 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = ($5_1 + 16 | 0) + ($7_1 << 2 | 0) | 0;
  $2_1 = $1664($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + (($6_1 - ($5_1 + 176 | 0) | 0) << 2 | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 208 | 0;
  return $2_1 | 0;
 }
 
 function $1680($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $1499($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $2632($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1681($0_1) {
  $0_1 = $0_1 | 0;
  return $1901($1658($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1683($0_1 | 0, $1_1 | 0);
 }
 
 function $1683($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2348($0_1 | 0, $1_1 | 0);
 }
 
 function $1684($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1685($0_1 | 0, $1_1 | 0);
 }
 
 function $1685($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2351($0_1 | 0, $1_1 | 0);
 }
 
 function $1686($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
  $1293($8_1 + 4 | 0 | 0, $3_1 | 0);
  $2_1 = $1089($8_1 + 4 | 0 | 0) | 0;
  $1503($8_1 + 4 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $1_1 = 0;
  block : {
   label2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break block
    }
    if ($1_1) {
     break block
    }
    block1 : {
     if ($1090($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
      break block1
     }
     block5 : {
      block2 : {
       if (($1687($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break block2
       }
       $1_1 = $6_1 + 1 | 0;
       if (($1_1 | 0) == ($7_1 | 0)) {
        break block1
       }
       $9_1 = 0;
       block4 : {
        block3 : {
         $1_1 = $1687($2_1 | 0, HEAP8[$1_1 >> 0] | 0 | 0, 0 | 0) | 0;
         if (($1_1 | 0) == (69 | 0)) {
          break block3
         }
         $10_1 = 1;
         if (($1_1 & 255 | 0 | 0) == (48 | 0)) {
          break block3
         }
         $11_1 = $1_1;
         break block4;
        }
        $9_1 = $6_1 + 2 | 0;
        if (($9_1 | 0) == ($7_1 | 0)) {
         break block1
        }
        $10_1 = 2;
        $11_1 = $1687($2_1 | 0, HEAP8[$9_1 >> 0] | 0 | 0, 0 | 0) | 0;
        $9_1 = $1_1;
       }
       HEAP32[($8_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = ($6_1 + $10_1 | 0) + 1 | 0;
       break block5;
      }
      block6 : {
       if (!($1092($2_1 | 0, 1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
        break block6
       }
       block7 : {
        label : while (1) {
         $6_1 = $6_1 + 1 | 0;
         if (($6_1 | 0) == ($7_1 | 0)) {
          break block7
         }
         if ($1092($2_1 | 0, 1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
          continue label
         }
         break label;
        };
       }
       label1 : while (1) {
        if ($1090($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
         break block5
        }
        if (!($1092($2_1 | 0, 1 | 0, $1091($8_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
         break block5
        }
        $1093($8_1 + 12 | 0 | 0) | 0;
        continue label1;
       };
      }
      block8 : {
       if (($1512($2_1 | 0, $1091($8_1 + 12 | 0 | 0) | 0 | 0) | 0 | 0) != ($1512($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)) {
        break block8
       }
       $6_1 = $6_1 + 1 | 0;
       $1093($8_1 + 12 | 0 | 0) | 0;
       break block5;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     continue label2;
    }
    break label2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  block9 : {
   if (!($1090($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0)) {
    break block9
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1687($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1688($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $1689($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 624576549;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1394948685;
  $5_1 = $1686($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1690($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $1686($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1209($6_1 | 0) | 0 | 0, ($1209($6_1 | 0) | 0) + ($1210($6_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1691($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1293($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1089($6_1 + 8 | 0 | 0) | 0;
  $1503($6_1 + 8 | 0 | 0) | 0;
  $1692($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1692($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1507($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1693($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1293($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1089($6_1 + 8 | 0 | 0) | 0;
  $1503($6_1 + 8 | 0 | 0) | 0;
  $1694($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1694($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1507($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1695($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1293($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1089($6_1 + 8 | 0 | 0) | 0;
  $1503($6_1 + 8 | 0 | 0) | 0;
  $1696($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1696($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1697($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  block : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($5_1 | 0) < (69 | 0) ? $5_1 + 2e3 | 0 : $5_1 >>> 0 < 100 >>> 0 ? $5_1 + 1900 | 0 : $5_1) + -1900 | 0;
  }
 }
 
 function $1697($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = 0;
  block4 : {
   block1 : {
    block : {
     if (!($1090($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break block
     }
     $0_1 = 6;
     break block1;
    }
    block2 : {
     $6_1 = $1091($0_1 | 0) | 0;
     if ($1092($3_1 | 0, 64 | 0, $6_1 | 0) | 0) {
      break block2
     }
     $0_1 = 4;
     break block1;
    }
    $1_1 = $1687($3_1 | 0, $6_1 | 0, 0 | 0) | 0;
    block3 : {
     label : while (1) {
      $1093($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if ($1090($0_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
       break block3
      }
      if (($4_1 | 0) < (2 | 0)) {
       break block3
      }
      $6_1 = $1091($0_1 | 0) | 0;
      if (!($1092($3_1 | 0, 64 | 0, $6_1 | 0) | 0)) {
       break block4
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($1687($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label;
     };
    }
    if (!($1090($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break block4
    }
    $0_1 = 2;
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $0_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1698($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $151_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $1293($8_1 | 0, $3_1 | 0);
  $9_1 = $1089($8_1 | 0) | 0;
  $1503($8_1 | 0) | 0;
  block25 : {
   block24 : {
    block26 : {
     block2 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1692($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 1:
      case 33:
      case 39:
       $1694($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1686($0_1 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1209($1_1 | 0) | 0 | 0, ($1209($1_1 | 0) | 0) + ($1210($1_1 | 0) | 0) | 0 | 0) | 0;
       break block24;
      case 35:
      case 36:
       $1699($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 3:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 2032480100;
       HEAP32[$8_1 >> 2] = 623865125;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1686($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
       break block24;
      case 5:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 1680158061;
       HEAP32[$8_1 >> 2] = 623728933;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1686($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
       break block24;
      case 7:
       $1700($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 8:
       $1701($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 41:
       $1702($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 44:
       $1703($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 12:
       $1704($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 45:
      case 51:
       $1705($0_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 47:
       $1706($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 49:
       $14_1 = 0;
       $15_1 = HEAPU8[($14_1 + 85208 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 85209 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 85210 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 85211 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP8[($8_1 + 7 | 0) >> 0] = $15_1;
       HEAP8[($8_1 + 8 | 0) >> 0] = $15_1 >>> 8 | 0;
       HEAP8[($8_1 + 9 | 0) >> 0] = $15_1 >>> 16 | 0;
       HEAP8[($8_1 + 10 | 0) >> 0] = $15_1 >>> 24 | 0;
       $13_1 = 0;
       i64toi32_i32$0 = HEAPU8[($13_1 + 85201 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 85202 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 85203 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 85204 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[($13_1 + 85205 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 85206 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 85207 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 85208 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $151_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[$8_1 >> 2] = $151_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1686($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 11 | 0 | 0) | 0;
       break block24;
      case 17:
       HEAP8[($8_1 + 4 | 0) >> 0] = HEAPU8[(0 + 85216 | 0) >> 0] | 0;
       $16_1 = 0;
       HEAP32[$8_1 >> 2] = HEAPU8[($16_1 + 85212 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 85213 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 85214 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 85215 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1686($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 5 | 0 | 0) | 0;
       break block24;
      case 18:
       $1707($0_1 | 0, $5_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 19:
       i64toi32_i32$0 = $8_1;
       i64toi32_i32$1 = 1394948685;
       HEAP32[$8_1 >> 2] = 624576549;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1686($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
       break block24;
      case 54:
       $1708($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break block25;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $1686($0_1 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1209($1_1 | 0) | 0 | 0, ($1209($1_1 | 0) | 0) + ($1210($1_1 | 0) | 0) | 0 | 0) | 0;
       break block24;
      case 56:
       $1696($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 24:
       $1709($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break block26
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break block2;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break block24;
    }
    $1710($0_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1699($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1697($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1700($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1697($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (23 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1701($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1697($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1702($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1697($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (365 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1703($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $3_1 = $1697($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   $3_1 = $3_1 + -1 | 0;
   if ($3_1 >>> 0 > 11 >>> 0) {
    break block
   }
   if ($5_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $3_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $5_1 | 4 | 0;
 }
 
 function $1704($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1697($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (59 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1705($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  block : {
   label : while (1) {
    if ($1090($1_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
     break block
    }
    if (!($1092($4_1 | 0, 1 | 0, $1091($1_1 | 0) | 0 | 0) | 0)) {
     break block
    }
    $1093($1_1 | 0) | 0;
    continue label;
   };
  }
  block1 : {
   if (!($1090($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
    break block1
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1706($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($1210($0_1 | 0) | 0 | 0) != (0 - ($1210($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break block
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $4_1 = $1507($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  block1 : {
   if (($4_1 | 0) != ($0_1 | 0)) {
    break block1
   }
   if (($5_1 | 0) != (12 | 0)) {
    break block1
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  block2 : {
   if (($4_1 - $0_1 | 0 | 0) != (12 | 0)) {
    break block2
   }
   if (($5_1 | 0) > (11 | 0)) {
    break block2
   }
   HEAP32[$1_1 >> 2] = $5_1 + 12 | 0;
  }
 }
 
 function $1707($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1697($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (60 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1708($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1697($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (6 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1709($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1697($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  block : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1 + -1900 | 0;
  }
 }
 
 function $1710($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  block3 : {
   block1 : {
    block : {
     if (!($1090($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break block
     }
     $1_1 = 6;
     break block1;
    }
    block2 : {
     if (($1687($4_1 | 0, $1091($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) == (37 | 0)) {
      break block2
     }
     $1_1 = 4;
     break block1;
    }
    if (!($1090($1093($1_1 | 0) | 0 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break block3
    }
    $1_1 = 2;
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $1_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1711($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
  $1293($8_1 + 4 | 0 | 0, $3_1 | 0);
  $2_1 = $1161($8_1 + 4 | 0 | 0) | 0;
  $1503($8_1 + 4 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $1_1 = 0;
  block : {
   label2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break block
    }
    if ($1_1) {
     break block
    }
    block1 : {
     if ($1162($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
      break block1
     }
     block5 : {
      block2 : {
       if (($1712($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break block2
       }
       $1_1 = $6_1 + 4 | 0;
       if (($1_1 | 0) == ($7_1 | 0)) {
        break block1
       }
       $9_1 = 0;
       block4 : {
        block3 : {
         $1_1 = $1712($2_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, 0 | 0) | 0;
         if (($1_1 | 0) == (69 | 0)) {
          break block3
         }
         $10_1 = 4;
         if (($1_1 & 255 | 0 | 0) == (48 | 0)) {
          break block3
         }
         $11_1 = $1_1;
         break block4;
        }
        $9_1 = $6_1 + 8 | 0;
        if (($9_1 | 0) == ($7_1 | 0)) {
         break block1
        }
        $10_1 = 8;
        $11_1 = $1712($2_1 | 0, HEAP32[$9_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $9_1 = $1_1;
       }
       HEAP32[($8_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = ($6_1 + $10_1 | 0) + 4 | 0;
       break block5;
      }
      block6 : {
       if (!($1164($2_1 | 0, 1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
        break block6
       }
       block7 : {
        label : while (1) {
         $6_1 = $6_1 + 4 | 0;
         if (($6_1 | 0) == ($7_1 | 0)) {
          break block7
         }
         if ($1164($2_1 | 0, 1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
          continue label
         }
         break label;
        };
       }
       label1 : while (1) {
        if ($1162($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
         break block5
        }
        if (!($1164($2_1 | 0, 1 | 0, $1163($8_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
         break block5
        }
        $1165($8_1 + 12 | 0 | 0) | 0;
        continue label1;
       };
      }
      block8 : {
       if (($1564($2_1 | 0, $1163($8_1 + 12 | 0 | 0) | 0 | 0) | 0 | 0) != ($1564($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)) {
        break block8
       }
       $6_1 = $6_1 + 4 | 0;
       $1165($8_1 + 12 | 0 | 0) | 0;
       break block5;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     continue label2;
    }
    break label2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  block9 : {
   if (!($1162($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0)) {
    break block9
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1712($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1713($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $1714($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85400 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85404 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85392 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85396 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85384 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85388 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85376 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85380 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $1711($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $1715($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $1711($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1716($6_1 | 0) | 0 | 0, ($1716($6_1 | 0) | 0) + (($1565($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1716($0_1) {
  $0_1 = $0_1 | 0;
  return $1718($1717($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1717($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($1719($0_1 | 0) | 0)) {
    break block
   }
   return $1806($0_1 | 0) | 0 | 0;
  }
  return $2355($0_1 | 0) | 0 | 0;
 }
 
 function $1718($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1719($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1804($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $1720($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1804($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1721($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1804($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0 | 0;
 }
 
 function $1722($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1293($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1161($6_1 + 8 | 0 | 0) | 0;
  $1503($6_1 + 8 | 0 | 0) | 0;
  $1723($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1723($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1562($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1724($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1293($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1161($6_1 + 8 | 0 | 0) | 0;
  $1503($6_1 + 8 | 0 | 0) | 0;
  $1725($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1725($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1562($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1726($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $1293($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $1161($6_1 + 8 | 0 | 0) | 0;
  $1503($6_1 + 8 | 0 | 0) | 0;
  $1727($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1727($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1728($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  block : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($5_1 | 0) < (69 | 0) ? $5_1 + 2e3 | 0 : $5_1 >>> 0 < 100 >>> 0 ? $5_1 + 1900 | 0 : $5_1) + -1900 | 0;
  }
 }
 
 function $1728($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = 0;
  block4 : {
   block1 : {
    block : {
     if (!($1162($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break block
     }
     $0_1 = 6;
     break block1;
    }
    block2 : {
     $6_1 = $1163($0_1 | 0) | 0;
     if ($1164($3_1 | 0, 64 | 0, $6_1 | 0) | 0) {
      break block2
     }
     $0_1 = 4;
     break block1;
    }
    $1_1 = $1712($3_1 | 0, $6_1 | 0, 0 | 0) | 0;
    block3 : {
     label : while (1) {
      $1165($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if ($1162($0_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
       break block3
      }
      if (($4_1 | 0) < (2 | 0)) {
       break block3
      }
      $6_1 = $1163($0_1 | 0) | 0;
      if (!($1164($3_1 | 0, 64 | 0, $6_1 | 0) | 0)) {
       break block4
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($1712($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label;
     };
    }
    if (!($1162($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break block4
    }
    $0_1 = 2;
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $0_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1729($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $73_1 = 0, $76_1 = 0, $78_1 = 0, $80_1 = 0, $94_1 = 0, $97_1 = 0, $99_1 = 0, $101_1 = 0, $184_1 = 0, $186_1 = 0, $207_1 = 0, $210_1 = 0, $212_1 = 0, $214_1 = 0;
  $8_1 = global$0 - 48 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $1293($8_1 | 0, $3_1 | 0);
  $9_1 = $1161($8_1 | 0) | 0;
  $1503($8_1 | 0) | 0;
  block26 : {
   block24 : {
    block27 : {
     block2 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1723($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 1:
      case 33:
      case 39:
       $1725($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1711($0_1 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1716($1_1 | 0) | 0 | 0, ($1716($1_1 | 0) | 0) + (($1565($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break block24;
      case 35:
      case 36:
       $1730($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 3:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85256 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85260 | 0) >> 2] | 0;
       $73_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $73_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85248 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85252 | 0) >> 2] | 0;
       $76_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $76_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85240 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85244 | 0) >> 2] | 0;
       $78_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $78_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85232 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85236 | 0) >> 2] | 0;
       $80_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $80_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1711($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break block24;
      case 5:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85288 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85292 | 0) >> 2] | 0;
       $94_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $94_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85280 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85284 | 0) >> 2] | 0;
       $97_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $97_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85272 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85276 | 0) >> 2] | 0;
       $99_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $99_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85264 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85268 | 0) >> 2] | 0;
       $101_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $101_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1711($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break block24;
      case 7:
       $1731($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 8:
       $1732($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 41:
       $1733($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 44:
       $1734($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 12:
       $1735($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 45:
      case 51:
       $1736($0_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 47:
       $1737($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 49:
       block25 : {
        if (!44) {
         break block25
        }
        wasm2js_memory_copy($8_1, 85296, 44);
       }
       HEAP32[($8_1 + 44 | 0) >> 2] = $1711($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 44 | 0 | 0) | 0;
       break block24;
      case 17:
       HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(0 + 85360 | 0) >> 2] | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85352 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85356 | 0) >> 2] | 0;
       $184_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $184_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85344 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85348 | 0) >> 2] | 0;
       $186_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $186_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1711($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 20 | 0 | 0) | 0;
       break block24;
      case 18:
       $1738($0_1 | 0, $5_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 19:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85400 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85404 | 0) >> 2] | 0;
       $207_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $207_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85392 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85396 | 0) >> 2] | 0;
       $210_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $210_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85384 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85388 | 0) >> 2] | 0;
       $212_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $212_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85376 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85380 | 0) >> 2] | 0;
       $214_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $214_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1711($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break block24;
      case 54:
       $1739($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break block26;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $1711($0_1 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1716($1_1 | 0) | 0 | 0, ($1716($1_1 | 0) | 0) + (($1565($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break block24;
      case 56:
       $1727($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 24:
       $1740($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break block27
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break block2;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break block24;
    }
    $1741($0_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 48 | 0;
  return $4_1 | 0;
 }
 
 function $1730($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1728($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1731($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1728($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (23 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1732($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1728($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1733($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1728($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (365 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1734($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $3_1 = $1728($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   $3_1 = $3_1 + -1 | 0;
   if ($3_1 >>> 0 > 11 >>> 0) {
    break block
   }
   if ($5_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $3_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $5_1 | 4 | 0;
 }
 
 function $1735($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1728($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (59 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1736($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  block : {
   label : while (1) {
    if ($1162($1_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
     break block
    }
    if (!($1164($4_1 | 0, 1 | 0, $1163($1_1 | 0) | 0 | 0) | 0)) {
     break block
    }
    $1165($1_1 | 0) | 0;
    continue label;
   };
  }
  block1 : {
   if (!($1162($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
    break block1
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1737($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($1565($0_1 | 0) | 0 | 0) != (0 - ($1565($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break block
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $4_1 = $1562($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  block1 : {
   if (($4_1 | 0) != ($0_1 | 0)) {
    break block1
   }
   if (($5_1 | 0) != (12 | 0)) {
    break block1
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  block2 : {
   if (($4_1 - $0_1 | 0 | 0) != (12 | 0)) {
    break block2
   }
   if (($5_1 | 0) > (11 | 0)) {
    break block2
   }
   HEAP32[$1_1 >> 2] = $5_1 + 12 | 0;
  }
 }
 
 function $1738($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1728($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (60 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1739($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1728($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (6 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1740($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1728($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  block : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1 + -1900 | 0;
  }
 }
 
 function $1741($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  block3 : {
   block1 : {
    block : {
     if (!($1162($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break block
     }
     $1_1 = 6;
     break block1;
    }
    block2 : {
     if (($1712($4_1 | 0, $1163($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) == (37 | 0)) {
      break block2
     }
     $1_1 = 4;
     break block1;
    }
    if (!($1162($1165($1_1 | 0) | 0 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break block3
    }
    $1_1 = 2;
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $1_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1742($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 116 | 0;
  $1743($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $0_1 = $1744($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $0_1 | 0;
 }
 
 function $1743($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 15 | 0) >> 0] = 0;
  HEAP8[($6_1 + 14 | 0) >> 0] = $5_1;
  HEAP8[($6_1 + 13 | 0) >> 0] = $4_1;
  HEAP8[($6_1 + 12 | 0) >> 0] = 37;
  block : {
   if (!$5_1) {
    break block
   }
   $1745($6_1 + 13 | 0 | 0, $6_1 + 14 | 0 | 0);
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($1455($1_1 | 0, $1746($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 12 | 0 | 0, $3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $1744($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1747($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAPU8[$0_1 >> 0] | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
  HEAP8[$1_1 >> 0] = $2_1;
 }
 
 function $1746($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1747($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2357($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1748($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 416 | 0;
  $1749($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $0_1 = $1750($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 416 | 0;
  return $0_1 | 0;
 }
 
 function $1749($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 132 | 0;
  $1743($0_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 32 | 0;
  block : {
   $0_1 = $1752($1_1 | 0, $6_1 + 12 | 0 | 0, $1751($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($0_1 | 0) != (-1 | 0)) {
    break block
   }
   $2605(66321 | 0);
   wasm2js_trap();
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($0_1 << 2 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
 }
 
 function $1750($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1753($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1751($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1752($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $1556($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $3_1 = $1471($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1557($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1753($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2370($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1754($0_1) {
  $0_1 = $0_1 | 0;
  return $1755() | 0 | 0;
 }
 
 function $1755() {
  return $1756() | 0 | 0;
 }
 
 function $1756() {
  return 127 | 0;
 }
 
 function $1757($0_1) {
  $0_1 = $0_1 | 0;
  return $1755() | 0 | 0;
 }
 
 function $1758($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1186($0_1 | 0) | 0;
 }
 
 function $1759($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1186($0_1 | 0) | 0;
 }
 
 function $1760($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1186($0_1 | 0) | 0;
 }
 
 function $1761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1650($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1762($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1763($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1764($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1765($0_1) {
  $0_1 = $0_1 | 0;
  return $1755() | 0 | 0;
 }
 
 function $1766($0_1) {
  $0_1 = $0_1 | 0;
  return $1755() | 0 | 0;
 }
 
 function $1767($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1186($0_1 | 0) | 0;
 }
 
 function $1768($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1186($0_1 | 0) | 0;
 }
 
 function $1769($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1186($0_1 | 0) | 0;
 }
 
 function $1770($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1650($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1771($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1772($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1774($0_1) {
  $0_1 = $0_1 | 0;
  return $1775() | 0 | 0;
 }
 
 function $1775() {
  return $1776() | 0 | 0;
 }
 
 function $1776() {
  return 2147483647 | 0;
 }
 
 function $1777($0_1) {
  $0_1 = $0_1 | 0;
  return $1775() | 0 | 0;
 }
 
 function $1778($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1186($0_1 | 0) | 0;
 }
 
 function $1779($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1780($0_1 | 0) | 0;
 }
 
 function $1780($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $1781($0_1 | 0, $1_1 + 15 | 0 | 0, $1_1 + 14 | 0 | 0) | 0;
  $1782($0_1 | 0, 0 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1781($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2300($2383($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1782($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1783($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1780($0_1 | 0) | 0;
 }
 
 function $1784($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1680($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1785($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1786($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1787($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1788($0_1) {
  $0_1 = $0_1 | 0;
  return $1775() | 0 | 0;
 }
 
 function $1789($0_1) {
  $0_1 = $0_1 | 0;
  return $1775() | 0 | 0;
 }
 
 function $1790($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1186($0_1 | 0) | 0;
 }
 
 function $1791($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1780($0_1 | 0) | 0;
 }
 
 function $1792($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1780($0_1 | 0) | 0;
 }
 
 function $1793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1680($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1794($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1795($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1796($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1797($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $28_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1798($1203($1_1 | 0) | 0 | 0);
  $0_1 = $1799($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  block1 : {
   block : {
    if ($1196($1_1 | 0) | 0) {
     break block
    }
    $1_1 = $1207($1_1 | 0) | 0;
    $3_1 = $1198($0_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $28_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[i64toi32_i32$0 >> 2] = $28_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1188($0_1 | 0, $1200($0_1 | 0) | 0 | 0);
    break block1;
   }
   $2614($0_1 | 0, $1280($1281($1_1 | 0) | 0 | 0) | 0 | 0, $1215($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1798($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1799($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2384($1252($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1800($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $28_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1802($1801($1_1 | 0) | 0 | 0);
  $0_1 = $1803($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  block1 : {
   block : {
    if ($1719($1_1 | 0) | 0) {
     break block
    }
    $1_1 = $1804($1_1 | 0) | 0;
    $3_1 = $1805($0_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $28_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[i64toi32_i32$0 >> 2] = $28_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1782($0_1 | 0, $1721($0_1 | 0) | 0 | 0);
    break block1;
   }
   $2628($0_1 | 0, $1718($1806($1_1 | 0) | 0 | 0) | 0 | 0, $1720($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1801($0_1) {
  $0_1 = $0_1 | 0;
  return $2320($0_1 | 0) | 0 | 0;
 }
 
 function $1802($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1803($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2385($2299($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1804($0_1) {
  $0_1 = $0_1 | 0;
  return $2333($0_1 | 0) | 0 | 0;
 }
 
 function $1805($0_1) {
  $0_1 = $0_1 | 0;
  return $2322($0_1 | 0) | 0 | 0;
 }
 
 function $1806($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1804($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1807($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 272 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 264 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 268 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 110;
  $1_1 = $1641($7_1 + 152 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $1293($7_1 + 144 | 0 | 0, $4_1 | 0);
  $8_1 = $1089($7_1 + 144 | 0 | 0) | 0;
  HEAP8[($7_1 + 143 | 0) >> 0] = 0;
  block : {
   if (!($1809($7_1 + 268 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 144 | 0 | 0, $1088($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 143 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 148 | 0 | 0, $7_1 + 260 | 0 | 0) | 0)) {
    break block
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 67171 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 67172 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 67173 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 67174 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 135 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 136 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 137 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 138 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 67168 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67169 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67170 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67171 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = HEAPU8[($10_1 + 67164 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67165 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67166 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67167 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 132 | 0) >> 2] = i64toi32_i32$1;
   $1552($8_1 | 0, $7_1 + 128 | 0 | 0, $7_1 + 138 | 0 | 0, $7_1 + 118 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 109;
   $8_1 = $1641($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $4_1 = $7_1 + 16 | 0;
   block2 : {
    block1 : {
     if (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1810($1_1 | 0) | 0) | 0 | 0) < (99 | 0)) {
      break block1
     }
     $1643($8_1 | 0, $1032(((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1810($1_1 | 0) | 0) | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1810($8_1 | 0) | 0)) {
      break block2
     }
     $4_1 = $1810($8_1 | 0) | 0;
    }
    block3 : {
     if ((HEAPU8[($7_1 + 143 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break block3
     }
     HEAP8[$4_1 >> 0] = 45;
     $4_1 = $4_1 + 1 | 0;
    }
    $2_1 = $1810($1_1 | 0) | 0;
    block5 : {
     label : while (1) {
      block4 : {
       if ($2_1 >>> 0 < (HEAP32[($7_1 + 148 | 0) >> 2] | 0) >>> 0) {
        break block4
       }
       HEAP8[$4_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($1457($7_1 + 16 | 0 | 0, 66243 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break block5
       }
       $1645($8_1 | 0) | 0;
       break block;
      }
      HEAP8[$4_1 >> 0] = HEAPU8[(($7_1 + 128 | 0) + (($1597($7_1 + 118 | 0 | 0, $1811($7_1 + 118 | 0 | 0) | 0 | 0, $2_1 | 0) | 0) - ($7_1 + 118 | 0) | 0) | 0) >> 0] | 0;
      $4_1 = $4_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue label;
     };
    }
    $2605(65806 | 0);
    wasm2js_trap();
   }
   $2595();
   wasm2js_trap();
  }
  block6 : {
   if (!($1090($7_1 + 268 | 0 | 0, $7_1 + 264 | 0 | 0) | 0)) {
    break block6
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 268 | 0) >> 2] | 0;
  $1503($7_1 + 144 | 0 | 0) | 0;
  $1645($1_1 | 0) | 0;
  global$0 = $7_1 + 272 | 0;
  return $2_1 | 0;
 }
 
 function $1808($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1809($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $370_1 = 0;
  $11_1 = global$0 - 528 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 520 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 524 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!($1090($0_1 | 0, $11_1 + 524 | 0 | 0) | 0)) {
     break block
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
    $0_1 = 0;
    break block1;
   }
   HEAP32[($11_1 + 76 | 0) >> 2] = 110;
   $12_1 = $1813($11_1 + 104 | 0 | 0, $11_1 + 112 | 0 | 0, $11_1 + 76 | 0 | 0) | 0;
   $10_1 = $1814($12_1 | 0) | 0;
   HEAP32[($11_1 + 100 | 0) >> 2] = $10_1;
   HEAP32[($11_1 + 96 | 0) >> 2] = $10_1 + 400 | 0;
   $13_1 = $1186($11_1 + 76 | 0 | 0) | 0;
   $14_1 = $1186($11_1 + 64 | 0 | 0) | 0;
   $15_1 = $1186($11_1 + 52 | 0 | 0) | 0;
   $16_1 = $1186($11_1 + 40 | 0 | 0) | 0;
   $17_1 = $1186($11_1 + 28 | 0 | 0) | 0;
   $1815($2_1 | 0, $3_1 | 0, $11_1 + 92 | 0 | 0, $11_1 + 91 | 0 | 0, $11_1 + 90 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 24 | 0 | 0);
   HEAP32[$9_1 >> 2] = $1810($8_1 | 0) | 0;
   $18_1 = $4_1 & 512 | 0;
   $3_1 = 0;
   $1_1 = 0;
   label6 : while (1) {
    $2_1 = $1_1;
    block8 : {
     block9 : {
      block12 : {
       block2 : {
        if (($3_1 | 0) == (4 | 0)) {
         break block2
        }
        if ($1090($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
         break block2
        }
        $10_1 = 0;
        block7 : {
         block5 : {
          block6 : {
           block11 : {
            block3 : {
             switch (HEAPU8[(($11_1 + 92 | 0) + $3_1 | 0) >> 0] | 0 | 0) {
             case 1:
              if (($3_1 | 0) == (3 | 0)) {
               break block9
              }
              block10 : {
               if (!($1092($7_1 | 0, 1 | 0, $1091($0_1 | 0) | 0 | 0) | 0)) {
                break block10
               }
               $1816($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
               $2619($17_1 | 0, $1817($11_1 + 16 | 0 | 0) | 0 | 0);
               break block11;
              }
              HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
              $0_1 = 0;
              break block12;
             case 0:
              break block3;
             case 2:
              break block5;
             case 3:
              break block6;
             case 4:
              break block7;
             default:
              break block8;
             };
            }
            if (($3_1 | 0) == (3 | 0)) {
             break block9
            }
           }
           label : while (1) {
            if ($1090($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break block9
            }
            if (!($1092($7_1 | 0, 1 | 0, $1091($0_1 | 0) | 0 | 0) | 0)) {
             break block9
            }
            $1816($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
            $2619($17_1 | 0, $1817($11_1 + 16 | 0 | 0) | 0 | 0);
            continue label;
           };
          }
          block13 : {
           if (!($1210($15_1 | 0) | 0)) {
            break block13
           }
           if ((($1091($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1521($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
            break block13
           }
           $1093($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 0;
           $1_1 = ($1210($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $2_1;
           break block8;
          }
          block14 : {
           if (!($1210($16_1 | 0) | 0)) {
            break block14
           }
           if ((($1091($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1521($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
            break block14
           }
           $1093($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 1;
           $1_1 = ($1210($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $2_1;
           break block8;
          }
          block15 : {
           if (!($1210($15_1 | 0) | 0)) {
            break block15
           }
           if (!($1210($16_1 | 0) | 0)) {
            break block15
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break block12;
          }
          block16 : {
           if ($1210($15_1 | 0) | 0) {
            break block16
           }
           if (!($1210($16_1 | 0) | 0)) {
            break block9
           }
          }
          HEAP8[$6_1 >> 0] = !($1210($16_1 | 0) | 0);
          break block9;
         }
         block17 : {
          if ($2_1) {
           break block17
          }
          if ($3_1 >>> 0 < 2 >>> 0) {
           break block17
          }
          if ($18_1) {
           break block17
          }
          $1_1 = 0;
          if (!(($3_1 | 0) == (2 | 0) & ((HEAPU8[($11_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0) | 0)) {
           break block8
          }
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = $1617($14_1 | 0) | 0;
         $10_1 = $1818($11_1 + 16 | 0 | 0, $11_1 + 12 | 0 | 0) | 0;
         block18 : {
          if (!$3_1) {
           break block18
          }
          if ((HEAPU8[(($3_1 + ($11_1 + 92 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
           break block18
          }
          block19 : {
           label1 : while (1) {
            HEAP32[($11_1 + 12 | 0) >> 2] = $1618($14_1 | 0) | 0;
            if ($1819($10_1 | 0, $11_1 + 12 | 0 | 0) | 0) {
             break block19
            }
            if (!($1092($7_1 | 0, 1 | 0, HEAP8[($1820($10_1 | 0) | 0) >> 0] | 0 | 0) | 0)) {
             break block19
            }
            $1821($10_1 | 0) | 0;
            continue label1;
           };
          }
          HEAP32[($11_1 + 12 | 0) >> 2] = $1617($14_1 | 0) | 0;
          block20 : {
           $1_1 = $1822($10_1 | 0, $11_1 + 12 | 0 | 0) | 0;
           if ($1_1 >>> 0 > ($1210($17_1 | 0) | 0) >>> 0) {
            break block20
           }
           HEAP32[($11_1 + 12 | 0) >> 2] = $1618($17_1 | 0) | 0;
           if ($1824($1823($11_1 + 12 | 0 | 0, $1_1 | 0) | 0 | 0, $1618($17_1 | 0) | 0 | 0, $1617($14_1 | 0) | 0 | 0) | 0) {
            break block18
           }
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $1617($14_1 | 0) | 0;
          HEAP32[$10_1 >> 2] = HEAP32[($1818($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
         block21 : {
          label2 : while (1) {
           HEAP32[($11_1 + 8 | 0) >> 2] = $1618($14_1 | 0) | 0;
           if ($1819($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0) {
            break block21
           }
           if ($1090($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block21
           }
           if ((($1091($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1820($11_1 + 12 | 0 | 0) | 0) >> 0] | 0 | 0)) {
            break block21
           }
           $1093($0_1 | 0) | 0;
           $1821($11_1 + 12 | 0 | 0) | 0;
           continue label2;
          };
         }
         if (!$18_1) {
          break block9
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $1618($14_1 | 0) | 0;
         if ($1819($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0) {
          break block9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break block12;
        }
        block22 : {
         label3 : while (1) {
          if ($1090($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
           break block22
          }
          block25 : {
           block23 : {
            $1_1 = $1091($0_1 | 0) | 0;
            if (!($1092($7_1 | 0, 64 | 0, $1_1 | 0) | 0)) {
             break block23
            }
            block24 : {
             $4_1 = HEAP32[$9_1 >> 2] | 0;
             if (($4_1 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
              break block24
             }
             $1825($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
             $4_1 = HEAP32[$9_1 >> 2] | 0;
            }
            HEAP32[$9_1 >> 2] = $4_1 + 1 | 0;
            HEAP8[$4_1 >> 0] = $1_1;
            $10_1 = $10_1 + 1 | 0;
            break block25;
           }
           if (!($1210($13_1 | 0) | 0)) {
            break block22
           }
           if (!$10_1) {
            break block22
           }
           if (($1_1 & 255 | 0 | 0) != ((HEAPU8[($11_1 + 90 | 0) >> 0] | 0) & 255 | 0 | 0)) {
            break block22
           }
           block26 : {
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
            if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
             break block26
            }
            $1826($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
           HEAP32[$1_1 >> 2] = $10_1;
           $10_1 = 0;
          }
          $1093($0_1 | 0) | 0;
          continue label3;
         };
        }
        block27 : {
         $370_1 = $1814($12_1 | 0) | 0;
         $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         if (($370_1 | 0) == ($1_1 | 0)) {
          break block27
         }
         if (!$10_1) {
          break block27
         }
         block28 : {
          if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
           break block28
          }
          $1826($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
          $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
         HEAP32[$1_1 >> 2] = $10_1;
        }
        block29 : {
         if ((HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break block29
         }
         block31 : {
          block30 : {
           if ($1090($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block30
           }
           if ((($1091($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($11_1 + 91 | 0) >> 0] | 0 | 0)) {
            break block31
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break block12;
         }
         label4 : while (1) {
          $1093($0_1 | 0) | 0;
          if ((HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
           break block29
          }
          block33 : {
           block32 : {
            if ($1090($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break block32
            }
            if ($1092($7_1 | 0, 64 | 0, $1091($0_1 | 0) | 0 | 0) | 0) {
             break block33
            }
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break block12;
          }
          block34 : {
           if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
            break block34
           }
           $1825($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
          }
          $10_1 = $1091($0_1 | 0) | 0;
          $1_1 = HEAP32[$9_1 >> 2] | 0;
          HEAP32[$9_1 >> 2] = $1_1 + 1 | 0;
          HEAP8[$1_1 >> 0] = $10_1;
          HEAP32[($11_1 + 24 | 0) >> 2] = (HEAP32[($11_1 + 24 | 0) >> 2] | 0) + -1 | 0;
          continue label4;
         };
        }
        $1_1 = $2_1;
        if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1810($8_1 | 0) | 0 | 0)) {
         break block8
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break block12;
       }
       block35 : {
        if (!$2_1) {
         break block35
        }
        $10_1 = 1;
        label5 : while (1) {
         if ($10_1 >>> 0 >= ($1210($2_1 | 0) | 0) >>> 0) {
          break block35
         }
         block37 : {
          block36 : {
           if ($1090($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block36
           }
           if ((($1091($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($1513($2_1 | 0, $10_1 | 0) | 0) >> 0] | 0 | 0)) {
            break block37
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break block12;
         }
         $1093($0_1 | 0) | 0;
         $10_1 = $10_1 + 1 | 0;
         continue label5;
        };
       }
       $0_1 = 1;
       if (($1814($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0)) {
        break block12
       }
       $0_1 = 0;
       HEAP32[($11_1 + 16 | 0) >> 2] = 0;
       $1524($13_1 | 0, $1814($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, $11_1 + 16 | 0 | 0);
       block38 : {
        if (!(HEAP32[($11_1 + 16 | 0) >> 2] | 0)) {
         break block38
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        break block12;
       }
       $0_1 = 1;
      }
      $2610($17_1 | 0) | 0;
      $2610($16_1 | 0) | 0;
      $2610($15_1 | 0) | 0;
      $2610($14_1 | 0) | 0;
      $2610($13_1 | 0) | 0;
      $1827($12_1 | 0) | 0;
      break block1;
     }
     $1_1 = $2_1;
    }
    $3_1 = $3_1 + 1 | 0;
    continue label6;
   };
  }
  global$0 = $11_1 + 528 | 0;
  return $0_1 | 0;
 }
 
 function $1810($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1828($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1811($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 10 | 0 | 0;
 }
 
 function $1812($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2386($0_1 | 0, $1_1 | 0) | 0;
  $1302($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1813($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1837($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1814($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1838($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1815($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  block1 : {
   block : {
    if (!$0_1) {
     break block
    }
    $1_1 = $1839($1_1 | 0) | 0;
    $1840($10_1 + 4 | 0 | 0, $1_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1841($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1190($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2610($10_1 + 4 | 0 | 0) | 0;
    $1842($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1190($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2610($10_1 + 4 | 0 | 0) | 0;
    HEAP8[$3_1 >> 0] = $1843($1_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $1844($1_1 | 0) | 0;
    $1845($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1190($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2610($10_1 + 4 | 0 | 0) | 0;
    $1846($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1190($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2610($10_1 + 4 | 0 | 0) | 0;
    $1_1 = $1847($1_1 | 0) | 0;
    break block1;
   }
   $1_1 = $1848($1_1 | 0) | 0;
   $1849($10_1 + 4 | 0 | 0, $1_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1850($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1190($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2610($10_1 + 4 | 0 | 0) | 0;
   $1851($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1190($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2610($10_1 + 4 | 0 | 0) | 0;
   HEAP8[$3_1 >> 0] = $1852($1_1 | 0) | 0;
   HEAP8[$4_1 >> 0] = $1853($1_1 | 0) | 0;
   $1854($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1190($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2610($10_1 + 4 | 0 | 0) | 0;
   $1855($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1190($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2610($10_1 + 4 | 0 | 0) | 0;
   $1_1 = $1856($1_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $1_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1816($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1857($0_1 | 0, ($1101(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24 >> 24 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1817($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1818($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1623($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1819($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1858($0_1 | 0) | 0 | 0) == ($1623($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1820($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1821($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1822($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1858($0_1 | 0) | 0) - ($1623($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $1823($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1860($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1824($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1859($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1825($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1861($0_1 | 0) | 0) >> 2] | 0;
  block1 : {
   block : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1810($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($1268() | 0) >>> 1 | 0) >>> 0) {
     break block
    }
    $5_1 = $5_1 << 1 | 0;
    break block1;
   }
   $5_1 = $1268() | 0;
  }
  $5_1 = $5_1 >>> 0 > 1 >>> 0 ? $5_1 : 1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1810($0_1 | 0) | 0;
  block3 : {
   block2 : {
    if (($4_1 | 0) != (110 | 0)) {
     break block2
    }
    $8_1 = 0;
    break block3;
   }
   $8_1 = $1810($0_1 | 0) | 0;
  }
  block4 : {
   $8_1 = $1035($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break block4
   }
   block5 : {
    if (($4_1 | 0) == (110 | 0)) {
     break block5
    }
    $1862($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 109;
   $4_1 = $1641($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1863($0_1 | 0, $4_1 | 0) | 0;
   $1645($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1810($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1810($0_1 | 0) | 0) + $5_1 | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2595();
  wasm2js_trap();
 }
 
 function $1826($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1864($0_1 | 0) | 0) >> 2] | 0;
  block1 : {
   block : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1814($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($1268() | 0) >>> 1 | 0) >>> 0) {
     break block
    }
    $5_1 = $5_1 << 1 | 0;
    break block1;
   }
   $5_1 = $1268() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1814($0_1 | 0) | 0;
  block3 : {
   block2 : {
    if (($4_1 | 0) != (110 | 0)) {
     break block2
    }
    $8_1 = 0;
    break block3;
   }
   $8_1 = $1814($0_1 | 0) | 0;
  }
  block4 : {
   $8_1 = $1035($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break block4
   }
   block5 : {
    if (($4_1 | 0) == (110 | 0)) {
     break block5
    }
    $1865($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 109;
   $4_1 = $1813($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1866($0_1 | 0, $4_1 | 0) | 0;
   $1827($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1814($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1814($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2595();
  wasm2js_trap();
 }
 
 function $1827($0_1) {
  $0_1 = $0_1 | 0;
  $1868($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1828($0_1) {
  $0_1 = $0_1 | 0;
  return $2387($0_1 | 0) | 0 | 0;
 }
 
 function $1829($0_1) {
  $0_1 = $0_1 | 0;
  return $2388($0_1 | 0) | 0 | 0;
 }
 
 function $1830($0_1) {
  $0_1 = $0_1 | 0;
  return $1303($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1831($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 136 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 140 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 110;
  $8_1 = $1641($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $1293($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $1089($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  block : {
   if (!($1809($7_1 + 140 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $1088($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 132 | 0 | 0) | 0)) {
    break block
   }
   $1832($6_1 | 0);
   block1 : {
    if ((HEAPU8[($7_1 + 15 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break block1
    }
    $2619($6_1 | 0, $1286($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $1286($1_1 | 0, 48 | 0) | 0;
   $2_1 = $1810($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $4_1 = $3_1 + -1 | 0;
   $1_1 = $1_1 & 255 | 0;
   block2 : {
    label : while (1) {
     if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break block2
     }
     if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
      break block2
     }
     $2_1 = $2_1 + 1 | 0;
     continue label;
    };
   }
   $1833($6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  block3 : {
   if (!($1090($7_1 + 140 | 0 | 0, $7_1 + 136 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
  $1503($7_1 + 16 | 0 | 0) | 0;
  $1645($8_1 | 0) | 0;
  global$0 = $7_1 + 144 | 0;
  return $2_1 | 0;
 }
 
 function $1832($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1210($0_1 | 0) | 0;
  block1 : {
   block : {
    if (!($1196($0_1 | 0) | 0)) {
     break block
    }
    $3_1 = $1231($0_1 | 0) | 0;
    HEAP8[($1_1 + 15 | 0) >> 0] = 0;
    $1239($3_1 | 0, $1_1 + 15 | 0 | 0);
    $1264($0_1 | 0, 0 | 0);
    break block1;
   }
   $3_1 = $1232($0_1 | 0) | 0;
   HEAP8[($1_1 + 14 | 0) >> 0] = 0;
   $1239($3_1 | 0, $1_1 + 14 | 0 | 0);
   $1238($0_1 | 0, 0 | 0);
  }
  $1208($0_1 | 0, $2_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1833($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1210($0_1 | 0) | 0;
  $5_1 = $1211($0_1 | 0) | 0;
  block : {
   $6_1 = $1254($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break block
   }
   block1 : {
    if ($1834($0_1 | 0, $1_1 | 0) | 0) {
     break block1
    }
    block2 : {
     if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
      break block2
     }
     $1835($0_1 | 0, $5_1 | 0, ($4_1 - $5_1 | 0) + $6_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
    }
    $1206($0_1 | 0, $6_1 | 0);
    $1_1 = $1265($1_1 | 0, $2_1 | 0, $1193(($1192($0_1 | 0) | 0) + $4_1 | 0 | 0) | 0 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $1239($1_1 | 0, $3_1 + 15 | 0 | 0);
    $1836($0_1 | 0, $6_1 + $4_1 | 0 | 0);
    break block;
   }
   $1_1 = $1202($3_1 | 0, $1_1 | 0, $2_1 | 0, $1199($0_1 | 0) | 0 | 0) | 0;
   $2617($0_1 | 0, $1209($1_1 | 0) | 0 | 0, $1210($1_1 | 0) | 0 | 0) | 0;
   $2610($1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1834($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2389($1209($0_1 | 0) | 0 | 0, (($1209($0_1 | 0) | 0) + ($1210($0_1 | 0) | 0) | 0) + 1 | 0 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1835($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $2328($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $6_1 = ($3_1 - $5_1 | 0) + $6_1 | 0;
  $1264($0_1 | 0, $6_1 | 0);
  $1188($0_1 | 0, $6_1 | 0);
 }
 
 function $1836($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if (!($1196($0_1 | 0) | 0)) {
    break block
   }
   $1264($0_1 | 0, $1_1 | 0);
   return;
  }
  $1238($0_1 | 0, $1_1 | 0);
 }
 
 function $1837($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2391($0_1 | 0, $1_1 | 0) | 0;
  $1302($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1838($0_1) {
  $0_1 = $0_1 | 0;
  return $2392($0_1 | 0) | 0 | 0;
 }
 
 function $1839($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104264 | 0) | 0 | 0;
 }
 
 function $1840($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1841($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1842($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1843($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1844($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1845($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1846($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1847($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1848($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104256 | 0) | 0 | 0;
 }
 
 function $1849($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1850($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1851($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1852($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1853($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1854($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1855($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1856($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1857($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP8[$0_1 >> 0] = $1_1;
  return $0_1 | 0;
 }
 
 function $1858($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1859($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $2394($2393($0_1 | 0) | 0 | 0, $2393($1_1 | 0) | 0 | 0, $2393($2_1 | 0) | 0 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $2400($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1861($0_1) {
  $0_1 = $0_1 | 0;
  return $1830($0_1 | 0) | 0 | 0;
 }
 
 function $1862($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1829($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1829($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1863($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1643($0_1 | 0, $1862($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1861($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1830($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1864($0_1) {
  $0_1 = $0_1 | 0;
  return $2402($0_1 | 0) | 0 | 0;
 }
 
 function $1865($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($2401($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2401($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1866($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1868($0_1 | 0, $1865($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1864($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2402($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1867($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2233($0_1 | 0, $1_1 | 0);
 }
 
 function $1868($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($2401($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2401($0_1 | 0) | 0) >> 2] = $1_1;
  block : {
   if (!$2_1) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($2402($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1869($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 624 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 616 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 620 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 110;
  $1_1 = $1673($7_1 + 200 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $1293($7_1 + 192 | 0 | 0, $4_1 | 0);
  $8_1 = $1161($7_1 + 192 | 0 | 0) | 0;
  HEAP8[($7_1 + 191 | 0) >> 0] = 0;
  block : {
   if (!($1870($7_1 + 620 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 192 | 0 | 0, $1088($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 191 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 196 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break block
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 67171 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 67172 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 67173 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 67174 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 183 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 184 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 185 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 186 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 67168 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67169 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67170 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67171 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 176 | 0) >> 2] = HEAPU8[($10_1 + 67164 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67165 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67166 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67167 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 180 | 0) >> 2] = i64toi32_i32$1;
   $1592($8_1 | 0, $7_1 + 176 | 0 | 0, $7_1 + 186 | 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 109;
   $8_1 = $1641($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $4_1 = $7_1 + 16 | 0;
   block2 : {
    block1 : {
     if (((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1871($1_1 | 0) | 0) | 0 | 0) < (393 | 0)) {
      break block1
     }
     $1643($8_1 | 0, $1032((((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1871($1_1 | 0) | 0) | 0) >> 2 | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1810($8_1 | 0) | 0)) {
      break block2
     }
     $4_1 = $1810($8_1 | 0) | 0;
    }
    block3 : {
     if ((HEAPU8[($7_1 + 191 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break block3
     }
     HEAP8[$4_1 >> 0] = 45;
     $4_1 = $4_1 + 1 | 0;
    }
    $2_1 = $1871($1_1 | 0) | 0;
    block5 : {
     label : while (1) {
      block4 : {
       if ($2_1 >>> 0 < (HEAP32[($7_1 + 196 | 0) >> 2] | 0) >>> 0) {
        break block4
       }
       HEAP8[$4_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($1457($7_1 + 16 | 0 | 0, 66243 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break block5
       }
       $1645($8_1 | 0) | 0;
       break block;
      }
      HEAP8[$4_1 >> 0] = HEAPU8[(($7_1 + 176 | 0) + ((($1608($7_1 + 128 | 0 | 0, $1872($7_1 + 128 | 0 | 0) | 0 | 0, $2_1 | 0) | 0) - ($7_1 + 128 | 0) | 0) >> 2 | 0) | 0) >> 0] | 0;
      $4_1 = $4_1 + 1 | 0;
      $2_1 = $2_1 + 4 | 0;
      continue label;
     };
    }
    $2605(65806 | 0);
    wasm2js_trap();
   }
   $2595();
   wasm2js_trap();
  }
  block6 : {
   if (!($1162($7_1 + 620 | 0 | 0, $7_1 + 616 | 0 | 0) | 0)) {
    break block6
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 620 | 0) >> 2] | 0;
  $1503($7_1 + 192 | 0 | 0) | 0;
  $1676($1_1 | 0) | 0;
  global$0 = $7_1 + 624 | 0;
  return $2_1 | 0;
 }
 
 function $1870($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $365_1 = 0;
  $11_1 = global$0 - 528 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 520 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 524 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!($1162($0_1 | 0, $11_1 + 524 | 0 | 0) | 0)) {
     break block
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
    $0_1 = 0;
    break block1;
   }
   HEAP32[($11_1 + 72 | 0) >> 2] = 110;
   $12_1 = $1813($11_1 + 104 | 0 | 0, $11_1 + 112 | 0 | 0, $11_1 + 72 | 0 | 0) | 0;
   $10_1 = $1814($12_1 | 0) | 0;
   HEAP32[($11_1 + 100 | 0) >> 2] = $10_1;
   HEAP32[($11_1 + 96 | 0) >> 2] = $10_1 + 400 | 0;
   $13_1 = $1186($11_1 + 72 | 0 | 0) | 0;
   $14_1 = $1780($11_1 + 60 | 0 | 0) | 0;
   $15_1 = $1780($11_1 + 48 | 0 | 0) | 0;
   $16_1 = $1780($11_1 + 36 | 0 | 0) | 0;
   $17_1 = $1780($11_1 + 24 | 0 | 0) | 0;
   $1874($2_1 | 0, $3_1 | 0, $11_1 + 92 | 0 | 0, $11_1 + 88 | 0 | 0, $11_1 + 84 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 20 | 0 | 0);
   HEAP32[$9_1 >> 2] = $1871($8_1 | 0) | 0;
   $18_1 = $4_1 & 512 | 0;
   $3_1 = 0;
   $1_1 = 0;
   label6 : while (1) {
    $2_1 = $1_1;
    block8 : {
     block9 : {
      block12 : {
       block2 : {
        if (($3_1 | 0) == (4 | 0)) {
         break block2
        }
        if ($1162($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
         break block2
        }
        $10_1 = 0;
        block7 : {
         block5 : {
          block6 : {
           block11 : {
            block3 : {
             switch (HEAPU8[(($11_1 + 92 | 0) + $3_1 | 0) >> 0] | 0 | 0) {
             case 1:
              if (($3_1 | 0) == (3 | 0)) {
               break block9
              }
              block10 : {
               if (!($1164($7_1 | 0, 1 | 0, $1163($0_1 | 0) | 0 | 0) | 0)) {
                break block10
               }
               $1875($11_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0);
               $2633($17_1 | 0, $1876($11_1 + 12 | 0 | 0) | 0 | 0);
               break block11;
              }
              HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
              $0_1 = 0;
              break block12;
             case 0:
              break block3;
             case 2:
              break block5;
             case 3:
              break block6;
             case 4:
              break block7;
             default:
              break block8;
             };
            }
            if (($3_1 | 0) == (3 | 0)) {
             break block9
            }
           }
           label : while (1) {
            if ($1162($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break block9
            }
            if (!($1164($7_1 | 0, 1 | 0, $1163($0_1 | 0) | 0 | 0) | 0)) {
             break block9
            }
            $1875($11_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0);
            $2633($17_1 | 0, $1876($11_1 + 12 | 0 | 0) | 0 | 0);
            continue label;
           };
          }
          block13 : {
           if (!($1565($15_1 | 0) | 0)) {
            break block13
           }
           if (($1163($0_1 | 0) | 0 | 0) != (HEAP32[($1877($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
            break block13
           }
           $1165($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 0;
           $1_1 = ($1565($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $2_1;
           break block8;
          }
          block14 : {
           if (!($1565($16_1 | 0) | 0)) {
            break block14
           }
           if (($1163($0_1 | 0) | 0 | 0) != (HEAP32[($1877($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
            break block14
           }
           $1165($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 1;
           $1_1 = ($1565($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $2_1;
           break block8;
          }
          block15 : {
           if (!($1565($15_1 | 0) | 0)) {
            break block15
           }
           if (!($1565($16_1 | 0) | 0)) {
            break block15
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break block12;
          }
          block16 : {
           if ($1565($15_1 | 0) | 0) {
            break block16
           }
           if (!($1565($16_1 | 0) | 0)) {
            break block9
           }
          }
          HEAP8[$6_1 >> 0] = !($1565($16_1 | 0) | 0);
          break block9;
         }
         block17 : {
          if ($2_1) {
           break block17
          }
          if ($3_1 >>> 0 < 2 >>> 0) {
           break block17
          }
          if ($18_1) {
           break block17
          }
          $1_1 = 0;
          if (!(($3_1 | 0) == (2 | 0) & ((HEAPU8[($11_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0) | 0)) {
           break block8
          }
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $1653($14_1 | 0) | 0;
         $10_1 = $1878($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0;
         block18 : {
          if (!$3_1) {
           break block18
          }
          if ((HEAPU8[(($3_1 + ($11_1 + 92 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
           break block18
          }
          block19 : {
           label1 : while (1) {
            HEAP32[($11_1 + 8 | 0) >> 2] = $1654($14_1 | 0) | 0;
            if ($1879($10_1 | 0, $11_1 + 8 | 0 | 0) | 0) {
             break block19
            }
            if (!($1164($7_1 | 0, 1 | 0, HEAP32[($1880($10_1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
             break block19
            }
            $1881($10_1 | 0) | 0;
            continue label1;
           };
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $1653($14_1 | 0) | 0;
          block20 : {
           $1_1 = $1882($10_1 | 0, $11_1 + 8 | 0 | 0) | 0;
           if ($1_1 >>> 0 > ($1565($17_1 | 0) | 0) >>> 0) {
            break block20
           }
           HEAP32[($11_1 + 8 | 0) >> 2] = $1654($17_1 | 0) | 0;
           if ($1884($1883($11_1 + 8 | 0 | 0, $1_1 | 0) | 0 | 0, $1654($17_1 | 0) | 0 | 0, $1653($14_1 | 0) | 0 | 0) | 0) {
            break block18
           }
          }
          HEAP32[($11_1 + 4 | 0) >> 2] = $1653($14_1 | 0) | 0;
          HEAP32[$10_1 >> 2] = HEAP32[($1878($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
         block21 : {
          label2 : while (1) {
           HEAP32[($11_1 + 4 | 0) >> 2] = $1654($14_1 | 0) | 0;
           if ($1879($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0) {
            break block21
           }
           if ($1162($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block21
           }
           if (($1163($0_1 | 0) | 0 | 0) != (HEAP32[($1880($11_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0)) {
            break block21
           }
           $1165($0_1 | 0) | 0;
           $1881($11_1 + 8 | 0 | 0) | 0;
           continue label2;
          };
         }
         if (!$18_1) {
          break block9
         }
         HEAP32[($11_1 + 4 | 0) >> 2] = $1654($14_1 | 0) | 0;
         if ($1879($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0) {
          break block9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break block12;
        }
        block22 : {
         label3 : while (1) {
          if ($1162($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
           break block22
          }
          block25 : {
           block23 : {
            $1_1 = $1163($0_1 | 0) | 0;
            if (!($1164($7_1 | 0, 64 | 0, $1_1 | 0) | 0)) {
             break block23
            }
            block24 : {
             $4_1 = HEAP32[$9_1 >> 2] | 0;
             if (($4_1 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
              break block24
             }
             $1885($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
             $4_1 = HEAP32[$9_1 >> 2] | 0;
            }
            HEAP32[$9_1 >> 2] = $4_1 + 4 | 0;
            HEAP32[$4_1 >> 2] = $1_1;
            $10_1 = $10_1 + 1 | 0;
            break block25;
           }
           if (!($1210($13_1 | 0) | 0)) {
            break block22
           }
           if (!$10_1) {
            break block22
           }
           if (($1_1 | 0) != (HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0)) {
            break block22
           }
           block26 : {
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
            if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
             break block26
            }
            $1826($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
           HEAP32[$1_1 >> 2] = $10_1;
           $10_1 = 0;
          }
          $1165($0_1 | 0) | 0;
          continue label3;
         };
        }
        block27 : {
         $365_1 = $1814($12_1 | 0) | 0;
         $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         if (($365_1 | 0) == ($1_1 | 0)) {
          break block27
         }
         if (!$10_1) {
          break block27
         }
         block28 : {
          if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
           break block28
          }
          $1826($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
          $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
         HEAP32[$1_1 >> 2] = $10_1;
        }
        block29 : {
         if ((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break block29
         }
         block31 : {
          block30 : {
           if ($1162($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block30
           }
           if (($1163($0_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 88 | 0) >> 2] | 0 | 0)) {
            break block31
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break block12;
         }
         label4 : while (1) {
          $1165($0_1 | 0) | 0;
          if ((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
           break block29
          }
          block33 : {
           block32 : {
            if ($1162($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break block32
            }
            if ($1164($7_1 | 0, 64 | 0, $1163($0_1 | 0) | 0 | 0) | 0) {
             break block33
            }
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break block12;
          }
          block34 : {
           if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
            break block34
           }
           $1885($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
          }
          $10_1 = $1163($0_1 | 0) | 0;
          $1_1 = HEAP32[$9_1 >> 2] | 0;
          HEAP32[$9_1 >> 2] = $1_1 + 4 | 0;
          HEAP32[$1_1 >> 2] = $10_1;
          HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          continue label4;
         };
        }
        $1_1 = $2_1;
        if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1871($8_1 | 0) | 0 | 0)) {
         break block8
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break block12;
       }
       block35 : {
        if (!$2_1) {
         break block35
        }
        $10_1 = 1;
        label5 : while (1) {
         if ($10_1 >>> 0 >= ($1565($2_1 | 0) | 0) >>> 0) {
          break block35
         }
         block37 : {
          block36 : {
           if ($1162($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block36
           }
           if (($1163($0_1 | 0) | 0 | 0) == (HEAP32[($1566($2_1 | 0, $10_1 | 0) | 0) >> 2] | 0 | 0)) {
            break block37
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break block12;
         }
         $1165($0_1 | 0) | 0;
         $10_1 = $10_1 + 1 | 0;
         continue label5;
        };
       }
       $0_1 = 1;
       if (($1814($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0)) {
        break block12
       }
       $0_1 = 0;
       HEAP32[($11_1 + 12 | 0) >> 2] = 0;
       $1524($13_1 | 0, $1814($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, $11_1 + 12 | 0 | 0);
       block38 : {
        if (!(HEAP32[($11_1 + 12 | 0) >> 2] | 0)) {
         break block38
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        break block12;
       }
       $0_1 = 1;
      }
      $2624($17_1 | 0) | 0;
      $2624($16_1 | 0) | 0;
      $2624($15_1 | 0) | 0;
      $2624($14_1 | 0) | 0;
      $2610($13_1 | 0) | 0;
      $1827($12_1 | 0) | 0;
      break block1;
     }
     $1_1 = $2_1;
    }
    $3_1 = $3_1 + 1 | 0;
    continue label6;
   };
  }
  global$0 = $11_1 + 528 | 0;
  return $0_1 | 0;
 }
 
 function $1871($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1886($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1872($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 40 | 0 | 0;
 }
 
 function $1873($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2404($0_1 | 0, $1_1 | 0) | 0;
  $1302($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1874($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  block1 : {
   block : {
    if (!$0_1) {
     break block
    }
    $1_1 = $1906($1_1 | 0) | 0;
    $1907($10_1 + 4 | 0 | 0, $1_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1908($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1909($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2624($10_1 + 4 | 0 | 0) | 0;
    $1910($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1909($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2624($10_1 + 4 | 0 | 0) | 0;
    HEAP32[$3_1 >> 2] = $1911($1_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $1912($1_1 | 0) | 0;
    $1913($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1190($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2610($10_1 + 4 | 0 | 0) | 0;
    $1914($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1909($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2624($10_1 + 4 | 0 | 0) | 0;
    $1_1 = $1915($1_1 | 0) | 0;
    break block1;
   }
   $1_1 = $1916($1_1 | 0) | 0;
   $1917($10_1 + 4 | 0 | 0, $1_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1918($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1909($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2624($10_1 + 4 | 0 | 0) | 0;
   $1919($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1909($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2624($10_1 + 4 | 0 | 0) | 0;
   HEAP32[$3_1 >> 2] = $1920($1_1 | 0) | 0;
   HEAP32[$4_1 >> 2] = $1921($1_1 | 0) | 0;
   $1922($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1190($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2610($10_1 + 4 | 0 | 0) | 0;
   $1923($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1909($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2624($10_1 + 4 | 0 | 0) | 0;
   $1_1 = $1924($1_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $1_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1875($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1925($0_1 | 0, $1172(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1876($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1877($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1658($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1878($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1660($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1879($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1926($0_1 | 0) | 0 | 0) == ($1660($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1880($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1881($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1882($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1926($0_1 | 0) | 0) - ($1660($1_1 | 0) | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1883($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1928($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1884($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1927($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1885($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1929($0_1 | 0) | 0) >> 2] | 0;
  block1 : {
   block : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1871($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($1268() | 0) >>> 1 | 0) >>> 0) {
     break block
    }
    $5_1 = $5_1 << 1 | 0;
    break block1;
   }
   $5_1 = $1268() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1871($0_1 | 0) | 0;
  block3 : {
   block2 : {
    if (($4_1 | 0) != (110 | 0)) {
     break block2
    }
    $8_1 = 0;
    break block3;
   }
   $8_1 = $1871($0_1 | 0) | 0;
  }
  block4 : {
   $8_1 = $1035($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break block4
   }
   block5 : {
    if (($4_1 | 0) == (110 | 0)) {
     break block5
    }
    $1930($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 109;
   $4_1 = $1673($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1931($0_1 | 0, $4_1 | 0) | 0;
   $1676($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1871($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1871($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2595();
  wasm2js_trap();
 }
 
 function $1886($0_1) {
  $0_1 = $0_1 | 0;
  return $2405($0_1 | 0) | 0 | 0;
 }
 
 function $1887($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 440 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 444 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 110;
  $8_1 = $1673($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $1293($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $1161($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  block : {
   if (!($1870($7_1 + 444 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $1088($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break block
   }
   $1888($6_1 | 0);
   block1 : {
    if ((HEAPU8[($7_1 + 15 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break block1
    }
    $2633($6_1 | 0, $1288($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $1288($1_1 | 0, 48 | 0) | 0;
   $2_1 = $1871($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $4_1 = $3_1 + -4 | 0;
   block2 : {
    label : while (1) {
     if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break block2
     }
     if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break block2
     }
     $2_1 = $2_1 + 4 | 0;
     continue label;
    };
   }
   $1889($6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  block3 : {
   if (!($1162($7_1 + 444 | 0 | 0, $7_1 + 440 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 444 | 0) >> 2] | 0;
  $1503($7_1 + 16 | 0 | 0) | 0;
  $1676($8_1 | 0) | 0;
  global$0 = $7_1 + 448 | 0;
  return $2_1 | 0;
 }
 
 function $1888($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1565($0_1 | 0) | 0;
  block1 : {
   block : {
    if (!($1719($0_1 | 0) | 0)) {
     break block
    }
    $3_1 = $1890($0_1 | 0) | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    $1891($3_1 | 0, $1_1 + 12 | 0 | 0);
    $1892($0_1 | 0, 0 | 0);
    break block1;
   }
   $3_1 = $1893($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $1891($3_1 | 0, $1_1 + 8 | 0 | 0);
   $1894($0_1 | 0, 0 | 0);
  }
  $1895($0_1 | 0, $2_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1889($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1565($0_1 | 0) | 0;
  $5_1 = $1896($0_1 | 0) | 0;
  block : {
   $6_1 = $1897($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break block
   }
   block1 : {
    if ($1898($0_1 | 0, $1_1 | 0) | 0) {
     break block1
    }
    block2 : {
     if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
      break block2
     }
     $1899($0_1 | 0, $5_1 | 0, ($4_1 - $5_1 | 0) + $6_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
    }
    $1900($0_1 | 0, $6_1 | 0);
    $1_1 = $1902($1_1 | 0, $2_1 | 0, $1901(($1658($0_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0) | 0 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = 0;
    $1891($1_1 | 0, $3_1 + 4 | 0 | 0);
    $1903($0_1 | 0, $6_1 + $4_1 | 0 | 0);
    break block;
   }
   $1_1 = $1905($3_1 + 4 | 0 | 0, $1_1 | 0, $2_1 | 0, $1904($0_1 | 0) | 0 | 0) | 0;
   $2631($0_1 | 0, $1716($1_1 | 0) | 0 | 0, $1565($1_1 | 0) | 0 | 0) | 0;
   $2624($1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1890($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1805($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1891($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $1892($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1805($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1893($0_1) {
  $0_1 = $0_1 | 0;
  return $2316($1805($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1894($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1805($0_1 | 0) | 0;
  HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($1_1 & 127 | 0) | 0;
  $0_1 = $1805($0_1 | 0) | 0;
  HEAP8[($0_1 + 11 | 0) >> 0] = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 127 | 0;
 }
 
 function $1895($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1896($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  block : {
   if (!($1719($0_1 | 0) | 0)) {
    break block
   }
   $1_1 = ($2332($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1897($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2407($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1898($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2408($1716($0_1 | 0) | 0 | 0, (($1716($0_1 | 0) | 0) + (($1565($0_1 | 0) | 0) << 2 | 0) | 0) + 4 | 0 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1899($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $2406($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $6_1 = ($3_1 - $5_1 | 0) + $6_1 | 0;
  $1892($0_1 | 0, $6_1 | 0);
  $1782($0_1 | 0, $6_1 | 0);
 }
 
 function $1900($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1901($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1902($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = $1901($0_1 | 0) | 0;
  $0_1 = $1_1 - $0_1 | 0;
  $1142($2_1 | 0, $5_1 | 0, $0_1 >> 2 | 0 | 0) | 0;
  return $2_1 + $0_1 | 0 | 0;
 }
 
 function $1903($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if (!($1719($0_1 | 0) | 0)) {
    break block
   }
   $1892($0_1 | 0, $1_1 | 0);
   return;
  }
  $1894($0_1 | 0, $1_1 | 0);
 }
 
 function $1904($0_1) {
  $0_1 = $0_1 | 0;
  return $2318($0_1 | 0) | 0 | 0;
 }
 
 function $1905($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $2409($0_1 | 0, $4_1 + 15 | 0 | 0, $3_1 | 0) | 0;
  $2410($3_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1906($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104280 | 0) | 0 | 0;
 }
 
 function $1907($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1908($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1909($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1932($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1910($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1911($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1912($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1913($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1914($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1915($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1916($0_1) {
  $0_1 = $0_1 | 0;
  return $1508($0_1 | 0, 104272 | 0) | 0 | 0;
 }
 
 function $1917($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1918($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1919($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1920($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1921($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1922($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1923($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1924($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1925($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1926($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1927($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $2415($2414($0_1 | 0) | 0 | 0, $2414($1_1 | 0) | 0 | 0, $2414($2_1 | 0) | 0 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1928($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $2421($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1929($0_1) {
  $0_1 = $0_1 | 0;
  return $1951($0_1 | 0) | 0 | 0;
 }
 
 function $1930($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1950($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1950($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1931($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1674($0_1 | 0, $1930($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1929($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1951($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1932($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $37_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $2329($0_1 | 0);
  block : {
   if (!($1719($0_1 | 0) | 0)) {
    break block
   }
   $2330($1904($0_1 | 0) | 0 | 0, $1890($0_1 | 0) | 0 | 0, $2332($0_1 | 0) | 0 | 0);
  }
  $3_1 = $1565($1_1 | 0) | 0;
  $4_1 = $1719($1_1 | 0) | 0;
  $2422($0_1 | 0, $1_1 | 0);
  $5_1 = $1805($1_1 | 0) | 0;
  $6_1 = $1805($0_1 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $37_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $37_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1894($1_1 | 0, 0 | 0);
  $5_1 = $1893($1_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1891($5_1 | 0, $2_1 + 12 | 0 | 0);
  block2 : {
   block1 : {
    $5_1 = ($0_1 | 0) == ($1_1 | 0);
    if ($5_1) {
     break block1
    }
    if ($4_1) {
     break block1
    }
    $1895($1_1 | 0, $3_1 | 0);
    break block2;
   }
   $1782($1_1 | 0, 0 | 0);
  }
  $1_1 = $1719($0_1 | 0) | 0;
  block3 : {
   if ($5_1) {
    break block3
   }
   if ($1_1) {
    break block3
   }
   $1782($0_1 | 0, $1721($0_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1933($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0, $213_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 332 | 0) >> 2] = $7_1 + 336 | 0;
  $8_1 = $1444($7_1 + 336 | 0 | 0, 100 | 0, 66237 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 224 | 0) >> 2] = 109;
  $9_1 = 0;
  $10_1 = $1641($7_1 + 216 | 0 | 0, 0 | 0, $7_1 + 224 | 0 | 0) | 0;
  HEAP32[($7_1 + 224 | 0) >> 2] = 109;
  $11_1 = $1641($7_1 + 208 | 0 | 0, 0 | 0, $7_1 + 224 | 0 | 0) | 0;
  $12_1 = $7_1 + 224 | 0;
  block1 : {
   block : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break block
    }
    $8_1 = $1553() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $1642($7_1 + 332 | 0 | 0, $8_1 | 0, 66237 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break block1
    }
    $1643($10_1 | 0, HEAP32[($7_1 + 332 | 0) >> 2] | 0 | 0);
    $1643($11_1 | 0, $1032($8_1 | 0) | 0 | 0);
    if ($1934($11_1 | 0, 0 | 0) | 0) {
     break block1
    }
    $12_1 = $1810($11_1 | 0) | 0;
   }
   $1293($7_1 + 204 | 0 | 0, $3_1 | 0);
   $13_1 = $1089($7_1 + 204 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 332 | 0) >> 2] | 0;
   $1552($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   block2 : {
    if (($8_1 | 0) < (1 | 0)) {
     break block2
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 332 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $1186($7_1 + 184 | 0 | 0) | 0;
   $14_1 = $1186($7_1 + 172 | 0 | 0) | 0;
   $16_1 = $1186($7_1 + 160 | 0 | 0) | 0;
   $1935($2_1 | 0, $9_1 | 0, $7_1 + 204 | 0 | 0, $7_1 + 200 | 0 | 0, $7_1 + 199 | 0 | 0, $7_1 + 198 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 156 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 109;
   $17_1 = $1641($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   block4 : {
    block3 : {
     $2_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break block3
     }
     $18_1 = (((($1210($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($1210($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 1 | 0;
     break block4;
    }
    $18_1 = ((($1210($16_1 | 0) | 0) + ($1210($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   block5 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break block5
    }
    $1643($17_1 | 0, $1032($18_1 | 0) | 0 | 0);
    $2_1 = $1810($17_1 | 0) | 0;
    if (!$2_1) {
     break block1
    }
   }
   $1936($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $1088($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + $8_1 | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 200 | 0 | 0, HEAP8[($7_1 + 199 | 0) >> 0] | 0 | 0, HEAP8[($7_1 + 198 | 0) >> 0] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $8_1 = $1630($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $1645($17_1 | 0) | 0;
   $2610($16_1 | 0) | 0;
   $2610($14_1 | 0) | 0;
   $2610($15_1 | 0) | 0;
   $1503($7_1 + 204 | 0 | 0) | 0;
   $1645($11_1 | 0) | 0;
   $1645($10_1 | 0) | 0;
   global$0 = $7_1 + 448 | 0;
   return $8_1 | 0;
  }
  $2595();
  wasm2js_trap();
 }
 
 function $1934($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1937($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1935($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  block3 : {
   block : {
    if (!$0_1) {
     break block
    }
    $2_1 = $1839($2_1 | 0) | 0;
    block2 : {
     block1 : {
      if (!$1_1) {
       break block1
      }
      $1840($10_1 + 4 | 0 | 0, $2_1 | 0);
      $11_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1841($10_1 + 4 | 0 | 0, $2_1 | 0);
      $1190($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $2610($10_1 + 4 | 0 | 0) | 0;
      break block2;
     }
     $1938($10_1 + 4 | 0 | 0, $2_1 | 0);
     $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1842($10_1 + 4 | 0 | 0, $2_1 | 0);
     $1190($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $2610($10_1 + 4 | 0 | 0) | 0;
    }
    HEAP8[$4_1 >> 0] = $1843($2_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $1844($2_1 | 0) | 0;
    $1845($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1190($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2610($10_1 + 4 | 0 | 0) | 0;
    $1846($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1190($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2610($10_1 + 4 | 0 | 0) | 0;
    $2_1 = $1847($2_1 | 0) | 0;
    break block3;
   }
   $2_1 = $1848($2_1 | 0) | 0;
   block5 : {
    block4 : {
     if (!$1_1) {
      break block4
     }
     $1849($10_1 + 4 | 0 | 0, $2_1 | 0);
     $13_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1850($10_1 + 4 | 0 | 0, $2_1 | 0);
     $1190($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $2610($10_1 + 4 | 0 | 0) | 0;
     break block5;
    }
    $1939($10_1 + 4 | 0 | 0, $2_1 | 0);
    $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1851($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1190($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2610($10_1 + 4 | 0 | 0) | 0;
   }
   HEAP8[$4_1 >> 0] = $1852($2_1 | 0) | 0;
   HEAP8[$5_1 >> 0] = $1853($2_1 | 0) | 0;
   $1854($10_1 + 4 | 0 | 0, $2_1 | 0);
   $1190($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2610($10_1 + 4 | 0 | 0) | 0;
   $1855($10_1 + 4 | 0 | 0, $2_1 | 0);
   $1190($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2610($10_1 + 4 | 0 | 0) | 0;
   $2_1 = $1856($2_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $2_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1936($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label4 : while (1) {
   block : {
    if (($17_1 | 0) != (4 | 0)) {
     break block
    }
    block1 : {
     if (($1210($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break block1
     }
     HEAP32[($15_1 + 12 | 0) >> 2] = $1940($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1943($1941($15_1 + 12 | 0 | 0, 1 | 0) | 0 | 0, $1942($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    block2 : {
     $18_1 = $3_1 & 176 | 0;
     if (($18_1 | 0) == (16 | 0)) {
      break block2
     }
     block3 : {
      if (($18_1 | 0) != (32 | 0)) {
       break block3
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   block9 : {
    block8 : {
     switch (HEAPU8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break block9;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $1286($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break block9;
     case 3:
      if ($1514($13_1 | 0) | 0) {
       break block9
      }
      $18_1 = HEAPU8[($1513($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break block9;
     case 2:
      $18_1 = $1514($12_1 | 0) | 0;
      if (!$16_1) {
       break block9
      }
      if ($18_1) {
       break block9
      }
      HEAP32[$2_1 >> 2] = $1943($1940($12_1 | 0) | 0 | 0, $1942($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break block9;
     case 4:
      break block8;
     default:
      break block9;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $4_1 + $7_1 | 0;
    $18_1 = $4_1;
    block10 : {
     label : while (1) {
      if ($18_1 >>> 0 >= $5_1 >>> 0) {
       break block10
      }
      if (!($1092($6_1 | 0, 64 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
       break block10
      }
      $18_1 = $18_1 + 1 | 0;
      continue label;
     };
    }
    $19_1 = $14_1;
    block11 : {
     if (($19_1 | 0) < (1 | 0)) {
      break block11
     }
     block12 : {
      label1 : while (1) {
       if ($18_1 >>> 0 <= $4_1 >>> 0) {
        break block12
       }
       if (($19_1 | 0) == (0 | 0)) {
        break block12
       }
       $19_1 = $19_1 + -1 | 0;
       $18_1 = $18_1 + -1 | 0;
       $21_1 = HEAPU8[$18_1 >> 0] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
       HEAP8[$22_1 >> 0] = $21_1;
       continue label1;
      };
     }
     block14 : {
      block13 : {
       if ($19_1) {
        break block13
       }
       $22_1 = 0;
       break block14;
      }
      $22_1 = $1286($6_1 | 0, 48 | 0) | 0;
     }
     block15 : {
      label2 : while (1) {
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       if (($19_1 | 0) < (1 | 0)) {
        break block15
       }
       HEAP8[$21_1 >> 0] = $22_1;
       $19_1 = $19_1 + -1 | 0;
       continue label2;
      };
     }
     HEAP8[$21_1 >> 0] = $9_1;
    }
    block17 : {
     block16 : {
      if (($18_1 | 0) != ($4_1 | 0)) {
       break block16
      }
      $18_1 = $1286($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break block17;
     }
     block19 : {
      block18 : {
       if (!($1514($11_1 | 0) | 0)) {
        break block18
       }
       $23_1 = $1944() | 0;
       break block19;
      }
      $23_1 = HEAP8[($1513($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label3 : while (1) {
      if (($18_1 | 0) == ($4_1 | 0)) {
       break block17
      }
      block21 : {
       block20 : {
        if (($19_1 | 0) == ($23_1 | 0)) {
         break block20
        }
        $21_1 = $19_1;
        break block21;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       HEAP8[$21_1 >> 0] = $10_1;
       $21_1 = 0;
       block22 : {
        $24_1 = $24_1 + 1 | 0;
        if ($24_1 >>> 0 < ($1210($11_1 | 0) | 0) >>> 0) {
         break block22
        }
        $23_1 = $19_1;
        break block21;
       }
       block23 : {
        if ((HEAPU8[($1513($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($1755() | 0) & 255 | 0 | 0)) {
         break block23
        }
        $23_1 = $1944() | 0;
        break block21;
       }
       $23_1 = HEAP8[($1513($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
      }
      $18_1 = $18_1 + -1 | 0;
      $19_1 = HEAPU8[$18_1 >> 0] | 0;
      $22_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
      HEAP8[$22_1 >> 0] = $19_1;
      $19_1 = $21_1 + 1 | 0;
      continue label3;
     };
    }
    $1682($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label4;
  };
 }
 
 function $1937($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1828($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1938($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1940($0_1) {
  $0_1 = $0_1 | 0;
  return $1961($0_1 | 0, $1279($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1941($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1963($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1942($0_1) {
  $0_1 = $0_1 | 0;
  return $1961($0_1 | 0, ($1279($0_1 | 0) | 0) + ($1210($0_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1943($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1960($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1944() {
  return $1962() | 0 | 0;
 }
 
 function $1945($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 176 | 0;
  global$0 = $6_1;
  $1293($6_1 + 172 | 0 | 0, $3_1 | 0);
  $7_1 = $1089($6_1 + 172 | 0 | 0) | 0;
  $8_1 = 0;
  block : {
   if (!($1210($5_1 | 0) | 0)) {
    break block
   }
   $8_1 = (HEAPU8[($1513($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) == (($1286($7_1 | 0, 45 | 0) | 0) & 255 | 0 | 0);
  }
  $9_1 = $1186($6_1 + 152 | 0 | 0) | 0;
  $10_1 = $1186($6_1 + 140 | 0 | 0) | 0;
  $11_1 = $1186($6_1 + 128 | 0 | 0) | 0;
  $1935($2_1 | 0, $8_1 | 0, $6_1 + 172 | 0 | 0, $6_1 + 168 | 0 | 0, $6_1 + 167 | 0 | 0, $6_1 + 166 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 124 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 109;
  $12_1 = $1641($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  block2 : {
   block1 : {
    if (($1210($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    $2_1 = $1210($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    $13_1 = (((($1210($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($1210($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 1 | 0;
    break block2;
   }
   $13_1 = ((($1210($11_1 | 0) | 0) + ($1210($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  block3 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break block3
   }
   $1643($12_1 | 0, $1032($13_1 | 0) | 0 | 0);
   $2_1 = $1810($12_1 | 0) | 0;
   if ($2_1) {
    break block3
   }
   $2595();
   wasm2js_trap();
  }
  $1936($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $1088($3_1 | 0) | 0 | 0, $1209($5_1 | 0) | 0 | 0, ($1209($5_1 | 0) | 0) + ($1210($5_1 | 0) | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 168 | 0 | 0, HEAP8[($6_1 + 167 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 166 | 0) >> 0] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0);
  $5_1 = $1630($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1645($12_1 | 0) | 0;
  $2610($11_1 | 0) | 0;
  $2610($10_1 | 0) | 0;
  $2610($9_1 | 0) | 0;
  $1503($6_1 + 172 | 0 | 0) | 0;
  global$0 = $6_1 + 176 | 0;
  return $5_1 | 0;
 }
 
 function $1946($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0, $216_1 = 0;
  $7_1 = global$0 - 1056 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 940 | 0) >> 2] = $7_1 + 944 | 0;
  $8_1 = $1444($7_1 + 944 | 0 | 0, 100 | 0, 66237 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 528 | 0) >> 2] = 109;
  $9_1 = 0;
  $10_1 = $1641($7_1 + 520 | 0 | 0, 0 | 0, $7_1 + 528 | 0 | 0) | 0;
  HEAP32[($7_1 + 528 | 0) >> 2] = 109;
  $11_1 = $1673($7_1 + 512 | 0 | 0, 0 | 0, $7_1 + 528 | 0 | 0) | 0;
  $12_1 = $7_1 + 528 | 0;
  block1 : {
   block : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break block
    }
    $8_1 = $1553() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $1642($7_1 + 940 | 0 | 0, $8_1 | 0, 66237 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break block1
    }
    $1643($10_1 | 0, HEAP32[($7_1 + 940 | 0) >> 2] | 0 | 0);
    $1674($11_1 | 0, $1032($8_1 << 2 | 0 | 0) | 0 | 0);
    if ($1947($11_1 | 0, 0 | 0) | 0) {
     break block1
    }
    $12_1 = $1871($11_1 | 0) | 0;
   }
   $1293($7_1 + 508 | 0 | 0, $3_1 | 0);
   $13_1 = $1161($7_1 + 508 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 940 | 0) >> 2] | 0;
   $1592($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   block2 : {
    if (($8_1 | 0) < (1 | 0)) {
     break block2
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 940 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $1186($7_1 + 484 | 0 | 0) | 0;
   $14_1 = $1780($7_1 + 472 | 0 | 0) | 0;
   $16_1 = $1780($7_1 + 460 | 0 | 0) | 0;
   $1948($2_1 | 0, $9_1 | 0, $7_1 + 508 | 0 | 0, $7_1 + 504 | 0 | 0, $7_1 + 500 | 0 | 0, $7_1 + 496 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 456 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 109;
   $17_1 = $1673($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   block4 : {
    block3 : {
     $2_1 = HEAP32[($7_1 + 456 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break block3
     }
     $18_1 = (((($1565($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($1565($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 456 | 0) >> 2] | 0) | 0) + 1 | 0;
     break block4;
    }
    $18_1 = ((($1565($16_1 | 0) | 0) + ($1565($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 456 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   block5 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break block5
    }
    $1674($17_1 | 0, $1032($18_1 << 2 | 0 | 0) | 0 | 0);
    $2_1 = $1871($17_1 | 0) | 0;
    if (!$2_1) {
     break block1
    }
   }
   $1949($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $1088($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + ($8_1 << 2 | 0) | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 504 | 0 | 0, HEAP32[($7_1 + 500 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 496 | 0) >> 2] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 456 | 0) >> 2] | 0 | 0);
   $8_1 = $1664($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $1676($17_1 | 0) | 0;
   $2624($16_1 | 0) | 0;
   $2624($14_1 | 0) | 0;
   $2610($15_1 | 0) | 0;
   $1503($7_1 + 508 | 0 | 0) | 0;
   $1676($11_1 | 0) | 0;
   $1645($10_1 | 0) | 0;
   global$0 = $7_1 + 1056 | 0;
   return $8_1 | 0;
  }
  $2595();
  wasm2js_trap();
 }
 
 function $1947($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1952($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1948($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  block3 : {
   block : {
    if (!$0_1) {
     break block
    }
    $2_1 = $1906($2_1 | 0) | 0;
    block2 : {
     block1 : {
      if (!$1_1) {
       break block1
      }
      $1907($10_1 + 4 | 0 | 0, $2_1 | 0);
      $11_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1908($10_1 + 4 | 0 | 0, $2_1 | 0);
      $1909($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $2624($10_1 + 4 | 0 | 0) | 0;
      break block2;
     }
     $1953($10_1 + 4 | 0 | 0, $2_1 | 0);
     $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1910($10_1 + 4 | 0 | 0, $2_1 | 0);
     $1909($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $2624($10_1 + 4 | 0 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $1911($2_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $1912($2_1 | 0) | 0;
    $1913($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1190($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2610($10_1 + 4 | 0 | 0) | 0;
    $1914($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1909($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2624($10_1 + 4 | 0 | 0) | 0;
    $2_1 = $1915($2_1 | 0) | 0;
    break block3;
   }
   $2_1 = $1916($2_1 | 0) | 0;
   block5 : {
    block4 : {
     if (!$1_1) {
      break block4
     }
     $1917($10_1 + 4 | 0 | 0, $2_1 | 0);
     $13_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1918($10_1 + 4 | 0 | 0, $2_1 | 0);
     $1909($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $2624($10_1 + 4 | 0 | 0) | 0;
     break block5;
    }
    $1954($10_1 + 4 | 0 | 0, $2_1 | 0);
    $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1919($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1909($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $2624($10_1 + 4 | 0 | 0) | 0;
   }
   HEAP32[$4_1 >> 2] = $1920($2_1 | 0) | 0;
   HEAP32[$5_1 >> 2] = $1921($2_1 | 0) | 0;
   $1922($10_1 + 4 | 0 | 0, $2_1 | 0);
   $1190($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2610($10_1 + 4 | 0 | 0) | 0;
   $1923($10_1 + 4 | 0 | 0, $2_1 | 0);
   $1909($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $2624($10_1 + 4 | 0 | 0) | 0;
   $2_1 = $1924($2_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $2_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1949($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $19_1 = 0, $21_1 = 0, $23_1 = 0, $22_1 = 0, $24_1 = 0, $15_1 = 0, $18_1 = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $7_1 ? 4 : 0;
  $17_1 = $3_1 & 512 | 0;
  $18_1 = 0;
  label4 : while (1) {
   block : {
    if (($18_1 | 0) != (4 | 0)) {
     break block
    }
    block1 : {
     if (($1565($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break block1
     }
     HEAP32[($15_1 + 12 | 0) >> 2] = $1955($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1958($1956($15_1 + 12 | 0 | 0, 1 | 0) | 0 | 0, $1957($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    block2 : {
     $7_1 = $3_1 & 176 | 0;
     if (($7_1 | 0) == (16 | 0)) {
      break block2
     }
     block3 : {
      if (($7_1 | 0) != (32 | 0)) {
       break block3
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   block9 : {
    block8 : {
     switch (HEAPU8[($8_1 + $18_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break block9;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $7_1 = $1288($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break block9;
     case 3:
      if ($1567($13_1 | 0) | 0) {
       break block9
      }
      $7_1 = HEAP32[($1566($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break block9;
     case 2:
      $7_1 = $1567($12_1 | 0) | 0;
      if (!$17_1) {
       break block9
      }
      if ($7_1) {
       break block9
      }
      HEAP32[$2_1 >> 2] = $1958($1955($12_1 | 0) | 0 | 0, $1957($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break block9;
     case 4:
      break block8;
     default:
      break block9;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $4_1 + $16_1 | 0;
    $7_1 = $4_1;
    block10 : {
     label : while (1) {
      if ($7_1 >>> 0 >= $5_1 >>> 0) {
       break block10
      }
      if (!($1164($6_1 | 0, 64 | 0, HEAP32[$7_1 >> 2] | 0 | 0) | 0)) {
       break block10
      }
      $7_1 = $7_1 + 4 | 0;
      continue label;
     };
    }
    block11 : {
     if (($14_1 | 0) < (1 | 0)) {
      break block11
     }
     $21_1 = HEAP32[$2_1 >> 2] | 0;
     $19_1 = $14_1;
     block12 : {
      label1 : while (1) {
       if ($7_1 >>> 0 <= $4_1 >>> 0) {
        break block12
       }
       if (($19_1 | 0) == (0 | 0)) {
        break block12
       }
       $19_1 = $19_1 + -1 | 0;
       $7_1 = $7_1 + -4 | 0;
       $22_1 = HEAP32[$7_1 >> 2] | 0;
       $23_1 = $21_1 + 4 | 0;
       HEAP32[$2_1 >> 2] = $23_1;
       HEAP32[$21_1 >> 2] = $22_1;
       $21_1 = $23_1;
       continue label1;
      };
     }
     block14 : {
      block13 : {
       if ($19_1) {
        break block13
       }
       $23_1 = 0;
       break block14;
      }
      $23_1 = $1288($6_1 | 0, 48 | 0) | 0;
     }
     $21_1 = HEAP32[$2_1 >> 2] | 0;
     block15 : {
      label2 : while (1) {
       if (($19_1 | 0) < (1 | 0)) {
        break block15
       }
       $22_1 = $21_1 + 4 | 0;
       HEAP32[$2_1 >> 2] = $22_1;
       HEAP32[$21_1 >> 2] = $23_1;
       $19_1 = $19_1 + -1 | 0;
       $21_1 = $22_1;
       continue label2;
      };
     }
     $19_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
     HEAP32[$19_1 >> 2] = $9_1;
    }
    block17 : {
     block16 : {
      if (($7_1 | 0) != ($4_1 | 0)) {
       break block16
      }
      $7_1 = $1288($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break block17;
     }
     block19 : {
      block18 : {
       if (!($1514($11_1 | 0) | 0)) {
        break block18
       }
       $23_1 = $1944() | 0;
       break block19;
      }
      $23_1 = HEAP8[($1513($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label3 : while (1) {
      if (($7_1 | 0) == ($4_1 | 0)) {
       break block17
      }
      block21 : {
       block20 : {
        if (($19_1 | 0) == ($23_1 | 0)) {
         break block20
        }
        $21_1 = $19_1;
        break block21;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
       HEAP32[$21_1 >> 2] = $10_1;
       $21_1 = 0;
       block22 : {
        $24_1 = $24_1 + 1 | 0;
        if ($24_1 >>> 0 < ($1210($11_1 | 0) | 0) >>> 0) {
         break block22
        }
        $23_1 = $19_1;
        break block21;
       }
       block23 : {
        if ((HEAPU8[($1513($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($1755() | 0) & 255 | 0 | 0)) {
         break block23
        }
        $23_1 = $1944() | 0;
        break block21;
       }
       $23_1 = HEAP8[($1513($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
      }
      $7_1 = $7_1 + -4 | 0;
      $19_1 = HEAP32[$7_1 >> 2] | 0;
      $22_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
      HEAP32[$22_1 >> 2] = $19_1;
      $19_1 = $21_1 + 1 | 0;
      continue label3;
     };
    }
    $1684($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $18_1 = $18_1 + 1 | 0;
   continue label4;
  };
 }
 
 function $1950($0_1) {
  $0_1 = $0_1 | 0;
  return $2424($0_1 | 0) | 0 | 0;
 }
 
 function $1951($0_1) {
  $0_1 = $0_1 | 0;
  return $1303($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1952($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1886($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1953($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1954($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1955($0_1) {
  $0_1 = $0_1 | 0;
  return $1965($0_1 | 0, $1717($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1966($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1957($0_1) {
  $0_1 = $0_1 | 0;
  return $1965($0_1 | 0, ($1717($0_1 | 0) | 0) + (($1565($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1958($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1964($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1959($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 480 | 0;
  global$0 = $6_1;
  $1293($6_1 + 476 | 0 | 0, $3_1 | 0);
  $7_1 = $1161($6_1 + 476 | 0 | 0) | 0;
  $8_1 = 0;
  block : {
   if (!($1565($5_1 | 0) | 0)) {
    break block
   }
   $8_1 = (HEAP32[($1566($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($1288($7_1 | 0, 45 | 0) | 0 | 0);
  }
  $9_1 = $1186($6_1 + 452 | 0 | 0) | 0;
  $10_1 = $1780($6_1 + 440 | 0 | 0) | 0;
  $11_1 = $1780($6_1 + 428 | 0 | 0) | 0;
  $1948($2_1 | 0, $8_1 | 0, $6_1 + 476 | 0 | 0, $6_1 + 472 | 0 | 0, $6_1 + 468 | 0 | 0, $6_1 + 464 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 424 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 109;
  $12_1 = $1673($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  block2 : {
   block1 : {
    if (($1565($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 424 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    $2_1 = $1565($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 424 | 0) >> 2] | 0;
    $13_1 = (((($1565($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($1565($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 424 | 0) >> 2] | 0) | 0) + 1 | 0;
    break block2;
   }
   $13_1 = ((($1565($11_1 | 0) | 0) + ($1565($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 424 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  block3 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break block3
   }
   $1674($12_1 | 0, $1032($13_1 << 2 | 0 | 0) | 0 | 0);
   $2_1 = $1871($12_1 | 0) | 0;
   if ($2_1) {
    break block3
   }
   $2595();
   wasm2js_trap();
  }
  $1949($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $1088($3_1 | 0) | 0 | 0, $1716($5_1 | 0) | 0 | 0, ($1716($5_1 | 0) | 0) + (($1565($5_1 | 0) | 0) << 2 | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 472 | 0 | 0, HEAP32[($6_1 + 468 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 464 | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 424 | 0) >> 2] | 0 | 0);
  $5_1 = $1664($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1676($12_1 | 0) | 0;
  $2624($11_1 | 0) | 0;
  $2624($10_1 | 0) | 0;
  $2610($9_1 | 0) | 0;
  $1503($6_1 + 476 | 0 | 0) | 0;
  global$0 = $6_1 + 480 | 0;
  return $5_1 | 0;
 }
 
 function $1960($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2425($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1961($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($2444($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1962() {
  return -1 | 0;
 }
 
 function $1963($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1964($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $2445($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1965($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($2464($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1966($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1967($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $1968($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1797($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $1969($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1970($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $1971($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1800($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $1972($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1973($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 86520;
  block : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($1553() | 0 | 0)) {
    break block
   }
   $1466(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $1974($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 85416;
  $0_1 = $1976($1_1 + 8 | 0 | 0, 30 | 0) | 0;
  $1289($1_1 + 144 | 0 | 0, 66484 | 0) | 0;
  $1977($0_1 | 0);
  $1978();
  $1979($1_1 | 0, 105772 | 0);
  $1980();
  $1981($1_1 | 0, 105780 | 0);
  $1982();
  $1983($1_1 | 0, 105788 | 0);
  $1984();
  $1985($1_1 | 0, 105804 | 0);
  $1986();
  $1987($1_1 | 0, 105812 | 0);
  $1988();
  $1989($1_1 | 0, 105820 | 0);
  $1990();
  $1991($1_1 | 0, 105832 | 0);
  $1992();
  $1993($1_1 | 0, 105840 | 0);
  $1994();
  $1995($1_1 | 0, 105848 | 0);
  $1996();
  $1997($1_1 | 0, 105856 | 0);
  $1998();
  $1999($1_1 | 0, 105864 | 0);
  $2000();
  $2001($1_1 | 0, 105888 | 0);
  $2002();
  $2003($1_1 | 0, 105916 | 0);
  $2004();
  $2005($1_1 | 0, 105924 | 0);
  $2006();
  $2007($1_1 | 0, 105932 | 0);
  $2008();
  $2009($1_1 | 0, 105940 | 0);
  $2010();
  $2011($1_1 | 0, 105948 | 0);
  $2012();
  $2013($1_1 | 0, 105956 | 0);
  $2014();
  $2015($1_1 | 0, 105964 | 0);
  $2016();
  $2017($1_1 | 0, 105972 | 0);
  $2018();
  $2019($1_1 | 0, 105980 | 0);
  $2020();
  $2021($1_1 | 0, 105988 | 0);
  $2022();
  $2023($1_1 | 0, 105996 | 0);
  $2024();
  $2025($1_1 | 0, 106004 | 0);
  $2026();
  $2027($1_1 | 0, 106012 | 0);
  $2028();
  $2029($1_1 | 0, 106024 | 0);
  $2030();
  $2031($1_1 | 0, 106036 | 0);
  $2032();
  $2033($1_1 | 0, 106048 | 0);
  $2034();
  $2035($1_1 | 0, 106060 | 0);
  $2036();
  $2037($1_1 | 0, 106068 | 0);
  return $1_1 | 0;
 }
 
 function $1975($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2038($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 86896;
  return $1_1 | 0;
 }
 
 function $1976($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $2039($0_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 11 | 0 | 0) | 0;
  $2041($2_1 + 10 | 0 | 0, HEAP32[($2040($2_1 + 4 | 0 | 0, $0_1 | 0) | 0) >> 2] | 0 | 0);
  block : {
   if (!$1_1) {
    break block
   }
   $2042($0_1 | 0, $1_1 | 0);
   $2043($0_1 | 0, $1_1 | 0);
  }
  $2044($2_1 + 10 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1977($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $2045($0_1 | 0) | 0;
  $2046($0_1 | 0);
  $2047($0_1 | 0, $1_1 | 0);
 }
 
 function $1978() {
  $2050(105772 | 0, 1 | 0) | 0;
 }
 
 function $1979($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104176 | 0) | 0 | 0);
 }
 
 function $1980() {
  $2051(105780 | 0, 1 | 0) | 0;
 }
 
 function $1981($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104184 | 0) | 0 | 0);
 }
 
 function $1982() {
  $2052(105788 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
 }
 
 function $1983($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104528 | 0) | 0 | 0);
 }
 
 function $1984() {
  $2053(105804 | 0, 1 | 0) | 0;
 }
 
 function $1985($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104520 | 0) | 0 | 0);
 }
 
 function $1986() {
  $2054(105812 | 0, 1 | 0) | 0;
 }
 
 function $1987($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104536 | 0) | 0 | 0);
 }
 
 function $1988() {
  $2055(105820 | 0, 1 | 0) | 0;
 }
 
 function $1989($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104544 | 0) | 0 | 0);
 }
 
 function $1990() {
  $2056(105832 | 0, 1 | 0) | 0;
 }
 
 function $1991($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104552 | 0) | 0 | 0);
 }
 
 function $1992() {
  $2057(105840 | 0, 1 | 0) | 0;
 }
 
 function $1993($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104568 | 0) | 0 | 0);
 }
 
 function $1994() {
  $2058(105848 | 0, 1 | 0) | 0;
 }
 
 function $1995($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104560 | 0) | 0 | 0);
 }
 
 function $1996() {
  $2059(105856 | 0, 1 | 0) | 0;
 }
 
 function $1997($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104576 | 0) | 0 | 0);
 }
 
 function $1998() {
  $2060(105864 | 0, 1 | 0) | 0;
 }
 
 function $1999($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104584 | 0) | 0 | 0);
 }
 
 function $2000() {
  $2061(105888 | 0, 1 | 0) | 0;
 }
 
 function $2001($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104592 | 0) | 0 | 0);
 }
 
 function $2002() {
  $2062(105916 | 0, 1 | 0) | 0;
 }
 
 function $2003($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104192 | 0) | 0 | 0);
 }
 
 function $2004() {
  $2063(105924 | 0, 1 | 0) | 0;
 }
 
 function $2005($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104200 | 0) | 0 | 0);
 }
 
 function $2006() {
  $2064(105932 | 0, 1 | 0) | 0;
 }
 
 function $2007($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104208 | 0) | 0 | 0);
 }
 
 function $2008() {
  $2065(105940 | 0, 1 | 0) | 0;
 }
 
 function $2009($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104216 | 0) | 0 | 0);
 }
 
 function $2010() {
  $2066(105948 | 0, 1 | 0) | 0;
 }
 
 function $2011($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104256 | 0) | 0 | 0);
 }
 
 function $2012() {
  $2067(105956 | 0, 1 | 0) | 0;
 }
 
 function $2013($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104264 | 0) | 0 | 0);
 }
 
 function $2014() {
  $2068(105964 | 0, 1 | 0) | 0;
 }
 
 function $2015($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104272 | 0) | 0 | 0);
 }
 
 function $2016() {
  $2069(105972 | 0, 1 | 0) | 0;
 }
 
 function $2017($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104280 | 0) | 0 | 0);
 }
 
 function $2018() {
  $2070(105980 | 0, 1 | 0) | 0;
 }
 
 function $2019($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104288 | 0) | 0 | 0);
 }
 
 function $2020() {
  $2071(105988 | 0, 1 | 0) | 0;
 }
 
 function $2021($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104296 | 0) | 0 | 0);
 }
 
 function $2022() {
  $2072(105996 | 0, 1 | 0) | 0;
 }
 
 function $2023($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104304 | 0) | 0 | 0);
 }
 
 function $2024() {
  $2073(106004 | 0, 1 | 0) | 0;
 }
 
 function $2025($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104312 | 0) | 0 | 0);
 }
 
 function $2026() {
  $2074(106012 | 0, 1 | 0) | 0;
 }
 
 function $2027($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104224 | 0) | 0 | 0);
 }
 
 function $2028() {
  $2075(106024 | 0, 1 | 0) | 0;
 }
 
 function $2029($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104232 | 0) | 0 | 0);
 }
 
 function $2030() {
  $2076(106036 | 0, 1 | 0) | 0;
 }
 
 function $2031($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104240 | 0) | 0 | 0);
 }
 
 function $2032() {
  $2077(106048 | 0, 1 | 0) | 0;
 }
 
 function $2033($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104248 | 0) | 0 | 0);
 }
 
 function $2034() {
  $2078(106060 | 0, 1 | 0) | 0;
 }
 
 function $2035($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104320 | 0) | 0 | 0);
 }
 
 function $2036() {
  $2079(106068 | 0, 1 | 0) | 0;
 }
 
 function $2037($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2049($0_1 | 0, $1_1 | 0, $2048(104328 | 0) | 0 | 0);
 }
 
 function $2038($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 92088 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $2039($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2465($0_1 | 0, $1_1 | 0) | 0;
  $2466($1_1 + 4 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $2040($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2041($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2467($0_1 | 0, $1_1 | 0) | 0;
 }
 
 function $2042($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  block : {
   if ($1_1 >>> 0 <= ($2468($0_1 | 0) | 0) >>> 0) {
    break block
   }
   $2469($0_1 | 0);
   wasm2js_trap();
  }
  $2471($2_1 + 8 | 0 | 0, $2470($0_1 | 0) | 0 | 0, $1_1 | 0);
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $1_1;
  $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  HEAP32[($2472($0_1 | 0) | 0) >> 2] = $1_1 + ($3_1 << 2 | 0) | 0;
  $2473($0_1 | 0, 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2043($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $2474($2_1 + 4 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label : while (1) {
   block : {
    if (($1_1 | 0) != ($4_1 | 0)) {
     break block
    }
    $2475($3_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return;
   }
   $2477($2470($0_1 | 0) | 0 | 0, $2476($1_1 | 0) | 0 | 0);
   $1_1 = $1_1 + 4 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   continue label;
  };
 }
 
 function $2044($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[$0_1 >> 0] = 1;
 }
 
 function $2045($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $2046($0_1) {
  $0_1 = $0_1 | 0;
  $2496($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $2047($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2048($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $2119($0_1 | 0, $1_1 + 12 | 0 | 0);
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 + -1 | 0 | 0;
 }
 
 function $2049($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2082($1_1 | 0);
  $4_1 = $2089($3_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  block : {
   $1_1 = $0_1 + 8 | 0;
   if ($2_1 >>> 0 < ($2045($1_1 | 0) | 0) >>> 0) {
    break block
   }
   $2092($1_1 | 0, $2_1 + 1 | 0 | 0);
  }
  block1 : {
   if (!(HEAP32[($2081($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
    break block1
   }
   $2093(HEAP32[($2081($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
  }
  $0_1 = $2094($4_1 | 0) | 0;
  HEAP32[($2081($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
  $2090($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2050($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88008;
  return $1_1 | 0;
 }
 
 function $2051($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88040;
  return $1_1 | 0;
 }
 
 function $2052($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = $2142($1975($0_1 | 0, $3_1 | 0) | 0 | 0) | 0;
  HEAP8[($3_1 + 12 | 0) >> 0] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = 85436;
  block : {
   if ($1_1) {
    break block
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = 85488;
  }
  return $3_1 | 0;
 }
 
 function $2053($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2142($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 86952;
  return $1_1 | 0;
 }
 
 function $2054($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2161($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87104;
  return $1_1 | 0;
 }
 
 function $2055($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2161($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 86520;
  HEAP32[($1_1 + 8 | 0) >> 2] = $1553() | 0;
  return $1_1 | 0;
 }
 
 function $2056($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2161($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87252;
  return $1_1 | 0;
 }
 
 function $2057($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2161($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87484;
  return $1_1 | 0;
 }
 
 function $2058($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2161($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87368;
  return $1_1 | 0;
 }
 
 function $2059($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2161($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 87600;
  return $1_1 | 0;
 }
 
 function $2060($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  HEAP16[($1_1 + 8 | 0) >> 1] = 11310;
  HEAP32[$1_1 >> 2] = 86568;
  $1186($1_1 + 12 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $2061($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 46;
  HEAP32[($1_1 + 12 | 0) >> 2] = 44;
  HEAP32[$1_1 >> 2] = 86608;
  $1186($1_1 + 16 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $2062($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88072;
  return $1_1 | 0;
 }
 
 function $2063($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88320;
  return $1_1 | 0;
 }
 
 function $2064($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88532;
  return $1_1 | 0;
 }
 
 function $2065($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88768;
  return $1_1 | 0;
 }
 
 function $2066($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2541($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89764;
  return $1_1 | 0;
 }
 
 function $2067($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2541($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89912;
  return $1_1 | 0;
 }
 
 function $2068($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2541($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90028;
  return $1_1 | 0;
 }
 
 function $2069($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2541($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90144;
  return $1_1 | 0;
 }
 
 function $2070($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2542($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90260;
  return $1_1 | 0;
 }
 
 function $2071($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2543($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90428;
  return $1_1 | 0;
 }
 
 function $2072($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2544($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90596;
  return $1_1 | 0;
 }
 
 function $2073($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2545($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90764;
  return $1_1 | 0;
 }
 
 function $2074($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  $0_1 = $2546($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88968;
  HEAP32[$0_1 >> 2] = 89016;
  return $1_1 | 0;
 }
 
 function $2075($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  $0_1 = $2547($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89236;
  HEAP32[$0_1 >> 2] = 89284;
  return $1_1 | 0;
 }
 
 function $2076($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  $2548($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89476;
  return $1_1 | 0;
 }
 
 function $2077($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1975($0_1 | 0, $1_1 | 0) | 0;
  $2548($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89636;
  return $1_1 | 0;
 }
 
 function $2078($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2549($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90932;
  return $1_1 | 0;
 }
 
 function $2079($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $2549($1975($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 91052;
  return $1_1 | 0;
 }
 
 function $2080() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  block : {
   if (HEAPU8[(0 + 104504 | 0) >> 0] | 0) {
    break block
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $2083() | 0;
   $2084(104500 | 0, $0_1 + 15 | 0 | 0, $0_1 + 8 | 0 | 0) | 0;
   HEAP8[(0 + 104504 | 0) >> 0] = 1;
  }
  $1_1 = $2085(104500 | 0) | 0;
  global$0 = $0_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2081($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $2082($0_1) {
  $0_1 = $0_1 | 0;
  $2086($0_1 + 4 | 0 | 0) | 0;
 }
 
 function $2083() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 1;
  $2106(104344 | 0, $0_1 + 12 | 0 | 0) | 0;
  $1_1 = $2107(104344 | 0) | 0;
  global$0 = $0_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2084($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2108($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2085($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2086($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $2087($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $18_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $2116($2_1 + 24 | 0 | 0, $0_1 | 0);
  $0_1 = $2117($2_1 + 16 | 0 | 0, $1_1 | 0) | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $15_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[$2_1 >> 2] = $18_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $0_1 = $2118($2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $2088($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($2104($0_1 | 0, $1_1 | 0) | 0) {
    break block
   }
   $1221();
   wasm2js_trap();
  }
  return HEAP32[($2105($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $2089($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $2091($0_1 | 0, $2_1 + 12 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2090($0_1) {
  $0_1 = $0_1 | 0;
  $2095($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $2091($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2508($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2092($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  block : {
   $2_1 = $2045($0_1 | 0) | 0;
   if ($1_1 >>> 0 <= $2_1 >>> 0) {
    break block
   }
   $2101($0_1 | 0, $1_1 - $2_1 | 0 | 0);
   return;
  }
  block1 : {
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break block1
   }
   $2102($0_1 | 0, (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
  }
 }
 
 function $2093($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = $2098($0_1 + 4 | 0 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break block
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
  }
  return ($1_1 | 0) == (-1 | 0) | 0;
 }
 
 function $2094($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($2103($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2103($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $2095($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($2103($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2103($0_1 | 0) | 0) >> 2] = 0;
  block : {
   if (!$1_1) {
    break block
   }
   $2509($1_1 | 0);
  }
 }
 
 function $2096($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  HEAP32[$0_1 >> 2] = 85416;
  $1_1 = $0_1 + 8 | 0;
  $2_1 = 0;
  block : {
   label : while (1) {
    if ($2_1 >>> 0 >= ($2045($1_1 | 0) | 0) >>> 0) {
     break block
    }
    block1 : {
     if (!(HEAP32[($2081($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
      break block1
     }
     $2093(HEAP32[($2081($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    continue label;
   };
  }
  $2610($0_1 + 144 | 0 | 0) | 0;
  $2097($1_1 | 0) | 0;
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $2097($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2099($2040($1_1 + 12 | 0 | 0, $0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2098($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $2099($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $12_1 = 0;
  block : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!(HEAP32[$1_1 >> 2] | 0)) {
    break block
   }
   $2046($1_1 | 0);
   $2502(HEAP32[$0_1 >> 2] | 0 | 0);
   $12_1 = $2470(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   $2503($12_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $2499($0_1 | 0) | 0 | 0);
  }
 }
 
 function $2100($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2096($0_1 | 0) | 0 | 0, 156 | 0);
 }
 
 function $2101($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ((((HEAP32[($2472($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 < $1_1 >>> 0) {
     break block
    }
    $2043($0_1 | 0, $1_1 | 0);
    break block1;
   }
   $3_1 = $2470($0_1 | 0) | 0;
   $3_1 = $2511($2_1 + 12 | 0 | 0, $2500($0_1 | 0, ($2045($0_1 | 0) | 0) + $1_1 | 0 | 0) | 0 | 0, $2045($0_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   $2512($3_1 | 0, $1_1 | 0);
   $2513($0_1 | 0, $3_1 | 0);
   $2514($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $2102($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $2045($0_1 | 0) | 0;
  $2496($0_1 | 0, $1_1 | 0);
  $2047($0_1 | 0, $2_1 | 0);
 }
 
 function $2103($0_1) {
  $0_1 = $0_1 | 0;
  return $2510($0_1 | 0) | 0 | 0;
 }
 
 function $2104($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  block : {
   $0_1 = $0_1 + 8 | 0;
   if ($1_1 >>> 0 >= ($2045($0_1 | 0) | 0) >>> 0) {
    break block
   }
   $2_1 = (HEAP32[($2105($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $2_1 | 0;
 }
 
 function $2105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $2106($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1974($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2107($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2109() {
  block : {
   if (HEAPU8[(0 + 104512 | 0) >> 0] | 0) {
    break block
   }
   $2110(104508 | 0, $2080() | 0 | 0) | 0;
   HEAP8[(0 + 104512 | 0) >> 0] = 1;
  }
  return $2111(104508 | 0) | 0 | 0;
 }
 
 function $2110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2112($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2111($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2112($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $2113($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $2113($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (($0_1 | 0) == ($2107(104344 | 0) | 0 | 0)) {
    break block
   }
   $2082($0_1 | 0);
  }
 }
 
 function $2114($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (($0_1 | 0) == ($2107(104344 | 0) | 0 | 0)) {
    break block
   }
   $2093($0_1 | 0) | 0;
  }
 }
 
 function $2115($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($2109() | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $2113($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $2116($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2534($0_1 | 0, $1209($1_1 | 0) | 0 | 0, $1210($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $2117($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2535($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  block : {
   if (($2532($0_1 | 0) | 0 | 0) != ($2532($1_1 | 0) | 0 | 0)) {
    break block
   }
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $4_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   $3_1 = !($2533($0_1 | 0, $2_1 | 0) | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $2119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  block : {
   if (($2123($0_1 | 0) | 0 | 0) == (-1 | 0)) {
    break block
   }
   $1459($0_1 | 0, $2125($2_1 + 8 | 0 | 0, $2124($2_1 + 12 | 0 | 0, $1_1 | 0) | 0 | 0) | 0 | 0, 111 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2120($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1042($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2121($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2122($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $2123($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2550($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2125($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2126($0_1) {
  $0_1 = $0_1 | 0;
  $2551($0_1 | 0);
 }
 
 function $2127($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2128($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  block : {
   if ($2_1 >>> 0 > 127 >>> 0) {
    break block
   }
   $3_1 = ((HEAP32[(($2_1 << 2 | 0) + 85488 | 0) >> 2] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $2129($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    $4_1 = 0;
    block1 : {
     $5_1 = HEAP32[$1_1 >> 2] | 0;
     if ($5_1 >>> 0 > 127 >>> 0) {
      break block1
     }
     $4_1 = HEAP32[(($5_1 << 2 | 0) + 85488 | 0) >> 2] | 0;
    }
    HEAP32[$3_1 >> 2] = $4_1;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $2130($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break block
    }
    block1 : {
     $4_1 = HEAP32[$2_1 >> 2] | 0;
     if ($4_1 >>> 0 > 127 >>> 0) {
      break block1
     }
     if ((HEAP32[(($4_1 << 2 | 0) + 85488 | 0) >> 2] | 0) & $1_1 | 0) {
      break block
     }
    }
    $2_1 = $2_1 + 4 | 0;
    continue label;
   };
  }
  return $2_1 | 0;
 }
 
 function $2131($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break block
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    if ($4_1 >>> 0 > 127 >>> 0) {
     break block
    }
    if (!((HEAP32[(($4_1 << 2 | 0) + 85488 | 0) >> 2] | 0) & $1_1 | 0)) {
     break block
    }
    $2_1 = $2_1 + 4 | 0;
    continue label;
   };
  }
  return $2_1 | 0;
 }
 
 function $2132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break block
   }
   $1_1 = HEAP32[(($2133() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $2133() {
  return HEAP32[($1468() | 0) >> 2] | 0 | 0;
 }
 
 function $2134($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    block1 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break block1
     }
     $3_1 = HEAP32[(($2133() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $2135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break block
   }
   $1_1 = HEAP32[(($2136() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $2136() {
  return HEAP32[($1469() | 0) >> 2] | 0 | 0;
 }
 
 function $2137($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    block1 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break block1
     }
     $3_1 = HEAP32[(($2136() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $2138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $2139($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $2140($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24 >> 24 | 0;
 }
 
 function $2141($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $2142($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2143($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 85436;
  block : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break block
   }
   if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break block
   }
   $2588($1_1 | 0);
  }
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $2144($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2143($0_1 | 0) | 0 | 0, 16 | 0);
 }
 
 function $2145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if (($1_1 | 0) < (0 | 0)) {
    break block
   }
   $1_1 = HEAP32[(($2133() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 << 24 >> 24 | 0;
 }
 
 function $2146($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    block1 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break block1
     }
     $3_1 = HEAP32[(($2133() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $2147($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if (($1_1 | 0) < (0 | 0)) {
    break block
   }
   $1_1 = HEAP32[(($2136() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 << 24 >> 24 | 0;
 }
 
 function $2148($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    block1 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break block1
     }
     $3_1 = HEAP32[(($2136() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $2149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $2150($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $2151($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) < (0 | 0) ? $2_1 : $1_1) | 0;
 }
 
 function $2152($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    HEAP8[$4_1 >> 0] = ($5_1 | 0) < (0 | 0) ? $3_1 : $5_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $2153($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2154($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $2155($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $2156($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $2157($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2158($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2159($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 - $2_1 | 0;
  $4_1 = HEAP32[($1219($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $2160($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2161($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2162($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1973($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2163($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  block1 : {
   label : while (1) {
    block : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break block
     }
     $9_1 = $3_1;
     break block1;
    }
    if (!(HEAP32[$9_1 >> 2] | 0)) {
     break block1
    }
    $9_1 = $9_1 + 4 | 0;
    continue label;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  block4 : {
   block9 : {
    label2 : while (1) {
     block13 : {
      block2 : {
       if (($2_1 | 0) == ($3_1 | 0)) {
        break block2
       }
       if (($5_1 | 0) == ($6_1 | 0)) {
        break block2
       }
       i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       $10_1 = 1;
       block7 : {
        block6 : {
         block5 : {
          block3 : {
           $11_1 = $2164($5_1 | 0, $4_1 | 0, ($9_1 - $2_1 | 0) >> 2 | 0 | 0, $6_1 - $5_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           switch ($11_1 + 1 | 0 | 0) {
           case 0:
            break block3;
           case 1:
            break block4;
           default:
            break block5;
           };
          }
          HEAP32[$7_1 >> 2] = $5_1;
          label1 : while (1) {
           if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
            break block6
           }
           $9_1 = $2165($5_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($9_1 | 0) == (-1 | 0)) {
            break block6
           }
           $5_1 = (HEAP32[$7_1 >> 2] | 0) + $9_1 | 0;
           HEAP32[$7_1 >> 2] = $5_1;
           $2_1 = $2_1 + 4 | 0;
           continue label1;
          };
         }
         $5_1 = (HEAP32[$7_1 >> 2] | 0) + $11_1 | 0;
         HEAP32[$7_1 >> 2] = $5_1;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break block7
         }
         block8 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break block8
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          $9_1 = $3_1;
          continue label2;
         }
         $9_1 = $2165($8_1 + 4 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         if (($9_1 | 0) == (-1 | 0)) {
          break block9
         }
         $2_1 = $8_1 + 4 | 0;
         block10 : {
          if ($9_1 >>> 0 <= ($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) >>> 0) {
           break block10
          }
          $10_1 = 1;
          break block4;
         }
         block11 : {
          label3 : while (1) {
           if (!$9_1) {
            break block11
           }
           $5_1 = HEAPU8[$2_1 >> 0] | 0;
           $10_1 = HEAP32[$7_1 >> 2] | 0;
           HEAP32[$7_1 >> 2] = $10_1 + 1 | 0;
           HEAP8[$10_1 >> 0] = $5_1;
           $9_1 = $9_1 + -1 | 0;
           $2_1 = $2_1 + 1 | 0;
           continue label3;
          };
         }
         $2_1 = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
         HEAP32[$4_1 >> 2] = $2_1;
         $9_1 = $2_1;
         label4 : while (1) {
          block12 : {
           if (($9_1 | 0) != ($3_1 | 0)) {
            break block12
           }
           $9_1 = $3_1;
           break block13;
          }
          if (!(HEAP32[$9_1 >> 2] | 0)) {
           break block13
          }
          $9_1 = $9_1 + 4 | 0;
          continue label4;
         };
        }
        HEAP32[$4_1 >> 2] = $2_1;
        break block9;
       }
       $2_1 = HEAP32[$4_1 >> 2] | 0;
      }
      $10_1 = ($2_1 | 0) != ($3_1 | 0);
      break block4;
     }
     $5_1 = HEAP32[$7_1 >> 2] | 0;
     continue label2;
    };
   }
   $10_1 = 2;
  }
  global$0 = $8_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $2164($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $1556($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $4_1 = $1470($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1557($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $2165($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1556($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $1013($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1557($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2166($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $133_1 = 0, $135_1 = 0, $131_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  block1 : {
   label : while (1) {
    block : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break block
     }
     $9_1 = $3_1;
     break block1;
    }
    if (!(HEAPU8[$9_1 >> 0] | 0)) {
     break block1
    }
    $9_1 = $9_1 + 1 | 0;
    continue label;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label2 : while (1) {
   block10 : {
    block12 : {
     block2 : {
      if (($2_1 | 0) == ($3_1 | 0)) {
       break block2
      }
      if (($5_1 | 0) == ($6_1 | 0)) {
       break block2
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      block9 : {
       block4 : {
        block11 : {
         block8 : {
          block3 : {
           $10_1 = $2167($5_1 | 0, $4_1 | 0, $9_1 - $2_1 | 0 | 0, ($6_1 - $5_1 | 0) >> 2 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($10_1 | 0) != (-1 | 0)) {
            break block3
           }
           label1 : while (1) {
            HEAP32[$7_1 >> 2] = $5_1;
            if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break block2
            }
            $6_1 = 1;
            block6 : {
             block7 : {
              block5 : {
               $5_1 = $2168($5_1 | 0, $2_1 | 0, $9_1 - $2_1 | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
               switch ($5_1 + 2 | 0 | 0) {
               case 0:
                break block4;
               case 1:
                break block5;
               case 2:
                break block6;
               default:
                break block7;
               };
              }
              HEAP32[$4_1 >> 2] = $2_1;
              break block8;
             }
             $6_1 = $5_1;
            }
            $2_1 = $2_1 + $6_1 | 0;
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
            continue label1;
           };
          }
          $5_1 = (HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
           break block9
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          if (($9_1 | 0) == ($3_1 | 0)) {
           break block10
          }
          if (!($2168($5_1 | 0, $2_1 | 0, 1 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
           break block11
          }
         }
         $9_1 = 2;
         break block12;
        }
        $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
        HEAP32[$7_1 >> 2] = $5_1;
        $2_1 = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $9_1 = $2_1;
        label3 : while (1) {
         if (($9_1 | 0) == ($3_1 | 0)) {
          break block10
         }
         if (!(HEAPU8[$9_1 >> 0] | 0)) {
          continue label2
         }
         $9_1 = $9_1 + 1 | 0;
         continue label3;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = 1;
       break block12;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $9_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $9_1 | 0;
   }
   $9_1 = $3_1;
   continue label2;
  };
 }
 
 function $2167($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $1556($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $4_1 = $1472($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1557($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $2168($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $1556($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $3_1 = $1317($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1557($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $2169($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $6_1 = 2;
  block : {
   $2_1 = $2165($5_1 + 12 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   if (($2_1 + 1 | 0) >>> 0 < 2 >>> 0) {
    break block
   }
   $6_1 = 1;
   $2_1 = $2_1 + -1 | 0;
   if ($2_1 >>> 0 > ($3_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >>> 0) {
    break block
   }
   $6_1 = $5_1 + 12 | 0;
   label : while (1) {
    block1 : {
     if ($2_1) {
      break block1
     }
     $6_1 = 0;
     break block;
    }
    $0_1 = HEAPU8[$6_1 >> 0] | 0;
    $1_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $1_1 + 1 | 0;
    HEAP8[$1_1 >> 0] = $0_1;
    $2_1 = $2_1 + -1 | 0;
    $6_1 = $6_1 + 1 | 0;
    continue label;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $2170($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($2171(0 | 0, 0 | 0, 4 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
    break block
   }
   return -1 | 0;
  }
  block1 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break block1
   }
   return 1 | 0;
  }
  return ($2172($0_1 | 0) | 0 | 0) == (1 | 0) | 0;
 }
 
 function $2171($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1556($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $1316($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1557($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2172($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1556($1_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  $2_1 = $1473() | 0;
  $1557($0_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2173($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2174($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  block : {
   label : while (1) {
    if ($6_1 >>> 0 >= $4_1 >>> 0) {
     break block
    }
    if (($2_1 | 0) == ($3_1 | 0)) {
     break block
    }
    $7_1 = 1;
    block1 : {
     block2 : {
      $8_1 = $2175($2_1 | 0, $3_1 - $2_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      switch ($8_1 + 2 | 0 | 0) {
      case 0:
      case 1:
       break block;
      case 2:
       break block1;
      default:
       break block2;
      };
     }
     $7_1 = $8_1;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $7_1 + $5_1 | 0;
    $2_1 = $2_1 + $7_1 | 0;
    continue label;
   };
  }
  return $5_1 | 0;
 }
 
 function $2175($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1556($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $1474($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1557($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2176($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break block
   }
   return 1 | 0;
  }
  return $2172($0_1 | 0) | 0 | 0;
 }
 
 function $2177($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2178($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2179($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2179($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  block1 : {
   block : {
    if (!($7_1 & 2 | 0)) {
     break block
    }
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break block1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
    $0_1 = HEAP32[$2_1 >> 2] | 0;
   }
   block3 : {
    label : while (1) {
     block2 : {
      if ($0_1 >>> 0 < $1_1 >>> 0) {
       break block2
      }
      $7_1 = 0;
      break block3;
     }
     $7_1 = 2;
     $3_1 = HEAPU16[$0_1 >> 1] | 0;
     if ($6_1 >>> 0 < $3_1 >>> 0) {
      break block3
     }
     block9 : {
      block5 : {
       block4 : {
        if ($3_1 >>> 0 > 127 >>> 0) {
         break block4
        }
        $7_1 = 1;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (1 | 0)) {
         break block3
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1;
        break block5;
       }
       block6 : {
        if ($3_1 >>> 0 > 2047 >>> 0) {
         break block6
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (2 | 0)) {
         break block1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break block5;
       }
       block7 : {
        if ($3_1 >>> 0 > 55295 >>> 0) {
         break block7
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (3 | 0)) {
         break block1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break block5;
       }
       block8 : {
        if ($3_1 >>> 0 > 56319 >>> 0) {
         break block8
        }
        $7_1 = 1;
        if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
         break block3
        }
        $8_1 = HEAPU16[($0_1 + 2 | 0) >> 1] | 0;
        if (($8_1 & 64512 | 0 | 0) != (56320 | 0)) {
         break block9
        }
        $9_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $9_1 | 0 | 0) < (4 | 0)) {
         break block3
        }
        $7_1 = $3_1 & 960 | 0;
        if ((($7_1 << 10 | 0 | (($3_1 << 10 | 0) & 64512 | 0) | 0 | ($8_1 & 1023 | 0) | 0) + 65536 | 0) >>> 0 > $6_1 >>> 0) {
         break block9
        }
        HEAP32[$2_1 >> 2] = $0_1 + 2 | 0;
        HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
        $0_1 = ($7_1 >>> 6 | 0) + 1 | 0;
        HEAP8[$9_1 >> 0] = $0_1 >>> 2 | 0 | 240 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($0_1 << 4 | 0) & 48 | 0 | (($3_1 >>> 2 | 0) & 15 | 0) | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($8_1 >>> 6 | 0) & 15 | 0 | (($3_1 << 4 | 0) & 48 | 0) | 0 | 128 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
        HEAP8[$3_1 >> 0] = $8_1 & 63 | 0 | 128 | 0;
        break block5;
       }
       if ($3_1 >>> 0 < 57344 >>> 0) {
        break block3
       }
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (3 | 0)) {
        break block1
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 191 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
      }
      $0_1 = (HEAP32[$2_1 >> 2] | 0) + 2 | 0;
      HEAP32[$2_1 >> 2] = $0_1;
      continue label;
     }
     break label;
    };
    return 2 | 0;
   }
   return $7_1 | 0;
  }
  return 1 | 0;
 }
 
 function $2180($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2181($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2181($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  block : {
   if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
    break block
   }
   if (!($7_1 & 4 | 0)) {
    break block
   }
   if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (239 | 0)) {
    break block
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break block
   }
   if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break block
   }
   $0_1 = $0_1 + 3 | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $3_1 = HEAP32[$5_1 >> 2] | 0;
  }
  block2 : {
   block7 : {
    block1 : {
     label : while (1) {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break block1
      }
      if ($3_1 >>> 0 >= $4_1 >>> 0) {
       break block1
      }
      $8_1 = 2;
      $7_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($6_1 >>> 0 < $7_1 >>> 0) {
       break block2
      }
      block4 : {
       block3 : {
        if (($7_1 << 24 >> 24 | 0) < (0 | 0)) {
         break block3
        }
        HEAP16[$3_1 >> 1] = $7_1;
        $7_1 = 1;
        break block4;
       }
       if ($7_1 >>> 0 < 194 >>> 0) {
        break block2
       }
       block5 : {
        if ($7_1 >>> 0 > 223 >>> 0) {
         break block5
        }
        block6 : {
         if (($1_1 - $0_1 | 0 | 0) >= (2 | 0)) {
          break block6
         }
         return 1 | 0;
        }
        $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break block7
        }
        $8_1 = 2;
        $7_1 = $9_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
        if ($7_1 >>> 0 > $6_1 >>> 0) {
         break block7
        }
        HEAP16[$3_1 >> 1] = $7_1;
        $7_1 = 2;
        break block4;
       }
       block8 : {
        if ($7_1 >>> 0 > 239 >>> 0) {
         break block8
        }
        $8_1 = 1;
        $10_1 = $1_1 - $0_1 | 0;
        if (($10_1 | 0) < (2 | 0)) {
         break block7
        }
        $9_1 = HEAP8[($0_1 + 1 | 0) >> 0] | 0;
        block11 : {
         block10 : {
          block9 : {
           if (($7_1 | 0) == (237 | 0)) {
            break block9
           }
           if (($7_1 | 0) != (224 | 0)) {
            break block10
           }
           if (($9_1 & -32 | 0 | 0) != (-96 | 0)) {
            break block2
           }
           break block11;
          }
          if (($9_1 | 0) >= (-96 | 0)) {
           break block2
          }
          break block11;
         }
         if (($9_1 | 0) > (-65 | 0)) {
          break block2
         }
        }
        if (($10_1 | 0) == (2 | 0)) {
         break block7
        }
        $10_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break block2
        }
        $8_1 = 2;
        $7_1 = $10_1 & 63 | 0 | (($9_1 & 63 | 0) << 6 | 0 | ($7_1 << 12 | 0) | 0) | 0;
        if (($7_1 & 65535 | 0) >>> 0 > $6_1 >>> 0) {
         break block7
        }
        HEAP16[$3_1 >> 1] = $7_1;
        $7_1 = 3;
        break block4;
       }
       if ($7_1 >>> 0 > 244 >>> 0) {
        break block2
       }
       $8_1 = 1;
       $9_1 = $1_1 - $0_1 | 0;
       if (($9_1 | 0) < (2 | 0)) {
        break block7
       }
       $10_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
       $11_1 = $10_1 << 24 >> 24;
       block15 : {
        block13 : {
         switch ($7_1 + -240 | 0 | 0) {
         case 0:
          if ((($11_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
           break block2
          }
          break block15;
         case 4:
          if (($11_1 | 0) >= (-112 | 0)) {
           break block2
          }
          break block15;
         default:
          break block13;
         };
        }
        if (($11_1 | 0) > (-65 | 0)) {
         break block2
        }
       }
       if (($9_1 | 0) == (2 | 0)) {
        break block7
       }
       $11_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break block2
       }
       if (($9_1 | 0) == (3 | 0)) {
        break block7
       }
       $9_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break block2
       }
       if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
        break block7
       }
       $8_1 = 2;
       $9_1 = $9_1 & 63 | 0;
       $12_1 = $11_1 << 6 | 0;
       $13_1 = $7_1 & 7 | 0;
       if (($9_1 | ($12_1 & 4032 | 0 | (($10_1 << 12 | 0) & 258048 | 0 | ($13_1 << 18 | 0) | 0) | 0) | 0) >>> 0 > $6_1 >>> 0) {
        break block7
       }
       HEAP16[($3_1 + 2 | 0) >> 1] = $9_1 | ($12_1 & 960 | 0) | 0 | 56320 | 0;
       $7_1 = 4;
       $8_1 = $10_1 << 2 | 0;
       HEAP16[$3_1 >> 1] = ($13_1 << 8 | 0 | ($8_1 & 192 | 0) | 0 | ($8_1 & 60 | 0) | 0 | (($11_1 >>> 4 | 0) & 3 | 0) | 0) + 16320 | 0 | 55296 | 0;
       $3_1 = $3_1 + 2 | 0;
      }
      $0_1 = $0_1 + $7_1 | 0;
      HEAP32[$2_1 >> 2] = $0_1;
      $3_1 = $3_1 + 2 | 0;
      HEAP32[$5_1 >> 2] = $3_1;
      continue label;
     };
    }
    $8_1 = $0_1 >>> 0 < $1_1 >>> 0;
   }
   return $8_1 | 0;
  }
  return 2 | 0;
 }
 
 function $2182($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $2183($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2184($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2185($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $2186($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2186($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  block : {
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break block
   }
   if (!($4_1 & 4 | 0)) {
    break block
   }
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break block
   }
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break block
   }
   $5_1 = $5_1 + ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
  }
  $6_1 = 0;
  block1 : {
   label : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break block1
    }
    if ($2_1 >>> 0 <= $6_1 >>> 0) {
     break block1
    }
    $4_1 = HEAPU8[$5_1 >> 0] | 0;
    if ($3_1 >>> 0 < $4_1 >>> 0) {
     break block1
    }
    block3 : {
     block2 : {
      if (($4_1 << 24 >> 24 | 0) < (0 | 0)) {
       break block2
      }
      $5_1 = $5_1 + 1 | 0;
      break block3;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break block1
     }
     block4 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break block4
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break block1
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break block1
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break block1
      }
      $5_1 = $5_1 + 2 | 0;
      break block3;
     }
     block5 : {
      if ($4_1 >>> 0 > 239 >>> 0) {
       break block5
      }
      if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
       break block1
      }
      $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
      $7_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
      block8 : {
       block7 : {
        block6 : {
         if (($4_1 | 0) == (237 | 0)) {
          break block6
         }
         if (($4_1 | 0) != (224 | 0)) {
          break block7
         }
         if (($7_1 & -32 | 0 | 0) == (-96 | 0)) {
          break block8
         }
         break block1;
        }
        if (($7_1 | 0) >= (-96 | 0)) {
         break block1
        }
        break block8;
       }
       if (($7_1 | 0) > (-65 | 0)) {
        break block1
       }
      }
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
       break block1
      }
      if ((($7_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break block1
      }
      $5_1 = $5_1 + 3 | 0;
      break block3;
     }
     if ($4_1 >>> 0 > 244 >>> 0) {
      break block1
     }
     if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
      break block1
     }
     if (($2_1 - $6_1 | 0) >>> 0 < 2 >>> 0) {
      break block1
     }
     $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
     $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
     $7_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
     block12 : {
      block10 : {
       switch ($4_1 + -240 | 0 | 0) {
       case 0:
        if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
         break block1
        }
        break block12;
       case 4:
        if (($7_1 | 0) >= (-112 | 0)) {
         break block1
        }
        break block12;
       default:
        break block10;
       };
      }
      if (($7_1 | 0) > (-65 | 0)) {
       break block1
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break block1
     }
     if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
      break block1
     }
     if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break block1
     }
     $5_1 = $5_1 + 4 | 0;
     $6_1 = $6_1 + 1 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $2187($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $2188($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2189($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2179($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2190($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2181($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2191($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $2192($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2193($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2194($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $2186($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2195($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $2196($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2197($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2198($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2198($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  block1 : {
   block : {
    if (!($7_1 & 2 | 0)) {
     break block
    }
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break block1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $0_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = 187;
    $0_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = 191;
    $0_1 = HEAP32[$2_1 >> 2] | 0;
   }
   block3 : {
    label : while (1) {
     block2 : {
      if ($0_1 >>> 0 < $1_1 >>> 0) {
       break block2
      }
      $3_1 = 0;
      break block3;
     }
     $3_1 = 2;
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1 >>> 0 > $6_1 >>> 0) {
      break block3
     }
     if (($0_1 & -2048 | 0 | 0) == (55296 | 0)) {
      break block3
     }
     block5 : {
      block4 : {
       if ($0_1 >>> 0 > 127 >>> 0) {
        break block4
       }
       $3_1 = 1;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (1 | 0)) {
        break block3
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $0_1;
       break block5;
      }
      block6 : {
       if ($0_1 >>> 0 > 2047 >>> 0) {
        break block6
       }
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $3_1 | 0 | 0) < (2 | 0)) {
        break block1
       }
       HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
       HEAP8[$3_1 >> 0] = $0_1 >>> 6 | 0 | 192 | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
       HEAP8[$3_1 >> 0] = $0_1 & 63 | 0 | 128 | 0;
       break block5;
      }
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      $7_1 = $4_1 - $3_1 | 0;
      block7 : {
       if ($0_1 >>> 0 > 65535 >>> 0) {
        break block7
       }
       if (($7_1 | 0) < (3 | 0)) {
        break block1
       }
       HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
       HEAP8[$3_1 >> 0] = $0_1 >>> 12 | 0 | 224 | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
       HEAP8[$3_1 >> 0] = $0_1 & 63 | 0 | 128 | 0;
       break block5;
      }
      if (($7_1 | 0) < (4 | 0)) {
       break block1
      }
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = $0_1 >>> 18 | 0 | 240 | 0;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = ($0_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = ($0_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = $0_1 & 63 | 0 | 128 | 0;
     }
     $0_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
     HEAP32[$2_1 >> 2] = $0_1;
     continue label;
    };
   }
   return $3_1 | 0;
  }
  return 1 | 0;
 }
 
 function $2199($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2200($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2200($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  block : {
   if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
    break block
   }
   if (!($7_1 & 4 | 0)) {
    break block
   }
   if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (239 | 0)) {
    break block
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break block
   }
   if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break block
   }
   $0_1 = $0_1 + 3 | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $3_1 = HEAP32[$5_1 >> 2] | 0;
  }
  block3 : {
   block7 : {
    block1 : {
     label : while (1) {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break block1
      }
      if ($3_1 >>> 0 >= $4_1 >>> 0) {
       break block1
      }
      $8_1 = HEAP8[$0_1 >> 0] | 0;
      $7_1 = $8_1 & 255 | 0;
      block4 : {
       block2 : {
        if (($8_1 | 0) < (0 | 0)) {
         break block2
        }
        if ($6_1 >>> 0 < $7_1 >>> 0) {
         break block3
        }
        $8_1 = 1;
        break block4;
       }
       if ($8_1 >>> 0 < -62 >>> 0) {
        break block3
       }
       block5 : {
        if ($8_1 >>> 0 > -33 >>> 0) {
         break block5
        }
        block6 : {
         if (($1_1 - $0_1 | 0 | 0) >= (2 | 0)) {
          break block6
         }
         return 1 | 0;
        }
        $8_1 = 2;
        $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break block7
        }
        $8_1 = 2;
        $7_1 = $9_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
        if ($7_1 >>> 0 <= $6_1 >>> 0) {
         break block4
        }
        break block7;
       }
       block8 : {
        if ($8_1 >>> 0 > -17 >>> 0) {
         break block8
        }
        $8_1 = 1;
        $10_1 = $1_1 - $0_1 | 0;
        if (($10_1 | 0) < (2 | 0)) {
         break block7
        }
        $9_1 = HEAP8[($0_1 + 1 | 0) >> 0] | 0;
        block11 : {
         block10 : {
          block9 : {
           if (($7_1 | 0) == (237 | 0)) {
            break block9
           }
           if (($7_1 | 0) != (224 | 0)) {
            break block10
           }
           if (($9_1 & -32 | 0 | 0) == (-96 | 0)) {
            break block11
           }
           break block3;
          }
          if (($9_1 | 0) < (-96 | 0)) {
           break block11
          }
          break block3;
         }
         if (($9_1 | 0) > (-65 | 0)) {
          break block3
         }
        }
        if (($10_1 | 0) == (2 | 0)) {
         break block7
        }
        $10_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break block3
        }
        $8_1 = 2;
        $7_1 = $10_1 & 63 | 0 | (($9_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0) | 0;
        if ($7_1 >>> 0 > $6_1 >>> 0) {
         break block7
        }
        $8_1 = 3;
        break block4;
       }
       if ($8_1 >>> 0 > -12 >>> 0) {
        break block3
       }
       $8_1 = 1;
       $9_1 = $1_1 - $0_1 | 0;
       if (($9_1 | 0) < (2 | 0)) {
        break block7
       }
       $10_1 = HEAP8[($0_1 + 1 | 0) >> 0] | 0;
       block15 : {
        block13 : {
         switch ($7_1 + -240 | 0 | 0) {
         case 0:
          if ((($10_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
           break block3
          }
          break block15;
         case 4:
          if (($10_1 | 0) >= (-112 | 0)) {
           break block3
          }
          break block15;
         default:
          break block13;
         };
        }
        if (($10_1 | 0) > (-65 | 0)) {
         break block3
        }
       }
       if (($9_1 | 0) == (2 | 0)) {
        break block7
       }
       $11_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break block3
       }
       if (($9_1 | 0) == (3 | 0)) {
        break block7
       }
       $9_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break block3
       }
       $8_1 = 2;
       $7_1 = $9_1 & 63 | 0 | (($11_1 << 6 | 0) & 4032 | 0 | (($10_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0) | 0) | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break block7
       }
       $8_1 = 4;
      }
      HEAP32[$3_1 >> 2] = $7_1;
      $0_1 = $0_1 + $8_1 | 0;
      HEAP32[$2_1 >> 2] = $0_1;
      $3_1 = $3_1 + 4 | 0;
      HEAP32[$5_1 >> 2] = $3_1;
      continue label;
     };
    }
    $8_1 = $0_1 >>> 0 < $1_1 >>> 0;
   }
   return $8_1 | 0;
  }
  return 2 | 0;
 }
 
 function $2201($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $2202($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2203($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2204($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $2205($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2205($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  block : {
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break block
   }
   if (!($4_1 & 4 | 0)) {
    break block
   }
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break block
   }
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break block
   }
   $5_1 = $5_1 + ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
  }
  $6_1 = 0;
  block1 : {
   label : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break block1
    }
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break block1
    }
    $4_1 = HEAP8[$5_1 >> 0] | 0;
    $7_1 = $4_1 & 255 | 0;
    block3 : {
     block2 : {
      if (($4_1 | 0) < (0 | 0)) {
       break block2
      }
      if ($3_1 >>> 0 < $7_1 >>> 0) {
       break block1
      }
      $4_1 = 1;
      break block3;
     }
     if ($4_1 >>> 0 < -62 >>> 0) {
      break block1
     }
     block4 : {
      if ($4_1 >>> 0 > -33 >>> 0) {
       break block4
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break block1
      }
      $4_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($4_1 & 192 | 0 | 0) != (128 | 0)) {
       break block1
      }
      if (($4_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break block1
      }
      $4_1 = 2;
      break block3;
     }
     block5 : {
      if ($4_1 >>> 0 > -17 >>> 0) {
       break block5
      }
      if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
       break block1
      }
      $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
      $4_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
      block8 : {
       block7 : {
        block6 : {
         if (($7_1 | 0) == (237 | 0)) {
          break block6
         }
         if (($7_1 | 0) != (224 | 0)) {
          break block7
         }
         if (($4_1 & -32 | 0 | 0) == (-96 | 0)) {
          break block8
         }
         break block1;
        }
        if (($4_1 | 0) >= (-96 | 0)) {
         break block1
        }
        break block8;
       }
       if (($4_1 | 0) > (-65 | 0)) {
        break block1
       }
      }
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
       break block1
      }
      if ((($4_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break block1
      }
      $4_1 = 3;
      break block3;
     }
     if ($4_1 >>> 0 > -12 >>> 0) {
      break block1
     }
     if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
      break block1
     }
     $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
     $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
     $4_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
     block12 : {
      block10 : {
       switch ($7_1 + -240 | 0 | 0) {
       case 0:
        if ((($4_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
         break block1
        }
        break block12;
       case 4:
        if (($4_1 | 0) >= (-112 | 0)) {
         break block1
        }
        break block12;
       default:
        break block10;
       };
      }
      if (($4_1 | 0) > (-65 | 0)) {
       break block1
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break block1
     }
     if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
      break block1
     }
     if ((($4_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break block1
     }
     $4_1 = 4;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $5_1 + $4_1 | 0;
    continue label;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $2206($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $2207($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2208($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2198($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2209($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $2200($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2210($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $2211($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2212($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $2213($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $2205($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2214($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $2215($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 86568;
  $2610($0_1 + 12 | 0 | 0) | 0;
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $2216($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2215($0_1 | 0) | 0 | 0, 24 | 0);
 }
 
 function $2217($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 86608;
  $2610($0_1 + 16 | 0 | 0) | 0;
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $2218($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2217($0_1 | 0) | 0 | 0, 28 | 0);
 }
 
 function $2219($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 8 | 0) >> 0] | 0 | 0;
 }
 
 function $2220($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $2221($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 9 | 0) >> 0] | 0 | 0;
 }
 
 function $2222($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $2223($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1797($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
 }
 
 function $2224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1797($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
 }
 
 function $2225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1289($0_1 | 0, 66254 | 0) | 0;
 }
 
 function $2226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2227($0_1 | 0, 86640 | 0) | 0;
 }
 
 function $2227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = $1499($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  $2627($0_1 | 0, $1_1 | 0, $2228($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2228($0_1) {
  $0_1 = $0_1 | 0;
  return $2537($0_1 | 0) | 0 | 0;
 }
 
 function $2229($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1289($0_1 | 0, 66272 | 0) | 0;
 }
 
 function $2230($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2227($0_1 | 0, 86660 | 0) | 0;
 }
 
 function $2231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2232($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2232($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2616($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2233($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2538($0_1 | 0, $1_1 | 0);
 }
 
 function $2234($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 104604 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 104600 | 0) >> 2] | 0 | 0;
  }
  $2235();
  HEAP8[(0 + 104604 | 0) >> 0] = 1;
  HEAP32[(0 + 104600 | 0) >> 2] = 104752;
  return 104752 | 0;
 }
 
 function $2235() {
  block : {
   if (HEAPU8[(0 + 104920 | 0) >> 0] | 0) {
    break block
   }
   $1306(112 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104920 | 0) >> 0] = 1;
  }
  $2231(104752 | 0, 65603 | 0) | 0;
  $2231(104764 | 0, 65610 | 0) | 0;
  $2231(104776 | 0, 65576 | 0) | 0;
  $2231(104788 | 0, 65584 | 0) | 0;
  $2231(104800 | 0, 65567 | 0) | 0;
  $2231(104812 | 0, 65617 | 0) | 0;
  $2231(104824 | 0, 65594 | 0) | 0;
  $2231(104836 | 0, 65972 | 0) | 0;
  $2231(104848 | 0, 65995 | 0) | 0;
  $2231(104860 | 0, 66259 | 0) | 0;
  $2231(104872 | 0, 66374 | 0) | 0;
  $2231(104884 | 0, 65670 | 0) | 0;
  $2231(104896 | 0, 66048 | 0) | 0;
  $2231(104908 | 0, 65772 | 0) | 0;
 }
 
 function $2236($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 104920;
  label : while (1) {
   $1_1 = $2610($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (104752 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $2237($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 104612 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 104608 | 0) >> 2] | 0 | 0;
  }
  $2238();
  HEAP8[(0 + 104612 | 0) >> 0] = 1;
  HEAP32[(0 + 104608 | 0) >> 2] = 104928;
  return 104928 | 0;
 }
 
 function $2238() {
  block : {
   if (HEAPU8[(0 + 105096 | 0) >> 0] | 0) {
    break block
   }
   $1306(113 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105096 | 0) >> 0] = 1;
  }
  $2240(104928 | 0, 91132 | 0) | 0;
  $2240(104940 | 0, 91160 | 0) | 0;
  $2240(104952 | 0, 91188 | 0) | 0;
  $2240(104964 | 0, 91220 | 0) | 0;
  $2240(104976 | 0, 91260 | 0) | 0;
  $2240(104988 | 0, 91296 | 0) | 0;
  $2240(105e3 | 0, 91324 | 0) | 0;
  $2240(105012 | 0, 91360 | 0) | 0;
  $2240(105024 | 0, 91376 | 0) | 0;
  $2240(105036 | 0, 91392 | 0) | 0;
  $2240(105048 | 0, 91408 | 0) | 0;
  $2240(105060 | 0, 91424 | 0) | 0;
  $2240(105072 | 0, 91440 | 0) | 0;
  $2240(105084 | 0, 91456 | 0) | 0;
 }
 
 function $2239($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105096;
  label : while (1) {
   $1_1 = $2624($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (104928 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $2240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2270($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2241($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 104620 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 104616 | 0) >> 2] | 0 | 0;
  }
  $2242();
  HEAP8[(0 + 104620 | 0) >> 0] = 1;
  HEAP32[(0 + 104616 | 0) >> 2] = 105104;
  return 105104 | 0;
 }
 
 function $2242() {
  block : {
   if (HEAPU8[(0 + 105392 | 0) >> 0] | 0) {
    break block
   }
   $1306(114 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105392 | 0) >> 0] = 1;
  }
  $2231(105104 | 0, 65554 | 0) | 0;
  $2231(105116 | 0, 65545 | 0) | 0;
  $2231(105128 | 0, 66073 | 0) | 0;
  $2231(105140 | 0, 66032 | 0) | 0;
  $2231(105152 | 0, 65624 | 0) | 0;
  $2231(105164 | 0, 66278 | 0) | 0;
  $2231(105176 | 0, 65562 | 0) | 0;
  $2231(105188 | 0, 65719 | 0) | 0;
  $2231(105200 | 0, 65839 | 0) | 0;
  $2231(105212 | 0, 65822 | 0) | 0;
  $2231(105224 | 0, 65830 | 0) | 0;
  $2231(105236 | 0, 65849 | 0) | 0;
  $2231(105248 | 0, 66003 | 0) | 0;
  $2231(105260 | 0, 66406 | 0) | 0;
  $2231(105272 | 0, 65888 | 0) | 0;
  $2231(105284 | 0, 65795 | 0) | 0;
  $2231(105296 | 0, 65624 | 0) | 0;
  $2231(105308 | 0, 65976 | 0) | 0;
  $2231(105320 | 0, 66020 | 0) | 0;
  $2231(105332 | 0, 66147 | 0) | 0;
  $2231(105344 | 0, 65956 | 0) | 0;
  $2231(105356 | 0, 65762 | 0) | 0;
  $2231(105368 | 0, 65666 | 0) | 0;
  $2231(105380 | 0, 66402 | 0) | 0;
 }
 
 function $2243($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105392;
  label : while (1) {
   $1_1 = $2610($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (105104 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $2244($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 104628 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 104624 | 0) >> 2] | 0 | 0;
  }
  $2245();
  HEAP8[(0 + 104628 | 0) >> 0] = 1;
  HEAP32[(0 + 104624 | 0) >> 2] = 105408;
  return 105408 | 0;
 }
 
 function $2245() {
  block : {
   if (HEAPU8[(0 + 105696 | 0) >> 0] | 0) {
    break block
   }
   $1306(115 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105696 | 0) >> 0] = 1;
  }
  $2240(105408 | 0, 91472 | 0) | 0;
  $2240(105420 | 0, 91504 | 0) | 0;
  $2240(105432 | 0, 91540 | 0) | 0;
  $2240(105444 | 0, 91564 | 0) | 0;
  $2240(105456 | 0, 91588 | 0) | 0;
  $2240(105468 | 0, 91604 | 0) | 0;
  $2240(105480 | 0, 91624 | 0) | 0;
  $2240(105492 | 0, 91644 | 0) | 0;
  $2240(105504 | 0, 91672 | 0) | 0;
  $2240(105516 | 0, 91712 | 0) | 0;
  $2240(105528 | 0, 91744 | 0) | 0;
  $2240(105540 | 0, 91780 | 0) | 0;
  $2240(105552 | 0, 91816 | 0) | 0;
  $2240(105564 | 0, 91832 | 0) | 0;
  $2240(105576 | 0, 91848 | 0) | 0;
  $2240(105588 | 0, 91864 | 0) | 0;
  $2240(105600 | 0, 91588 | 0) | 0;
  $2240(105612 | 0, 91880 | 0) | 0;
  $2240(105624 | 0, 91896 | 0) | 0;
  $2240(105636 | 0, 91912 | 0) | 0;
  $2240(105648 | 0, 91928 | 0) | 0;
  $2240(105660 | 0, 91944 | 0) | 0;
  $2240(105672 | 0, 91960 | 0) | 0;
  $2240(105684 | 0, 91976 | 0) | 0;
 }
 
 function $2246($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105696;
  label : while (1) {
   $1_1 = $2624($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (105408 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $2247($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 104636 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 104632 | 0) >> 2] | 0 | 0;
  }
  $2248();
  HEAP8[(0 + 104636 | 0) >> 0] = 1;
  HEAP32[(0 + 104632 | 0) >> 2] = 105712;
  return 105712 | 0;
 }
 
 function $2248() {
  block : {
   if (HEAPU8[(0 + 105736 | 0) >> 0] | 0) {
    break block
   }
   $1306(116 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105736 | 0) >> 0] = 1;
  }
  $2231(105712 | 0, 66453 | 0) | 0;
  $2231(105724 | 0, 66450 | 0) | 0;
 }
 
 function $2249($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105736;
  label : while (1) {
   $1_1 = $2610($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (105712 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $2250($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 104644 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 104640 | 0) >> 2] | 0 | 0;
  }
  $2251();
  HEAP8[(0 + 104644 | 0) >> 0] = 1;
  HEAP32[(0 + 104640 | 0) >> 2] = 105744;
  return 105744 | 0;
 }
 
 function $2251() {
  block : {
   if (HEAPU8[(0 + 105768 | 0) >> 0] | 0) {
    break block
   }
   $1306(117 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 105768 | 0) >> 0] = 1;
  }
  $2240(105744 | 0, 91992 | 0) | 0;
  $2240(105756 | 0, 92004 | 0) | 0;
 }
 
 function $2252($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 105768;
  label : while (1) {
   $1_1 = $2624($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (105744 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $2253($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 104645 | 0) >> 0] | 0) {
    break block
   }
   $1306(118 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104645 | 0) >> 0] = 1;
  }
  return 95924 | 0;
 }
 
 function $2254($0_1) {
  $0_1 = $0_1 | 0;
  $2610(95924 | 0) | 0;
 }
 
 function $2255($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 104660 | 0) >> 0] | 0) {
    break block
   }
   $2227(104648 | 0, 86684 | 0) | 0;
   $1306(119 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104660 | 0) >> 0] = 1;
  }
  return 104648 | 0;
 }
 
 function $2256($0_1) {
  $0_1 = $0_1 | 0;
  $2624(104648 | 0) | 0;
 }
 
 function $2257($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 104661 | 0) >> 0] | 0) {
    break block
   }
   $1306(120 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104661 | 0) >> 0] = 1;
  }
  return 95936 | 0;
 }
 
 function $2258($0_1) {
  $0_1 = $0_1 | 0;
  $2610(95936 | 0) | 0;
 }
 
 function $2259($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 104676 | 0) >> 0] | 0) {
    break block
   }
   $2227(104664 | 0, 86720 | 0) | 0;
   $1306(121 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104676 | 0) >> 0] = 1;
  }
  return 104664 | 0;
 }
 
 function $2260($0_1) {
  $0_1 = $0_1 | 0;
  $2624(104664 | 0) | 0;
 }
 
 function $2261($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 104692 | 0) >> 0] | 0) {
    break block
   }
   $1289(104680 | 0, 66410 | 0) | 0;
   $1306(122 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104692 | 0) >> 0] = 1;
  }
  return 104680 | 0;
 }
 
 function $2262($0_1) {
  $0_1 = $0_1 | 0;
  $2610(104680 | 0) | 0;
 }
 
 function $2263($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 104708 | 0) >> 0] | 0) {
    break block
   }
   $2227(104696 | 0, 86756 | 0) | 0;
   $1306(123 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104708 | 0) >> 0] = 1;
  }
  return 104696 | 0;
 }
 
 function $2264($0_1) {
  $0_1 = $0_1 | 0;
  $2624(104696 | 0) | 0;
 }
 
 function $2265($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 104724 | 0) >> 0] | 0) {
    break block
   }
   $1289(104712 | 0, 65960 | 0) | 0;
   $1306(124 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104724 | 0) >> 0] = 1;
  }
  return 104712 | 0;
 }
 
 function $2266($0_1) {
  $0_1 = $0_1 | 0;
  $2610(104712 | 0) | 0;
 }
 
 function $2267($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 104740 | 0) >> 0] | 0) {
    break block
   }
   $2227(104728 | 0, 86840 | 0) | 0;
   $1306(125 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 104740 | 0) >> 0] = 1;
  }
  return 104728 | 0;
 }
 
 function $2268($0_1) {
  $0_1 = $0_1 | 0;
  $2624(104728 | 0) | 0;
 }
 
 function $2269($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1553() | 0 | 0)) {
    break block
   }
   $1466(HEAP32[$0_1 >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2630($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2271($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2272($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2273($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2274($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2275($0_1) {
  $0_1 = $0_1 | 0;
  $2276($0_1 + 8 | 0 | 0) | 0;
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $2276($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2277($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2275($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2278($0_1) {
  $0_1 = $0_1 | 0;
  $2279($0_1 + 8 | 0 | 0) | 0;
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $2279($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2280($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2278($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2281($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2282($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2282($0_1) {
  $0_1 = $0_1 | 0;
  $2269($0_1 + 8 | 0 | 0) | 0;
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $2283($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2284($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2284($0_1) {
  $0_1 = $0_1 | 0;
  $2269($0_1 + 8 | 0 | 0) | 0;
  return $1487($0_1 | 0) | 0 | 0;
 }
 
 function $2285($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2286($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2287($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2288($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2289($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2290($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2291($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2292($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2293($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2294($0_1) {
  $0_1 = $0_1 | 0;
  $2587($1487($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2297($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2296($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block : {
   if ($3_1 >>> 0 > ($1257($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($1258($3_1 | 0) | 0)) {
      break block1
     }
     $1238($0_1 | 0, $3_1 | 0);
     $5_1 = $1232($0_1 | 0) | 0;
     break block2;
    }
    $1260($4_1 + 8 | 0 | 0, $1199($0_1 | 0) | 0 | 0, ($1259($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $1261($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1262($0_1 | 0, $5_1 | 0);
    $1263($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1264($0_1 | 0, $3_1 | 0);
   }
   $5_1 = $2298($1_1 | 0, $2_1 | 0, $1193($5_1 | 0) | 0 | 0) | 0;
   HEAP8[($4_1 + 7 | 0) >> 0] = 0;
   $1239($5_1 | 0, $4_1 + 7 | 0 | 0);
   $1188($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1266($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2297($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $2298($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = $1280($0_1 | 0) | 0;
  $0_1 = $1_1 - $0_1 | 0;
  $1068($2_1 | 0, $5_1 | 0, $0_1 | 0) | 0;
  return $2_1 + $0_1 | 0 | 0;
 }
 
 function $2299($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2300($0_1) {
  $0_1 = $0_1 | 0;
  return $2303($0_1 | 0) | 0 | 0;
 }
 
 function $2301($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2305($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2302($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block : {
   if ($3_1 >>> 0 > ($2306($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($2307($3_1 | 0) | 0)) {
      break block1
     }
     $1894($0_1 | 0, $3_1 | 0);
     $5_1 = $1893($0_1 | 0) | 0;
     break block2;
    }
    $2309($4_1 + 8 | 0 | 0, $1904($0_1 | 0) | 0 | 0, ($2308($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $2310($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $2311($0_1 | 0, $5_1 | 0);
    $2312($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1892($0_1 | 0, $3_1 | 0);
   }
   $5_1 = $2313($1_1 | 0, $2_1 | 0, $1901($5_1 | 0) | 0 | 0) | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   $1891($5_1 | 0, $4_1 + 4 | 0 | 0);
   $1782($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $2314($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2303($0_1) {
  $0_1 = $0_1 | 0;
  return $2304($0_1 | 0) | 0 | 0;
 }
 
 function $2304($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2305($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $2306($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $2315($1801($0_1 | 0) | 0 | 0) | 0;
  return ($0_1 >>> ($0_1 >>> 0 > (($1268() | 0) >>> 1 | 0) >>> 0) | 0) + -8 | 0 | 0;
 }
 
 function $2307($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 2 >>> 0 | 0;
 }
 
 function $2308($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 1;
  block : {
   if ($0_1 >>> 0 < 2 >>> 0) {
    break block
   }
   $0_1 = $2319($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $2309($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2317($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2310($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2311($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1805($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $2312($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1805($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
  $0_1 = $1805($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
 }
 
 function $2313($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = $1718($0_1 | 0) | 0;
  $0_1 = $1_1 - $0_1 | 0;
  $1142($2_1 | 0, $5_1 | 0, $0_1 >> 2 | 0 | 0) | 0;
  return $2_1 + $0_1 | 0 | 0;
 }
 
 function $2314($0_1) {
  $0_1 = $0_1 | 0;
  $1269(66178 | 0);
  wasm2js_trap();
 }
 
 function $2315($0_1) {
  $0_1 = $0_1 | 0;
  return ($1268() | 0) >>> 2 | 0 | 0;
 }
 
 function $2316($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2317($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2323($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2318($0_1) {
  $0_1 = $0_1 | 0;
  return $2325($0_1 | 0) | 0 | 0;
 }
 
 function $2319($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 1 | 0) & -2 | 0 | 0;
 }
 
 function $2320($0_1) {
  $0_1 = $0_1 | 0;
  return $2321($0_1 | 0) | 0 | 0;
 }
 
 function $2321($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2322($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2323($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2324($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $2324($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 <= ($2315($0_1 | 0) | 0) >>> 0) {
    break block
   }
   $1275();
   wasm2js_trap();
  }
  return $1276($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $2325($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2326($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2327($0_1 | 0, $1193($1192($0_1 | 0) | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
 }
 
 function $2327($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   $4_1 = $1210($0_1 | 0) | 0;
   if ($2_1 >>> 0 <= $4_1 >>> 0) {
    break block
   }
   $1206($0_1 | 0, $2_1 - $4_1 | 0 | 0);
  }
  $1836($0_1 | 0, $2_1 | 0);
  HEAP8[($3_1 + 15 | 0) >> 0] = 0;
  $1239($1_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  block1 : {
   if ($2_1 >>> 0 >= $4_1 >>> 0) {
    break block1
   }
   $1208($0_1 | 0, $4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2328($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  block : {
   $8_1 = $1257($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($8_1 - $1_1 | 0) >>> 0) {
    break block
   }
   $9_1 = $1192($0_1 | 0) | 0;
   block1 : {
    if ($1_1 >>> 0 >= (($8_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break block1
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($7_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $8_1 = ($1259(HEAP32[($1294($7_1 + 4 | 0 | 0, $7_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $1197($0_1 | 0);
   $1260($7_1 + 4 | 0 | 0, $1199($0_1 | 0) | 0 | 0, $8_1 | 0);
   $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   $1261($8_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   block2 : {
    if (!$4_1) {
     break block2
    }
    $1068($1193($8_1 | 0) | 0 | 0, $1193($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   block3 : {
    $2_1 = $5_1 + $4_1 | 0;
    if (($3_1 | 0) == ($2_1 | 0)) {
     break block3
    }
    $1068((($1193($8_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1193($9_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $3_1 - $2_1 | 0 | 0) | 0;
   }
   block4 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break block4
    }
    $1236($1199($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1262($0_1 | 0, $8_1 | 0);
   $1263($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1266($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2329($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2330($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2331($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2331($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1243($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $2332($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1804($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $2333($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2334($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1193($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $2335($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1011($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2336($0_1) {
  $0_1 = $0_1 | 0;
  return $1193($0_1 | 0) | 0 | 0;
 }
 
 function $2337($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1280($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $2338($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1011($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2339($0_1) {
  $0_1 = $0_1 | 0;
  return $1280($0_1 | 0) | 0 | 0;
 }
 
 function $2340($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1901($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $2341($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1476($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2342($0_1) {
  $0_1 = $0_1 | 0;
  return $1901($0_1 | 0) | 0 | 0;
 }
 
 function $2343($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1718($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $2344($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1476($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2345($0_1) {
  $0_1 = $0_1 | 0;
  return $1718($0_1 | 0) | 0 | 0;
 }
 
 function $2346($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2348($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  block : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break block
   }
   label : while (1) {
    $1_1 = $1_1 + -1 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break block
    }
    $2349($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2349($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2350(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $2350($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1745($0_1 | 0, $1_1 | 0);
 }
 
 function $2351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  block : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break block
   }
   label : while (1) {
    $1_1 = $1_1 + -4 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break block
    }
    $2352($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2352($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2353(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $2353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2354($0_1 | 0, $1_1 | 0);
 }
 
 function $2354($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $2355($0_1) {
  $0_1 = $0_1 | 0;
  return $2356($1804($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2356($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2357($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $2358($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $2360($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $2359($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $2361($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2362($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $2363($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $2358($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2364($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2359($0_1) {
  $0_1 = $0_1 | 0;
  return $2365($0_1 | 0) | 0 | 0;
 }
 
 function $2360($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  block : {
   label : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break block
    }
    $4_1 = HEAP8[$2_1 >> 0] | 0;
    $1126($1125($5_1 + 12 | 0 | 0) | 0 | 0, $4_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
    $1127($5_1 + 12 | 0 | 0) | 0;
    continue label;
   };
  }
  $2363($0_1 | 0, $5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $2361($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2367($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2368($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2363($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2366($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2364($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1598($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1598($2_1 | 0) | 0;
  $2369($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2365($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2366($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2367($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1600($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2368($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $2369($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2370($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $2371($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $2373($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $2372($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $2374($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2375($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $2376($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $2371($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2377($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2372($0_1) {
  $0_1 = $0_1 | 0;
  return $2378($0_1 | 0) | 0 | 0;
 }
 
 function $2373($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  block : {
   label : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break block
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    $1183($1182($5_1 + 12 | 0 | 0) | 0 | 0, $4_1 | 0) | 0;
    $2_1 = $2_1 + 4 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
    $1184($5_1 + 12 | 0 | 0) | 0;
    continue label;
   };
  }
  $2376($0_1 | 0, $5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $2374($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2380($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2375($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2381($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2376($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2379($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2377($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1609($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1609($2_1 | 0) | 0;
  $2382($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2378($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2379($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2380($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1611($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2381($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $2382($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2383($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $2384($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $2385($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $2386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2387($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2388($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2389($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  $1_1 = 0;
  block : {
   if ($2390($3_1 + 3 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 12 | 0 | 0) | 0) {
    break block
   }
   $1_1 = $2390($3_1 + 2 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2390($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $2391($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2392($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2393($0_1) {
  $0_1 = $0_1 | 0;
  return $2396($0_1 | 0) | 0 | 0;
 }
 
 function $2394($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $2395($0_1 | 0, $2_1 | 0, $1_1 - $0_1 | 0 | 0) | 0 | 0;
 }
 
 function $2395($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return !($1042($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0) | 0;
 }
 
 function $2396($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $2397($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2397($0_1) {
  $0_1 = $0_1 | 0;
  return $2398($0_1 | 0) | 0 | 0;
 }
 
 function $2398($0_1) {
  $0_1 = $0_1 | 0;
  return $2399(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2399($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1193($1623($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2400($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $2401($0_1) {
  $0_1 = $0_1 | 0;
  return $2403($0_1 | 0) | 0 | 0;
 }
 
 function $2402($0_1) {
  $0_1 = $0_1 | 0;
  return $1303($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2403($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2404($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2405($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2406($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  block : {
   $8_1 = $2306($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($8_1 - $1_1 | 0) >>> 0) {
    break block
   }
   $9_1 = $1658($0_1 | 0) | 0;
   block1 : {
    if ($1_1 >>> 0 >= (($8_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break block1
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($7_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $8_1 = ($2308(HEAP32[($1294($7_1 + 4 | 0 | 0, $7_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $2329($0_1 | 0);
   $2309($7_1 + 4 | 0 | 0, $1904($0_1 | 0) | 0 | 0, $8_1 | 0);
   $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   $2310($8_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   block2 : {
    if (!$4_1) {
     break block2
    }
    $1142($1901($8_1 | 0) | 0 | 0, $1901($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   block3 : {
    $2_1 = $5_1 + $4_1 | 0;
    if (($3_1 | 0) == ($2_1 | 0)) {
     break block3
    }
    $4_1 = $4_1 << 2 | 0;
    $1142((($1901($8_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1901($9_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $3_1 - $2_1 | 0 | 0) | 0;
   }
   block4 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break block4
    }
    $2330($1904($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $2311($0_1 | 0, $8_1 | 0);
   $2312($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $2314($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2407($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $2408($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  $1_1 = 0;
  block : {
   if ($2411($3_1 + 3 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 12 | 0 | 0) | 0) {
    break block
   }
   $1_1 = $2411($3_1 + 2 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2409($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2412($2299($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2410($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2413($0_1 | 0, $1_1 | 0, $2_1 | 0, $1897($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $2411($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $2412($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $2413($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block : {
   if ($3_1 >>> 0 > ($2306($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($2307($3_1 | 0) | 0)) {
      break block1
     }
     $1894($0_1 | 0, $3_1 | 0);
     $5_1 = $1893($0_1 | 0) | 0;
     break block2;
    }
    $2309($4_1 + 8 | 0 | 0, $1904($0_1 | 0) | 0 | 0, ($2308($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $2310($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $2311($0_1 | 0, $5_1 | 0);
    $2312($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1892($0_1 | 0, $3_1 | 0);
   }
   $5_1 = $1902($1_1 | 0, $2_1 | 0, $1901($5_1 | 0) | 0 | 0) | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   $1891($5_1 | 0, $4_1 + 4 | 0 | 0);
   $1782($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $2314($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2414($0_1) {
  $0_1 = $0_1 | 0;
  return $2417($0_1 | 0) | 0 | 0;
 }
 
 function $2415($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $2416($0_1 | 0, $2_1 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0 | 0;
 }
 
 function $2416($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return !($1042($0_1 | 0, $1_1 | 0, $2_1 << 2 | 0 | 0) | 0) | 0;
 }
 
 function $2417($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $2418($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2418($0_1) {
  $0_1 = $0_1 | 0;
  return $2419($0_1 | 0) | 0 | 0;
 }
 
 function $2419($0_1) {
  $0_1 = $0_1 | 0;
  return $2420(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2420($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1901($1660($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2422($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2423($0_1 | 0, $1_1 | 0);
 }
 
 function $2423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1904($1_1 | 0) | 0;
  $1904($0_1 | 0) | 0;
 }
 
 function $2424($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2425($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $2426($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $2427($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1598($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $2428($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1600($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $2429($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $2426($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2430($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2427($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $2431($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
 }
 
 function $2428($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2433($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2429($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2432($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2430($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2434($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2434($2_1 | 0) | 0;
  $2435($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2431($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $2_1 - $1_1 | 0;
  $1072($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $2_1 | 0;
  $2440($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2432($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2442($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2434($0_1) {
  $0_1 = $0_1 | 0;
  return $2436($0_1 | 0) | 0 | 0;
 }
 
 function $2435($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2436($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $2437($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2437($0_1) {
  $0_1 = $0_1 | 0;
  return $2438($0_1 | 0) | 0 | 0;
 }
 
 function $2438($0_1) {
  $0_1 = $0_1 | 0;
  return $2439(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2439($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1280($1858($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2440($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2441($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2441($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2443($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2443($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1941($2_1 + 12 | 0 | 0, $1_1 - ($2437($2_1 + 12 | 0 | 0) | 0) | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2444($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2445($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $2446($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $2447($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1609($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $2448($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1611($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $2449($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $2446($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2450($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2447($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $2451($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
 }
 
 function $2448($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2453($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2449($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2452($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2450($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2454($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2454($2_1 | 0) | 0;
  $2455($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2451($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $2_1 - $1_1 | 0;
  $1145($3_1 | 0, $1_1 | 0, $2_1 >> 2 | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $2_1 | 0;
  $2460($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2452($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2453($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2462($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2454($0_1) {
  $0_1 = $0_1 | 0;
  return $2456($0_1 | 0) | 0 | 0;
 }
 
 function $2455($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2456($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $2457($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2457($0_1) {
  $0_1 = $0_1 | 0;
  return $2458($0_1 | 0) | 0 | 0;
 }
 
 function $2458($0_1) {
  $0_1 = $0_1 | 0;
  return $2459(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2459($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1718($1926($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2460($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2461($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $2461($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2462($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2463($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2463($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1956($2_1 + 12 | 0 | 0, ($1_1 - ($2457($2_1 + 12 | 0 | 0) | 0) | 0) >> 2 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2464($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2465($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $2466($0_1) {
  $0_1 = $0_1 | 0;
  return $2478($0_1 | 0) | 0 | 0;
 }
 
 function $2467($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $2468($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $2480($2479($0_1 | 0) | 0 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $1106() | 0;
  $0_1 = HEAP32[($1219($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2469($0_1) {
  $0_1 = $0_1 | 0;
  $1269(65799 | 0);
  wasm2js_trap();
 }
 
 function $2470($0_1) {
  $0_1 = $0_1 | 0;
  return $2482($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $2471($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2481($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2472($0_1) {
  $0_1 = $0_1 | 0;
  return $2483($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $2473($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $2474($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2475($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2476($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2477($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2494($1_1 | 0) | 0;
 }
 
 function $2478($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 120 | 0) >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $2479($0_1) {
  $0_1 = $0_1 | 0;
  return $2485($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $2480($0_1) {
  $0_1 = $0_1 | 0;
  return $2484($0_1 | 0) | 0 | 0;
 }
 
 function $2481($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2487($1_1 | 0, $2_1 | 0, 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $2482($0_1) {
  $0_1 = $0_1 | 0;
  return $2492($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2483($0_1) {
  $0_1 = $0_1 | 0;
  return $2493($0_1 | 0) | 0 | 0;
 }
 
 function $2484($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $2485($0_1) {
  $0_1 = $0_1 | 0;
  return $2486($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2486($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2487($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    if ($1_1 >>> 0 > 30 >>> 0) {
     break block
    }
    if ((HEAPU8[($0_1 + 120 | 0) >> 0] | 0) & 1 | 0) {
     break block
    }
    HEAP8[($0_1 + 120 | 0) >> 0] = 1;
    break block1;
   }
   $0_1 = $2489($2488($3_1 + 15 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2488($0_1) {
  $0_1 = $0_1 | 0;
  return $2490($0_1 | 0) | 0 | 0;
 }
 
 function $2489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 <= ($2491($0_1 | 0) | 0) >>> 0) {
    break block
   }
   $1275();
   wasm2js_trap();
  }
  return $1276($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $2490($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2491($0_1) {
  $0_1 = $0_1 | 0;
  return ($1268() | 0) >>> 2 | 0 | 0;
 }
 
 function $2492($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2493($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2494($0_1) {
  $0_1 = $0_1 | 0;
  return $2495($0_1 | 0) | 0 | 0;
 }
 
 function $2495($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $2496($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    $2_1 = $2_1 + -4 | 0;
    $2497($2470($0_1 | 0) | 0 | 0, $2476($2_1 | 0) | 0 | 0);
    continue label;
   };
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $2497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2498($1_1 | 0);
 }
 
 function $2498($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2499($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($2501($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $2500($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $33_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  block : {
   $3_1 = $2468($0_1 | 0) | 0;
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    break block
   }
   block1 : {
    $1_1 = $2499($0_1 | 0) | 0;
    if ($1_1 >>> 0 >= ($3_1 >>> 1 | 0) >>> 0) {
     break block1
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
    $3_1 = HEAP32[($1294($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
   }
   global$0 = $2_1 + 16 | 0;
   return $3_1 | 0;
  }
  $2469($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2501($0_1) {
  $0_1 = $0_1 | 0;
  return $2504($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $2502($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2503($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2506($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $2504($0_1) {
  $0_1 = $0_1 | 0;
  return $2505($0_1 | 0) | 0 | 0;
 }
 
 function $2505($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2506($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    if (($1_1 | 0) != ($0_1 | 0)) {
     break block
    }
    HEAP8[($0_1 + 120 | 0) >> 0] = 0;
    break block1;
   }
   $2507($2488($3_1 + 15 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2507($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1243($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $2508($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2509($0_1) {
  $0_1 = $0_1 | 0;
  $2093($0_1 | 0) | 0;
 }
 
 function $2510($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2511($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $2515($0_1 + 12 | 0 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0) | 0;
  block1 : {
   block : {
    if ($1_1) {
     break block
    }
    $1_1 = 0;
    break block1;
   }
   $2471($4_1 + 4 | 0 | 0, $2516($0_1 | 0) | 0 | 0, $1_1 | 0);
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  HEAP32[$0_1 >> 2] = $5_1;
  $3_1 = $5_1 + ($2_1 << 2 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[($2517($0_1 | 0) | 0) >> 2] = $5_1 + ($1_1 << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2512($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $2518($2_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  block : {
   label : while (1) {
    if (($3_1 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
     break block
    }
    $2477($2516($0_1 | 0) | 0 | 0, $2476(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0);
    $3_1 = (HEAP32[$1_1 >> 2] | 0) + 4 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    continue label;
   };
  }
  $2519($1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2502($0_1 | 0);
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $2_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$0_1 >> 2] | 0) - $2_1 | 0) | 0;
  $2520($2470($0_1 | 0) | 0 | 0, $2476(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0, $2476(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $2476($2_1 | 0) | 0 | 0);
  HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $2521($0_1 | 0, $1_1 + 4 | 0 | 0);
  $2521($0_1 + 4 | 0 | 0, $1_1 + 8 | 0 | 0);
  $2521($2472($0_1 | 0) | 0 | 0, $2517($1_1 | 0) | 0 | 0);
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $2473($0_1 | 0, $2045($0_1 | 0) | 0 | 0);
 }
 
 function $2514($0_1) {
  $0_1 = $0_1 | 0;
  $2522($0_1 | 0);
  block : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break block
   }
   $2503($2516($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $2523($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2515($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2465($0_1 | 0, $1_1 | 0) | 0;
  $2524($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $2516($0_1) {
  $0_1 = $0_1 | 0;
  return $2525($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $2517($0_1) {
  $0_1 = $0_1 | 0;
  return $2526($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $2518($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $3_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2519($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2520($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   $2_1 = $2_1 - $1_1 | 0;
   if (!$2_1) {
    break block
   }
   wasm2js_memory_copy($3_1, $1_1, $2_1);
  }
 }
 
 function $2521($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $2522($0_1) {
  $0_1 = $0_1 | 0;
  $2528($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $2523($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($2529($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $2524($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2525($0_1) {
  $0_1 = $0_1 | 0;
  return $2527($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2526($0_1) {
  $0_1 = $0_1 | 0;
  return $2493($0_1 | 0) | 0 | 0;
 }
 
 function $2527($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2528($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2530($0_1 | 0, $1_1 | 0);
 }
 
 function $2529($0_1) {
  $0_1 = $0_1 | 0;
  return $2531($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $2530($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break block
    }
    $2_1 = $2516($0_1 | 0) | 0;
    $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $2497($2_1 | 0, $2476($3_1 | 0) | 0 | 0);
    continue label;
   };
  }
 }
 
 function $2531($0_1) {
  $0_1 = $0_1 | 0;
  return $2505($0_1 | 0) | 0 | 0;
 }
 
 function $2532($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $2533($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $2532($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $2532($1_1 | 0) | 0;
  $3_1 = HEAP32[($1219($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  block : {
   $3_1 = $2120($2536($0_1 | 0) | 0 | 0, $2536($1_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   if ($3_1) {
    break block
   }
   $3_1 = 0;
   if (($2532($0_1 | 0) | 0 | 0) == ($2532($1_1 | 0) | 0 | 0)) {
    break block
   }
   $3_1 = ($2532($0_1 | 0) | 0) >>> 0 < ($2532($1_1 | 0) | 0) >>> 0 ? -1 : 1;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $2534($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2535($0_1) {
  $0_1 = $0_1 | 0;
  return $1291($0_1 | 0) | 0 | 0;
 }
 
 function $2536($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2537($0_1) {
  $0_1 = $0_1 | 0;
  return $1467($0_1 | 0) | 0 | 0;
 }
 
 function $2538($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  block : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break block
   }
   label : while (1) {
    $1_1 = $1_1 + -4 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break block
    }
    $2539($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2539($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2540(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $2540($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1195($0_1 | 0, $1_1 | 0);
 }
 
 function $2541($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2542($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2543($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2544($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2545($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2546($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 92024;
  return $0_1 | 0;
 }
 
 function $2547($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 92060;
  return $0_1 | 0;
 }
 
 function $2548($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = $1553() | 0;
  return $0_1 | 0;
 }
 
 function $2549($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2550($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2552($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2551($0_1) {
  $0_1 = $0_1 | 0;
  $2553($0_1 | 0);
 }
 
 function $2552($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $2553($0_1) {
  $0_1 = $0_1 | 0;
  $2555($2554(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
 }
 
 function $2554($0_1) {
  $0_1 = $0_1 | 0;
  return $2557($0_1 | 0) | 0 | 0;
 }
 
 function $2555($0_1) {
  $0_1 = $0_1 | 0;
  $2556($0_1 | 0);
 }
 
 function $2556($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = $2558() | 0;
 }
 
 function $2557($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2558() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 104516 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 104516 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $2559($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $2562($0_1 | 0, $1_1 | 0) | 0;
  $1302($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $2560($0_1) {
  $0_1 = $0_1 | 0;
  return $2563($0_1 | 0) | 0 | 0;
 }
 
 function $2561($0_1) {
  $0_1 = $0_1 | 0;
  return $1303($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2562($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $2563($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2564($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   $4_1 = $1565($0_1 | 0) | 0;
   if ($2_1 >>> 0 <= $4_1 >>> 0) {
    break block
   }
   $1900($0_1 | 0, $2_1 - $4_1 | 0 | 0);
  }
  $1903($0_1 | 0, $2_1 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  $1891($1_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
  block1 : {
   if ($2_1 >>> 0 >= $4_1 >>> 0) {
    break block1
   }
   $1895($0_1 | 0, $4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $2566() {
  return $2567() | 0 | 0;
 }
 
 function $2567() {
  return -2147483648 | 0;
 }
 
 function $2568() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2570() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2569() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2571() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2570() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0 | 0;
 }
 
 function $2571() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1 | 0;
 }
 
 function $2572() {
  return $2573() | 0 | 0;
 }
 
 function $2573() {
  return 65535 | 0;
 }
 
 function $2574() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2575() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2575() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1 | 0;
 }
 
 function $2576($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround($1483($0_1 | 0, $1_1 | 0, $1553() | 0 | 0)));
 }
 
 function $2577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return +(+$1484($0_1 | 0, $1_1 | 0, $1553() | 0 | 0));
 }
 
 function $2578($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $4$hi = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1485($3_1 | 0, $1_1 | 0, $2_1 | 0, $1553() | 0 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2579($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $2580($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2581($0_1) {
  $0_1 = $0_1 | 0;
  wasm2js_trap();
 }
 
 function $2582($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  block : {
   if ($0_1 & 3 | 0) {
    break block
   }
   if (($1_1 >>> 0) % ($0_1 >>> 0) | 0) {
    break block
   }
   $0_1 = $1038($2_1 + 12 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
   $3_1 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$2 = $0_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $2583($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   $0_1 = $2584($0_1 | 0) | 0;
   if ($0_1) {
    break block
   }
   $2585();
  }
  return $0_1 | 0;
 }
 
 function $2584($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
  block : {
   label : while (1) {
    $2_1 = $1032($1_1 | 0) | 0;
    if ($2_1) {
     break block
    }
    $0_1 = $2649() | 0;
    if (!$0_1) {
     break block
    }
    FUNCTION_TABLE[$0_1 | 0]();
    continue label;
   };
  }
  return $2_1 | 0;
 }
 
 function $2585() {
  $2595();
  wasm2js_trap();
 }
 
 function $2586($0_1) {
  $0_1 = $0_1 | 0;
  $1034($0_1 | 0);
 }
 
 function $2587($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2586($0_1 | 0);
 }
 
 function $2588($0_1) {
  $0_1 = $0_1 | 0;
  $2586($0_1 | 0);
 }
 
 function $2589($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   $1_1 = $2590($0_1 | 0, $1_1 | 0) | 0;
   if ($1_1) {
    break block
   }
   $2585();
  }
  return $1_1 | 0;
 }
 
 function $2590($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $1_1 >>> 0 > 4 >>> 0 ? $1_1 : 4;
  $0_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
  block : {
   label : while (1) {
    $3_1 = $2591($2_1 | 0, $0_1 | 0) | 0;
    if ($3_1) {
     break block
    }
    $1_1 = $2649() | 0;
    if (!$1_1) {
     break block
    }
    FUNCTION_TABLE[$1_1 | 0]();
    continue label;
   };
  }
  return $3_1 | 0;
 }
 
 function $2591($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = (($0_1 + $1_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0;
  return $2582($0_1 | 0, ($1_1 >>> 0 > $2_1 >>> 0 ? $1_1 : $2_1) | 0) | 0 | 0;
 }
 
 function $2592($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2593($0_1 | 0);
 }
 
 function $2593($0_1) {
  $0_1 = $0_1 | 0;
  $1034($0_1 | 0);
 }
 
 function $2594($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2592($0_1 | 0, $2_1 | 0);
 }
 
 function $2595() {
  $991();
  wasm2js_trap();
 }
 
 function $2596($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ($1_1 >>> 0 < 257 >>> 0) {
     break block
    }
    HEAP32[($990() | 0) >> 2] = 29;
    $1_1 = -1;
    break block1;
   }
   $1005(1 | 0, $2_1 + 12 | 0 | 0) | 0;
   $1_1 = $992(fimport$25($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
   $1005(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2597($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  block : {
   if ($2087($1_1 | 0, 66007 | 0) | 0) {
    break block
   }
   $2634($2_1 + 4 | 0 | 0, 67270 | 0, $1_1 | 0);
   $2640(44 | 0, $1216($2_1 + 4 | 0 | 0) | 0 | 0);
   wasm2js_trap();
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2598($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2599($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  block : {
   if (!($2596($1_1 + 12 | 0 | 0, 4 | 0) | 0)) {
    break block
   }
   $2640(HEAP32[($990() | 0) >> 2] | 0 | 0, 66342 | 0);
   wasm2js_trap();
  }
  $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2600($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 95240 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $2601($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $987($1_1 | 0) | 0;
  $3_1 = $2583($2_1 + 13 | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $2_1;
  $3_1 = $2602($3_1 | 0) | 0;
  block : {
   $2_1 = $2_1 + 1 | 0;
   if (!$2_1) {
    break block
   }
   wasm2js_memory_copy($3_1, $1_1, $2_1);
  }
  HEAP32[$0_1 >> 2] = $3_1;
  return $0_1 | 0;
 }
 
 function $2602($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 12 | 0 | 0;
 }
 
 function $2603($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $2600($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 95352 + 8 | 0;
  $2601($0_1 + 4 | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2604($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2605($0_1) {
  $0_1 = $0_1 | 0;
  $991();
  wasm2js_trap();
 }
 
 function $2606($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAPU16[((($0_1 >>> 0 > 153 >>> 0 ? 0 : $0_1) << 1 | 0) + 94064 | 0) >> 1] | 0) + 92141 | 0 | 0;
 }
 
 function $2607($0_1) {
  $0_1 = $0_1 | 0;
  return $2606($0_1 | 0, $0_1 | 0) | 0 | 0;
 }
 
 function $2608($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1072($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2609($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  block : {
   $9_1 = $1257($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0) {
    break block
   }
   $10_1 = $1192($0_1 | 0) | 0;
   block1 : {
    if ($1_1 >>> 0 >= (($9_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break block1
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($8_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $9_1 = ($1259(HEAP32[($1294($8_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $1197($0_1 | 0);
   $1260($8_1 + 4 | 0 | 0, $1199($0_1 | 0) | 0 | 0, $9_1 | 0);
   $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
   $1261($9_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   block2 : {
    if (!$4_1) {
     break block2
    }
    $1068($1193($9_1 | 0) | 0 | 0, $1193($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   block3 : {
    if (!$6_1) {
     break block3
    }
    $1068(($1193($9_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   $7_1 = $5_1 + $4_1 | 0;
   $2_1 = $3_1 - $7_1 | 0;
   block4 : {
    if (($3_1 | 0) == ($7_1 | 0)) {
     break block4
    }
    $1068((($1193($9_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1193($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $2_1 | 0) | 0;
   }
   block5 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break block5
    }
    $1236($1199($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $1262($0_1 | 0, $9_1 | 0);
   $1263($0_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $2_1 | 0;
   $1264($0_1 | 0, $4_1 | 0);
   HEAP8[($8_1 + 12 | 0) >> 0] = 0;
   $1239($9_1 + $4_1 | 0 | 0, $8_1 + 12 | 0 | 0);
   $1188($0_1 | 0, $4_1 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1266($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2610($0_1) {
  $0_1 = $0_1 | 0;
  $1197($0_1 | 0);
  block : {
   if (!($1196($0_1 | 0) | 0)) {
    break block
   }
   $1236($1199($0_1 | 0) | 0 | 0, $1231($0_1 | 0) | 0 | 0, $1214($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2611($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP8[($3_1 + 15 | 0) >> 0] = $2_1;
  $2612($0_1 | 0, $1_1 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2612($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2638($0_1 | 0, $2637($1_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2613($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   if ($2_1 >>> 0 > ($1257($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($1258($2_1 | 0) | 0)) {
      break block1
     }
     $1238($0_1 | 0, $2_1 | 0);
     $4_1 = $1232($0_1 | 0) | 0;
     break block2;
    }
    $1260($3_1 + 8 | 0 | 0, $1199($0_1 | 0) | 0 | 0, ($1259($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1261($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1262($0_1 | 0, $4_1 | 0);
    $1263($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1264($0_1 | 0, $2_1 | 0);
   }
   $1068($1193($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $1239($4_1 + $2_1 | 0 | 0, $3_1 + 7 | 0 | 0);
   $1188($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1266($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2614($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block2 : {
   block1 : {
    block : {
     if (!($1258($2_1 | 0) | 0)) {
      break block
     }
     $4_1 = $1232($0_1 | 0) | 0;
     $1238($0_1 | 0, $2_1 | 0);
     break block1;
    }
    if ($2_1 >>> 0 > ($1257($0_1 | 0) | 0) >>> 0) {
     break block2
    }
    $1260($3_1 + 8 | 0 | 0, $1199($0_1 | 0) | 0 | 0, ($1259($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1261($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1262($0_1 | 0, $4_1 | 0);
    $1263($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1264($0_1 | 0, $2_1 | 0);
   }
   $1068($1193($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   $1188($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1266($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2615($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $1211($0_1 | 0) | 0;
  $4_1 = $1210($0_1 | 0) | 0;
  block : {
   if ($2_1 >>> 0 > $3_1 >>> 0) {
    break block
   }
   block1 : {
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     break block1
    }
    $1206($0_1 | 0, $2_1 - $4_1 | 0 | 0);
   }
   $3_1 = $1193($1192($0_1 | 0) | 0 | 0) | 0;
   $2608($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $2327($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $2609($0_1 | 0, $3_1 | 0, $2_1 - $3_1 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $2616($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2615($0_1 | 0, $1_1 | 0, $1291($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2617($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    $4_1 = $1211($0_1 | 0) | 0;
    $5_1 = $1210($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break block
    }
    if (!$2_1) {
     break block1
    }
    $1206($0_1 | 0, $2_1 | 0);
    $4_1 = $1193($1192($0_1 | 0) | 0 | 0) | 0;
    $1068($4_1 + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1836($0_1 | 0, $2_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $1239($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    break block1;
   }
   $2609($0_1 | 0, $4_1 | 0, ($2_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2618($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   if ($1_1 >>> 0 > ($1257($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($1258($1_1 | 0) | 0)) {
      break block1
     }
     $1238($0_1 | 0, $1_1 | 0);
     $4_1 = $1232($0_1 | 0) | 0;
     break block2;
    }
    $1260($3_1 + 8 | 0 | 0, $1199($0_1 | 0) | 0 | 0, ($1259($1_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1261($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1262($0_1 | 0, $4_1 | 0);
    $1263($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1264($0_1 | 0, $1_1 | 0);
   }
   $2611($1193($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $1239($4_1 + $1_1 | 0 | 0, $3_1 + 7 | 0 | 0);
   $1188($0_1 | 0, $1_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1266($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2619($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  block1 : {
   block : {
    $3_1 = $1196($0_1 | 0) | 0;
    if ($3_1) {
     break block
    }
    $4_1 = 10;
    $1_1 = $1200($0_1 | 0) | 0;
    break block1;
   }
   $4_1 = ($1214($0_1 | 0) | 0) + -1 | 0;
   $1_1 = $1215($0_1 | 0) | 0;
  }
  block4 : {
   block3 : {
    block2 : {
     if (($1_1 | 0) != ($4_1 | 0)) {
      break block2
     }
     $1835($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1206($0_1 | 0, 1 | 0);
     $1192($0_1 | 0) | 0;
     break block3;
    }
    $1206($0_1 | 0, 1 | 0);
    $1192($0_1 | 0) | 0;
    if ($3_1) {
     break block3
    }
    $4_1 = $1232($0_1 | 0) | 0;
    $1238($0_1 | 0, $1_1 + 1 | 0 | 0);
    break block4;
   }
   $4_1 = $1231($0_1 | 0) | 0;
   $1264($0_1 | 0, $1_1 + 1 | 0 | 0);
  }
  $0_1 = $4_1 + $1_1 | 0;
  $1239($0_1 | 0, $2_1 + 15 | 0 | 0);
  HEAP8[($2_1 + 14 | 0) >> 0] = 0;
  $1239($0_1 + 1 | 0 | 0, $2_1 + 14 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2620($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   if (!$1_1) {
    break block
   }
   block1 : {
    $4_1 = $1211($0_1 | 0) | 0;
    $5_1 = $1210($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break block1
    }
    $1835($0_1 | 0, $4_1 | 0, ($1_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
   }
   $1206($0_1 | 0, $1_1 | 0);
   $4_1 = $1192($0_1 | 0) | 0;
   $2611(($1193($4_1 | 0) | 0) + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   $1_1 = $5_1 + $1_1 | 0;
   $1836($0_1 | 0, $1_1 | 0);
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $1239($4_1 + $1_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2621($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  block : {
   $3_1 = $1210($0_1 | 0) | 0;
   if ($1_1 >>> 0 <= $3_1 >>> 0) {
    break block
   }
   $2620($0_1 | 0, $1_1 - $3_1 | 0 | 0, $2_1 | 0) | 0;
   return;
  }
  $2326($0_1 | 0, $1_1 | 0);
 }
 
 function $2622($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1145($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2623($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  block : {
   $9_1 = $2306($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0) {
    break block
   }
   $10_1 = $1658($0_1 | 0) | 0;
   block1 : {
    if ($1_1 >>> 0 >= (($9_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break block1
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($8_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $9_1 = ($2308(HEAP32[($1294($8_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $2329($0_1 | 0);
   $2309($8_1 + 4 | 0 | 0, $1904($0_1 | 0) | 0 | 0, $9_1 | 0);
   $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
   $2310($9_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   block2 : {
    if (!$4_1) {
     break block2
    }
    $1142($1901($9_1 | 0) | 0 | 0, $1901($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   block3 : {
    if (!$6_1) {
     break block3
    }
    $1142(($1901($9_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   $7_1 = $5_1 + $4_1 | 0;
   $2_1 = $3_1 - $7_1 | 0;
   block4 : {
    if (($3_1 | 0) == ($7_1 | 0)) {
     break block4
    }
    $3_1 = $4_1 << 2 | 0;
    $1142((($1901($9_1 | 0) | 0) + $3_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1901($10_1 | 0) | 0) + $3_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $2_1 | 0) | 0;
   }
   block5 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break block5
    }
    $2330($1904($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $2311($0_1 | 0, $9_1 | 0);
   $2312($0_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $2_1 | 0;
   $1892($0_1 | 0, $4_1 | 0);
   HEAP32[($8_1 + 12 | 0) >> 2] = 0;
   $1891($9_1 + ($4_1 << 2 | 0) | 0 | 0, $8_1 + 12 | 0 | 0);
   $1782($0_1 | 0, $4_1 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $2314($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2624($0_1) {
  $0_1 = $0_1 | 0;
  $2329($0_1 | 0);
  block : {
   if (!($1719($0_1 | 0) | 0)) {
    break block
   }
   $2330($1904($0_1 | 0) | 0 | 0, $1890($0_1 | 0) | 0 | 0, $2332($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2625($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2626($0_1 | 0, $1_1 | 0, $3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2626($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2639($0_1 | 0, $2637($1_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2627($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   if ($2_1 >>> 0 > ($2306($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($2307($2_1 | 0) | 0)) {
      break block1
     }
     $1894($0_1 | 0, $2_1 | 0);
     $4_1 = $1893($0_1 | 0) | 0;
     break block2;
    }
    $2309($3_1 + 8 | 0 | 0, $1904($0_1 | 0) | 0 | 0, ($2308($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $2310($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $2311($0_1 | 0, $4_1 | 0);
    $2312($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1892($0_1 | 0, $2_1 | 0);
   }
   $1142($1901($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $1891($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 4 | 0 | 0);
   $1782($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2314($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2628($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block2 : {
   block1 : {
    block : {
     if (!($2307($2_1 | 0) | 0)) {
      break block
     }
     $4_1 = $1893($0_1 | 0) | 0;
     $1894($0_1 | 0, $2_1 | 0);
     break block1;
    }
    if ($2_1 >>> 0 > ($2306($0_1 | 0) | 0) >>> 0) {
     break block2
    }
    $2309($3_1 + 8 | 0 | 0, $1904($0_1 | 0) | 0 | 0, ($2308($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $2310($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $2311($0_1 | 0, $4_1 | 0);
    $2312($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1892($0_1 | 0, $2_1 | 0);
   }
   $1142($1901($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   $1782($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2314($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2629($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $1896($0_1 | 0) | 0;
  $4_1 = $1565($0_1 | 0) | 0;
  block : {
   if ($2_1 >>> 0 > $3_1 >>> 0) {
    break block
   }
   block1 : {
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     break block1
    }
    $1900($0_1 | 0, $2_1 - $4_1 | 0 | 0);
   }
   $3_1 = $1901($1658($0_1 | 0) | 0 | 0) | 0;
   $2622($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $2564($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $2623($0_1 | 0, $3_1 | 0, $2_1 - $3_1 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $2630($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2629($0_1 | 0, $1_1 | 0, $2228($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2631($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    $4_1 = $1896($0_1 | 0) | 0;
    $5_1 = $1565($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break block
    }
    if (!$2_1) {
     break block1
    }
    $1900($0_1 | 0, $2_1 | 0);
    $4_1 = $1901($1658($0_1 | 0) | 0 | 0) | 0;
    $1142($4_1 + ($5_1 << 2 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1903($0_1 | 0, $2_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $1891($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    break block1;
   }
   $2623($0_1 | 0, $4_1 | 0, ($2_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2632($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   if ($1_1 >>> 0 > ($2306($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($2307($1_1 | 0) | 0)) {
      break block1
     }
     $1894($0_1 | 0, $1_1 | 0);
     $4_1 = $1893($0_1 | 0) | 0;
     break block2;
    }
    $2309($3_1 + 8 | 0 | 0, $1904($0_1 | 0) | 0 | 0, ($2308($1_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $2310($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $2311($0_1 | 0, $4_1 | 0);
    $2312($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1892($0_1 | 0, $1_1 | 0);
   }
   $2625($1901($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $1891($4_1 + ($1_1 << 2 | 0) | 0 | 0, $3_1 + 4 | 0 | 0);
   $1782($0_1 | 0, $1_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2314($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2633($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    $3_1 = $1719($0_1 | 0) | 0;
    if ($3_1) {
     break block
    }
    $4_1 = 1;
    $1_1 = $1721($0_1 | 0) | 0;
    break block1;
   }
   $4_1 = ($2332($0_1 | 0) | 0) + -1 | 0;
   $1_1 = $1720($0_1 | 0) | 0;
  }
  block4 : {
   block3 : {
    block2 : {
     if (($1_1 | 0) != ($4_1 | 0)) {
      break block2
     }
     $1899($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1900($0_1 | 0, 1 | 0);
     $1658($0_1 | 0) | 0;
     break block3;
    }
    $1900($0_1 | 0, 1 | 0);
    $1658($0_1 | 0) | 0;
    if ($3_1) {
     break block3
    }
    $4_1 = $1893($0_1 | 0) | 0;
    $1894($0_1 | 0, $1_1 + 1 | 0 | 0);
    break block4;
   }
   $4_1 = $1890($0_1 | 0) | 0;
   $1892($0_1 | 0, $1_1 + 1 | 0 | 0);
  }
  $0_1 = $4_1 + ($1_1 << 2 | 0) | 0;
  $1891($0_1 | 0, $2_1 + 12 | 0 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  $1891($0_1 + 4 | 0 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2634($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1291($1_1 | 0) | 0;
  $5_1 = $1210($2_1 | 0) | 0;
  $1201($2_1 | 0);
  $1798($3_1 + 14 | 0 | 0);
  $0_1 = $1193($1192($2635($0_1 | 0, $5_1 + $4_1 | 0 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0 | 0) | 0;
  $1068($0_1 | 0, $1_1 | 0, $4_1 | 0) | 0;
  $4_1 = $0_1 + $4_1 | 0;
  $1068($4_1 | 0, $1209($2_1 | 0) | 0 | 0, $5_1 | 0) | 0;
  $2611($4_1 + $5_1 | 0 | 0, 1 | 0, 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2635($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $49_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   $2_1 = $1204($0_1 | 0, $3_1 + 15 | 0 | 0, $2_1 | 0) | 0;
   if ($1_1 >>> 0 > ($1257($2_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($1258($1_1 | 0) | 0)) {
      break block1
     }
     $0_1 = $1198($2_1 | 0) | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = 0;
     $1238($2_1 | 0, $1_1 | 0);
     break block2;
    }
    $0_1 = $1259($1_1 | 0) | 0;
    $0_1 = $0_1 + 1 | 0;
    $4_1 = $2636($1199($2_1 | 0) | 0 | 0, $0_1 | 0) | 0;
    $1261($4_1 | 0, $0_1 | 0);
    $1263($2_1 | 0, $0_1 | 0);
    $1262($2_1 | 0, $4_1 | 0);
    $1264($2_1 | 0, $1_1 | 0);
   }
   $1188($2_1 | 0, $1_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return $2_1 | 0;
  }
  $1266($2_1 | 0);
  wasm2js_trap();
 }
 
 function $2636($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1274($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2637($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2638($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   label : while (1) {
    if (!$1_1) {
     break block
    }
    HEAP8[$0_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
    $1_1 = $1_1 + -1 | 0;
    $0_1 = $0_1 + 1 | 0;
    continue label;
   };
  }
  return $0_1 | 0;
 }
 
 function $2639($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   label : while (1) {
    if (!$1_1) {
     break block
    }
    HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    $1_1 = $1_1 + -1 | 0;
    $0_1 = $0_1 + 4 | 0;
    continue label;
   };
  }
  return $0_1 | 0;
 }
 
 function $2640($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $991();
  wasm2js_trap();
 }
 
 function $2641($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2642($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2642($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  block1 : {
   block : {
    $2_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
    if (($2_1 | 0) < (0 | 0)) {
     break block
    }
    if (!$2_1) {
     break block1
    }
    if (($2_1 & 1073741823 | 0 | 0) != (HEAP32[(($974() | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break block1
    }
   }
   block2 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break block2
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break block2
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    return $2_1 | 0;
   }
   return $1323($1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  return $2643($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2643($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  block : {
   $2_1 = $1_1 + 76 | 0;
   if (!($2644($2_1 | 0) | 0)) {
    break block
   }
   $998($1_1 | 0) | 0;
  }
  block2 : {
   block1 : {
    $3_1 = $0_1 & 255 | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $0_1;
    break block2;
   }
   $3_1 = $1323($1_1 | 0, $3_1 | 0) | 0;
  }
  block3 : {
   if (!(($2645($2_1 | 0) | 0) & 1073741824 | 0)) {
    break block3
   }
   $2646($2_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $2644($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
  return $1_1 | 0;
 }
 
 function $2645($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $2646($0_1) {
  $0_1 = $0_1 | 0;
  $1000($0_1 | 0, 1 | 0) | 0;
 }
 
 function $2647($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[(0 + 79072 | 0) >> 2] | 0;
  $1017(67299 | 0, 11 | 0, 1 | 0, $3_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1028($3_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $2641(10 | 0, $3_1 | 0) | 0;
  $991();
  wasm2js_trap();
 }
 
 function $2648($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2649() {
  return $2648(106076 | 0) | 0 | 0;
 }
 
 function $2650() {
  return 0 | 0;
 }
 
 function $2651($0_1) {
  $0_1 = $0_1 | 0;
  return ($1032($0_1 + 80 | 0 | 0) | 0) + 80 | 0 | 0;
 }
 
 function $2652() {
  $2647(67240 | 0, 0 | 0);
  wasm2js_trap();
 }
 
 function $2653($0_1) {
  $0_1 = $0_1 | 0;
  return $2707($0_1 | 0) | 0 | 0;
 }
 
 function $2654($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2655($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2656($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2653($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2657($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2653($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $2658($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2653($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $2659($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2653($0_1 | 0) | 0 | 0, 24 | 0);
 }
 
 function $2660($0_1) {
  $0_1 = $0_1 | 0;
  $2587($2653($0_1 | 0) | 0 | 0, 16 | 0);
 }
 
 function $2661($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2662($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2662($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if ($2_1) {
    break block
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  block1 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break block1
   }
   return 1 | 0;
  }
  return !($1428($2663($0_1 | 0) | 0 | 0, $2663($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $2663($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $2664($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  block1 : {
   block : {
    if ($2662($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
     break block
    }
    $4_1 = 0;
    if (!$1_1) {
     break block
    }
    $4_1 = 0;
    $1_1 = $2665($1_1 | 0, 94372 | 0, 94420 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break block
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$4_1) {
     break block1
    }
    block2 : {
     if (!56) {
      break block2
     }
     wasm2js_memory_fill($3_1 + 24 | 0, 0, 56);
    }
    HEAP8[($3_1 + 75 | 0) >> 0] = 1;
    HEAP32[($3_1 + 32 | 0) >> 2] = -1;
    HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 68 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 20 | 0, $4_1, 1);
    block3 : {
     $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     if (($4_1 | 0) != (1 | 0)) {
      break block3
     }
     HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
    }
    $4_1 = ($4_1 | 0) == (1 | 0);
   }
   global$0 = $3_1 + 80 | 0;
   return $4_1 | 0;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = 66486;
  HEAP32[($3_1 + 4 | 0) >> 2] = 485;
  HEAP32[$3_1 >> 2] = 65892;
  $2647(65785 | 0, $3_1 | 0);
  wasm2js_trap();
 }
 
 function $2665($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $2666($4_1 + 4 | 0 | 0, $0_1 | 0);
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = $2662($5_1 | 0, $2_1 | 0, 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!$6_1) {
     break block
    }
    $6_1 = $2667($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
    break block1;
   }
   $6_1 = $2668($0_1 | 0, $7_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
   if ($6_1) {
    break block1
   }
   $6_1 = $2669($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $2666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = HEAP32[($2_1 + -8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $1_1 + $3_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($2_1 + -4 | 0) >> 2] | 0;
 }
 
 function $2667($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  block1 : {
   block : {
    if (($5_1 | 0) < (0 | 0)) {
     break block
    }
    $7_1 = ($4_1 | 0) == (0 - $5_1 | 0 | 0) ? $1_1 : 0;
    break block1;
   }
   if (($5_1 | 0) == (-2 | 0)) {
    break block1
   }
   $7_1 = $6_1 + 28 | 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 36 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = 0;
   HEAP32[($6_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 60 | 0) >> 2] = 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 16777216;
   HEAP32[($6_1 + 52 | 0) >> 2] = 1;
   HEAP32[($6_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3_1, $6_1 + 4 | 0, $1_1, $1_1, 1, 0);
   $7_1 = (HEAP32[$7_1 >> 2] | 0 | 0) == (1 | 0) ? $1_1 : 0;
  }
  global$0 = $6_1 + 64 | 0;
  return $7_1 | 0;
 }
 
 function $2668($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  block : {
   if (($4_1 | 0) < (0 | 0)) {
    break block
   }
   $0_1 = $0_1 - $4_1 | 0;
   if (($0_1 | 0) < ($1_1 | 0)) {
    break block
   }
   $6_1 = $5_1 + 28 | 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1 + 36 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 60 | 0) >> 2] = 0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 16777216;
   HEAP32[($5_1 + 52 | 0) >> 2] = 1;
   HEAP32[($5_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3_1, $5_1 + 4 | 0, $1_1, $1_1, 1, 0);
   $6_1 = HEAP32[$6_1 >> 2] | 0 ? $0_1 : 0;
  }
  global$0 = $5_1 + 64 | 0;
  return $6_1 | 0;
 }
 
 function $2669($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
  $5_1 = 0;
  block : {
   if (!39) {
    break block
   }
   wasm2js_memory_fill($6_1 + 20 | 0, 0, 39);
  }
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  HEAP8[($6_1 + 59 | 0) >> 0] = 1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($4_1, $6_1 + 4 | 0, $1_1, 1, 0);
  block3 : {
   block2 : {
    switch (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) {
    case 0:
     $5_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($6_1 + 24 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break block3;
    case 1:
     break block2;
    default:
     break block3;
    };
   }
   block4 : {
    if ((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break block4
    }
    if (HEAP32[($6_1 + 44 | 0) >> 2] | 0) {
     break block3
    }
    if ((HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break block3
    }
    if ((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break block3
    }
   }
   $5_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  }
  global$0 = $6_1 + 64 | 0;
  return $5_1 | 0;
 }
 
 function $2670($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  block : {
   $4_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   if ($4_1) {
    break block
   }
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
   return;
  }
  block2 : {
   block1 : {
    if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
     break block1
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break block2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = $4_1 + 1 | 0;
  }
 }
 
 function $2671($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   if (!($2662($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break block
   }
   $2670($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $2672($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   if (!($2662($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break block
   }
   $2670($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $2673($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $5_1 = $4_1 & 1 | 0;
  block1 : {
   block : {
    if ((HEAPU8[($1_1 + 55 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break block
    }
    $6_1 = $4_1 >> 8 | 0;
    if (!$5_1) {
     break block1
    }
    $6_1 = $2674(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
    break block1;
   }
   block2 : {
    if ($5_1) {
     break block2
    }
    $6_1 = $4_1 >> 8 | 0;
    break block1;
   }
   HEAP32[($1_1 + 56 | 0) >> 2] = $2663(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $6_1 = 0;
   $2_1 = 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $2674($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[($0_1 + $1_1 | 0) >> 2] | 0 | 0;
 }
 
 function $2675($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  block : {
   if (!($2662($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break block
   }
   $2670($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $2673($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  block1 : {
   if ($4_1 >>> 0 < 2 >>> 0) {
    break block1
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label : while (1) {
    $2673($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break block1
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label
    }
    break label;
   };
  }
 }
 
 function $2676($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 1;
  block1 : {
   block : {
    if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 24 | 0) {
     break block
    }
    $3_1 = 0;
    if (!$1_1) {
     break block1
    }
    $4_1 = $2665($1_1 | 0, 94372 | 0, 94468 | 0, 0 | 0) | 0;
    if (!$4_1) {
     break block1
    }
    $3_1 = ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 24 | 0 | 0) != (0 | 0);
   }
   $3_1 = $2662($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $2677($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    if (!($2662($1_1 | 0, 94768 | 0, 0 | 0) | 0)) {
     break block
    }
    HEAP32[$2_1 >> 2] = 0;
    $4_1 = 1;
    break block1;
   }
   block2 : {
    if (!($2676($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0)) {
     break block2
    }
    $4_1 = 1;
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$1_1) {
     break block1
    }
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    break block1;
   }
   block3 : {
    if (!$1_1) {
     break block3
    }
    $4_1 = 0;
    $1_1 = $2665($1_1 | 0, 94372 | 0, 94516 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break block1
    }
    block4 : {
     $5_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$5_1) {
      break block4
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($5_1 & ($6_1 ^ -1 | 0) | 0) & 7 | 0) {
     break block1
    }
    if ((($5_1 ^ -1 | 0) & $6_1 | 0) & 96 | 0) {
     break block1
    }
    $4_1 = 1;
    if ($2662(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
     break block1
    }
    block5 : {
     if (!($2662(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 94756 | 0, 0 | 0) | 0)) {
      break block5
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$1_1) {
      break block1
     }
     $4_1 = !($2665($1_1 | 0, 94372 | 0, 94564 | 0, 0 | 0) | 0);
     break block1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break block3
    }
    $4_1 = 0;
    block6 : {
     $6_1 = $2665($5_1 | 0, 94372 | 0, 94516 | 0, 0 | 0) | 0;
     if (!$6_1) {
      break block6
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break block1
     }
     $4_1 = $2678($6_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break block1;
    }
    $4_1 = 0;
    block7 : {
     $6_1 = $2665($5_1 | 0, 94372 | 0, 94616 | 0, 0 | 0) | 0;
     if (!$6_1) {
      break block7
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break block1
     }
     $4_1 = $2679($6_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break block1;
    }
    $4_1 = 0;
    $0_1 = $2665($5_1 | 0, 94372 | 0, 94420 | 0, 0 | 0) | 0;
    if (!$0_1) {
     break block1
    }
    $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if (!$1_1) {
     break block1
    }
    $4_1 = 0;
    $1_1 = $2665($1_1 | 0, 94372 | 0, 94420 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break block1
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    block8 : {
     if (!56) {
      break block8
     }
     wasm2js_memory_fill($3_1 + 8 | 0, 0, 56);
    }
    HEAP8[($3_1 + 59 | 0) >> 0] = ($4_1 | 0) != (0 | 0);
    HEAP32[($3_1 + 16 | 0) >> 2] = -1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 52 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 4 | 0, $4_1, 1);
    block9 : {
     $1_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
     if (($1_1 | 0) != (1 | 0)) {
      break block9
     }
     HEAP32[$2_1 >> 2] = (wasm2js_i32$0 = HEAP32[($3_1 + 20 | 0) >> 2] | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $4_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    }
    $4_1 = ($1_1 | 0) == (1 | 0);
    break block1;
   }
   $4_1 = 0;
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $2678($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  block1 : {
   label : while (1) {
    block : {
     if ($1_1) {
      break block
     }
     return 0 | 0;
    }
    $2_1 = 0;
    $1_1 = $2665($1_1 | 0, 94372 | 0, 94516 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break block1
    }
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
     break block1
    }
    block2 : {
     if (!($2662(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break block2
     }
     return 1 | 0;
    }
    if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
     break block1
    }
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break block1
    }
    block3 : {
     $0_1 = $2665($3_1 | 0, 94372 | 0, 94516 | 0, 0 | 0) | 0;
     if (!$0_1) {
      break block3
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     continue label;
    }
    break label;
   };
   $2_1 = 0;
   $0_1 = $2665($3_1 | 0, 94372 | 0, 94616 | 0, 0 | 0) | 0;
   if (!$0_1) {
    break block1
   }
   $2_1 = $2679($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $2679($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  block : {
   if (!$1_1) {
    break block
   }
   $1_1 = $2665($1_1 | 0, 94372 | 0, 94616 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break block
   }
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
    break block
   }
   $2_1 = 0;
   if (!($2662(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break block
   }
   $2_1 = $2662(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $2680($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  block : {
   if (($3_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
    break block
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   block2 : {
    block1 : {
     $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if ($3_1) {
      break block1
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = 1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     if (($4_1 | 0) != (1 | 0)) {
      break block
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break block2
     }
     break block;
    }
    block3 : {
     if (($3_1 | 0) != ($2_1 | 0)) {
      break block3
     }
     block4 : {
      $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (($3_1 | 0) != (2 | 0)) {
       break block4
      }
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
      $3_1 = $4_1;
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break block
     }
     if (($3_1 | 0) == (1 | 0)) {
      break block2
     }
     break block;
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function $2681($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   if (($2_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
    break block
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break block
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $2682($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  block : {
   if (!($2662($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break block
   }
   $2681($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  block4 : {
   block5 : {
    block1 : {
     if (!($2662($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
      break block1
     }
     block3 : {
      block2 : {
       if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
        break block3
       }
      }
      if (($3_1 | 0) != (1 | 0)) {
       break block4
      }
      HEAP32[($1_1 + 32 | 0) >> 2] = 1;
      return;
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break block5
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label : while (1) {
      block7 : {
       block9 : {
        block10 : {
         block6 : {
          if ($5_1 >>> 0 >= $3_1 >>> 0) {
           break block6
          }
          HEAP16[($1_1 + 52 | 0) >> 1] = 0;
          $2683($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
          if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
           break block6
          }
          if ((HEAPU8[($1_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
           break block7
          }
          block8 : {
           if ((HEAPU8[($1_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
            break block8
           }
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break block9
           }
           $6_1 = 1;
           $7_1 = 1;
           if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0)) {
            break block9
           }
           break block7;
          }
          $6_1 = 1;
          if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0) {
           break block7
          }
          $5_1 = 3;
          break block10;
         }
         $5_1 = $6_1 & 1 | 0 ? 3 : 4;
        }
        HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
        if ($7_1 & 1 | 0) {
         break block4
        }
        break block5;
       }
       HEAP32[($1_1 + 44 | 0) >> 2] = 3;
       break block4;
      }
      $5_1 = $5_1 + 8 | 0;
      continue label;
     };
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $6_1 = $0_1 + 16 | 0;
    $2684($6_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    if ($5_1 >>> 0 < 2 >>> 0) {
     break block4
    }
    $6_1 = $6_1 + ($5_1 << 3 | 0) | 0;
    $5_1 = $0_1 + 24 | 0;
    block12 : {
     block11 : {
      $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if ($0_1 & 2 | 0) {
       break block11
      }
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
       break block12
      }
     }
     label1 : while (1) {
      if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
       break block4
      }
      $2684($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
      $5_1 = $5_1 + 8 | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       continue label1
      }
      break block4;
     };
    }
    block13 : {
     if ($0_1 & 1 | 0) {
      break block13
     }
     label2 : while (1) {
      if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
       break block4
      }
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break block4
      }
      $2684($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
      $5_1 = $5_1 + 8 | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       continue label2
      }
      break block4;
     };
    }
    label3 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break block4
     }
     block14 : {
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
       break block14
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break block4
      }
     }
     $2684($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $6_1 >>> 0) {
      continue label3
     }
     break block4;
    };
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break block4
   }
   if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
    break block4
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   return;
  }
 }
 
 function $2683($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  block : {
   if (!($6_1 & 1 | 0)) {
    break block
   }
   $7_1 = $2674(HEAP32[$3_1 >> 2] | 0 | 0, $7_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $2684($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  block : {
   if (!($5_1 & 1 | 0)) {
    break block
   }
   $6_1 = $2674(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $2685($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  block : {
   if (!($2662($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break block
   }
   $2681($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  block4 : {
   block1 : {
    if (!($2662($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break block1
    }
    block3 : {
     block2 : {
      if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
       break block2
      }
      if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
       break block3
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break block4
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    block5 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break block5
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     block6 : {
      if ((HEAPU8[($1_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block6
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break block5
      }
      break block4;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break block4
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break block4
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $2686($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  block : {
   if (!($2662($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break block
   }
   $2681($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  block1 : {
   if (!($2662($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break block1
   }
   block3 : {
    block2 : {
     if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
      break block2
     }
     if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
      break block3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break block1
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   block4 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break block4
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break block4
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $2687($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  block : {
   if (!($2662($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break block
   }
   $2680($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $2683($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $11_1 | 0;
  block1 : {
   if ($7_1 >>> 0 < 2 >>> 0) {
    break block1
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break block1
    }
    block3 : {
     block2 : {
      if (!($10_1 & 1 | 0)) {
       break block2
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break block1
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break block3
      }
      break block1;
     }
     if (!($11_1 & 1 | 0)) {
      break block3
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break block1
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $2683($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $11_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = ($11_1 | $6_1 | 0) & 1 | 0;
    $10_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = ($10_1 | $8_1 | 0) & 1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label
    }
    break label;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = $6_1 & 1 | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = $8_1 & 1 | 0;
 }
 
 function $2688($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   if (!($2662($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break block
   }
   $2680($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $2689($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   if (!($2662($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break block
   }
   $2680($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $2690($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2691($0_1) {
  $0_1 = $0_1 | 0;
  $2690($0_1 | 0) | 0;
  $2587($0_1 | 0, 4 | 0);
 }
 
 function $2692($0_1) {
  $0_1 = $0_1 | 0;
  return 65980 | 0;
 }
 
 function $2693($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $2600($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 95200 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $2694($0_1) {
  $0_1 = $0_1 | 0;
  $2690($0_1 | 0) | 0;
  $2587($0_1 | 0, 4 | 0);
 }
 
 function $2695($0_1) {
  $0_1 = $0_1 | 0;
  return 66387 | 0;
 }
 
 function $2696($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $2693($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 95220 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $2697($0_1) {
  $0_1 = $0_1 | 0;
  $2690($0_1 | 0) | 0;
  $2587($0_1 | 0, 4 | 0);
 }
 
 function $2698($0_1) {
  $0_1 = $0_1 | 0;
  return 66052 | 0;
 }
 
 function $2699($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 95352 + 8 | 0;
  $2700($0_1 + 4 | 0 | 0) | 0;
  return $2690($0_1 | 0) | 0 | 0;
 }
 
 function $2700($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   if (!($2604($0_1 | 0) | 0)) {
    break block
   }
   $1_1 = $2701(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($2702($1_1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break block
   }
   $2586($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2701($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + -12 | 0 | 0;
 }
 
 function $2702($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $2703($0_1) {
  $0_1 = $0_1 | 0;
  $2699($0_1 | 0) | 0;
  $2587($0_1 | 0, 8 | 0);
 }
 
 function $2704($0_1) {
  $0_1 = $0_1 | 0;
  return $2705($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $2705($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2706($0_1) {
  $0_1 = $0_1 | 0;
  $2699($0_1 | 0) | 0;
  $2587($0_1 | 0, 8 | 0);
 }
 
 function $2707($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2708($0_1) {
  $0_1 = $0_1 | 0;
  global$1 = $0_1;
 }
 
 function $2710() {
  global$3 = 65536;
  global$2 = (0 + 15 | 0) & -16 | 0;
 }
 
 function $2711() {
  return global$0 - global$2 | 0 | 0;
 }
 
 function $2712() {
  return global$3 | 0;
 }
 
 function $2713() {
  return global$2 | 0;
 }
 
 function $2714($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $2715($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $2716() {
  return global$0 | 0;
 }
 
 function $2717($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2718($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
 }
 
 function $2719($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $2720($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0;
 }
 
 function $2721($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  $7_1 = $7_1 | 0;
  $7$hi = $7$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) | 0 | 0;
 }
 
 function $2722($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $2717($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $2708($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $2723($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $2718($7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $5_1 | 0, $6_1 | 0);
 }
 
 function $2724($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $16$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  $10_1 = $3_1;
  $11_1 = $4_1;
  i64toi32_i32$0 = 0;
  $13_1 = $5_1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$0 = $13_1;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $2719($7_1 | 0, $8_1 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2725($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $29_1 = 0, $30_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $15$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $21_1 = 0, $21$hi = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0;
  $9_1 = $0_1;
  $10_1 = $1_1;
  $11_1 = $2_1;
  $12_1 = $3_1;
  $13_1 = $4_1;
  i64toi32_i32$0 = 0;
  $15_1 = $5_1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $21_1 = $7_1;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $30_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$2 = $21_1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$3 = $30_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$2 = $25$hi;
  return $2720($9_1 | 0, $10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2726($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $31_1 = 0, $32_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0;
  $10_1 = $0_1;
  $11_1 = $1_1;
  $12_1 = $2_1;
  $13_1 = $3_1;
  $14_1 = $4_1;
  $15_1 = $5_1;
  i64toi32_i32$0 = 0;
  $17_1 = $6_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $31_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $31_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $23_1 = $8_1;
  $23$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $32_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $26$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$2 = $23_1;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$3 = $32_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $27$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = $27$hi;
  return $2721($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2727($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18_1 = 0, $19_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0;
  $5_1 = $0_1;
  $6_1 = $1_1;
  $7_1 = $2_1;
  i64toi32_i32$0 = $3$hi;
  $9_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12_1 = $18_1;
  i64toi32_i32$1 = $4$hi;
  $14_1 = $4_1;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$26($5_1 | 0, $6_1 | 0, $7_1 | 0, $9_1 | 0, $12_1 | 0, $14_1 | 0, $19_1 | 0);
 }
 
 function $2728($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$27($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $23$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $21_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $22_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $22_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$2 = $22_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$5 = var$2;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17_1 = i64toi32_i32$1;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $23_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
   $23_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
  }
  var$0 = $23_1;
  var$0$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$1 = $17_1;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $23$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = $23$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, var$2 = 0, $20_1 = 0, $21_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $20_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $20_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $21_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $21_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$0 = $21_1;
  var$0$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_urem($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$2$hi;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $19$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$4 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$0 = var$3;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38_1;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = i64toi32_i32$2;
             i64toi32_i32$1 = i64toi32_i32$2;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140_1 = $45_1;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140_1;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46_1;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144_1 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47_1;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144_1;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151_1;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48_1;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_sdiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_srem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = __wasm_intrinsics_temp_i64$hi;
  i64toi32_i32$1 = __wasm_intrinsics_temp_i64;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, $3, $70, $118, $6, $2699, $2690, $780, $781, $30, $783, $786, $794, $799, $801, $803, $826, $831, $839, $846, $854, $895, $268, $2652, $283, $292, $732, $759, $994, $995, $997, $1029, $1030, $1056, $1057, $1059, $1060, $1061, $1063, $1064, $1065, $1066, $1073, $1075, $1077, $1078, $1079, $1081, $1083, $1082, $1084, $1109, $1111, $1110, $1112, $1132, $1133, $1135, $1136, $1137, $1138, $1139, $1140, $1141, $1146, $1148, $1150, $1151, $1152, $1154, $1156, $1155, $1157, $1176, $1178, $1177, $1179, $1054, $1055, $1130, $1131, $1297, $1298, $1051, $1304, $1305, $1349, $1350, $1351, $1352, $1354, $1355, $1363, $1364, $1365, $1366, $1367, $1369, $1370, $1372, $1374, $1375, $1381, $1382, $1383, $1385, $1386, $1424, $1436, $1034, $1808, $2126, $2236, $2239, $2243, $2246, $2249, $2252, $2254, $2256, $2258, $2260, $2262, $2264, $2266, $2268, $2096, $2100, $2122, $2143, $2144, $2145, $2146, $2147, $2148, $2149, $2150, $2151, $2152, $1973, $2162, $2163, $2166, $2169, $2170, $2173, $2174, $2176, $2215, $2216, $2219, $2221, $2223, $2225, $2229, $2217, $2218, $2220, $2222, $2224, $2226, $2230, $1487, $2121, $2127, $2128, $2129, $2130, $2131, $2132, $2134, $2135, $2137, $2138, $2139, $2140, $2141, $2153, $2154, $2155, $2156, $2157, $2158, $2159, $2160, $2177, $2178, $2180, $2182, $2183, $2184, $2185, $2187, $2188, $2189, $2190, $2191, $2192, $2193, $2194, $2195, $2196, $2197, $2199, $2201, $2202, $2203, $2204, $2206, $2207, $2208, $2209, $2210, $2211, $2212, $2213, $2214, $1486, $1488, $1489, $1490, $1493, $1494, $1495, $1496, $1497, $1501, $2271, $1502, $1516, $1525, $1528, $1531, $1534, $1537, $1540, $1545, $1548, $1551, $2272, $1558, $1568, $1573, $1575, $1577, $1579, $1581, $1583, $1587, $1589, $1591, $2273, $1616, $1624, $1631, $1633, $1635, $1637, $1646, $1648, $2274, $1652, $1661, $1665, $1667, $1669, $1671, $1677, $1679, $2275, $2277, $1688, $1689, $1690, $1691, $1693, $1695, $1698, $2234, $2241, $2247, $2261, $2265, $2253, $2257, $2278, $2280, $1713, $1714, $1715, $1722, $1724, $1726, $1729, $2237, $2244, $2250, $2263, $2267, $2255, $2259, $2282, $2281, $1742, $2284, $2283, $1748, $2285, $1754, $1757, $1758, $1759, $1760, $1761, $1762, $1763, $1764, $2286, $1765, $1766, $1767, $1768, $1769, $1770, $1771, $1772, $1773, $2287, $1774, $1777, $1778, $1779, $1783, $1784, $1785, $1786, $1787, $2288, $1788, $1789, $1790, $1791, $1792, $1793, $1794, $1795, $1796, $2289, $1807, $1831, $2290, $1869, $1887, $2291, $1933, $1945, $2292, $1946, $1959, $2293, $1967, $1968, $1969, $2294, $1970, $1971, $1972, $2580, $2581, $2653, $2656, $2654, $2655, $2661, $2657, $2664, $2689, $2686, $2671, $2658, $2688, $2685, $2672, $2659, $2687, $2682, $2675, $2660, $2677, $2694, $2695, $2697, $2698, $2691, $2692, $2703, $2704, $2706]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "__wasm_call_ctors": $0, 
  "__getTypeName": $1, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "fflush": $1052, 
  "malloc": $1032, 
  "strerror": $2607, 
  "free": $1034, 
  "emscripten_stack_init": $2710, 
  "emscripten_stack_get_free": $2711, 
  "emscripten_stack_get_base": $2712, 
  "emscripten_stack_get_end": $2713, 
  "_emscripten_stack_restore": $2714, 
  "_emscripten_stack_alloc": $2715, 
  "emscripten_stack_get_current": $2716, 
  "dynCall_jiji": $2722, 
  "dynCall_viijii": $2723, 
  "dynCall_iiiiij": $2724, 
  "dynCall_iiiiijj": $2725, 
  "dynCall_iiiiiijj": $2726
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error,

  isWasm2js: true,
};
// end include: wasm2js.js
if (WebAssembly.isWasm2js) {
  // We don't need to actually download a wasm binary, mark it as present but
  // empty.
  wasmBinary = [];
}

if (typeof WebAssembly != 'object') {
  err('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

var runtimeInitialized = false;

// include: URIUtils.js
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

/**
 * Indicates whether filename is a base64 data URI.
 * @noinline
 */
var isDataURI = (filename) => filename.startsWith(dataURIPrefix);

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */
var isFileURI = (filename) => filename.startsWith('file://');
// end include: URIUtils.js
// include: runtime_shared.js
// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with SAFE_HEAP and ASAN which also
  // monitor writes to address zero.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x02135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[((0)>>2)] = 1668509029;
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[((0)>>2)] != 0x63736d65 /* 'emsc' */) {
    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
  }
}
// end include: runtime_stack_check.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
// include: runtime_debug.js
// Endianness check
(() => {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

function legacyModuleProp(prop, newName, incoming=true) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get() {
        let extra = incoming ? ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)' : '';
        abort(`\`Module.${prop}\` has been replaced by \`${newName}\`` + extra);

      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

/**
 * Intercept access to a global symbol.  This enables us to give informative
 * warnings/errors when folks attempt to use symbols they did not include in
 * their build, or no symbols that no longer exist.
 */
function hookGlobalSymbolAccess(sym, func) {
  if (typeof globalThis != 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        func();
        return undefined;
      }
    });
  }
}

function missingGlobal(sym, msg) {
  hookGlobalSymbolAccess(sym, () => {
    warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
  });
}

missingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');
missingGlobal('asm', 'Please use wasmExports instead');

function missingLibrarySymbol(sym) {
  hookGlobalSymbolAccess(sym, () => {
    // Can't `abort()` here because it would break code that does runtime
    // checks.  e.g. `if (typeof SDL === 'undefined')`.
    var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
    // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
    // library.js, which means $name for a JS name with no prefix, or name
    // for a JS name like _name.
    var librarySymbol = sym;
    if (!librarySymbol.startsWith('_')) {
      librarySymbol = '$' + sym;
    }
    msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
    if (isExportedByForceFilesystem(sym)) {
      msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
    }
    warnOnce(msg);
  });

  // Any symbol that is not included from the JS library is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get() {
        var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// Used by XXXXX_DEBUG settings to output debug messages.
function dbg(...args) {
  // TODO(sbc): Make this configurable somehow.  Its not always convenient for
  // logging to show up as warnings.
  console.warn(...args);
}
// end include: runtime_debug.js
// include: memoryprofiler.js
// end include: memoryprofiler.js


function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

// end include: runtime_shared.js
assert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time')

assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// If memory is defined in wasm, the user can't provide it, or set INITIAL_MEMORY
assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally');
assert(!Module['INITIAL_MEMORY'], 'Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically');

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
if (!Module['noFSInit'] && !FS.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};
var runDependencyWatcher = null;

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(() => {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err(`dependency: ${dep}`);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  Module['onAbort']?.(what);

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

function createExportWrapper(name, nargs) {
  return (...args) => {
    assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
    var f = wasmExports[name];
    assert(f, `exported native function \`${name}\` not found`);
    // Only assert for too many arguments. Too few can be valid since the missing arguments will be zero filled.
    assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
    return f(...args);
  };
}

var wasmBinaryFile;
function findWasmBinary() {
    var f = 'LSFx.wasm';
    if (!isDataURI(f)) {
      return locateFile(f);
    }
    return f;
}

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw 'both async and sync fetching of the wasm failed';
}

async function getWasmBinary(binaryFile) {
  // If we don't have the binary yet, load it asynchronously using readAsync.
  if (!wasmBinary
      ) {
    // Fetch the binary using readAsync
    try {
      var response = await readAsync(binaryFile);
      return new Uint8Array(response);
    } catch {
      // Fall back to getBinarySync below;
    }
  }

  // Otherwise, getBinarySync should be able to get it synchronously
  return getBinarySync(binaryFile);
}

async function instantiateArrayBuffer(binaryFile, imports) {
  try {
    var binary = await getWasmBinary(binaryFile);
    var instance = await WebAssembly.instantiate(binary, imports);
    return instance;
  } catch (reason) {
    err(`failed to asynchronously prepare wasm: ${reason}`);

    // Warn on some common problems.
    if (isFileURI(wasmBinaryFile)) {
      err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
    }
    abort(reason);
  }
}

async function instantiateAsync(binary, binaryFile, imports) {
  if (!binary &&
      typeof WebAssembly.instantiateStreaming == 'function' &&
      !isDataURI(binaryFile)
     ) {
    try {
      var response = fetch(binaryFile, { credentials: 'same-origin' });
      var instantiationResult = await WebAssembly.instantiateStreaming(response, imports);
      return instantiationResult;
    } catch (reason) {
      // We expect the most common failure cause to be a bad MIME type for the binary,
      // in which case falling back to ArrayBuffer instantiation should work.
      err(`wasm streaming compile failed: ${reason}`);
      err('falling back to ArrayBuffer instantiation');
      // fall back of instantiateArrayBuffer below
    };
  }
  return instantiateArrayBuffer(binaryFile, imports);
}

function getWasmImports() {
  // prepare imports
  return {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
async function createWasm() {
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    wasmExports = instance.exports;

    

    wasmMemory = wasmExports['memory'];
    
    assert(wasmMemory, 'memory not found in wasm exports');
    updateMemoryViews();

    wasmTable = wasmExports['__indirect_function_table'];
    
    assert(wasmTable, 'table not found in wasm exports');

    addOnInit(wasmExports['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    return receiveInstance(result['instance']);
  }

  var info = getWasmImports();

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {
    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch(e) {
      err(`Module.instantiateWasm callback failed with error: ${e}`);
        return false;
    }
  }

  wasmBinaryFile ??= findWasmBinary();

    var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
    var exports = receiveInstantiationResult(result);
    return exports;
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===
// end include: preamble.js


  class ExitStatus {
      name = 'ExitStatus';
      constructor(status) {
        this.message = `Program terminated with exit(${status})`;
        this.status = status;
      }
    }

  var callRuntimeCallbacks = (callbacks) => {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    };

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[ptr];
      case 'i8': return HEAP8[ptr];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': abort('to do getValue(i64) use WASM_BIGINT');
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort(`invalid type for getValue: ${type}`);
    }
  }

  var noExitRuntime = Module['noExitRuntime'] || true;

  var ptrToString = (ptr) => {
      assert(typeof ptr === 'number');
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      ptr >>>= 0;
      return '0x' + ptr.toString(16).padStart(8, '0');
    };

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[ptr] = value; break;
      case 'i8': HEAP8[ptr] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': abort('to do setValue(i64) use WASM_BIGINT');
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort(`invalid type for setValue: ${type}`);
    }
  }

  var stackRestore = (val) => __emscripten_stack_restore(val);

  var stackSave = () => _emscripten_stack_get_current();

  var warnOnce = (text) => {
      warnOnce.shown ||= {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        err(text);
      }
    };

  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;
  
    /**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number=} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
  var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.  Also, use the length info to avoid running tiny
      // strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation,
      // so that undefined/NaN means Infinity)
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      // If building with TextDecoder, we have already computed the string length
      // above, so test loop end condition against that
      while (idx < endPtr) {
        // For UTF8 byte structure, see:
        // http://en.wikipedia.org/wiki/UTF-8#Description
        // https://www.ietf.org/rfc/rfc2279.txt
        // https://tools.ietf.org/html/rfc3629
        var u0 = heapOrArray[idx++];
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
        }
  
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
      return str;
    };
  
    /**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */
  var UTF8ToString = (ptr, maxBytesToRead) => {
      assert(typeof ptr == 'number', `UTF8ToString expects a number (got ${typeof ptr})`);
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    };
  var ___assert_fail = (condition, filename, line, func) =>
      abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);

  class ExceptionInfo {
      // excPtr - Thrown object pointer to wrap. Metadata pointer is calculated from it.
      constructor(excPtr) {
        this.excPtr = excPtr;
        this.ptr = excPtr - 24;
      }
  
      set_type(type) {
        HEAPU32[(((this.ptr)+(4))>>2)] = type;
      }
  
      get_type() {
        return HEAPU32[(((this.ptr)+(4))>>2)];
      }
  
      set_destructor(destructor) {
        HEAPU32[(((this.ptr)+(8))>>2)] = destructor;
      }
  
      get_destructor() {
        return HEAPU32[(((this.ptr)+(8))>>2)];
      }
  
      set_caught(caught) {
        caught = caught ? 1 : 0;
        HEAP8[(this.ptr)+(12)] = caught;
      }
  
      get_caught() {
        return HEAP8[(this.ptr)+(12)] != 0;
      }
  
      set_rethrown(rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(this.ptr)+(13)] = rethrown;
      }
  
      get_rethrown() {
        return HEAP8[(this.ptr)+(13)] != 0;
      }
  
      // Initialize native structure fields. Should be called once after allocated.
      init(type, destructor) {
        this.set_adjusted_ptr(0);
        this.set_type(type);
        this.set_destructor(destructor);
      }
  
      set_adjusted_ptr(adjustedPtr) {
        HEAPU32[(((this.ptr)+(16))>>2)] = adjustedPtr;
      }
  
      get_adjusted_ptr() {
        return HEAPU32[(((this.ptr)+(16))>>2)];
      }
    }
  
  var exceptionLast = 0;
  
  var uncaughtExceptionCount = 0;
  var ___cxa_throw = (ptr, type, destructor) => {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      assert(false, 'Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.');
    };

  var __abort_js = () =>
      abort('native code called abort()');

  var __embind_register_bigint = (primitiveType, name, size, minRange, maxRange) => {};

  var embind_init_charCodes = () => {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    };
  var embind_charCodes;
  var readLatin1String = (ptr) => {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    };
  
  var awaitingDependencies = {
  };
  
  var registeredTypes = {
  };
  
  var typeDependencies = {
  };
  
  var BindingError;
  var throwBindingError = (message) => { throw new BindingError(message); };
  
  
  
  
  var InternalError;
  var throwInternalError = (message) => { throw new InternalError(message); };
  var whenDependentTypesAreResolved = (myTypes, dependentTypes, getTypeConverters) => {
      myTypes.forEach((type) => typeDependencies[type] = dependentTypes);
  
      function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
          throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
          registerType(myTypes[i], myTypeConverters[i]);
        }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach((dt, i) => {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);
          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }
          awaitingDependencies[dt].push(() => {
            typeConverters[i] = registeredTypes[dt];
            ++registered;
            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });
      if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
      }
    };
  /** @param {Object=} options */
  function sharedRegisterType(rawType, registeredInstance, options = {}) {
      var name = registeredInstance.name;
      if (!rawType) {
        throwBindingError(`type "${name}" must have a positive integer typeid pointer`);
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
        if (options.ignoreDuplicateRegistrations) {
          return;
        } else {
          throwBindingError(`Cannot register type '${name}' twice`);
        }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach((cb) => cb());
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options = {}) {
      if (registeredInstance.argPackAdvance === undefined) {
        throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
      return sharedRegisterType(rawType, registeredInstance, options);
    }
  
  var GenericWireTypeSize = 8;
  /** @suppress {globalThis} */
  var __embind_register_bool = (rawType, name, trueValue, falseValue) => {
      name = readLatin1String(name);
      registerType(rawType, {
          name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          argPackAdvance: GenericWireTypeSize,
          'readValueFromPointer': function(pointer) {
              return this['fromWireType'](HEAPU8[pointer]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    };

  
  
  var shallowCopyInternalPointer = (o) => {
      return {
        count: o.count,
        deleteScheduled: o.deleteScheduled,
        preservePointerOnDelete: o.preservePointerOnDelete,
        ptr: o.ptr,
        ptrType: o.ptrType,
        smartPtr: o.smartPtr,
        smartPtrType: o.smartPtrType,
      };
    };
  
  var throwInstanceAlreadyDeleted = (obj) => {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    };
  
  var finalizationRegistry = false;
  
  var detachFinalizer = (handle) => {};
  
  var runDestructor = ($$) => {
      if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    };
  var releaseClassHandle = ($$) => {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
        runDestructor($$);
      }
    };
  
  var downcastPointer = (ptr, ptrClass, desiredClass) => {
      if (ptrClass === desiredClass) {
        return ptr;
      }
      if (undefined === desiredClass.baseClass) {
        return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
        return null;
      }
      return desiredClass.downcast(rv);
    };
  
  var registeredPointers = {
  };
  
  var registeredInstances = {
  };
  
  var getBasestPointer = (class_, ptr) => {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    };
  var getInheritedInstance = (class_, ptr) => {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    };
  
  
  var makeClassHandle = (prototype, record) => {
      if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
        $$: {
          value: record,
          writable: true,
        },
      }));
    };
  /** @suppress {globalThis} */
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
        this.destructor(ptr);
        return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
        // JS object has been neutered, time to repopulate it
        if (0 === registeredInstance.$$.count.value) {
          registeredInstance.$$.ptr = rawPointer;
          registeredInstance.$$.smartPtr = ptr;
          return registeredInstance['clone']();
        } else {
          // else, just increment reference count on existing object
          // it already has a reference to the smart pointer
          var rv = registeredInstance['clone']();
          this.destructor(ptr);
          return rv;
        }
      }
  
      function makeDefaultHandle() {
        if (this.isSmartPointer) {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this.pointeeType,
            ptr: rawPointer,
            smartPtrType: this,
            smartPtr: ptr,
          });
        } else {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this,
            ptr,
          });
        }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
      } else {
        toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
        return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
          smartPtrType: this,
          smartPtr: ptr,
        });
      } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
        });
      }
    }
  var attachFinalizer = (handle) => {
      if ('undefined' === typeof FinalizationRegistry) {
        attachFinalizer = (handle) => handle;
        return handle;
      }
      // If the running environment has a FinalizationRegistry (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationRegistry
      // at run-time, not build-time.
      finalizationRegistry = new FinalizationRegistry((info) => {
        console.warn(info.leakWarning);
        releaseClassHandle(info.$$);
      });
      attachFinalizer = (handle) => {
        var $$ = handle.$$;
        var hasSmartPtr = !!$$.smartPtr;
        if (hasSmartPtr) {
          // We should not call the destructor on raw pointers in case other code expects the pointee to live
          var info = { $$: $$ };
          // Create a warning as an Error instance in advance so that we can store
          // the current stacktrace and point to it when / if a leak is detected.
          // This is more useful than the empty stacktrace of `FinalizationRegistry`
          // callback.
          var cls = $$.ptrType.registeredClass;
          var err = new Error(`Embind found a leaked C++ instance ${cls.name} <${ptrToString($$.ptr)}>.\n` +
          "We'll free it automatically in this case, but this functionality is not reliable across various environments.\n" +
          "Make sure to invoke .delete() manually once you're done with the instance instead.\n" +
          "Originally allocated"); // `.stack` will add "at ..." after this sentence
          if ('captureStackTrace' in Error) {
            Error.captureStackTrace(err, RegisteredPointer_fromWireType);
          }
          info.leakWarning = err.stack.replace(/^Error: /, '');
          finalizationRegistry.register(handle, info, handle);
        }
        return handle;
      };
      detachFinalizer = (handle) => finalizationRegistry.unregister(handle);
      return attachFinalizer(handle);
    };
  
  
  
  
  var deletionQueue = [];
  var flushPendingDeletes = () => {
      while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
      }
    };
  
  var delayFunction;
  var init_ClassHandle = () => {
      Object.assign(ClassHandle.prototype, {
        "isAliasOf"(other) {
          if (!(this instanceof ClassHandle)) {
            return false;
          }
          if (!(other instanceof ClassHandle)) {
            return false;
          }
  
          var leftClass = this.$$.ptrType.registeredClass;
          var left = this.$$.ptr;
          other.$$ = /** @type {Object} */ (other.$$);
          var rightClass = other.$$.ptrType.registeredClass;
          var right = other.$$.ptr;
  
          while (leftClass.baseClass) {
            left = leftClass.upcast(left);
            leftClass = leftClass.baseClass;
          }
  
          while (rightClass.baseClass) {
            right = rightClass.upcast(right);
            rightClass = rightClass.baseClass;
          }
  
          return leftClass === rightClass && left === right;
        },
  
        "clone"() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
  
          if (this.$$.preservePointerOnDelete) {
            this.$$.count.value += 1;
            return this;
          } else {
            var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                value: shallowCopyInternalPointer(this.$$),
              }
            }));
  
            clone.$$.count.value += 1;
            clone.$$.deleteScheduled = false;
            return clone;
          }
        },
  
        "delete"() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
  
          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError('Object already scheduled for deletion');
          }
  
          detachFinalizer(this);
          releaseClassHandle(this.$$);
  
          if (!this.$$.preservePointerOnDelete) {
            this.$$.smartPtr = undefined;
            this.$$.ptr = undefined;
          }
        },
  
        "isDeleted"() {
          return !this.$$.ptr;
        },
  
        "deleteLater"() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError('Object already scheduled for deletion');
          }
          deletionQueue.push(this);
          if (deletionQueue.length === 1 && delayFunction) {
            delayFunction(flushPendingDeletes);
          }
          this.$$.deleteScheduled = true;
          return this;
        },
      });
    };
  /** @constructor */
  function ClassHandle() {
    }
  
  var createNamedFunction = (name, body) => Object.defineProperty(body, 'name', {
      value: name
    });
  
  
  var ensureOverloadTable = (proto, methodName, humanName) => {
      if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function(...args) {
          // TODO This check can be removed in -O3 level "unsafe" optimizations.
          if (!proto[methodName].overloadTable.hasOwnProperty(args.length)) {
            throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${args.length}) - expects one of (${proto[methodName].overloadTable})!`);
          }
          return proto[methodName].overloadTable[args.length].apply(this, args);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    };
  
  /** @param {number=} numArguments */
  var exposePublicSymbol = (name, value, numArguments) => {
      if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
          throwBindingError(`Cannot register public name '${name}' twice`);
        }
  
        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module[name].overloadTable.hasOwnProperty(numArguments)) {
          throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`);
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    };
  
  var char_0 = 48;
  
  var char_9 = 57;
  var makeLegalFunctionName = (name) => {
      assert(typeof name === 'string');
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
        return `_${name}`;
      }
      return name;
    };
  
  
  /** @constructor */
  function RegisteredClass(name,
                               constructor,
                               instancePrototype,
                               rawDestructor,
                               baseClass,
                               getActualType,
                               upcast,
                               downcast) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  var upcastPointer = (ptr, ptrClass, desiredClass) => {
      while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
          throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
      }
      return ptr;
    };
  /** @suppress {globalThis} */
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError(`null is not a valid ${this.name}`);
        }
        return 0;
      }
  
      if (!handle.$$) {
        throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
      }
      if (!handle.$$.ptr) {
        throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  /** @suppress {globalThis} */
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
        if (this.isReference) {
          throwBindingError(`null is not a valid ${this.name}`);
        }
  
        if (this.isSmartPointer) {
          ptr = this.rawConstructor();
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
          return ptr;
        } else {
          return 0;
        }
      }
  
      if (!handle || !handle.$$) {
        throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
      }
      if (!handle.$$.ptr) {
        throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name)} to parameter type ${this.name}`);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
          throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
  
        switch (this.sharingPolicy) {
          case 0: // NONE
            // no upcasting
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name)} to parameter type ${this.name}`);
            }
            break;
  
          case 1: // INTRUSIVE
            ptr = handle.$$.smartPtr;
            break;
  
          case 2: // BY_EMVAL
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              var clonedHandle = handle['clone']();
              ptr = this.rawShare(
                ptr,
                Emval.toHandle(() => clonedHandle['delete']())
              );
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
            }
            break;
  
          default:
            throwBindingError('Unsupporting sharing policy');
        }
      }
      return ptr;
    }
  
  
  /** @suppress {globalThis} */
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError(`null is not a valid ${this.name}`);
        }
        return 0;
      }
  
      if (!handle.$$) {
        throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
      }
      if (!handle.$$.ptr) {
        throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  /** @suppress {globalThis} */
  function readPointer(pointer) {
      return this['fromWireType'](HEAPU32[((pointer)>>2)]);
    }
  
  
  var init_RegisteredPointer = () => {
      Object.assign(RegisteredPointer.prototype, {
        getPointee(ptr) {
          if (this.rawGetPointee) {
            ptr = this.rawGetPointee(ptr);
          }
          return ptr;
        },
        destructor(ptr) {
          this.rawDestructor?.(ptr);
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': readPointer,
        'fromWireType': RegisteredPointer_fromWireType,
      });
    };
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
          this['toWireType'] = constNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        } else {
          this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        }
      } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
        //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  var replacePublicSymbol = (name, value, numArguments) => {
      if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistent public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    };
  
  
  
  var dynCallLegacy = (sig, ptr, args) => {
      sig = sig.replace(/p/g, 'i')
      assert(('dynCall_' + sig) in Module, `bad function pointer type - dynCall function not found for sig '${sig}'`);
      if (args?.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module['dynCall_' + sig];
      return f(ptr, ...args);
    };
  
  var wasmTableMirror = [];
  
  /** @type {WebAssembly.Table} */
  var wasmTable;
  var getWasmTableEntry = (funcPtr) => {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
        /** @suppress {checkTypes} */
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      /** @suppress {checkTypes} */
      assert(wasmTable.get(funcPtr) == func, 'JavaScript-side Wasm function table mirror is out of date!');
      return func;
    };
  
  var dynCall = (sig, ptr, args = []) => {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of their signature, so we rely on the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(getWasmTableEntry(ptr), `missing table entry in dynCall: ${ptr}`);
      var rtn = getWasmTableEntry(ptr)(...args);
      return rtn;
    };
  var getDynCaller = (sig, ptr) => {
      assert(sig.includes('j') || sig.includes('p'), 'getDynCaller should only be called with i64 sigs')
      return (...args) => dynCall(sig, ptr, args);
    };
  
  
  var embind__requireFunction = (signature, rawFunction) => {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return getWasmTableEntry(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp != "function") {
          throwBindingError(`unknown function pointer with signature ${signature}: ${rawFunction}`);
      }
      return fp;
    };
  
  
  
  var extendError = (baseErrorType, errorName) => {
      var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
  
        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
          this.stack = this.toString() + '\n' +
              stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
        if (this.message === undefined) {
          return this.name;
        } else {
          return `${this.name}: ${this.message}`;
        }
      };
  
      return errorClass;
    };
  var UnboundTypeError;
  
  
  
  var getTypeName = (type) => {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    };
  var throwUnboundTypeError = (message, types) => {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
        if (seen[type]) {
          return;
        }
        if (registeredTypes[type]) {
          return;
        }
        if (typeDependencies[type]) {
          typeDependencies[type].forEach(visit);
          return;
        }
        unboundTypes.push(type);
        seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(`${message}: ` + unboundTypes.map(getTypeName).join([', ']));
    };
  
  var __embind_register_class = (rawType,
                             rawPointerType,
                             rawConstPointerType,
                             baseClassRawType,
                             getActualTypeSignature,
                             getActualType,
                             upcastSignature,
                             upcast,
                             downcastSignature,
                             downcast,
                             name,
                             destructorSignature,
                             rawDestructor) => {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      upcast &&= embind__requireFunction(upcastSignature, upcast);
      downcast &&= embind__requireFunction(downcastSignature, downcast);
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError(`Cannot construct ${name} due to unbound types`, [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        (base) => {
          base = base[0];
  
          var baseClass;
          var basePrototype;
          if (baseClassRawType) {
            baseClass = base.registeredClass;
            basePrototype = baseClass.instancePrototype;
          } else {
            basePrototype = ClassHandle.prototype;
          }
  
          var constructor = createNamedFunction(name, function(...args) {
            if (Object.getPrototypeOf(this) !== instancePrototype) {
              throw new BindingError("Use 'new' to construct " + name);
            }
            if (undefined === registeredClass.constructor_body) {
              throw new BindingError(name + " has no accessible constructor");
            }
            var body = registeredClass.constructor_body[args.length];
            if (undefined === body) {
              throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${args.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);
            }
            return body.apply(this, args);
          });
  
          var instancePrototype = Object.create(basePrototype, {
            constructor: { value: constructor },
          });
  
          constructor.prototype = instancePrototype;
  
          var registeredClass = new RegisteredClass(name,
                                                    constructor,
                                                    instancePrototype,
                                                    rawDestructor,
                                                    baseClass,
                                                    getActualType,
                                                    upcast,
                                                    downcast);
  
          if (registeredClass.baseClass) {
            // Keep track of class hierarchy. Used to allow sub-classes to inherit class functions.
            registeredClass.baseClass.__derivedClasses ??= [];
  
            registeredClass.baseClass.__derivedClasses.push(registeredClass);
          }
  
          var referenceConverter = new RegisteredPointer(name,
                                                         registeredClass,
                                                         true,
                                                         false,
                                                         false);
  
          var pointerConverter = new RegisteredPointer(name + '*',
                                                       registeredClass,
                                                       false,
                                                       false,
                                                       false);
  
          var constPointerConverter = new RegisteredPointer(name + ' const*',
                                                            registeredClass,
                                                            false,
                                                            true,
                                                            false);
  
          registeredPointers[rawType] = {
            pointerType: pointerConverter,
            constPointerType: constPointerConverter
          };
  
          replacePublicSymbol(legalFunctionName, constructor);
  
          return [referenceConverter, pointerConverter, constPointerConverter];
        }
      );
    };

  var heap32VectorToArray = (count, firstElement) => {
      var array = [];
      for (var i = 0; i < count; i++) {
        // TODO(https://github.com/emscripten-core/emscripten/issues/17310):
        // Find a way to hoist the `>> 2` or `>> 3` out of this loop.
        array.push(HEAPU32[(((firstElement)+(i * 4))>>2)]);
      }
      return array;
    };
  
  
  var runDestructors = (destructors) => {
      while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
      }
    };
  
  
  
  
  
  
  
  function usesDestructorStack(argTypes) {
      // Skip return value at index 0 - it's not deleted here.
      for (var i = 1; i < argTypes.length; ++i) {
        // The type does not define a destructor function - must use dynamic stack
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
          return true;
        }
      }
      return false;
    }
  
  function newFunc(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
        throw new TypeError(`new_ called with constructor type ${typeof(constructor)} which is not a function`);
      }
      /*
       * Previously, the following line was just:
       *   function dummy() {};
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even
       * though at creation, the 'dummy' has the correct constructor name.  Thus,
       * objects created with IMVU.new would show up in the debugger as 'dummy',
       * which isn't very helpful.  Using IMVU.createNamedFunction addresses the
       * issue.  Doubly-unfortunately, there's no way to write a test for this
       * behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  
  function checkArgCount(numArgs, minArgs, maxArgs, humanName, throwBindingError) {
      if (numArgs < minArgs || numArgs > maxArgs) {
        var argCountMessage = minArgs == maxArgs ? minArgs : `${minArgs} to ${maxArgs}`;
        throwBindingError(`function ${humanName} called with ${numArgs} arguments, expected ${argCountMessage}`);
      }
    }
  function createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync) {
      var needsDestructorStack = usesDestructorStack(argTypes);
      var argCount = argTypes.length - 2;
      var argsList = [];
      var argsListWired = ['fn'];
      if (isClassMethodFunc) {
        argsListWired.push('thisWired');
      }
      for (var i = 0; i < argCount; ++i) {
        argsList.push(`arg${i}`)
        argsListWired.push(`arg${i}Wired`)
      }
      argsList = argsList.join(',')
      argsListWired = argsListWired.join(',')
  
      var invokerFnBody = `return function (${argsList}) {\n`;
  
      invokerFnBody += "checkArgCount(arguments.length, minArgs, maxArgs, humanName, throwBindingError);\n";
  
      if (needsDestructorStack) {
        invokerFnBody += "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["humanName", "throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
  
      if (isClassMethodFunc) {
        invokerFnBody += `var thisWired = classParam['toWireType'](${dtorStack}, this);\n`;
      }
  
      for (var i = 0; i < argCount; ++i) {
        invokerFnBody += `var arg${i}Wired = argType${i}['toWireType'](${dtorStack}, arg${i});\n`;
        args1.push(`argType${i}`);
      }
  
      invokerFnBody += (returns || isAsync ? "var rv = ":"") + `invoker(${argsListWired});\n`;
  
      var returnVal = returns ? "rv" : "";
  
      if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
      } else {
        for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
          var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
          if (argTypes[i].destructorFunction !== null) {
            invokerFnBody += `${paramName}_dtor(${paramName});\n`;
            args1.push(`${paramName}_dtor`);
          }
        }
      }
  
      if (returns) {
        invokerFnBody += "var ret = retType['fromWireType'](rv);\n" +
                         "return ret;\n";
      } else {
      }
  
      invokerFnBody += "}\n";
  
      args1.push('checkArgCount', 'minArgs', 'maxArgs');
      invokerFnBody = `if (arguments.length !== ${args1.length}){ throw new Error(humanName + "Expected ${args1.length} closure arguments " + arguments.length + " given."); }\n${invokerFnBody}`;
      return [args1, invokerFnBody];
    }
  
  function getRequiredArgCount(argTypes) {
      var requiredArgCount = argTypes.length - 2;
      for (var i = argTypes.length - 1; i >= 2; --i) {
        if (!argTypes[i].optional) {
          break;
        }
        requiredArgCount--;
      }
      return requiredArgCount;
    }
  
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, /** boolean= */ isAsync) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      // isAsync: Optional. If true, returns an async function. Async bindings are only supported with JSPI.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      assert(!isAsync, 'Async bindings are only supported with JSPI.');
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = usesDestructorStack(argTypes);
  
      var returns = (argTypes[0].name !== "void");
  
      var expectedArgCount = argCount - 2;
      var minArgs = getRequiredArgCount(argTypes);
    // Builld the arguments that will be passed into the closure around the invoker
    // function.
    var closureArgs = [humanName, throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
    for (var i = 0; i < argCount - 2; ++i) {
      closureArgs.push(argTypes[i+2]);
    }
    if (!needsDestructorStack) {
      for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
        if (argTypes[i].destructorFunction !== null) {
          closureArgs.push(argTypes[i].destructorFunction);
        }
      }
    }
    closureArgs.push(checkArgCount, minArgs, expectedArgCount);
  
    let [args, invokerFnBody] = createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync);
    args.push(invokerFnBody);
    var invokerFn = newFunc(Function, args)(...closureArgs);
      return createNamedFunction(humanName, invokerFn);
    }
  var __embind_register_class_constructor = (
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) => {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], (classType) => {
        classType = classType[0];
        var humanName = `constructor ${classType.name}`;
  
        if (undefined === classType.registeredClass.constructor_body) {
          classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
          throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);
        }
        classType.registeredClass.constructor_body[argCount - 1] = () => {
          throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`, rawArgTypes);
        };
  
        whenDependentTypesAreResolved([], rawArgTypes, (argTypes) => {
          // Insert empty slot for context type (argTypes[1]).
          argTypes.splice(1, 0, null);
          classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
          return [];
        });
        return [];
      });
    };

  
  
  
  
  
  
  var getFunctionName = (signature) => {
      signature = signature.trim();
      const argsIndex = signature.indexOf("(");
      if (argsIndex !== -1) {
        assert(signature[signature.length - 1] == ")", "Parentheses for argument names should match.");
        return signature.substr(0, argsIndex);
      } else {
        return signature;
      }
    };
  var __embind_register_class_function = (rawClassType,
                                      methodName,
                                      argCount,
                                      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
                                      invokerSignature,
                                      rawInvoker,
                                      context,
                                      isPureVirtual,
                                      isAsync,
                                      isNonnullReturn) => {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      methodName = getFunctionName(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], (classType) => {
        classType = classType[0];
        var humanName = `${classType.name}.${methodName}`;
  
        if (methodName.startsWith("@@")) {
          methodName = Symbol[methodName.substring(2)];
        }
  
        if (isPureVirtual) {
          classType.registeredClass.pureVirtualFunctions.push(methodName);
        }
  
        function unboundTypesHandler() {
          throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`, rawArgTypes);
        }
  
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
          // This is the first overload to be registered, OR we are replacing a
          // function in the base class with a function in the derived class.
          unboundTypesHandler.argCount = argCount - 2;
          unboundTypesHandler.className = classType.name;
          proto[methodName] = unboundTypesHandler;
        } else {
          // There was an existing function with the same name registered. Set up
          // a function overload routing table.
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }
  
        whenDependentTypesAreResolved([], rawArgTypes, (argTypes) => {
          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);
  
          // Replace the initial unbound-handler-stub function with the
          // appropriate member function, now that all types are resolved. If
          // multiple overloads are registered for this function, the function
          // goes into an overload table.
          if (undefined === proto[methodName].overloadTable) {
            // Set argCount in case an overload is registered later
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
          } else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
          }
  
          return [];
        });
        return [];
      });
    };

  
  var emval_freelist = [];
  
  var emval_handles = [];
  var __emval_decref = (handle) => {
      if (handle > 9 && 0 === --emval_handles[handle + 1]) {
        assert(emval_handles[handle] !== undefined, `Decref for unallocated handle.`);
        emval_handles[handle] = undefined;
        emval_freelist.push(handle);
      }
    };
  
  
  
  
  
  var count_emval_handles = () => {
      return emval_handles.length / 2 - 5 - emval_freelist.length;
    };
  
  var init_emval = () => {
      // reserve 0 and some special values. These never get de-allocated.
      emval_handles.push(
        0, 1,
        undefined, 1,
        null, 1,
        true, 1,
        false, 1,
      );
      assert(emval_handles.length === 5 * 2);
      Module['count_emval_handles'] = count_emval_handles;
    };
  var Emval = {
  toValue:(handle) => {
        if (!handle) {
            throwBindingError('Cannot use deleted val. handle = ' + handle);
        }
        // handle 2 is supposed to be `undefined`.
        assert(handle === 2 || emval_handles[handle] !== undefined && handle % 2 === 0, `invalid handle: ${handle}`);
        return emval_handles[handle];
      },
  toHandle:(value) => {
        switch (value) {
          case undefined: return 2;
          case null: return 4;
          case true: return 6;
          case false: return 8;
          default:{
            const handle = emval_freelist.pop() || emval_handles.length;
            emval_handles[handle] = value;
            emval_handles[handle + 1] = 1;
            return handle;
          }
        }
      },
  };
  
  
  var EmValType = {
      name: 'emscripten::val',
      'fromWireType': (handle) => {
        var rv = Emval.toValue(handle);
        __emval_decref(handle);
        return rv;
      },
      'toWireType': (destructors, value) => Emval.toHandle(value),
      argPackAdvance: GenericWireTypeSize,
      'readValueFromPointer': readPointer,
      destructorFunction: null, // This type does not need a destructor
  
      // TODO: do we need a deleteObject here?  write a test where
      // emval is passed into JS via an interface
    };
  var __embind_register_emval = (rawType) => registerType(rawType, EmValType);

  var embindRepr = (v) => {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    };
  
  var floatReadValueFromPointer = (name, width) => {
      switch (width) {
          case 4: return function(pointer) {
              return this['fromWireType'](HEAPF32[((pointer)>>2)]);
          };
          case 8: return function(pointer) {
              return this['fromWireType'](HEAPF64[((pointer)>>3)]);
          };
          default:
              throw new TypeError(`invalid float width (${width}): ${name}`);
      }
    };
  
  
  var __embind_register_float = (rawType, name, size) => {
      name = readLatin1String(name);
      registerType(rawType, {
        name,
        'fromWireType': (value) => value,
        'toWireType': (destructors, value) => {
          if (typeof value != "number" && typeof value != "boolean") {
            throw new TypeError(`Cannot convert ${embindRepr(value)} to ${this.name}`);
          }
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': floatReadValueFromPointer(name, size),
        destructorFunction: null, // This type does not need a destructor
      });
    };

  
  
  
  
  
  
  
  
  var __embind_register_function = (name, argCount, rawArgTypesAddr, signature, rawInvoker, fn, isAsync, isNonnullReturn) => {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      name = getFunctionName(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
        throwUnboundTypeError(`Cannot call ${name} due to unbound types`, argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, (argTypes) => {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn, isAsync), argCount - 1);
        return [];
      });
    };

  
  var integerReadValueFromPointer = (name, width, signed) => {
      // integers are quite common, so generate very specialized functions
      switch (width) {
          case 1: return signed ?
              (pointer) => HEAP8[pointer] :
              (pointer) => HEAPU8[pointer];
          case 2: return signed ?
              (pointer) => HEAP16[((pointer)>>1)] :
              (pointer) => HEAPU16[((pointer)>>1)]
          case 4: return signed ?
              (pointer) => HEAP32[((pointer)>>2)] :
              (pointer) => HEAPU32[((pointer)>>2)]
          default:
              throw new TypeError(`invalid integer width (${width}): ${name}`);
      }
    };
  
  
  /** @suppress {globalThis} */
  var __embind_register_integer = (primitiveType, name, size, minRange, maxRange) => {
      name = readLatin1String(name);
      // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come
      // out as 'i32 -1'. Always treat those as max u32.
      if (maxRange === -1) {
        maxRange = 4294967295;
      }
  
      var fromWireType = (value) => value;
  
      if (minRange === 0) {
        var bitshift = 32 - 8*size;
        fromWireType = (value) => (value << bitshift) >>> bitshift;
      }
  
      var isUnsignedType = (name.includes('unsigned'));
      var checkAssertions = (value, toTypeName) => {
        if (typeof value != "number" && typeof value != "boolean") {
          throw new TypeError(`Cannot convert "${embindRepr(value)}" to ${toTypeName}`);
        }
        if (value < minRange || value > maxRange) {
          throw new TypeError(`Passing a number "${embindRepr(value)}" from JS side to C/C++ side to an argument of type "${name}", which is outside the valid range [${minRange}, ${maxRange}]!`);
        }
      }
      var toWireType;
      if (isUnsignedType) {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          return value >>> 0;
        }
      } else {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        }
      }
      registerType(primitiveType, {
        name,
        'fromWireType': fromWireType,
        'toWireType': toWireType,
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': integerReadValueFromPointer(name, size, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
      });
    };

  
  var __embind_register_memory_view = (rawType, dataTypeIndex, name) => {
      var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
        var size = HEAPU32[((handle)>>2)];
        var data = HEAPU32[(((handle)+(4))>>2)];
        return new TA(HEAP8.buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
        name,
        'fromWireType': decodeMemoryView,
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': decodeMemoryView,
      }, {
        ignoreDuplicateRegistrations: true,
      });
    };

  
  var EmValOptionalType = Object.assign({optional: true}, EmValType);;
  var __embind_register_optional = (rawOptionalType, rawType) => {
      registerType(rawOptionalType, EmValOptionalType);
    };

  
  
  
  
  var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
      assert(typeof str === 'string', `stringToUTF8Array expects a string (got ${typeof str})`);
      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
      // undefined and false each don't write out any bytes.
      if (!(maxBytesToWrite > 0))
        return 0;
  
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
        // and https://www.ietf.org/rfc/rfc2279.txt
        // and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
          var u1 = str.charCodeAt(++i);
          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xC0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xE0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
          heap[outIdx++] = 0xF0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    };
  var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    };
  
  var lengthBytesUTF8 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var c = str.charCodeAt(i); // possibly a lead surrogate
        if (c <= 0x7F) {
          len++;
        } else if (c <= 0x7FF) {
          len += 2;
        } else if (c >= 0xD800 && c <= 0xDFFF) {
          len += 4; ++i;
        } else {
          len += 3;
        }
      }
      return len;
    };
  
  
  
  var __embind_register_std_string = (rawType, name) => {
      name = readLatin1String(name);
      var stdStringIsUTF8
      = true;
  
      registerType(rawType, {
        name,
        // For some method names we use string keys here since they are part of
        // the public/external API and/or used by the runtime-generated code.
        'fromWireType'(value) {
          var length = HEAPU32[((value)>>2)];
          var payload = value + 4;
  
          var str;
          if (stdStringIsUTF8) {
            var decodeStartPtr = payload;
            // Looping here to support possible embedded '0' bytes
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = payload + i;
              if (i == length || HEAPU8[currentBytePtr] == 0) {
                var maxRead = currentBytePtr - decodeStartPtr;
                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                if (str === undefined) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + 1;
              }
            }
          } else {
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
              a[i] = String.fromCharCode(HEAPU8[payload + i]);
            }
            str = a.join('');
          }
  
          _free(value);
  
          return str;
        },
        'toWireType'(destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }
  
          var length;
          var valueIsOfTypeString = (typeof value == 'string');
  
          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
            throwBindingError('Cannot pass non-string to std::string');
          }
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            length = lengthBytesUTF8(value);
          } else {
            length = value.length;
          }
  
          // assumes POINTER_SIZE alignment
          var base = _malloc(4 + length + 1);
          var ptr = base + 4;
          HEAPU32[((base)>>2)] = length;
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            stringToUTF8(value, ptr, length + 1);
          } else {
            if (valueIsOfTypeString) {
              for (var i = 0; i < length; ++i) {
                var charCode = value.charCodeAt(i);
                if (charCode > 255) {
                  _free(base);
                  throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + i] = charCode;
              }
            } else {
              for (var i = 0; i < length; ++i) {
                HEAPU8[ptr + i] = value[i];
              }
            }
          }
  
          if (destructors !== null) {
            destructors.push(_free, base);
          }
          return base;
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': readPointer,
        destructorFunction(ptr) {
          _free(ptr);
        },
      });
    };

  
  
  
  var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;
  var UTF16ToString = (ptr, maxBytesToRead) => {
      assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
      var endPtr = ptr;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.
      // Also, use the length info to avoid running tiny strings through
      // TextDecoder, since .subarray() allocates garbage.
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
      endPtr = idx << 1;
  
      if (endPtr - ptr > 32 && UTF16Decoder)
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  
      // Fallback: decode without UTF16Decoder
      var str = '';
  
      // If maxBytesToRead is not passed explicitly, it will be undefined, and the
      // for-loop's condition will always evaluate to true. The loop is then
      // terminated on the first null char.
      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
        var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
        if (codeUnit == 0) break;
        // fromCharCode constructs a character from a UTF-16 code unit, so we can
        // pass the UTF16 string right through.
        str += String.fromCharCode(codeUnit);
      }
  
      return str;
    };
  
  var stringToUTF16 = (str, outPtr, maxBytesToWrite) => {
      assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      maxBytesToWrite ??= 0x7FFFFFFF;
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2; // Null terminator.
      var startPtr = outPtr;
      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr)>>1)] = codeUnit;
        outPtr += 2;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP16[((outPtr)>>1)] = 0;
      return outPtr - startPtr;
    };
  
  var lengthBytesUTF16 = (str) => str.length*2;
  
  var UTF32ToString = (ptr, maxBytesToRead) => {
      assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
      var i = 0;
  
      var str = '';
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
        if (utf32 == 0) break;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
          var ch = utf32 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    };
  
  var stringToUTF32 = (str, outPtr, maxBytesToWrite) => {
      assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      maxBytesToWrite ??= 0x7FFFFFFF;
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr)>>2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP32[((outPtr)>>2)] = 0;
      return outPtr - startPtr;
    };
  
  var lengthBytesUTF32 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
      }
  
      return len;
    };
  var __embind_register_std_wstring = (rawType, charSize, name) => {
      name = readLatin1String(name);
      var decodeString, encodeString, readCharAt, lengthBytesUTF;
      if (charSize === 2) {
        decodeString = UTF16ToString;
        encodeString = stringToUTF16;
        lengthBytesUTF = lengthBytesUTF16;
        readCharAt = (pointer) => HEAPU16[((pointer)>>1)];
      } else if (charSize === 4) {
        decodeString = UTF32ToString;
        encodeString = stringToUTF32;
        lengthBytesUTF = lengthBytesUTF32;
        readCharAt = (pointer) => HEAPU32[((pointer)>>2)];
      }
      registerType(rawType, {
        name,
        'fromWireType': (value) => {
          // Code mostly taken from _embind_register_std_string fromWireType
          var length = HEAPU32[((value)>>2)];
          var str;
  
          var decodeStartPtr = value + 4;
          // Looping here to support possible embedded '0' bytes
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i * charSize;
            if (i == length || readCharAt(currentBytePtr) == 0) {
              var maxReadBytes = currentBytePtr - decodeStartPtr;
              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
              if (str === undefined) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + charSize;
            }
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': (destructors, value) => {
          if (!(typeof value == 'string')) {
            throwBindingError(`Cannot pass non-string to C++ string type ${name}`);
          }
  
          // assumes POINTER_SIZE alignment
          var length = lengthBytesUTF(value);
          var ptr = _malloc(4 + length + charSize);
          HEAPU32[((ptr)>>2)] = length / charSize;
  
          encodeString(value, ptr + 4, length + charSize);
  
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': readPointer,
        destructorFunction(ptr) {
          _free(ptr);
        }
      });
    };

  
  var __embind_register_void = (rawType, name) => {
      name = readLatin1String(name);
      registerType(rawType, {
        isVoid: true, // void return values can be optimized out sometimes
        name,
        argPackAdvance: 0,
        'fromWireType': () => undefined,
        // TODO: assert if anything else is given?
        'toWireType': (destructors, o) => undefined,
      });
    };


  
  
  
  var requireRegisteredType = (rawType, humanName) => {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
        throwBindingError(`${humanName} has unknown type ${getTypeName(rawType)}`);
      }
      return impl;
    };
  var __emval_take_value = (type, arg) => {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](arg);
      return Emval.toHandle(v);
    };

  
  var __tzset_js = (timezone, daylight, std_name, dst_name) => {
      // TODO: Use (malleable) environment variables instead of system settings.
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      var winterOffset = winter.getTimezoneOffset();
      var summerOffset = summer.getTimezoneOffset();
  
      // Local standard timezone offset. Local standard time is not adjusted for
      // daylight savings.  This code uses the fact that getTimezoneOffset returns
      // a greater value during Standard Time versus Daylight Saving Time (DST).
      // Thus it determines the expected output during Standard Time, and it
      // compares whether the output of the given date the same (Standard) or less
      // (DST).
      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by stdTimezoneOffset.
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAPU32[((timezone)>>2)] = stdTimezoneOffset * 60;
  
      HEAP32[((daylight)>>2)] = Number(winterOffset != summerOffset);
  
      var extractZone = (timezoneOffset) => {
        // Why inverse sign?
        // Read here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
        var sign = timezoneOffset >= 0 ? "-" : "+";
  
        var absOffset = Math.abs(timezoneOffset)
        var hours = String(Math.floor(absOffset / 60)).padStart(2, "0");
        var minutes = String(absOffset % 60).padStart(2, "0");
  
        return `UTC${sign}${hours}${minutes}`;
      }
  
      var winterName = extractZone(winterOffset);
      var summerName = extractZone(summerOffset);
      assert(winterName);
      assert(summerName);
      assert(lengthBytesUTF8(winterName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${winterName})`);
      assert(lengthBytesUTF8(summerName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${summerName})`);
      if (summerOffset < winterOffset) {
        // Northern hemisphere
        stringToUTF8(winterName, std_name, 17);
        stringToUTF8(summerName, dst_name, 17);
      } else {
        stringToUTF8(winterName, dst_name, 17);
        stringToUTF8(summerName, std_name, 17);
      }
    };

  var getHeapMax = () =>
      HEAPU8.length;
  
  var alignMemory = (size, alignment) => {
      assert(alignment, "alignment argument is required");
      return Math.ceil(size / alignment) * alignment;
    };
  
  var abortOnCannotGrowMemory = (requestedSize) => {
      abort(`Cannot enlarge memory arrays to size ${requestedSize} bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ${HEAP8.length}, (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0`);
    };
  var _emscripten_resize_heap = (requestedSize) => {
      var oldSize = HEAPU8.length;
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      requestedSize >>>= 0;
      abortOnCannotGrowMemory(requestedSize);
    };

  var ENV = {
  };
  
  var getExecutableName = () => thisProgram || './this.program';
  var getEnvStrings = () => {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          // x is a key in ENV; if ENV[x] is undefined, that means it was
          // explicitly set to be so. We allow user code to do that to
          // force variables with default values to remain unset.
          if (ENV[x] === undefined) delete env[x];
          else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(`${x}=${env[x]}`);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    };
  
  var stringToAscii = (str, buffer) => {
      for (var i = 0; i < str.length; ++i) {
        assert(str.charCodeAt(i) === (str.charCodeAt(i) & 0xff));
        HEAP8[buffer++] = str.charCodeAt(i);
      }
      // Null-terminate the string
      HEAP8[buffer] = 0;
    };
  var _environ_get = (__environ, environ_buf) => {
      var bufSize = 0;
      getEnvStrings().forEach((string, i) => {
        var ptr = environ_buf + bufSize;
        HEAPU32[(((__environ)+(i*4))>>2)] = ptr;
        stringToAscii(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    };

  var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
      var strings = getEnvStrings();
      HEAPU32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach((string) => bufSize += string.length + 1);
      HEAPU32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    };

  var PATH = {
  isAbs:(path) => path.charAt(0) === '/',
  splitPath:(filename) => {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },
  normalizeArray:(parts, allowAboveRoot) => {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },
  normalize:(path) => {
        var isAbsolute = PATH.isAbs(path),
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },
  dirname:(path) => {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },
  basename:(path) => path && path.match(/([^\/]+|\/)\/*$/)[1],
  join:(...paths) => PATH.normalize(paths.join('/')),
  join2:(l, r) => PATH.normalize(l + '/' + r),
  };
  
  var initRandomFill = () => {
  
      return (view) => crypto.getRandomValues(view);
    };
  var randomFill = (view) => {
      // Lazily init on the first invocation.
      (randomFill = initRandomFill())(view);
    };
  
  
  
  var PATH_FS = {
  resolve:(...args) => {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? args[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path != 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },
  relative:(from, to) => {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      },
  };
  
  
  
  var FS_stdin_getChar_buffer = [];
  
  
  /** @type {function(string, boolean=, number=)} */
  function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
  }
  var FS_stdin_getChar = () => {
      if (!FS_stdin_getChar_buffer.length) {
        var result = null;
        if (typeof window != 'undefined' &&
          typeof window.prompt == 'function') {
          // Browser.
          result = window.prompt('Input: ');  // returns null on cancel
          if (result !== null) {
            result += '\n';
          }
        } else
        {}
        if (!result) {
          return null;
        }
        FS_stdin_getChar_buffer = intArrayFromString(result, true);
      }
      return FS_stdin_getChar_buffer.shift();
    };
  var TTY = {
  ttys:[],
  init() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process.stdin.setEncoding('utf8');
        // }
      },
  shutdown() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process.stdin.pause();
        // }
      },
  register(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },
  stream_ops:{
  open(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },
  close(stream) {
          // flush any pending line data
          stream.tty.ops.fsync(stream.tty);
        },
  fsync(stream) {
          stream.tty.ops.fsync(stream.tty);
        },
  read(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.atime = Date.now();
          }
          return bytesRead;
        },
  write(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.mtime = stream.node.ctime = Date.now();
          }
          return i;
        },
  },
  default_tty_ops:{
  get_char(tty) {
          return FS_stdin_getChar();
        },
  put_char(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },
  fsync(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  ioctl_tcgets(tty) {
          // typical setting
          return {
            c_iflag: 25856,
            c_oflag: 5,
            c_cflag: 191,
            c_lflag: 35387,
            c_cc: [
              0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,
              0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ]
          };
        },
  ioctl_tcsets(tty, optional_actions, data) {
          // currently just ignore
          return 0;
        },
  ioctl_tiocgwinsz(tty) {
          return [24, 80];
        },
  },
  default_tty1_ops:{
  put_char(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
  fsync(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  },
  };
  
  
  var zeroMemory = (address, size) => {
      HEAPU8.fill(0, address, address + size);
    };
  
  var mmapAlloc = (size) => {
      abort('internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported');
    };
  var MEMFS = {
  ops_table:null,
  mount(mount) {
        return MEMFS.createNode(null, '/', 16895, 0);
      },
  createNode(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        MEMFS.ops_table ||= {
          dir: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              lookup: MEMFS.node_ops.lookup,
              mknod: MEMFS.node_ops.mknod,
              rename: MEMFS.node_ops.rename,
              unlink: MEMFS.node_ops.unlink,
              rmdir: MEMFS.node_ops.rmdir,
              readdir: MEMFS.node_ops.readdir,
              symlink: MEMFS.node_ops.symlink
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek
            }
          },
          file: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek,
              read: MEMFS.stream_ops.read,
              write: MEMFS.stream_ops.write,
              allocate: MEMFS.stream_ops.allocate,
              mmap: MEMFS.stream_ops.mmap,
              msync: MEMFS.stream_ops.msync
            }
          },
          link: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              readlink: MEMFS.node_ops.readlink
            },
            stream: {}
          },
          chrdev: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: FS.chrdev_stream_ops
          }
        };
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.atime = node.mtime = node.ctime = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.atime = parent.mtime = parent.ctime = node.atime;
        }
        return node;
      },
  getFileDataAsTypedArray(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },
  expandFileStorage(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },
  resizeFileStorage(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },
  node_ops:{
  getattr(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.atime);
          attr.mtime = new Date(node.mtime);
          attr.ctime = new Date(node.ctime);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },
  setattr(node, attr) {
          for (const key of ["mode", "atime", "mtime", "ctime"]) {
            if (attr[key] != null) {
              node[key] = attr[key];
            }
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },
  lookup(parent, name) {
          throw new FS.ErrnoError(44);
        },
  mknod(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },
  rename(old_node, new_dir, new_name) {
          var new_node;
          try {
            new_node = FS.lookupNode(new_dir, new_name);
          } catch (e) {}
          if (new_node) {
            if (FS.isDir(old_node.mode)) {
              // if we're overwriting a directory at new_name, make sure it's empty.
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
            FS.hashRemoveNode(new_node);
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          new_dir.contents[new_name] = old_node;
          old_node.name = new_name;
          new_dir.ctime = new_dir.mtime = old_node.parent.ctime = old_node.parent.mtime = Date.now();
        },
  unlink(parent, name) {
          delete parent.contents[name];
          parent.ctime = parent.mtime = Date.now();
        },
  rmdir(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.ctime = parent.mtime = Date.now();
        },
  readdir(node) {
          return ['.', '..', ...Object.keys(node.contents)];
        },
  symlink(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0o777 | 40960, 0);
          node.link = oldpath;
          return node;
        },
  readlink(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        },
  },
  stream_ops:{
  read(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },
  write(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.mtime = node.ctime = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },
  llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
  allocate(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },
  mmap(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the
            // buffer we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            if (contents) {
              // Try to avoid unnecessary slices.
              if (position > 0 || position + length < contents.length) {
                if (contents.subarray) {
                  contents = contents.subarray(position, position + length);
                } else {
                  contents = Array.prototype.slice.call(contents, position, position + length);
                }
              }
              HEAP8.set(contents, ptr);
            }
          }
          return { ptr, allocated };
        },
  msync(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        },
  },
  };
  
  var asyncLoad = async (url) => {
      var arrayBuffer = await readAsync(url);
      assert(arrayBuffer, `Loading data file "${url}" failed (no arrayBuffer).`);
      return new Uint8Array(arrayBuffer);
    };
  
  
  var FS_createDataFile = (parent, name, fileData, canRead, canWrite, canOwn) => {
      FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);
    };
  
  var preloadPlugins = Module['preloadPlugins'] || [];
  var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
      // Ensure plugins are ready.
      if (typeof Browser != 'undefined') Browser.init();
  
      var handled = false;
      preloadPlugins.forEach((plugin) => {
        if (handled) return;
        if (plugin['canHandle'](fullname)) {
          plugin['handle'](byteArray, fullname, finish, onerror);
          handled = true;
        }
      });
      return handled;
    };
  var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
      // TODO we should allow people to just pass in a complete filename instead
      // of parent and name being that we just join them anyways
      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
      var dep = getUniqueRunDependency(`cp ${fullname}`); // might have several active requests for the same fullname
      function processData(byteArray) {
        function finish(byteArray) {
          preFinish?.();
          if (!dontCreateFile) {
            FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
          }
          onload?.();
          removeRunDependency(dep);
        }
        if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
          onerror?.();
          removeRunDependency(dep);
        })) {
          return;
        }
        finish(byteArray);
      }
      addRunDependency(dep);
      if (typeof url == 'string') {
        asyncLoad(url).then(processData, onerror);
      } else {
        processData(url);
      }
    };
  
  var FS_modeStringToFlags = (str) => {
      var flagModes = {
        'r': 0,
        'r+': 2,
        'w': 512 | 64 | 1,
        'w+': 512 | 64 | 2,
        'a': 1024 | 64 | 1,
        'a+': 1024 | 64 | 2,
      };
      var flags = flagModes[str];
      if (typeof flags == 'undefined') {
        throw new Error(`Unknown file open mode: ${str}`);
      }
      return flags;
    };
  
  var FS_getMode = (canRead, canWrite) => {
      var mode = 0;
      if (canRead) mode |= 292 | 73;
      if (canWrite) mode |= 146;
      return mode;
    };
  
  
  
  
  
  
  var strError = (errno) => UTF8ToString(_strerror(errno));
  
  var ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };
  var FS = {
  root:null,
  mounts:[],
  devices:{
  },
  streams:[],
  nextInode:1,
  nameTable:null,
  currentPath:"/",
  initialized:false,
  ignorePermissions:true,
  ErrnoError:class extends Error {
        name = 'ErrnoError';
        // We set the `name` property to be able to identify `FS.ErrnoError`
        // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
        // - when using PROXYFS, an error can come from an underlying FS
        // as different FS objects have their own FS.ErrnoError each,
        // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
        // we'll use the reliable test `err.name == "ErrnoError"` instead
        constructor(errno) {
          super(runtimeInitialized ? strError(errno) : '');
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
        }
      },
  filesystems:null,
  syncFSRequests:0,
  readFiles:{
  },
  FSStream:class {
        shared = {};
        get object() {
          return this.node;
        }
        set object(val) {
          this.node = val;
        }
        get isRead() {
          return (this.flags & 2097155) !== 1;
        }
        get isWrite() {
          return (this.flags & 2097155) !== 0;
        }
        get isAppend() {
          return (this.flags & 1024);
        }
        get flags() {
          return this.shared.flags;
        }
        set flags(val) {
          this.shared.flags = val;
        }
        get position() {
          return this.shared.position;
        }
        set position(val) {
          this.shared.position = val;
        }
      },
  FSNode:class {
        node_ops = {};
        stream_ops = {};
        readMode = 292 | 73;
        writeMode = 146;
        mounted = null;
        constructor(parent, name, mode, rdev) {
          if (!parent) {
            parent = this;  // root node sets parent to itself
          }
          this.parent = parent;
          this.mount = parent.mount;
          this.id = FS.nextInode++;
          this.name = name;
          this.mode = mode;
          this.rdev = rdev;
          this.atime = this.mtime = this.ctime = Date.now();
        }
        get read() {
          return (this.mode & this.readMode) === this.readMode;
        }
        set read(val) {
          val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
        }
        get write() {
          return (this.mode & this.writeMode) === this.writeMode;
        }
        set write(val) {
          val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
        }
        get isFolder() {
          return FS.isDir(this.mode);
        }
        get isDevice() {
          return FS.isChrdev(this.mode);
        }
      },
  lookupPath(path, opts = {}) {
        if (!path) {
          throw new FS.ErrnoError(44);
        }
        opts.follow_mount ??= true
  
        if (!PATH.isAbs(path)) {
          path = FS.cwd() + '/' + path;
        }
  
        // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
        linkloop: for (var nlinks = 0; nlinks < 40; nlinks++) {
          // split the absolute path
          var parts = path.split('/').filter((p) => !!p);
  
          // start at the root
          var current = FS.root;
          var current_path = '/';
  
          for (var i = 0; i < parts.length; i++) {
            var islast = (i === parts.length-1);
            if (islast && opts.parent) {
              // stop resolving
              break;
            }
  
            if (parts[i] === '.') {
              continue;
            }
  
            if (parts[i] === '..') {
              current_path = PATH.dirname(current_path);
              current = current.parent;
              continue;
            }
  
            current_path = PATH.join2(current_path, parts[i]);
            try {
              current = FS.lookupNode(current, parts[i]);
            } catch (e) {
              // if noent_okay is true, suppress a ENOENT in the last component
              // and return an object with an undefined node. This is needed for
              // resolving symlinks in the path when creating a file.
              if ((e?.errno === 44) && islast && opts.noent_okay) {
                return { path: current_path };
              }
              throw e;
            }
  
            // jump to the mount's root node if this is a mountpoint
            if (FS.isMountpoint(current) && (!islast || opts.follow_mount)) {
              current = current.mounted.root;
            }
  
            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            if (FS.isLink(current.mode) && (!islast || opts.follow)) {
              if (!current.node_ops.readlink) {
                throw new FS.ErrnoError(52);
              }
              var link = current.node_ops.readlink(current);
              if (!PATH.isAbs(link)) {
                link = PATH.dirname(current_path) + '/' + link;
              }
              path = link + '/' + parts.slice(i + 1).join('/');
              continue linkloop;
            }
          }
          return { path: current_path, node: current };
        }
        throw new FS.ErrnoError(32);
      },
  getPath(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? `${mount}/${path}` : mount + path;
          }
          path = path ? `${node.name}/${path}` : node.name;
          node = node.parent;
        }
      },
  hashName(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },
  hashAddNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },
  hashRemoveNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },
  lookupNode(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },
  createNode(parent, name, mode, rdev) {
        assert(typeof parent == 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },
  destroyNode(node) {
        FS.hashRemoveNode(node);
      },
  isRoot(node) {
        return node === node.parent;
      },
  isMountpoint(node) {
        return !!node.mounted;
      },
  isFile(mode) {
        return (mode & 61440) === 32768;
      },
  isDir(mode) {
        return (mode & 61440) === 16384;
      },
  isLink(mode) {
        return (mode & 61440) === 40960;
      },
  isChrdev(mode) {
        return (mode & 61440) === 8192;
      },
  isBlkdev(mode) {
        return (mode & 61440) === 24576;
      },
  isFIFO(mode) {
        return (mode & 61440) === 4096;
      },
  isSocket(mode) {
        return (mode & 49152) === 49152;
      },
  flagsToPermissionString(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },
  nodePermissions(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },
  mayLookup(dir) {
        if (!FS.isDir(dir.mode)) return 54;
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },
  mayCreate(dir, name) {
        if (!FS.isDir(dir.mode)) {
          return 54;
        }
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },
  mayDelete(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },
  mayOpen(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' // opening for write
              || (flags & (512 | 64))) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },
  checkOpExists(op, err) {
        if (!op) {
          throw new FS.ErrnoError(err);
        }
        return op;
      },
  MAX_OPEN_FDS:4096,
  nextfd() {
        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },
  getStreamChecked(fd) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        return stream;
      },
  getStream:(fd) => FS.streams[fd],
  createStream(stream, fd = -1) {
        assert(fd >= -1);
  
        // clone it, so we can return an instance of FSStream
        stream = Object.assign(new FS.FSStream(), stream);
        if (fd == -1) {
          fd = FS.nextfd();
        }
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },
  closeStream(fd) {
        FS.streams[fd] = null;
      },
  dupStream(origStream, fd = -1) {
        var stream = FS.createStream(origStream, fd);
        stream.stream_ops?.dup?.(stream);
        return stream;
      },
  chrdev_stream_ops:{
  open(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          stream.stream_ops.open?.(stream);
        },
  llseek() {
          throw new FS.ErrnoError(70);
        },
  },
  major:(dev) => ((dev) >> 8),
  minor:(dev) => ((dev) & 0xff),
  makedev:(ma, mi) => ((ma) << 8 | (mi)),
  registerDevice(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },
  getDevice:(dev) => FS.devices[dev],
  getMounts(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push(...m.mounts);
        }
  
        return mounts;
      },
  syncfs(populate, callback) {
        if (typeof populate == 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },
  mount(type, opts, mountpoint) {
        if (typeof type == 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type,
          opts,
          mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },
  unmount(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },
  lookup(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },
  mknod(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name) {
          throw new FS.ErrnoError(28);
        }
        if (name === '.' || name === '..') {
          throw new FS.ErrnoError(20);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },
  statfs(path) {
        return FS.statfsNode(FS.lookupPath(path, {follow: true}).node);
      },
  statfsStream(stream) {
        // We keep a separate statfsStream function because noderawfs overrides
        // it. In noderawfs, stream.node is sometimes null. Instead, we need to
        // look at stream.path.
        return FS.statfsNode(stream.node);
      },
  statfsNode(node) {
        // NOTE: None of the defaults here are true. We're just returning safe and
        //       sane values. Currently nodefs and rawfs replace these defaults,
        //       other file systems leave them alone.
        var rtn = {
          bsize: 4096,
          frsize: 4096,
          blocks: 1e6,
          bfree: 5e5,
          bavail: 5e5,
          files: FS.nextInode,
          ffree: FS.nextInode - 1,
          fsid: 42,
          flags: 2,
          namelen: 255,
        };
  
        if (node.node_ops.statfs) {
          Object.assign(rtn, node.node_ops.statfs(node.mount.opts.root));
        }
        return rtn;
      },
  create(path, mode = 0o666) {
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },
  mkdir(path, mode = 0o777) {
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },
  mkdirTree(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },
  mkdev(path, mode, dev) {
        if (typeof dev == 'undefined') {
          dev = mode;
          mode = 0o666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },
  symlink(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },
  rename(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existent directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
          // update old node (we do this here to avoid each backend
          // needing to)
          old_node.parent = new_dir;
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },
  rmdir(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },
  readdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        var readdir = FS.checkOpExists(node.node_ops.readdir, 54);
        return readdir(node);
      },
  unlink(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },
  readlink(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return link.node_ops.readlink(link);
      },
  stat(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        var getattr = FS.checkOpExists(node.node_ops.getattr, 63);
        return getattr(node);
      },
  lstat(path) {
        return FS.stat(path, true);
      },
  chmod(path, mode, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
        setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          ctime: Date.now(),
          dontFollow
        });
      },
  lchmod(path, mode) {
        FS.chmod(path, mode, true);
      },
  fchmod(fd, mode) {
        var stream = FS.getStreamChecked(fd);
        FS.chmod(stream.node, mode);
      },
  chown(path, uid, gid, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
        setattr(node, {
          timestamp: Date.now(),
          dontFollow
          // we ignore the uid / gid for now
        });
      },
  lchown(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },
  fchown(fd, uid, gid) {
        var stream = FS.getStreamChecked(fd);
        FS.chown(stream.node, uid, gid);
      },
  truncate(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
        setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },
  ftruncate(fd, len) {
        var stream = FS.getStreamChecked(fd);
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },
  utime(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
        setattr(node, {
          atime: atime,
          mtime: mtime
        });
      },
  open(path, flags, mode = 0o666) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        var isDirPath;
        if (typeof path == 'object') {
          node = path;
        } else {
          isDirPath = path.endsWith("/");
          // noent_okay makes it so that if the final component of the path
          // doesn't exist, lookupPath returns `node: undefined`. `path` will be
          // updated to point to the target of all symlinks.
          var lookup = FS.lookupPath(path, {
            follow: !(flags & 131072),
            noent_okay: true
          });
          node = lookup.node;
          path = lookup.path;
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else if (isDirPath) {
            throw new FS.ErrnoError(31);
          } else {
            // node doesn't exist, try to create it
            // Ignore the permission bits here to ensure we can `open` this new
            // file below. We use chmod below the apply the permissions once the
            // file is open.
            node = FS.mknod(path, mode | 0o777, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512) && !created) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        });
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (created) {
          FS.chmod(node, mode & 0o777);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },
  close(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },
  isClosed(stream) {
        return stream.fd === null;
      },
  llseek(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },
  read(stream, buffer, offset, length, position) {
        assert(offset >= 0);
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },
  write(stream, buffer, offset, length, position, canOwn) {
        assert(offset >= 0);
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },
  allocate(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },
  mmap(stream, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        if (!length) {
          throw new FS.ErrnoError(28);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },
  msync(stream, buffer, offset, length, mmapFlags) {
        assert(offset >= 0);
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },
  ioctl(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },
  readFile(path, opts = {}) {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error(`Invalid encoding type "${opts.encoding}"`);
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },
  writeFile(path, data, opts = {}) {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },
  cwd:() => FS.currentPath,
  chdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },
  createDefaultDirectories() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },
  createDefaultDevices() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
          llseek: () => 0,
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        // use a buffer to avoid overhead of individual crypto calls per byte
        var randomBuffer = new Uint8Array(1024), randomLeft = 0;
        var randomByte = () => {
          if (randomLeft === 0) {
            randomFill(randomBuffer);
            randomLeft = randomBuffer.byteLength;
          }
          return randomBuffer[--randomLeft];
        };
        FS.createDevice('/dev', 'random', randomByte);
        FS.createDevice('/dev', 'urandom', randomByte);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },
  createSpecialDirectories() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount() {
            var node = FS.createNode(proc_self, 'fd', 16895, 73);
            node.stream_ops = {
              llseek: MEMFS.stream_ops.llseek,
            };
            node.node_ops = {
              lookup(parent, name) {
                var fd = +name;
                var stream = FS.getStreamChecked(fd);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: () => stream.path },
                  id: fd + 1,
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              },
              readdir() {
                return Array.from(FS.streams.entries())
                  .filter(([k, v]) => v)
                  .map(([k, v]) => k.toString());
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },
  createStandardStreams(input, output, error) {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (input) {
          FS.createDevice('/dev', 'stdin', input);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (output) {
          FS.createDevice('/dev', 'stdout', null, output);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (error) {
          FS.createDevice('/dev', 'stderr', null, error);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, `invalid handle for stdin (${stdin.fd})`);
        assert(stdout.fd === 1, `invalid handle for stdout (${stdout.fd})`);
        assert(stderr.fd === 2, `invalid handle for stderr (${stderr.fd})`);
      },
  staticInit() {
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },
  init(input, output, error) {
        assert(!FS.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.initialized = true;
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input ??= Module['stdin'];
        output ??= Module['stdout'];
        error ??= Module['stderr'];
  
        FS.createStandardStreams(input, output, error);
      },
  quit() {
        FS.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        _fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },
  findObject(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },
  analyzePath(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },
  createPath(parent, path, canRead, canWrite) {
        parent = typeof parent == 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },
  createFile(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(canRead, canWrite);
        return FS.create(path, mode);
      },
  createDataFile(parent, name, data, canRead, canWrite, canOwn) {
        var path = name;
        if (parent) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS_getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
      },
  createDevice(parent, name, input, output) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(!!input, !!output);
        FS.createDevice.major ??= 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open(stream) {
            stream.seekable = false;
          },
          close(stream) {
            // flush any pending line data
            if (output?.buffer?.length) {
              output(10);
            }
          },
          read(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.atime = Date.now();
            }
            return bytesRead;
          },
          write(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.mtime = stream.node.ctime = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },
  forceLoadFile(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest != 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else { // Command-line.
          try {
            obj.contents = readBinary(obj.url);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
      },
  createLazyFile(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array).
        // Actual getting is abstracted away for eventual reuse.
        class LazyUint8Array {
          lengthKnown = false;
          chunks = []; // Loaded chunks. Index is the chunk number
          get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = (idx / this.chunkSize)|0;
            return this.getter(chunkNum)[chunkOffset];
          }
          setDataGetter(getter) {
            this.getter = getter;
          }
          cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (from, to) => {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
              }
              return intArrayFromString(xhr.responseText || '', true);
            };
            var lazyArray = this;
            lazyArray.setDataGetter((chunkNum) => {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
              return lazyArray.chunks[chunkNum];
            });
  
            if (usesGzip || !datalength) {
              // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
              chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          }
          get length() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._length;
          }
          get chunkSize() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._chunkSize;
          }
        }
  
        if (typeof XMLHttpRequest != 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = (...args) => {
            FS.forceLoadFile(node);
            return fn(...args);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        // use a custom read function
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position)
        };
        // use a custom mmap function
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },
  absolutePath() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },
  createFolder() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },
  createLink() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },
  joinPath() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },
  mmapAlloc() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },
  standardizePath() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      },
  };
  
  var SYSCALLS = {
  DEFAULT_POLLMASK:5,
  calculateAt(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return dir + '/' + path;
      },
  writeStat(buf, stat) {
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = stat.mode;
        HEAPU32[(((buf)+(8))>>2)] = stat.nlink;
        HEAP32[(((buf)+(12))>>2)] = stat.uid;
        HEAP32[(((buf)+(16))>>2)] = stat.gid;
        HEAP32[(((buf)+(20))>>2)] = stat.rdev;
        (tempI64 = [stat.size>>>0,(tempDouble = stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(24))>>2)] = tempI64[0],HEAP32[(((buf)+(28))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(32))>>2)] = 4096;
        HEAP32[(((buf)+(36))>>2)] = stat.blocks;
        var atime = stat.atime.getTime();
        var mtime = stat.mtime.getTime();
        var ctime = stat.ctime.getTime();
        (tempI64 = [Math.floor(atime / 1000)>>>0,(tempDouble = Math.floor(atime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(48))>>2)] = (atime % 1000) * 1000 * 1000;
        (tempI64 = [Math.floor(mtime / 1000)>>>0,(tempDouble = Math.floor(mtime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(64))>>2)] = (mtime % 1000) * 1000 * 1000;
        (tempI64 = [Math.floor(ctime / 1000)>>>0,(tempDouble = Math.floor(ctime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(80))>>2)] = (ctime % 1000) * 1000 * 1000;
        (tempI64 = [stat.ino>>>0,(tempDouble = stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);
        return 0;
      },
  writeStatFs(buf, stats) {
        HEAP32[(((buf)+(4))>>2)] = stats.bsize;
        HEAP32[(((buf)+(40))>>2)] = stats.bsize;
        HEAP32[(((buf)+(8))>>2)] = stats.blocks;
        HEAP32[(((buf)+(12))>>2)] = stats.bfree;
        HEAP32[(((buf)+(16))>>2)] = stats.bavail;
        HEAP32[(((buf)+(20))>>2)] = stats.files;
        HEAP32[(((buf)+(24))>>2)] = stats.ffree;
        HEAP32[(((buf)+(28))>>2)] = stats.fsid;
        HEAP32[(((buf)+(44))>>2)] = stats.flags;  // ST_NOSUID
        HEAP32[(((buf)+(36))>>2)] = stats.namelen;
      },
  doMsync(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          // MAP_PRIVATE calls need not to be synced back to underlying fs
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },
  getStreamFromFD(fd) {
        var stream = FS.getStreamChecked(fd);
        return stream;
      },
  varargs:undefined,
  getStr(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },
  };
  function _fd_close(fd) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  var doReadv = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.read(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break; // nothing more to read
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_read(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doReadv(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  
  var convertI32PairToI53Checked = (lo, hi) => {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    };
  function _fd_seek(fd,offset_low, offset_high,whence,newOffset) {
    var offset = convertI32PairToI53Checked(offset_low, offset_high);
  
    
  try {
  
      if (isNaN(offset)) return 61;
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble = stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  ;
  }

  /** @param {number=} offset */
  var doWritev = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.write(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) {
          // No more space to write.
          break;
        }
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_write(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doWritev(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  function _random_get(buffer, size) {
  try {
  
      randomFill(HEAPU8.subarray(buffer, buffer + size));
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }
embind_init_charCodes();
BindingError = Module['BindingError'] = class BindingError extends Error { constructor(message) { super(message); this.name = 'BindingError'; }};
InternalError = Module['InternalError'] = class InternalError extends Error { constructor(message) { super(message); this.name = 'InternalError'; }};
init_ClassHandle();
init_RegisteredPointer();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;

  FS.createPreloadedFile = FS_createPreloadedFile;
  FS.staticInit();
  // Set module methods based on EXPORTED_RUNTIME_METHODS
  ;
function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var wasmImports = {
  /** @export */
  __assert_fail: ___assert_fail,
  /** @export */
  __cxa_throw: ___cxa_throw,
  /** @export */
  _abort_js: __abort_js,
  /** @export */
  _embind_register_bigint: __embind_register_bigint,
  /** @export */
  _embind_register_bool: __embind_register_bool,
  /** @export */
  _embind_register_class: __embind_register_class,
  /** @export */
  _embind_register_class_constructor: __embind_register_class_constructor,
  /** @export */
  _embind_register_class_function: __embind_register_class_function,
  /** @export */
  _embind_register_emval: __embind_register_emval,
  /** @export */
  _embind_register_float: __embind_register_float,
  /** @export */
  _embind_register_function: __embind_register_function,
  /** @export */
  _embind_register_integer: __embind_register_integer,
  /** @export */
  _embind_register_memory_view: __embind_register_memory_view,
  /** @export */
  _embind_register_optional: __embind_register_optional,
  /** @export */
  _embind_register_std_string: __embind_register_std_string,
  /** @export */
  _embind_register_std_wstring: __embind_register_std_wstring,
  /** @export */
  _embind_register_void: __embind_register_void,
  /** @export */
  _emval_decref: __emval_decref,
  /** @export */
  _emval_take_value: __emval_take_value,
  /** @export */
  _tzset_js: __tzset_js,
  /** @export */
  emscripten_resize_heap: _emscripten_resize_heap,
  /** @export */
  environ_get: _environ_get,
  /** @export */
  environ_sizes_get: _environ_sizes_get,
  /** @export */
  fd_close: _fd_close,
  /** @export */
  fd_read: _fd_read,
  /** @export */
  fd_seek: _fd_seek,
  /** @export */
  fd_write: _fd_write,
  /** @export */
  random_get: _random_get
};
var wasmExports;
createWasm();
var ___wasm_call_ctors = createExportWrapper('__wasm_call_ctors', 0);
var ___getTypeName = createExportWrapper('__getTypeName', 1);
var _fflush = createExportWrapper('fflush', 1);
var _malloc = createExportWrapper('malloc', 1);
var _strerror = createExportWrapper('strerror', 1);
var _free = createExportWrapper('free', 1);
var _emscripten_stack_init = () => (_emscripten_stack_init = wasmExports['emscripten_stack_init'])();
var _emscripten_stack_get_free = () => (_emscripten_stack_get_free = wasmExports['emscripten_stack_get_free'])();
var _emscripten_stack_get_base = () => (_emscripten_stack_get_base = wasmExports['emscripten_stack_get_base'])();
var _emscripten_stack_get_end = () => (_emscripten_stack_get_end = wasmExports['emscripten_stack_get_end'])();
var __emscripten_stack_restore = (a0) => (__emscripten_stack_restore = wasmExports['_emscripten_stack_restore'])(a0);
var __emscripten_stack_alloc = (a0) => (__emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc'])(a0);
var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports['emscripten_stack_get_current'])();
var dynCall_jiji = Module['dynCall_jiji'] = createExportWrapper('dynCall_jiji', 5);
var dynCall_viijii = Module['dynCall_viijii'] = createExportWrapper('dynCall_viijii', 7);
var dynCall_iiiiij = Module['dynCall_iiiiij'] = createExportWrapper('dynCall_iiiiij', 7);
var dynCall_iiiiijj = Module['dynCall_iiiiijj'] = createExportWrapper('dynCall_iiiiijj', 9);
var dynCall_iiiiiijj = Module['dynCall_iiiiiijj'] = createExportWrapper('dynCall_iiiiiijj', 10);


// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

var missingLibrarySymbols = [
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertU32PairToI53',
  'stackAlloc',
  'getTempRet0',
  'setTempRet0',
  'exitJS',
  'growMemory',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'emscriptenLog',
  'readEmAsmArgs',
  'jstoi_q',
  'listenOnce',
  'autoResumeAudioContext',
  'handleException',
  'keepRuntimeAlive',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'asmjsMangle',
  'HandleAllocator',
  'getNativeTypeSize',
  'STACK_SIZE',
  'STACK_ALIGN',
  'POINTER_SIZE',
  'ASSERTIONS',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'getEmptyTableSlot',
  'updateTableMap',
  'getFunctionAddress',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'intArrayToString',
  'AsciiToString',
  'stringToNewUTF8',
  'stringToUTF8OnStack',
  'writeArrayToMemory',
  'registerKeyEventCallback',
  'maybeCStringToJsString',
  'findEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'jsStackTrace',
  'getCallstack',
  'convertPCtoSourceLocation',
  'checkWasiClock',
  'wasiRightsToMuslOFlags',
  'wasiOFlagsToMuslOFlags',
  'safeSetTimeout',
  'setImmediateWrapped',
  'safeRequestAnimationFrame',
  'clearImmediateWrapped',
  'registerPostMainLoop',
  'registerPreMainLoop',
  'getPromise',
  'makePromise',
  'idsToPromises',
  'makePromiseCallback',
  'findMatchingCatch',
  'Browser_asyncPrepareDataCounter',
  'isLeapYear',
  'ydayFromDate',
  'arraySum',
  'addDays',
  'getSocketFromFD',
  'getSocketAddress',
  'FS_unlink',
  'FS_mkdirTree',
  '_setNetworkCallback',
  'heapObjectForWebGLType',
  'toTypedArrayIndex',
  'webgl_enable_ANGLE_instanced_arrays',
  'webgl_enable_OES_vertex_array_object',
  'webgl_enable_WEBGL_draw_buffers',
  'webgl_enable_WEBGL_multi_draw',
  'webgl_enable_EXT_polygon_offset_clamp',
  'webgl_enable_EXT_clip_control',
  'webgl_enable_WEBGL_polygon_mode',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'colorChannelsInGlTextureFormat',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  '__glGetActiveAttribOrUniform',
  'writeGLArray',
  'registerWebGlEventCallback',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
  'writeStringToMemory',
  'writeAsciiToMemory',
  'setErrNo',
  'demangle',
  'stackTrace',
  'getFunctionArgsName',
  'createJsInvokerSignature',
  'registerInheritedInstance',
  'unregisterInheritedInstance',
  'getInheritedInstanceCount',
  'getLiveInheritedInstances',
  'enumReadValueFromPointer',
  'setDelayFunction',
  'validateThis',
  'getStringOrSymbol',
  'emval_get_global',
  'emval_returnValue',
  'emval_lookupTypes',
  'emval_addMethodCaller',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)

var unexportedSymbols = [
  'run',
  'addOnPreRun',
  'addOnInit',
  'addOnPreMain',
  'addOnExit',
  'addOnPostRun',
  'addRunDependency',
  'removeRunDependency',
  'out',
  'err',
  'callMain',
  'abort',
  'wasmMemory',
  'wasmExports',
  'writeStackCookie',
  'checkStackCookie',
  'convertI32PairToI53Checked',
  'stackSave',
  'stackRestore',
  'ptrToString',
  'zeroMemory',
  'getHeapMax',
  'abortOnCannotGrowMemory',
  'ENV',
  'ERRNO_CODES',
  'strError',
  'DNS',
  'Protocols',
  'Sockets',
  'timers',
  'warnOnce',
  'readEmAsmArgsArray',
  'jstoi_s',
  'getExecutableName',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'wasmTable',
  'noExitRuntime',
  'freeTableIndexes',
  'functionsInTableMap',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'UTF8Decoder',
  'UTF8ArrayToString',
  'UTF8ToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'intArrayFromString',
  'stringToAscii',
  'UTF16Decoder',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'JSEvents',
  'specialHTMLTargets',
  'findCanvasEventTarget',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'UNWIND_CACHE',
  'ExitStatus',
  'getEnvStrings',
  'doReadv',
  'doWritev',
  'initRandomFill',
  'randomFill',
  'emSetImmediate',
  'emClearImmediate_deps',
  'emClearImmediate',
  'promiseMap',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'ExceptionInfo',
  'Browser',
  'getPreloadedImageData__data',
  'wget',
  'MONTH_DAYS_REGULAR',
  'MONTH_DAYS_LEAP',
  'MONTH_DAYS_REGULAR_CUMULATIVE',
  'MONTH_DAYS_LEAP_CUMULATIVE',
  'SYSCALLS',
  'preloadPlugins',
  'FS_createPreloadedFile',
  'FS_modeStringToFlags',
  'FS_getMode',
  'FS_stdin_getChar_buffer',
  'FS_stdin_getChar',
  'FS_createPath',
  'FS_createDevice',
  'FS_readFile',
  'FS',
  'FS_createDataFile',
  'FS_createLazyFile',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'miniTempWebGLIntBuffers',
  'GL',
  'AL',
  'GLUT',
  'EGL',
  'GLEW',
  'IDBStore',
  'SDL',
  'SDL_gfx',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'print',
  'printErr',
  'InternalError',
  'BindingError',
  'throwInternalError',
  'throwBindingError',
  'registeredTypes',
  'awaitingDependencies',
  'typeDependencies',
  'tupleRegistrations',
  'structRegistrations',
  'sharedRegisterType',
  'whenDependentTypesAreResolved',
  'embind_charCodes',
  'embind_init_charCodes',
  'readLatin1String',
  'getTypeName',
  'getFunctionName',
  'heap32VectorToArray',
  'requireRegisteredType',
  'usesDestructorStack',
  'checkArgCount',
  'getRequiredArgCount',
  'createJsInvoker',
  'UnboundTypeError',
  'PureVirtualError',
  'GenericWireTypeSize',
  'EmValType',
  'EmValOptionalType',
  'throwUnboundTypeError',
  'ensureOverloadTable',
  'exposePublicSymbol',
  'replacePublicSymbol',
  'extendError',
  'createNamedFunction',
  'embindRepr',
  'registeredInstances',
  'getBasestPointer',
  'getInheritedInstance',
  'registeredPointers',
  'registerType',
  'integerReadValueFromPointer',
  'floatReadValueFromPointer',
  'readPointer',
  'runDestructors',
  'newFunc',
  'craftInvokerFunction',
  'embind__requireFunction',
  'genericPointerToWireType',
  'constNoSmartPtrRawPointerToWireType',
  'nonConstNoSmartPtrRawPointerToWireType',
  'init_RegisteredPointer',
  'RegisteredPointer',
  'RegisteredPointer_fromWireType',
  'runDestructor',
  'releaseClassHandle',
  'finalizationRegistry',
  'detachFinalizer_deps',
  'detachFinalizer',
  'attachFinalizer',
  'makeClassHandle',
  'init_ClassHandle',
  'ClassHandle',
  'throwInstanceAlreadyDeleted',
  'deletionQueue',
  'flushPendingDeletes',
  'delayFunction',
  'RegisteredClass',
  'shallowCopyInternalPointer',
  'downcastPointer',
  'upcastPointer',
  'char_0',
  'char_9',
  'makeLegalFunctionName',
  'emval_freelist',
  'emval_handles',
  'emval_symbols',
  'init_emval',
  'count_emval_handles',
  'Emval',
  'emval_methodCallers',
  'reflectConstruct',
];
unexportedSymbols.forEach(unexportedRuntimeSymbol);



var calledRun;

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run() {

  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    assert(!calledRun);
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    Module['onRuntimeInitialized']?.();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(() => {
      setTimeout(() => Module['setStatus'](''), 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach((name) => {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty?.output?.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();

// end include: postamble.js

